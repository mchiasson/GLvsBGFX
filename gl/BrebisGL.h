/*
   BrebisGL.h
       A Public domain ANSI C (C89) compliant GL/GLES extension wrangler

   Generated using GLBrebis on Sun, 23 Sep 2018 16:16:40 GMT
   https://github.com/mchiasson/GLBrebis

   NO WARRANTY IMPLIED; USE AT YOUR OWN RISK

   Suports the following OpenGL contexts:
     - OpenGL 1.0
     - OpenGL 1.1
     - OpenGL 1.2
     - OpenGL 1.3
     - OpenGL 1.4
     - OpenGL 1.5
     - OpenGL 2.0
     - OpenGL 2.1
     - OpenGL 3.0
     - OpenGL 3.1
     - OpenGL 3.2
     - OpenGL 3.3
     - OpenGL 4.0
     - OpenGL 4.1
     - OpenGL 4.2
     - OpenGL 4.3
     - OpenGL 4.4
     - OpenGL 4.5
     - OpenGL 4.6
     - OpenGL ES CM 1.0
     - OpenGL ES 2.0
     - OpenGL ES 3.1
     - OpenGL ES 3.2
     - OpenGL SC 2.0 (unverified)
     - WebGL (Emscripten in either asm.js or wasm format)

   Do this:

     #define BREBIS_GL_IMPLEMENTATION

   before you include this file in *one* C or C++ file to create the implementation.
     // i.e. it should look like this:
     #include ...
     #include ...
     #include ...
     #define BREBIS_GL_IMPLEMENTATION
     #include "BrebisGL.h"

   Before you can use any GL or GLES functions from this header make sure to
   call brebisGLInit() soon after creating your GL or GLES context, and make sure
   that it returns KHRONOS_TRUE. To  clean up the loaded function pointer table
   and close any opened GL/GLES library handle opened by this wrangler, you can
   call brebisGLShutdown().

LICENSE

------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) 2017-2018 Mathieu-Andr√© Chiasson
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------------------------
*/

#if !defined(_BREBIS_GL_H_)
#define _BREBIS_GL_H_ 1

/*******************************************************************************
 * FOLLOWING SECTION IS FROM KHR/khrplatform.h, available here:
 * https://www.khronos.org/registry/EGL/api/KHR/khrplatform.h
 ******************************************************************************/
#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_APIENTRY
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_APIENTRY funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(_WIN32) && !defined(__SCITECH_SNAP__)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIENTRY
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_APIENTRY __stdcall
#else
#   define KHRONOS_APIENTRY
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */

/*******************************************************************************
 * END OF KHR/khrplatform.h SECTION
 ******************************************************************************/


#if defined(__glu_h__)
#error "GL/glu.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl_h_)
#error "GL/gl.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl2_h_)
#error "GL/gl2.h cannot be included before BrebisGL.h"
#endif

#if defined(__glcorearb_h_)
#error "GL/glcorearb.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl20_h_)
#error "GLES2/gl2.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl_es20_h_)
#error "OpenGLES/ES2/gl.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl30_h_)
#error "GLES3/gl3.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl_es30_h_)
#error "OpenGLES/ES3/gl.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl31_h_)
#error "GLES3/gl31.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl32_h_)
#error "GLES3/gl32.h cannot be included before BrebisGL.h"
#endif

#if defined(__glext_h_)
#error "GL/glext.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl2ext_h_)
#error "GL/glext.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl_es20ext_h_)
#error "OpenGLES/ES2/glext.h cannot be included before BrebisGL.h"
#endif

#if defined(__gl_es30ext_h_)
#error "OpenGLES/ES3/glext.h cannot be included before BrebisGL.h"
#endif

#if defined(__gltypes_h_)
#error "gltypes.h cannot be included before BrebisGL.h"
#endif

#define __gl_h_ 1
#define __gl2_h_ 1
#define __glcorearb_h_ 1
#define __gl20_h_ 1
#define __gl_es20_h_ 1
#define __gl30_h_ 1
#define __gl_es30_h_ 1
#define __gl31_h_ 1
#define __gl32_h_ 1
#define __glext_h_ 1
#define __gl2ext_h_ 1
#define __gl_es20ext_h_ 1
#define __gl_es30ext_h_ 1
#define __gltypes_h_ 1

#if defined(_WIN32) && !defined(__CYGWIN__)
    #if !defined(WIN32_LEAN_AND_MEAN)
        #define WIN32_LEAN_AND_MEAN 1
        #include <Windows.h>
        #undef WIN32_LEAN_AND_MEAN
    #else
        #include <Windows.h>
    #endif
#endif

#if !defined(BREBIS_FORCE_INLINE)
    #if defined(_MSC_VER)
        #define BREBIS_FORCE_INLINE __forceinline
    #elif ( (defined(__GNUC__) && (__GNUC__ >= 4) ) || defined(__clang__) )
        #define BREBIS_FORCE_INLINE __attribute__((always_inline)) __inline__
    #else
        #define BREBIS_FORCE_INLINE inline
    #endif
#endif

/* GL and GL ES Definitions */
#define GL_NEXT_BUFFER_NV -2
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_FALSE 0
#define GL_LAYOUT_DEFAULT_INTEL 0
#define GL_NONE 0
#define GL_NONE_OES 0
#define GL_NO_ERROR 0
#define GL_ZERO 0
#define GL_KTX_FRONT_REGION 0x0
#define GL_CLOSE_PATH_NV 0x00
#define GL_POINTS 0x0000
#define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#define GL_2X_BIT_ATI 0x00000001
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_COLOR_BUFFER_BIT0_QCOM 0x00000001
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CURRENT_BIT 0x00000001
#define GL_FOVEATION_ENABLE_BIT_QCOM 0x00000001
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
#define GL_RED_BIT_ATI 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT_APPLE 0x00000001
#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001
#define GL_4X_BIT_ATI 0x00000002
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_COLOR_BUFFER_BIT1_QCOM 0x00000002
#define GL_COMP_BIT_ATI 0x00000002
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#define GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM 0x00000002
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
#define GL_GREEN_BIT_ATI 0x00000002
#define GL_POINT_BIT 0x00000002
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
#define GL_8X_BIT_ATI 0x00000004
#define GL_BLUE_BIT_ATI 0x00000004
#define GL_COLOR_BUFFER_BIT2_QCOM 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM 0x00000004
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_EXT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_OES 0x00000004
#define GL_LINE_BIT 0x00000004
#define GL_NEGATE_BIT_ATI 0x00000004
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#define GL_VERTEX23_BIT_PGI 0x00000004
#define GL_BIAS_BIT_ATI 0x00000008
#define GL_COLOR_BUFFER_BIT3_QCOM 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008
#define GL_HALF_BIT_ATI 0x00000008
#define GL_POLYGON_BIT 0x00000008
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_EXT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_OES 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#define GL_VERTEX4_BIT_PGI 0x00000008
#define GL_COLOR_BUFFER_BIT4_QCOM 0x00000010
#define GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT 0x00000010
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_QUARTER_BIT_ATI 0x00000010
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_EXT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_OES 0x00000010
#define GL_COLOR_BUFFER_BIT5_QCOM 0x00000020
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_EIGHTH_BIT_ATI 0x00000020
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_COLOR_BUFFER_BIT6_QCOM 0x00000040
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#define GL_LIGHTING_BIT 0x00000040
#define GL_MESH_SHADER_BIT_NV 0x00000040
#define GL_SATURATE_BIT_ATI 0x00000040
#define GL_COLOR_BUFFER_BIT7_QCOM 0x00000080
#define GL_FOG_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#define GL_TASK_SHADER_BIT_NV 0x00000080
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_BUFFER_BIT0_QCOM 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#define GL_DEPTH_BUFFER_BIT1_QCOM 0x00000200
#define GL_DEPTH_BUFFER_BIT2_QCOM 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_DEPTH_BUFFER_BIT3_QCOM 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_VIEWPORT_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_DEPTH_BUFFER_BIT4_QCOM 0x00001000
#define GL_TRANSFORM_BIT 0x00001000
#define GL_DEPTH_BUFFER_BIT5_QCOM 0x00002000
#define GL_ENABLE_BIT 0x00002000
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT 0x00004000
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_DEPTH_BUFFER_BIT6_QCOM 0x00004000
#define GL_COVERAGE_BUFFER_BIT_NV 0x00008000
#define GL_DEPTH_BUFFER_BIT7_QCOM 0x00008000
#define GL_HINT_BIT 0x00008000
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_LINES 0x0001
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_READ_BIT_EXT 0x0001
#define GL_NOP_COMMAND_NV 0x0001
#define GL_RESTART_SUN 0x0001
#define GL_TRACE_OPERATIONS_BIT_MESA 0x0001
#define GL_COLOR3_BIT_PGI 0x00010000
#define GL_EVAL_BIT 0x00010000
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
#define GL_STENCIL_BUFFER_BIT0_QCOM 0x00010000
#define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
#define GL_LINE_LOOP 0x0002
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_WRITE_BIT_EXT 0x0002
#define GL_REPLACE_MIDDLE_SUN 0x0002
#define GL_TRACE_PRIMITIVES_BIT_MESA 0x0002
#define GL_COLOR4_BIT_PGI 0x00020000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
#define GL_LIST_BIT 0x00020000
#define GL_STENCIL_BUFFER_BIT1_QCOM 0x00020000
#define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
#define GL_LINE_STRIP 0x0003
#define GL_REPLACE_OLDEST_SUN 0x0003
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT_EXT 0x0004
#define GL_TRACE_ARRAYS_BIT_MESA 0x0004
#define GL_TRIANGLES 0x0004
#define GL_EDGEFLAG_BIT_PGI 0x00040000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
#define GL_STENCIL_BUFFER_BIT2_QCOM 0x00040000
#define GL_TEXTURE_BIT 0x00040000
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
#define GL_TRIANGLE_STRIP 0x0005
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#define GL_TRIANGLE_FAN 0x0006
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#define GL_QUADS 0x0007
#define GL_QUADS_EXT 0x0007
#define GL_QUADS_OES 0x0007
#define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT_EXT 0x0008
#define GL_QUAD_STRIP 0x0008
#define GL_TRACE_TEXTURES_BIT_MESA 0x0008
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
#define GL_INDEX_BIT_PGI 0x00080000
#define GL_SCISSOR_BIT 0x00080000
#define GL_STENCIL_BUFFER_BIT3_QCOM 0x00080000
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
#define GL_POLYGON 0x0009
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINES_ADJACENCY_OES 0x000A
#define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
#define GL_BLEND_COLOR_COMMAND_NV 0x000B
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_STRIP_ADJACENCY_OES 0x000B
#define GL_STENCIL_REF_COMMAND_NV 0x000C
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLES_ADJACENCY_OES 0x000C
#define GL_LINE_WIDTH_COMMAND_NV 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_OES 0x000D
#define GL_PATCHES 0x000E
#define GL_PATCHES_EXT 0x000E
#define GL_PATCHES_OES 0x000E
#define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
#define GL_ALPHA_REF_COMMAND_NV 0x000F
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_FLUSH_EXPLICIT_BIT_EXT 0x0010
#define GL_TRACE_PIXELS_BIT_MESA 0x0010
#define GL_VIEWPORT_COMMAND_NV 0x0010
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
#define GL_STENCIL_BUFFER_BIT4_QCOM 0x00100000
#define GL_SCISSOR_COMMAND_NV 0x0011
#define GL_FRONT_FACE_COMMAND_NV 0x0012
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_UNSYNCHRONIZED_BIT_EXT 0x0020
#define GL_TRACE_ERRORS_BIT_MESA 0x0020
#define GL_FONT_ASCENDER_BIT_NV 0x00200000
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
#define GL_STENCIL_BUFFER_BIT5_QCOM 0x00200000
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_PERSISTENT_BIT_EXT 0x0040
#define GL_FONT_DESCENDER_BIT_NV 0x00400000
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
#define GL_STENCIL_BUFFER_BIT6_QCOM 0x00400000
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_MAP_COHERENT_BIT_EXT 0x0080
#define GL_FONT_HEIGHT_BIT_NV 0x00800000
#define GL_MAT_EMISSION_BIT_PGI 0x00800000
#define GL_STENCIL_BUFFER_BIT7_QCOM 0x00800000
#define GL_BOLD_BIT_NV 0x01
#define GL_GLYPH_WIDTH_BIT_NV 0x01
#define GL_ACCUM 0x0100
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_DYNAMIC_STORAGE_BIT_EXT 0x0100
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
#define GL_MULTISAMPLE_BUFFER_BIT0_QCOM 0x01000000
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_GLYPH_HEIGHT_BIT_NV 0x02
#define GL_ITALIC_BIT_NV 0x02
#define GL_MOVE_TO_NV 0x02
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_STORAGE_BIT_EXT 0x0200
#define GL_NEVER 0x0200
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#define GL_MAT_SHININESS_BIT_PGI 0x02000000
#define GL_MULTISAMPLE_BUFFER_BIT1_QCOM 0x02000000
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_RELATIVE_MOVE_TO_NV 0x03
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_ALPHA_SATURATE_EXT 0x0308
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#define GL_LINE_TO_NV 0x04
#define GL_FRONT_LEFT 0x0400
#define GL_SPARSE_STORAGE_BIT_ARB 0x0400
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
#define GL_MULTISAMPLE_BUFFER_BIT2_QCOM 0x04000000
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_RELATIVE_LINE_TO_NV 0x05
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_OVERFLOW_KHR 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_UNDERFLOW_KHR 0x0504
#define GL_OUT_OF_MEMORY 0x0505
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_OES 0x0506
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_LOST_KHR 0x0507
#define GL_HORIZONTAL_LINE_TO_NV 0x06
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#define GL_VERTICAL_LINE_TO_NV 0x08
#define GL_EXP 0x0800
#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX 0x0800
#define GL_PER_GPU_STORAGE_BIT_NV 0x0800
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#define GL_MULTISAMPLE_BUFFER_BIT3_QCOM 0x08000000
#define GL_NORMAL_BIT_PGI 0x08000000
#define GL_EXP2 0x0801
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_QUADRATIC_CURVE_TO_NV 0x0A
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_MODE_NV 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_VIEWPORT 0x0BA2
#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_QCOM 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_FUNC_QCOM 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALPHA_TEST_REF_QCOM 0x0BC2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP 0x0BF1
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_CUBIC_CURVE_TO_NV 0x0C
#define GL_AUX_BUFFERS 0x0C00
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER_EXT 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_READ_BUFFER_EXT 0x0C02
#define GL_READ_BUFFER_NV 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_ROW_LENGTH_EXT 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_ROWS_EXT 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_PIXELS_EXT 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_DISTANCES_APPLE 0x0D32
#define GL_MAX_CLIP_DISTANCES_EXT 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_CLIP_PLANES_IMG 0x0D32
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_KTX_BACK_REGION 0x1
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
#define GL_TEXTURE_WIDTH 0x1000
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
#define GL_MULTISAMPLE_BUFFER_BIT4_QCOM 0x10000000
#define GL_TEXCOORD1_BIT_PGI 0x10000000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BORDER_COLOR_EXT 0x1004
#define GL_TEXTURE_BORDER_COLOR_NV 0x1004
#define GL_TEXTURE_BORDER_COLOR_OES 0x1004
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_TARGET 0x1006
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_SMALL_CCW_ARC_TO_NV 0x12
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_SMALL_CW_ARC_TO_NV 0x14
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_2_BYTES 0x1407
#define GL_2_BYTES_NV 0x1407
#define GL_3_BYTES 0x1408
#define GL_3_BYTES_NV 0x1408
#define GL_4_BYTES 0x1409
#define GL_4_BYTES_NV 0x1409
#define GL_DOUBLE 0x140A
#define GL_DOUBLE_EXT 0x140A
#define GL_HALF_APPLE 0x140B
#define GL_HALF_FLOAT 0x140B
#define GL_HALF_FLOAT_ARB 0x140B
#define GL_HALF_FLOAT_NV 0x140B
#define GL_FIXED 0x140C
#define GL_FIXED_OES 0x140C
#define GL_INT64_ARB 0x140E
#define GL_INT64_NV 0x140E
#define GL_UNSIGNED_INT64_ARB 0x140F
#define GL_UNSIGNED_INT64_NV 0x140F
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_XOR_NV 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_LARGE_CCW_ARC_TO_NV 0x16
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW0_ARB 0x1700
#define GL_MODELVIEW0_EXT 0x1700
#define GL_PATH_MODELVIEW_NV 0x1700
#define GL_PATH_PROJECTION_NV 0x1701
#define GL_PROJECTION 0x1701
#define GL_TEXTURE 0x1702
#define GL_LARGE_CW_ARC_TO_NV 0x18
#define GL_COLOR 0x1800
#define GL_COLOR_EXT 0x1800
#define GL_DEPTH 0x1801
#define GL_DEPTH_EXT 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_EXT 0x1802
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#define GL_COLOR_INDEX 0x1900
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX_OES 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_RED_EXT 0x1903
#define GL_RED_NV 0x1903
#define GL_GREEN 0x1904
#define GL_GREEN_NV 0x1904
#define GL_BLUE 0x1905
#define GL_BLUE_NV 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
#define GL_CONIC_CURVE_TO_NV 0x1A
#define GL_BITMAP 0x1A00
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219
#define GL_CLIP_NEAR_HINT_PGI 0x1A220
#define GL_CLIP_FAR_HINT_PGI 0x1A221
#define GL_WIDE_LINE_HINT_PGI 0x1A222
#define GL_BACK_NORMALS_HINT_PGI 0x1A223
#define GL_VERTEX_DATA_HINT_PGI 0x1A22A
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
#define GL_POINT 0x1B00
#define GL_POINT_NV 0x1B00
#define GL_LINE 0x1B01
#define GL_LINE_NV 0x1B01
#define GL_FILL 0x1B02
#define GL_FILL_NV 0x1B02
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_KTX_Z_REGION 0x2
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#define GL_EXTERNAL_STORAGE_BIT_NVX 0x2000
#define GL_S 0x2000
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_MULTISAMPLE_BIT_EXT 0x20000000
#define GL_MULTISAMPLE_BUFFER_BIT5_QCOM 0x20000000
#define GL_TEXCOORD2_BIT_PGI 0x20000000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_LINEAR_NV 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_LINEAR_NV 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_MODE_OES 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_CLAMP 0x2900
#define GL_REPEAT 0x2901
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_POINT_NV 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_LINE_NV 0x2A02
#define GL_R3_G3_B2 0x2A10
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_KTX_STENCIL_REGION 0x3
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE0_APPLE 0x3000
#define GL_CLIP_DISTANCE0_EXT 0x3000
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE0_IMG 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE1_APPLE 0x3001
#define GL_CLIP_DISTANCE1_EXT 0x3001
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE1_IMG 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE2_APPLE 0x3002
#define GL_CLIP_DISTANCE2_EXT 0x3002
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE2_IMG 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE3_APPLE 0x3003
#define GL_CLIP_DISTANCE3_EXT 0x3003
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE3_IMG 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE4_APPLE 0x3004
#define GL_CLIP_DISTANCE4_EXT 0x3004
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE4_IMG 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE5_APPLE 0x3005
#define GL_CLIP_DISTANCE5_EXT 0x3005
#define GL_CLIP_PLANE5 0x3005
#define GL_CLIP_PLANE5_IMG 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE6_APPLE 0x3006
#define GL_CLIP_DISTANCE6_EXT 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_DISTANCE7_APPLE 0x3007
#define GL_CLIP_DISTANCE7_EXT 0x3007
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#define GL_LIGHT0 0x4000
#define GL_MULTISAMPLE_BUFFER_BIT6_QCOM 0x40000000
#define GL_TEXCOORD3_BIT_PGI 0x40000000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_ABGR_EXT 0x8000
#define GL_MULTISAMPLE_BUFFER_BIT7_QCOM 0x80000000
#define GL_TEXCOORD4_BIT_PGI 0x80000000
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_ADD_OES 0x8006
#define GL_MIN 0x8007
#define GL_MIN_EXT 0x8007
#define GL_MAX 0x8008
#define GL_MAX_EXT 0x8008
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_OES 0x8009
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_EQUATION_RGB_OES 0x8009
#define GL_FUNC_SUBTRACT 0x800A
#define GL_FUNC_SUBTRACT_EXT 0x800A
#define GL_FUNC_SUBTRACT_OES 0x800A
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_OES 0x800B
#define GL_CMYK_EXT 0x800C
#define GL_CMYKA_EXT 0x800D
#define GL_PACK_CMYK_HINT_EXT 0x800E
#define GL_UNPACK_CMYK_HINT_EXT 0x800F
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_1D_EXT 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_CONVOLUTION_2D_EXT 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_SEPARABLE_2D_EXT 0x8012
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
#define GL_REDUCE 0x8016
#define GL_REDUCE_EXT 0x8016
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_FORMAT_EXT 0x8017
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_CONVOLUTION_WIDTH_EXT 0x8018
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
#define GL_HISTOGRAM 0x8024
#define GL_HISTOGRAM_EXT 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_PROXY_HISTOGRAM_EXT 0x8025
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_HISTOGRAM_WIDTH_EXT 0x8026
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_FORMAT_EXT 0x8027
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
#define GL_HISTOGRAM_SINK 0x802D
#define GL_HISTOGRAM_SINK_EXT 0x802D
#define GL_MINMAX 0x802E
#define GL_MINMAX_EXT 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_FORMAT_EXT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_MINMAX_SINK_EXT 0x8030
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_TABLE_TOO_LARGE_EXT 0x8031
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
#define GL_POLYGON_OFFSET_EXT 0x8037
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
#define GL_RESCALE_NORMAL 0x803A
#define GL_RESCALE_NORMAL_EXT 0x803A
#define GL_ALPHA4 0x803B
#define GL_ALPHA4_EXT 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA8_EXT 0x803C
#define GL_ALPHA8_OES 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA12_EXT 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA16_EXT 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_EXT 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_EXT 0x8040
#define GL_LUMINANCE8_OES 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_EXT 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_EXT 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
#define GL_LUMINANCE4_ALPHA4_OES 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#define GL_LUMINANCE8_ALPHA8_OES 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY_EXT 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY4_EXT 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY8_EXT 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY12_EXT 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY16_EXT 0x804D
#define GL_RGB2_EXT 0x804E
#define GL_RGB4 0x804F
#define GL_RGB4_EXT 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_EXT 0x8050
#define GL_RGB8 0x8051
#define GL_RGB8_EXT 0x8051
#define GL_RGB8_OES 0x8051
#define GL_RGB10 0x8052
#define GL_RGB10_EXT 0x8052
#define GL_RGB12 0x8053
#define GL_RGB12_EXT 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16_EXT 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA2_EXT 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA4_EXT 0x8056
#define GL_RGBA4_OES 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGB5_A1_EXT 0x8057
#define GL_RGB5_A1_OES 0x8057
#define GL_RGBA8 0x8058
#define GL_RGBA8_EXT 0x8058
#define GL_RGBA8_OES 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2_EXT 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA12_EXT 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16_EXT 0x805B
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_SIZE_EXT 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
#define GL_REPLACE_EXT 0x8062
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_EXT 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_EXT 0x8064
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_3D_BINDING_OES 0x806A
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_3D_OES 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_TEXTURE_3D_OES 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_TEXTURE_WRAP_R_OES 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_OES 0x8073
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_KHR 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_INTERLACE_SGIX 0x8094
#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
#define GL_LINEAR_DETAIL_SGIS 0x8097
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_MULTISAMPLE_EXT 0x809D
#define GL_MULTISAMPLE_SGIS 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_MASK_EXT 0x80A0
#define GL_SAMPLE_MASK_SGIS 0x80A0
#define GL_1PASS_EXT 0x80A1
#define GL_1PASS_SGIS 0x80A1
#define GL_2PASS_0_EXT 0x80A2
#define GL_2PASS_0_SGIS 0x80A2
#define GL_2PASS_1_EXT 0x80A3
#define GL_2PASS_1_SGIS 0x80A3
#define GL_4PASS_0_EXT 0x80A4
#define GL_4PASS_0_SGIS 0x80A4
#define GL_4PASS_1_EXT 0x80A5
#define GL_4PASS_1_SGIS 0x80A5
#define GL_4PASS_2_EXT 0x80A6
#define GL_4PASS_2_SGIS 0x80A6
#define GL_4PASS_3_EXT 0x80A7
#define GL_4PASS_3_SGIS 0x80A7
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_BUFFERS_EXT 0x80A8
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLES_EXT 0x80A9
#define GL_SAMPLES_SGIS 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
#define GL_SAMPLE_PATTERN_EXT 0x80AC
#define GL_SAMPLE_PATTERN_SGIS 0x80AC
#define GL_LINEAR_SHARPEN_SGIS 0x80AD
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_SGI 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
#define GL_SHADOW_AMBIENT_SGIX 0x80BF
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_DST_RGB_OES 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLEND_SRC_RGB_OES 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_ALPHA_OES 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_ALPHA_OES 0x80CB
#define GL_422_EXT 0x80CC
#define GL_422_REV_EXT 0x80CD
#define GL_422_AVERAGE_EXT 0x80CE
#define GL_422_REV_AVERAGE_EXT 0x80CF
#define GL_COLOR_TABLE 0x80D0
#define GL_COLOR_TABLE_SGI 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
#define GL_BGR 0x80E0
#define GL_BGR_EXT 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_EXT 0x80E1
#define GL_BGRA_IMG 0x80E1
#define GL_COLOR_INDEX1_EXT 0x80E2
#define GL_COLOR_INDEX2_EXT 0x80E3
#define GL_COLOR_INDEX4_EXT 0x80E4
#define GL_COLOR_INDEX8_EXT 0x80E5
#define GL_COLOR_INDEX12_EXT 0x80E6
#define GL_COLOR_INDEX16_EXT 0x80E7
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_PHONG_WIN 0x80EA
#define GL_PHONG_HINT_WIN 0x80EB
#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
#define GL_DUAL_ALPHA4_SGIS 0x8110
#define GL_DUAL_ALPHA8_SGIS 0x8111
#define GL_DUAL_ALPHA12_SGIS 0x8112
#define GL_DUAL_ALPHA16_SGIS 0x8113
#define GL_DUAL_LUMINANCE4_SGIS 0x8114
#define GL_DUAL_LUMINANCE8_SGIS 0x8115
#define GL_DUAL_LUMINANCE12_SGIS 0x8116
#define GL_DUAL_LUMINANCE16_SGIS 0x8117
#define GL_DUAL_INTENSITY4_SGIS 0x8118
#define GL_DUAL_INTENSITY8_SGIS 0x8119
#define GL_DUAL_INTENSITY12_SGIS 0x811A
#define GL_DUAL_INTENSITY16_SGIS 0x811B
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
#define GL_QUAD_ALPHA4_SGIS 0x811E
#define GL_QUAD_ALPHA8_SGIS 0x811F
#define GL_QUAD_LUMINANCE4_SGIS 0x8120
#define GL_QUAD_LUMINANCE8_SGIS 0x8121
#define GL_QUAD_INTENSITY4_SGIS 0x8122
#define GL_QUAD_INTENSITY8_SGIS 0x8123
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_FOG_FUNC_SGIS 0x812A
#define GL_FOG_FUNC_POINTS_SGIS 0x812B
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_BORDER_ARB 0x812D
#define GL_CLAMP_TO_BORDER_EXT 0x812D
#define GL_CLAMP_TO_BORDER_NV 0x812D
#define GL_CLAMP_TO_BORDER_OES 0x812D
#define GL_CLAMP_TO_BORDER_SGIS 0x812D
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_TO_EDGE_EXT 0x812F
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
#define GL_TEXTURE_4D_SGIS 0x8134
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135
#define GL_TEXTURE_4DSIZE_SGIS 0x8136
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
#define GL_PIXEL_TEX_GEN_SGIX 0x8139
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LEVEL_APPLE 0x813D
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
#define GL_FILTER4_SGIS 0x8146
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
#define GL_SPRITE_SGIX 0x8148
#define GL_SPRITE_MODE_SGIX 0x8149
#define GL_SPRITE_AXIS_SGIX 0x814A
#define GL_SPRITE_TRANSLATION_SGIX 0x814B
#define GL_SPRITE_AXIAL_SGIX 0x814C
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F
#define GL_IGNORE_BORDER_HP 0x8150
#define GL_CONSTANT_BORDER 0x8151
#define GL_CONSTANT_BORDER_HP 0x8151
#define GL_REPLICATE_BORDER 0x8153
#define GL_REPLICATE_BORDER_HP 0x8153
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
#define GL_IMAGE_SCALE_X_HP 0x8155
#define GL_IMAGE_SCALE_Y_HP 0x8156
#define GL_IMAGE_TRANSLATE_X_HP 0x8157
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
#define GL_IMAGE_MAG_FILTER_HP 0x815C
#define GL_IMAGE_MIN_FILTER_HP 0x815D
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
#define GL_CUBIC_HP 0x815F
#define GL_AVERAGE_HP 0x8160
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
#define GL_OCCLUSION_TEST_HP 0x8165
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
#define GL_REFERENCE_PLANE_SGIX 0x817D
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
#define GL_IR_INSTRUMENT1_SGIX 0x817F
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
#define GL_LIST_PRIORITY_SGIX 0x8182
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
#define GL_PIXEL_TEX_GEN_Q_CEILING_SGIX 0x8184
#define GL_PIXEL_TEX_GEN_Q_ROUND_SGIX 0x8185
#define GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX 0x8186
#define GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX 0x8187
#define GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX 0x8188
#define GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX 0x8189
#define GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX 0x818A
#define GL_FRAMEZOOM_SGIX 0x818B
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_SGIS 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195
#define GL_DEFORMATIONS_MASK_SGIX 0x8196
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
#define GL_FOG_OFFSET_SGIX 0x8198
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
#define GL_TEXTURE_COMPARE_SGIX 0x819A
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT16_ARB 0x81A5
#define GL_DEPTH_COMPONENT16_OES 0x81A5
#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT24_ARB 0x81A6
#define GL_DEPTH_COMPONENT24_OES 0x81A6
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32_ARB 0x81A7
#define GL_DEPTH_COMPONENT32_OES 0x81A7
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
#define GL_CULL_VERTEX_EXT 0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
#define GL_IUI_V2F_EXT 0x81AD
#define GL_IUI_V3F_EXT 0x81AE
#define GL_IUI_N3F_V2F_EXT 0x81AF
#define GL_IUI_N3F_V3F_EXT 0x81B0
#define GL_T2F_IUI_V2F_EXT 0x81B1
#define GL_T2F_IUI_V3F_EXT 0x81B2
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
#define GL_INDEX_TEST_EXT 0x81B5
#define GL_INDEX_TEST_FUNC_EXT 0x81B6
#define GL_INDEX_TEST_REF_EXT 0x81B7
#define GL_INDEX_MATERIAL_EXT 0x81B8
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
#define GL_YCRCB_422_SGIX 0x81BB
#define GL_YCRCB_444_SGIX 0x81BC
#define GL_WRAP_BORDER_SUN 0x81D4
#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
#define GL_TRIANGLE_LIST_SUN 0x81D7
#define GL_REPLACEMENT_CODE_SUN 0x81D8
#define GL_GLOBAL_ALPHA_SUN 0x81D9
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
#define GL_EYE_POINT_SGIS 0x81F4
#define GL_OBJECT_POINT_SGIS 0x81F5
#define GL_EYE_LINE_SGIS 0x81F6
#define GL_OBJECT_LINE_SGIS 0x81F7
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
#define GL_SINGLE_COLOR 0x81F9
#define GL_SINGLE_COLOR_EXT 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNDEFINED_OES 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_IMMUTABLE_STORAGE_EXT 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_BUFFER_STORAGE_FLAGS_EXT 0x8220
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES 0x8221
#define GL_INDEX 0x8222
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_RG 0x8227
#define GL_RG_EXT 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R8_EXT 0x8229
#define GL_R16 0x822A
#define GL_R16_EXT 0x822A
#define GL_RG8 0x822B
#define GL_RG8_EXT 0x822B
#define GL_RG16 0x822C
#define GL_RG16_EXT 0x822C
#define GL_R16F 0x822D
#define GL_R16F_EXT 0x822D
#define GL_R32F 0x822E
#define GL_R32F_EXT 0x822E
#define GL_RG16F 0x822F
#define GL_RG16F_EXT 0x822F
#define GL_RG32F 0x8230
#define GL_RG32F_EXT 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_SYNC_CL_EVENT_ARB 0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#define GL_DEBUG_SOURCE_API_KHR 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_EXT 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_GUILTY_CONTEXT_RESET_EXT 0x8253
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_INNOCENT_CONTEXT_RESET_EXT 0x8254
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_EXT 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_EXT 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_SEPARABLE_EXT 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_PROGRAM_EXT 0x8259 /* for gles2 */
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_VIEWPORTS_NV 0x825B
#define GL_MAX_VIEWPORTS_OES 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_EXT 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_NV 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_OES 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_EXT 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_NV 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_OES 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LAYER_PROVOKING_VERTEX_EXT 0x825E
#define GL_LAYER_PROVOKING_VERTEX_OES 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNDEFINED_VERTEX_EXT 0x8260
#define GL_UNDEFINED_VERTEX_OES 0x8260
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#define GL_NO_RESET_NOTIFICATION_EXT 0x8261
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_SRGB_DECODE_ARB 0x8299
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_EXT 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_OES 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_EXT 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_OES 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_EXT 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_OES 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_EXT 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_OES 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_BUFFER 0x82E0
#define GL_BUFFER_KHR 0x82E0
#define GL_SHADER 0x82E1
#define GL_SHADER_KHR 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_KHR 0x82E2
#define GL_QUERY 0x82E3
#define GL_QUERY_KHR 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_KHR 0x82E4
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_KHR 0x82E6
#define GL_DISPLAY_LIST 0x82E7
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_QUERY_TARGET 0x82EA
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_VERTICES_SUBMITTED_ARB 0x82EE
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_CULL_DISTANCES_EXT 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT 0x82FA
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
#define GL_ROBUST_GPU_TIMEOUT_MS_KHR 0x82FD
#define GL_DEPTH_PASS_INSTRUMENT_SGIX 0x8310
#define GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX 0x8311
#define GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX 0x8312
#define GL_FRAGMENTS_INSTRUMENT_SGIX 0x8313
#define GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX 0x8314
#define GL_FRAGMENTS_INSTRUMENT_MAX_SGIX 0x8315
#define GL_CONVOLUTION_HINT_SGIX 0x8316
#define GL_YCRCB_SGIX 0x8318
#define GL_YCRCBA_SGIX 0x8319
#define GL_UNPACK_COMPRESSED_SIZE_SGIX 0x831A
#define GL_PACK_MAX_COMPRESSED_SIZE_SGIX 0x831B
#define GL_PACK_COMPRESSED_SIZE_SGIX 0x831C
#define GL_SLIM8U_SGIX 0x831D
#define GL_SLIM10U_SGIX 0x831E
#define GL_SLIM12S_SGIX 0x831F
#define GL_ALPHA_MIN_SGIX 0x8320
#define GL_ALPHA_MAX_SGIX 0x8321
#define GL_SCALEBIAS_HINT_SGIX 0x8322
#define GL_ASYNC_MARKER_SGIX 0x8329
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
#define GL_PIXEL_MAG_FILTER_EXT 0x8331
#define GL_PIXEL_MIN_FILTER_EXT 0x8332
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
#define GL_CUBIC_EXT 0x8334
#define GL_AVERAGE_EXT 0x8335
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
#define GL_FRAGMENT_MATERIAL_EXT 0x8349
#define GL_FRAGMENT_NORMAL_EXT 0x834A
#define GL_FRAGMENT_COLOR_EXT 0x834C
#define GL_ATTENUATION_EXT 0x834D
#define GL_SHADOW_ATTENUATION_EXT 0x834E
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
#define GL_TEXTURE_LIGHT_EXT 0x8350
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#define GL_PIXEL_TEXTURE_SGIS 0x8353
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
#define GL_LINE_QUALITY_HINT_SGIX 0x835B
#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_2_3_3_REV_EXT 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_EXT 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_5_6_5_REV_EXT 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_8_8_8_8_REV_EXT 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_2_10_10_10_REV_EXT 0x8368
#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MIRRORED_REPEAT_ARB 0x8370
#define GL_MIRRORED_REPEAT_IBM 0x8370
#define GL_MIRRORED_REPEAT_OES 0x8370
#define GL_RGB_S3TC 0x83A0
#define GL_RGB4_S3TC 0x83A1
#define GL_RGBA_S3TC 0x83A2
#define GL_RGBA4_S3TC 0x83A3
#define GL_RGBA_DXT5_S3TC 0x83A4
#define GL_RGBA4_DXT5_S3TC 0x83A5
#define GL_VERTEX_PRECLIP_SGIX 0x83EE
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE 0x83F3
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA
#define GL_PERFQUERY_WAIT_INTEL 0x83FB
#define GL_BLACKHOLE_RENDER_INTEL 0x83FC
#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
#define GL_FRAGMENT_LIGHTING_SGIX 0x8400
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
#define GL_LIGHT_ENV_MODE_SGIX 0x8407
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413
#define GL_PACK_RESAMPLE_SGIX 0x842E
#define GL_UNPACK_RESAMPLE_SGIX 0x842F
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
#define GL_TANGENT_ARRAY_EXT 0x8439
#define GL_BINORMAL_ARRAY_EXT 0x843A
#define GL_CURRENT_TANGENT_EXT 0x843B
#define GL_CURRENT_BINORMAL_EXT 0x843C
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
#define GL_MAP1_TANGENT_EXT 0x8444
#define GL_MAP2_TANGENT_EXT 0x8445
#define GL_MAP1_BINORMAL_EXT 0x8446
#define GL_MAP2_BINORMAL_EXT 0x8447
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_EXT 0x8451
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_COLOR_SUM 0x8458
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_SUM_EXT 0x8458
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_SCREEN_COORDINATES_REND 0x8490
#define GL_INVERTED_SCREEN_W_REND 0x8491
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE31_ARB 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
#define GL_SUBTRACT 0x84E7
#define GL_SUBTRACT_ARB 0x84E7
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_OES 0x84E8
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_ALL_COMPLETED_NV 0x84F2
#define GL_FENCE_STATUS_NV 0x84F3
#define GL_FENCE_CONDITION_NV 0x84F4
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
#define GL_TEXTURE_RECTANGLE_NV 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_EXT 0x84F9
#define GL_DEPTH_STENCIL_NV 0x84F9
#define GL_DEPTH_STENCIL_OES 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#define GL_UNSIGNED_INT_24_8_NV 0x84FA
#define GL_UNSIGNED_INT_24_8_OES 0x84FA
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
#define GL_COMBINE4_NV 0x8503
#define GL_MAX_SHININESS_NV 0x8504
#define GL_MAX_SPOT_EXPONENT_NV 0x8505
#define GL_MODELVIEW1_MATRIX_EXT 0x8506
#define GL_INCR_WRAP 0x8507
#define GL_INCR_WRAP_EXT 0x8507
#define GL_INCR_WRAP_OES 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_DECR_WRAP_EXT 0x8508
#define GL_DECR_WRAP_OES 0x8508
#define GL_VERTEX_WEIGHTING_EXT 0x8509
#define GL_MODELVIEW1_ARB 0x850A
#define GL_MODELVIEW1_EXT 0x850A
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
#define GL_NORMAL_MAP 0x8511
#define GL_NORMAL_MAP_ARB 0x8511
#define GL_NORMAL_MAP_EXT 0x8511
#define GL_NORMAL_MAP_NV 0x8511
#define GL_NORMAL_MAP_OES 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_REFLECTION_MAP_ARB 0x8512
#define GL_REFLECTION_MAP_EXT 0x8512
#define GL_REFLECTION_MAP_NV 0x8512
#define GL_REFLECTION_MAP_OES 0x8512
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
#define GL_TEXTURE_CUBE_MAP_OES 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_OES 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES 0x851C
#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
#define GL_REGISTER_COMBINERS_NV 0x8522
#define GL_VARIABLE_A_NV 0x8523
#define GL_VARIABLE_B_NV 0x8524
#define GL_VARIABLE_C_NV 0x8525
#define GL_VARIABLE_D_NV 0x8526
#define GL_VARIABLE_E_NV 0x8527
#define GL_VARIABLE_F_NV 0x8528
#define GL_VARIABLE_G_NV 0x8529
#define GL_CONSTANT_COLOR0_NV 0x852A
#define GL_CONSTANT_COLOR1_NV 0x852B
#define GL_PRIMARY_COLOR_NV 0x852C
#define GL_SECONDARY_COLOR_NV 0x852D
#define GL_SPARE0_NV 0x852E
#define GL_SPARE1_NV 0x852F
#define GL_DISCARD_NV 0x8530
#define GL_E_TIMES_F_NV 0x8531
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
#define GL_PER_STAGE_CONSTANTS_NV 0x8535
#define GL_UNSIGNED_IDENTITY_NV 0x8536
#define GL_UNSIGNED_INVERT_NV 0x8537
#define GL_EXPAND_NORMAL_NV 0x8538
#define GL_EXPAND_NEGATE_NV 0x8539
#define GL_HALF_BIAS_NORMAL_NV 0x853A
#define GL_HALF_BIAS_NEGATE_NV 0x853B
#define GL_SIGNED_IDENTITY_NV 0x853C
#define GL_SIGNED_NEGATE_NV 0x853D
#define GL_SCALE_BY_TWO_NV 0x853E
#define GL_SCALE_BY_FOUR_NV 0x853F
#define GL_SCALE_BY_ONE_HALF_NV 0x8540
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
#define GL_COMBINER_INPUT_NV 0x8542
#define GL_COMBINER_MAPPING_NV 0x8543
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
#define GL_COMBINER_MUX_SUM_NV 0x8547
#define GL_COMBINER_SCALE_NV 0x8548
#define GL_COMBINER_BIAS_NV 0x8549
#define GL_COMBINER_AB_OUTPUT_NV 0x854A
#define GL_COMBINER_CD_OUTPUT_NV 0x854B
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
#define GL_COLOR_SUM_CLAMP_NV 0x854F
#define GL_COMBINER0_NV 0x8550
#define GL_COMBINER1_NV 0x8551
#define GL_COMBINER2_NV 0x8552
#define GL_COMBINER3_NV 0x8553
#define GL_COMBINER4_NV 0x8554
#define GL_COMBINER5_NV 0x8555
#define GL_COMBINER6_NV 0x8556
#define GL_COMBINER7_NV 0x8557
#define GL_PRIMITIVE_RESTART_NV 0x8558
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
#define GL_FOG_DISTANCE_MODE_NV 0x855A
#define GL_EYE_RADIAL_NV 0x855B
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
#define GL_EMBOSS_LIGHT_NV 0x855D
#define GL_EMBOSS_CONSTANT_NV 0x855E
#define GL_EMBOSS_MAP_NV 0x855F
#define GL_RED_MIN_CLAMP_INGR 0x8560
#define GL_GREEN_MIN_CLAMP_INGR 0x8561
#define GL_BLUE_MIN_CLAMP_INGR 0x8562
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
#define GL_RED_MAX_CLAMP_INGR 0x8564
#define GL_GREEN_MAX_CLAMP_INGR 0x8565
#define GL_BLUE_MAX_CLAMP_INGR 0x8566
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
#define GL_INTERLACE_READ_INGR 0x8568
#define GL_COMBINE 0x8570
#define GL_COMBINE_ARB 0x8570
#define GL_COMBINE_EXT 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_RGB_ARB 0x8571
#define GL_COMBINE_RGB_EXT 0x8571
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_ALPHA_ARB 0x8572
#define GL_COMBINE_ALPHA_EXT 0x8572
#define GL_RGB_SCALE 0x8573
#define GL_RGB_SCALE_ARB 0x8573
#define GL_RGB_SCALE_EXT 0x8573
#define GL_ADD_SIGNED 0x8574
#define GL_ADD_SIGNED_ARB 0x8574
#define GL_ADD_SIGNED_EXT 0x8574
#define GL_INTERPOLATE 0x8575
#define GL_INTERPOLATE_ARB 0x8575
#define GL_INTERPOLATE_EXT 0x8575
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ARB 0x8576
#define GL_CONSTANT_EXT 0x8576
#define GL_CONSTANT_NV 0x8576
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMARY_COLOR_ARB 0x8577
#define GL_PRIMARY_COLOR_EXT 0x8577
#define GL_PREVIOUS 0x8578
#define GL_PREVIOUS_ARB 0x8578
#define GL_PREVIOUS_EXT 0x8578
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE0_RGB_ARB 0x8580
#define GL_SOURCE0_RGB_EXT 0x8580
#define GL_SRC0_RGB 0x8580
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE1_RGB_ARB 0x8581
#define GL_SOURCE1_RGB_EXT 0x8581
#define GL_SRC1_RGB 0x8581
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE2_RGB_ARB 0x8582
#define GL_SOURCE2_RGB_EXT 0x8582
#define GL_SRC2_RGB 0x8582
#define GL_SOURCE3_RGB_NV 0x8583
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_ALPHA_ARB 0x8588
#define GL_SOURCE0_ALPHA_EXT 0x8588
#define GL_SRC0_ALPHA 0x8588
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_ALPHA_ARB 0x8589
#define GL_SOURCE1_ALPHA_EXT 0x8589
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_ALPHA_EXT 0x8589
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_ALPHA_ARB 0x858A
#define GL_SOURCE2_ALPHA_EXT 0x858A
#define GL_SRC2_ALPHA 0x858A
#define GL_SOURCE3_ALPHA_NV 0x858B
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND0_RGB_ARB 0x8590
#define GL_OPERAND0_RGB_EXT 0x8590
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND1_RGB_ARB 0x8591
#define GL_OPERAND1_RGB_EXT 0x8591
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND2_RGB_ARB 0x8592
#define GL_OPERAND2_RGB_EXT 0x8592
#define GL_OPERAND3_RGB_NV 0x8593
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_ALPHA_ARB 0x8598
#define GL_OPERAND0_ALPHA_EXT 0x8598
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_ALPHA_ARB 0x8599
#define GL_OPERAND1_ALPHA_EXT 0x8599
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_ALPHA_ARB 0x859A
#define GL_OPERAND2_ALPHA_EXT 0x859A
#define GL_OPERAND3_ALPHA_NV 0x859B
#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
#define GL_PERTURB_EXT 0x85AE
#define GL_TEXTURE_NORMAL_EXT 0x85AF
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
#define GL_TRANSFORM_HINT_APPLE 0x85B1
#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
#define GL_BUFFER_OBJECT_APPLE 0x85B3
#define GL_STORAGE_CLIENT_APPLE 0x85B4
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_VERTEX_ARRAY_BINDING_OES 0x85B5
#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
#define GL_YCBCR_422_APPLE 0x85B9
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
#define GL_STORAGE_PRIVATE_APPLE 0x85BD
#define GL_STORAGE_CACHED_APPLE 0x85BE
#define GL_STORAGE_SHARED_APPLE 0x85BF
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
#define GL_R1UI_V3F_SUN 0x85C4
#define GL_R1UI_C4UB_V3F_SUN 0x85C5
#define GL_R1UI_C3F_V3F_SUN 0x85C6
#define GL_R1UI_N3F_V3F_SUN 0x85C7
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
#define GL_R1UI_T2F_V3F_SUN 0x85C9
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
#define GL_SLICE_ACCUM_SUN 0x85CC
#define GL_QUAD_MESH_SUN 0x8614
#define GL_TRIANGLE_MESH_SUN 0x8615
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_IDENTITY_NV 0x862A
#define GL_INVERSE_NV 0x862B
#define GL_TRANSPOSE_NV 0x862C
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_NV 0x8637
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLAMP_NV 0x864F
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
#define GL_MAX_VERTEX_UNITS_OES 0x86A4
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
#define GL_VERTEX_BLEND_ARB 0x86A7
#define GL_CURRENT_WEIGHT_ARB 0x86A8
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
#define GL_WEIGHT_ARRAY_TYPE_OES 0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
#define GL_WEIGHT_ARRAY_STRIDE_OES 0x86AA
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
#define GL_WEIGHT_ARRAY_SIZE_OES 0x86AB
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
#define GL_WEIGHT_ARRAY_POINTER_OES 0x86AC
#define GL_WEIGHT_ARRAY_ARB 0x86AD
#define GL_WEIGHT_ARRAY_OES 0x86AD
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGB_ARB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DOT3_RGBA_ARB 0x86AF
#define GL_DOT3_RGBA_IMG 0x86AF
#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
#define GL_MULTISAMPLE_3DFX 0x86B2
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#define GL_SAMPLES_3DFX 0x86B4
#define GL_EVAL_2D_NV 0x86C0
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#define GL_MAP_TESSELLATION_NV 0x86C2
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
#define GL_SHADER_CONSISTENT_NV 0x86DD
#define GL_TEXTURE_SHADER_NV 0x86DE
#define GL_SHADER_OPERATION_NV 0x86DF
#define GL_CULL_MODES_NV 0x86E0
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
#define GL_CONST_EYE_NV 0x86E5
#define GL_PASS_THROUGH_NV 0x86E6
#define GL_CULL_FRAGMENT_NV 0x86E7
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
#define GL_SURFACE_STATE_NV 0x86EB
#define GL_DOT_PRODUCT_NV 0x86EC
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#define GL_HILO_NV 0x86F4
#define GL_DSDT_NV 0x86F5
#define GL_DSDT_MAG_NV 0x86F6
#define GL_DSDT_MAG_VIB_NV 0x86F7
#define GL_HILO16_NV 0x86F8
#define GL_SIGNED_HILO_NV 0x86F9
#define GL_SIGNED_HILO16_NV 0x86FA
#define GL_SIGNED_RGBA_NV 0x86FB
#define GL_SIGNED_RGBA8_NV 0x86FC
#define GL_SURFACE_REGISTERED_NV 0x86FD
#define GL_SIGNED_RGB_NV 0x86FE
#define GL_SIGNED_RGB8_NV 0x86FF
#define GL_SURFACE_MAPPED_NV 0x8700
#define GL_SIGNED_LUMINANCE_NV 0x8701
#define GL_SIGNED_LUMINANCE8_NV 0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
#define GL_SIGNED_ALPHA_NV 0x8705
#define GL_SIGNED_ALPHA8_NV 0x8706
#define GL_SIGNED_INTENSITY_NV 0x8707
#define GL_SIGNED_INTENSITY8_NV 0x8708
#define GL_DSDT8_NV 0x8709
#define GL_DSDT8_MAG8_NV 0x870A
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
#define GL_HI_SCALE_NV 0x870E
#define GL_LO_SCALE_NV 0x870F
#define GL_DS_SCALE_NV 0x8710
#define GL_DT_SCALE_NV 0x8711
#define GL_MAGNITUDE_SCALE_NV 0x8712
#define GL_VIBRANCE_SCALE_NV 0x8713
#define GL_HI_BIAS_NV 0x8714
#define GL_LO_BIAS_NV 0x8715
#define GL_DS_BIAS_NV 0x8716
#define GL_DT_BIAS_NV 0x8717
#define GL_MAGNITUDE_BIAS_NV 0x8718
#define GL_VIBRANCE_BIAS_NV 0x8719
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
#define GL_TEXTURE_HI_SIZE_NV 0x871B
#define GL_TEXTURE_LO_SIZE_NV 0x871C
#define GL_TEXTURE_DS_SIZE_NV 0x871D
#define GL_TEXTURE_DT_SIZE_NV 0x871E
#define GL_TEXTURE_MAG_SIZE_NV 0x871F
#define GL_MODELVIEW2_ARB 0x8722
#define GL_MODELVIEW3_ARB 0x8723
#define GL_MODELVIEW4_ARB 0x8724
#define GL_MODELVIEW5_ARB 0x8725
#define GL_MODELVIEW6_ARB 0x8726
#define GL_MODELVIEW7_ARB 0x8727
#define GL_MODELVIEW8_ARB 0x8728
#define GL_MODELVIEW9_ARB 0x8729
#define GL_MODELVIEW10_ARB 0x872A
#define GL_MODELVIEW11_ARB 0x872B
#define GL_MODELVIEW12_ARB 0x872C
#define GL_MODELVIEW13_ARB 0x872D
#define GL_MODELVIEW14_ARB 0x872E
#define GL_MODELVIEW15_ARB 0x872F
#define GL_MODELVIEW16_ARB 0x8730
#define GL_MODELVIEW17_ARB 0x8731
#define GL_MODELVIEW18_ARB 0x8732
#define GL_MODELVIEW19_ARB 0x8733
#define GL_MODELVIEW20_ARB 0x8734
#define GL_MODELVIEW21_ARB 0x8735
#define GL_MODELVIEW22_ARB 0x8736
#define GL_MODELVIEW23_ARB 0x8737
#define GL_MODELVIEW24_ARB 0x8738
#define GL_MODELVIEW25_ARB 0x8739
#define GL_MODELVIEW26_ARB 0x873A
#define GL_MODELVIEW27_ARB 0x873B
#define GL_MODELVIEW28_ARB 0x873C
#define GL_MODELVIEW29_ARB 0x873D
#define GL_MODELVIEW30_ARB 0x873E
#define GL_MODELVIEW31_ARB 0x873F
#define GL_DOT3_RGB_EXT 0x8740
#define GL_Z400_BINARY_AMD 0x8740
#define GL_DOT3_RGBA_EXT 0x8741
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_LENGTH_OES 0x8741
#define GL_MIRROR_CLAMP_ATI 0x8742
#define GL_MIRROR_CLAMP_EXT 0x8742
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
#define GL_MODULATE_ADD_ATI 0x8744
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
#define GL_MODULATE_SUBTRACT_ATI 0x8746
#define GL_SET_AMD 0x874A
#define GL_REPLACE_VALUE_AMD 0x874B
#define GL_STENCIL_OP_VALUE_AMD 0x874C
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
#define GL_DEPTH_STENCIL_MESA 0x8750
#define GL_UNSIGNED_INT_24_8_MESA 0x8751
#define GL_UNSIGNED_INT_8_24_REV_MESA 0x8752
#define GL_UNSIGNED_SHORT_15_1_MESA 0x8753
#define GL_UNSIGNED_SHORT_1_15_REV_MESA 0x8754
#define GL_TRACE_MASK_MESA 0x8755
#define GL_TRACE_NAME_MESA 0x8756
#define GL_YCBCR_MESA 0x8757
#define GL_PACK_INVERT_MESA 0x8758
#define GL_DEBUG_OBJECT_MESA 0x8759
#define GL_TEXTURE_1D_STACK_MESAX 0x8759
#define GL_DEBUG_PRINT_MESA 0x875A
#define GL_TEXTURE_2D_STACK_MESAX 0x875A
#define GL_DEBUG_ASSERT_MESA 0x875B
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
#define GL_PROGRAM_BINARY_FORMAT_MESA 0x875F
#define GL_STATIC_ATI 0x8760
#define GL_DYNAMIC_ATI 0x8761
#define GL_PRESERVE_ATI 0x8762
#define GL_DISCARD_ATI 0x8763
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
#define GL_ELEMENT_ARRAY_ATI 0x8768
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
#define GL_VERTEX_STREAM0_ATI 0x876C
#define GL_VERTEX_STREAM1_ATI 0x876D
#define GL_VERTEX_STREAM2_ATI 0x876E
#define GL_VERTEX_STREAM3_ATI 0x876F
#define GL_VERTEX_STREAM4_ATI 0x8770
#define GL_VERTEX_STREAM5_ATI 0x8771
#define GL_VERTEX_STREAM6_ATI 0x8772
#define GL_VERTEX_STREAM7_ATI 0x8773
#define GL_VERTEX_SOURCE_ATI 0x8774
#define GL_BUMP_ROT_MATRIX_ATI 0x8775
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
#define GL_BUMP_TEX_UNITS_ATI 0x8778
#define GL_DUDV_ATI 0x8779
#define GL_DU8DV8_ATI 0x877A
#define GL_BUMP_ENVMAP_ATI 0x877B
#define GL_BUMP_TARGET_ATI 0x877C
#define GL_VERTEX_SHADER_EXT 0x8780
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
#define GL_OP_INDEX_EXT 0x8782
#define GL_OP_NEGATE_EXT 0x8783
#define GL_OP_DOT3_EXT 0x8784
#define GL_OP_DOT4_EXT 0x8785
#define GL_OP_MUL_EXT 0x8786
#define GL_OP_ADD_EXT 0x8787
#define GL_OP_MADD_EXT 0x8788
#define GL_OP_FRAC_EXT 0x8789
#define GL_OP_MAX_EXT 0x878A
#define GL_OP_MIN_EXT 0x878B
#define GL_OP_SET_GE_EXT 0x878C
#define GL_OP_SET_LT_EXT 0x878D
#define GL_OP_CLAMP_EXT 0x878E
#define GL_OP_FLOOR_EXT 0x878F
#define GL_OP_ROUND_EXT 0x8790
#define GL_OP_EXP_BASE_2_EXT 0x8791
#define GL_OP_LOG_BASE_2_EXT 0x8792
#define GL_OP_POWER_EXT 0x8793
#define GL_OP_RECIP_EXT 0x8794
#define GL_OP_RECIP_SQRT_EXT 0x8795
#define GL_OP_SUB_EXT 0x8796
#define GL_OP_CROSS_PRODUCT_EXT 0x8797
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
#define GL_OP_MOV_EXT 0x8799
#define GL_OUTPUT_VERTEX_EXT 0x879A
#define GL_OUTPUT_COLOR0_EXT 0x879B
#define GL_OUTPUT_COLOR1_EXT 0x879C
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
#define GL_OUTPUT_FOG_EXT 0x87BD
#define GL_SCALAR_EXT 0x87BE
#define GL_VECTOR_EXT 0x87BF
#define GL_MATRIX_EXT 0x87C0
#define GL_VARIANT_EXT 0x87C1
#define GL_INVARIANT_EXT 0x87C2
#define GL_LOCAL_CONSTANT_EXT 0x87C3
#define GL_LOCAL_EXT 0x87C4
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
#define GL_X_EXT 0x87D5
#define GL_Y_EXT 0x87D6
#define GL_Z_EXT 0x87D7
#define GL_W_EXT 0x87D8
#define GL_NEGATIVE_X_EXT 0x87D9
#define GL_NEGATIVE_Y_EXT 0x87DA
#define GL_NEGATIVE_Z_EXT 0x87DB
#define GL_NEGATIVE_W_EXT 0x87DC
#define GL_ZERO_EXT 0x87DD
#define GL_ONE_EXT 0x87DE
#define GL_NEGATIVE_ONE_EXT 0x87DF
#define GL_NORMALIZED_RANGE_EXT 0x87E0
#define GL_FULL_RANGE_EXT 0x87E1
#define GL_CURRENT_VERTEX_EXT 0x87E2
#define GL_MVP_MATRIX_EXT 0x87E3
#define GL_VARIANT_VALUE_EXT 0x87E4
#define GL_VARIANT_DATATYPE_EXT 0x87E5
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
#define GL_VARIANT_ARRAY_EXT 0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
#define GL_INVARIANT_VALUE_EXT 0x87EA
#define GL_INVARIANT_DATATYPE_EXT 0x87EB
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
#define GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD 0x87EE
#define GL_PN_TRIANGLES_ATI 0x87F0
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
#define GL_3DC_X_AMD 0x87F9
#define GL_3DC_XY_AMD 0x87FA
#define GL_VBO_FREE_MEMORY_ATI 0x87FB
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_PROGRAM_BINARY_FORMATS_OES 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_FORMATS_OES 0x87FF
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_FRAGMENT_PROGRAM_ARB 0x8804
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_RGBA32F 0x8814
#define GL_RGBA32F_ARB 0x8814
#define GL_RGBA32F_EXT 0x8814
#define GL_RGBA_FLOAT32_APPLE 0x8814
#define GL_RGBA_FLOAT32_ATI 0x8814
#define GL_RGB32F 0x8815
#define GL_RGB32F_ARB 0x8815
#define GL_RGB32F_EXT 0x8815
#define GL_RGB_FLOAT32_APPLE 0x8815
#define GL_RGB_FLOAT32_ATI 0x8815
#define GL_ALPHA32F_ARB 0x8816
#define GL_ALPHA32F_EXT 0x8816
#define GL_ALPHA_FLOAT32_APPLE 0x8816
#define GL_ALPHA_FLOAT32_ATI 0x8816
#define GL_INTENSITY32F_ARB 0x8817
#define GL_INTENSITY_FLOAT32_APPLE 0x8817
#define GL_INTENSITY_FLOAT32_ATI 0x8817
#define GL_LUMINANCE32F_ARB 0x8818
#define GL_LUMINANCE32F_EXT 0x8818
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
#define GL_LUMINANCE_FLOAT32_ATI 0x8818
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#define GL_LUMINANCE_ALPHA32F_EXT 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
#define GL_RGBA16F 0x881A
#define GL_RGBA16F_ARB 0x881A
#define GL_RGBA16F_EXT 0x881A
#define GL_RGBA_FLOAT16_APPLE 0x881A
#define GL_RGBA_FLOAT16_ATI 0x881A
#define GL_RGB16F 0x881B
#define GL_RGB16F_ARB 0x881B
#define GL_RGB16F_EXT 0x881B
#define GL_RGB_FLOAT16_APPLE 0x881B
#define GL_RGB_FLOAT16_ATI 0x881B
#define GL_ALPHA16F_ARB 0x881C
#define GL_ALPHA16F_EXT 0x881C
#define GL_ALPHA_FLOAT16_APPLE 0x881C
#define GL_ALPHA_FLOAT16_ATI 0x881C
#define GL_INTENSITY16F_ARB 0x881D
#define GL_INTENSITY_FLOAT16_APPLE 0x881D
#define GL_INTENSITY_FLOAT16_ATI 0x881D
#define GL_LUMINANCE16F_ARB 0x881E
#define GL_LUMINANCE16F_EXT 0x881E
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
#define GL_LUMINANCE_FLOAT16_ATI 0x881E
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#define GL_LUMINANCE_ALPHA16F_EXT 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_RGBA_FLOAT_MODE_ATI 0x8820
#define GL_WRITEONLY_RENDERING_QCOM 0x8823
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_MAX_DRAW_BUFFERS_EXT 0x8824
#define GL_MAX_DRAW_BUFFERS_NV 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER0_EXT 0x8825
#define GL_DRAW_BUFFER0_NV 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER1_EXT 0x8826
#define GL_DRAW_BUFFER1_NV 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER2_EXT 0x8827
#define GL_DRAW_BUFFER2_NV 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER3_EXT 0x8828
#define GL_DRAW_BUFFER3_NV 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER4_EXT 0x8829
#define GL_DRAW_BUFFER4_NV 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER5_EXT 0x882A
#define GL_DRAW_BUFFER5_NV 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER6_EXT 0x882B
#define GL_DRAW_BUFFER6_NV 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER7_EXT 0x882C
#define GL_DRAW_BUFFER7_NV 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER8_EXT 0x882D
#define GL_DRAW_BUFFER8_NV 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_BUFFER9_EXT 0x882E
#define GL_DRAW_BUFFER9_NV 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER10_EXT 0x882F
#define GL_DRAW_BUFFER10_NV 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER11_EXT 0x8830
#define GL_DRAW_BUFFER11_NV 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER12_EXT 0x8831
#define GL_DRAW_BUFFER12_NV 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER13_EXT 0x8832
#define GL_DRAW_BUFFER13_NV 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER14_EXT 0x8833
#define GL_DRAW_BUFFER14_NV 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_DRAW_BUFFER15_EXT 0x8834
#define GL_DRAW_BUFFER15_NV 0x8834
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
#define GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI 0x8837
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_ALPHA_OES 0x883D
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
#define GL_MATRIX_PALETTE_ARB 0x8840
#define GL_MATRIX_PALETTE_OES 0x8840
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
#define GL_MAX_PALETTE_MATRICES_OES 0x8842
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
#define GL_CURRENT_PALETTE_MATRIX_OES 0x8843
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
#define GL_MATRIX_INDEX_ARRAY_OES 0x8844
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
#define GL_MATRIX_INDEX_ARRAY_SIZE_OES 0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
#define GL_MATRIX_INDEX_ARRAY_TYPE_OES 0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
#define GL_MATRIX_INDEX_ARRAY_STRIDE_OES 0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
#define GL_MATRIX_INDEX_ARRAY_POINTER_OES 0x8849
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
#define GL_TEXTURE_COMPARE_MODE_EXT 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
#define GL_TEXTURE_COMPARE_FUNC_EXT 0x884D
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_REF_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
#define GL_HILO8_NV 0x885E
#define GL_SIGNED_HILO8_NV 0x885F
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_ARB 0x8861
#define GL_POINT_SPRITE_NV 0x8861
#define GL_POINT_SPRITE_OES 0x8861
#define GL_COORD_REPLACE 0x8862
#define GL_COORD_REPLACE_ARB 0x8862
#define GL_COORD_REPLACE_NV 0x8862
#define GL_COORD_REPLACE_OES 0x8862
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_PIXEL_COUNTER_BITS_NV 0x8864
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_QUERY_COUNTER_BITS_EXT 0x8864
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_CURRENT_QUERY_EXT 0x8865
#define GL_PIXEL_COUNT_NV 0x8866
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_EXT 0x8866
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_QUERY_RESULT_AVAILABLE_EXT 0x8867
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES 0x886D
#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
#define GL_FRAGMENT_PROGRAM_NV 0x8870
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_COORDS_NV 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_ERROR_STRING_NV 0x8874
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_EXT 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_OES 0x887F
#define GL_FLOAT_R_NV 0x8880
#define GL_FLOAT_RG_NV 0x8881
#define GL_FLOAT_RGB_NV 0x8882
#define GL_FLOAT_RGBA_NV 0x8883
#define GL_FLOAT_R16_NV 0x8884
#define GL_FLOAT_R32_NV 0x8885
#define GL_FLOAT_RG16_NV 0x8886
#define GL_FLOAT_RG32_NV 0x8887
#define GL_FLOAT_RGB16_NV 0x8888
#define GL_FLOAT_RGB32_NV 0x8889
#define GL_FLOAT_RGBA16_NV 0x888A
#define GL_FLOAT_RGBA32_NV 0x888B
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
#define GL_FLOAT_RGBA_MODE_NV 0x888E
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
#define GL_DEPTH_BOUNDS_EXT 0x8891
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_OES 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_READ_ONLY 0x88B8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_WRITE_ONLY_OES 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_READ_WRITE_ARB 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_ACCESS_OES 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAPPED_OES 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_MAP_POINTER_OES 0x88BD
#define GL_WRITE_DISCARD_NV 0x88BE
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_READ_ARB 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
#define GL_PIXEL_PACK_BUFFER_NV 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_NV 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_NV 0x88ED
#define GL_ETC1_SRGB8_NV 0x88EE
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_NV 0x88EF
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#define GL_DEPTH24_STENCIL8_OES 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#define GL_STENCIL_TAG_BITS_EXT 0x88F2
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC1_COLOR_EXT 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_COLOR_EXT 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_ALPHA_EXT 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT 0x88FC
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV 0x88FE
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
#define GL_CG_VERTEX_SHADER_EXT 0x890E
#define GL_CG_FRAGMENT_SHADER_EXT 0x890F
#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT 0x8916
#define GL_GEOMETRY_LINKED_VERTICES_OUT_OES 0x8916
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_OES 0x8917
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT 0x8918
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES 0x8918
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_SAMPLER_BINDING 0x8919
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
#define GL_FRAGMENT_SHADER_ATI 0x8920
#define GL_REG_0_ATI 0x8921
#define GL_REG_1_ATI 0x8922
#define GL_REG_2_ATI 0x8923
#define GL_REG_3_ATI 0x8924
#define GL_REG_4_ATI 0x8925
#define GL_REG_5_ATI 0x8926
#define GL_REG_6_ATI 0x8927
#define GL_REG_7_ATI 0x8928
#define GL_REG_8_ATI 0x8929
#define GL_REG_9_ATI 0x892A
#define GL_REG_10_ATI 0x892B
#define GL_REG_11_ATI 0x892C
#define GL_REG_12_ATI 0x892D
#define GL_REG_13_ATI 0x892E
#define GL_REG_14_ATI 0x892F
#define GL_REG_15_ATI 0x8930
#define GL_REG_16_ATI 0x8931
#define GL_REG_17_ATI 0x8932
#define GL_REG_18_ATI 0x8933
#define GL_REG_19_ATI 0x8934
#define GL_REG_20_ATI 0x8935
#define GL_REG_21_ATI 0x8936
#define GL_REG_22_ATI 0x8937
#define GL_REG_23_ATI 0x8938
#define GL_REG_24_ATI 0x8939
#define GL_REG_25_ATI 0x893A
#define GL_REG_26_ATI 0x893B
#define GL_REG_27_ATI 0x893C
#define GL_REG_28_ATI 0x893D
#define GL_REG_29_ATI 0x893E
#define GL_REG_30_ATI 0x893F
#define GL_REG_31_ATI 0x8940
#define GL_CON_0_ATI 0x8941
#define GL_CON_1_ATI 0x8942
#define GL_CON_2_ATI 0x8943
#define GL_CON_3_ATI 0x8944
#define GL_CON_4_ATI 0x8945
#define GL_CON_5_ATI 0x8946
#define GL_CON_6_ATI 0x8947
#define GL_CON_7_ATI 0x8948
#define GL_CON_8_ATI 0x8949
#define GL_CON_9_ATI 0x894A
#define GL_CON_10_ATI 0x894B
#define GL_CON_11_ATI 0x894C
#define GL_CON_12_ATI 0x894D
#define GL_CON_13_ATI 0x894E
#define GL_CON_14_ATI 0x894F
#define GL_CON_15_ATI 0x8950
#define GL_CON_16_ATI 0x8951
#define GL_CON_17_ATI 0x8952
#define GL_CON_18_ATI 0x8953
#define GL_CON_19_ATI 0x8954
#define GL_CON_20_ATI 0x8955
#define GL_CON_21_ATI 0x8956
#define GL_CON_22_ATI 0x8957
#define GL_CON_23_ATI 0x8958
#define GL_CON_24_ATI 0x8959
#define GL_CON_25_ATI 0x895A
#define GL_CON_26_ATI 0x895B
#define GL_CON_27_ATI 0x895C
#define GL_CON_28_ATI 0x895D
#define GL_CON_29_ATI 0x895E
#define GL_CON_30_ATI 0x895F
#define GL_CON_31_ATI 0x8960
#define GL_MOV_ATI 0x8961
#define GL_ADD_ATI 0x8963
#define GL_MUL_ATI 0x8964
#define GL_SUB_ATI 0x8965
#define GL_DOT3_ATI 0x8966
#define GL_DOT4_ATI 0x8967
#define GL_MAD_ATI 0x8968
#define GL_LERP_ATI 0x8969
#define GL_CND_ATI 0x896A
#define GL_CND0_ATI 0x896B
#define GL_DOT2_ADD_ATI 0x896C
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
#define GL_NUM_PASSES_ATI 0x8970
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
#define GL_SWIZZLE_STR_ATI 0x8976
#define GL_SWIZZLE_STQ_ATI 0x8977
#define GL_SWIZZLE_STR_DR_ATI 0x8978
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
#define GL_SWIZZLE_STRQ_ATI 0x897A
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
#define GL_INTERLACE_OML 0x8980
#define GL_INTERLACE_READ_OML 0x8981
#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
#define GL_PACK_RESAMPLE_OML 0x8984
#define GL_UNPACK_RESAMPLE_OML 0x8985
#define GL_RESAMPLE_REPLICATE_OML 0x8986
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
#define GL_RESAMPLE_AVERAGE_OML 0x8988
#define GL_RESAMPLE_DECIMATE_OML 0x8989
#define GL_POINT_SIZE_ARRAY_TYPE_OES 0x898A
#define GL_POINT_SIZE_ARRAY_STRIDE_OES 0x898B
#define GL_POINT_SIZE_ARRAY_POINTER_OES 0x898C
#define GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES 0x898D
#define GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES 0x898E
#define GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES 0x898F
#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
#define GL_DRAW_PIXELS_APPLE 0x8A0A
#define GL_FENCE_APPLE 0x8A0B
#define GL_ELEMENT_ARRAY_APPLE 0x8A0C
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
#define GL_COLOR_FLOAT_APPLE 0x8A0F
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
#define GL_PACK_ROW_BYTES_APPLE 0x8A15
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
#define GL_RELEASED_APPLE 0x8A19
#define GL_VOLATILE_APPLE 0x8A1A
#define GL_RETAINED_APPLE 0x8A1B
#define GL_UNDEFINED_APPLE 0x8A1C
#define GL_PURGEABLE_APPLE 0x8A1D
#define GL_RGB_422_APPLE 0x8A1F
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
#define GL_DECODE_EXT 0x8A49
#define GL_SKIP_DECODE_EXT 0x8A4A
#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
#define GL_RGB_RAW_422_APPLE 0x8A51
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
#define GL_SYNC_OBJECT_APPLE 0x8A53
#define GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT 0x8A54
#define GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT 0x8A55
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT 0x8A56
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT 0x8A57
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_OBJECT_EXT 0x8B40
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADER_OBJECT_EXT 0x8B48
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC4_ARB 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_3D_OES 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_2D_SHADOW_EXT 0x8B62
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x3_NV 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT2x4_NV 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x2_NV 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT3x4_NV 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x2_NV 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_MAT4x3_NV 0x8B6A
#define GL_DELETE_STATUS 0x8B80
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_PALETTE4_RGB8_OES 0x8B90
#define GL_PALETTE4_RGBA8_OES 0x8B91
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
#define GL_PALETTE4_RGBA4_OES 0x8B93
#define GL_PALETTE4_RGB5_A1_OES 0x8B94
#define GL_PALETTE8_RGB8_OES 0x8B95
#define GL_PALETTE8_RGBA8_OES 0x8B96
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
#define GL_PALETTE8_RGBA4_OES 0x8B98
#define GL_PALETTE8_RGB5_A1_OES 0x8B99
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#define GL_POINT_SIZE_ARRAY_OES 0x8B9C
#define GL_TEXTURE_CROP_RECT_OES 0x8B9D
#define GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES 0x8B9E
#define GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES 0x8B9F
#define GL_FRAGMENT_PROGRAM_POSITION_MESA 0x8BB0
#define GL_FRAGMENT_PROGRAM_CALLBACK_MESA 0x8BB1
#define GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA 0x8BB2
#define GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA 0x8BB3
#define GL_VERTEX_PROGRAM_POSITION_MESA 0x8BB4
#define GL_VERTEX_PROGRAM_CALLBACK_MESA 0x8BB5
#define GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA 0x8BB6
#define GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA 0x8BB7
#define GL_TILE_RASTER_ORDER_FIXED_MESA 0x8BB8
#define GL_TILE_RASTER_ORDER_INCREASING_X_MESA 0x8BB9
#define GL_TILE_RASTER_ORDER_INCREASING_Y_MESA 0x8BBA
#define GL_FRAMEBUFFER_FLIP_Y_MESA 0x8BBB
#define GL_COUNTER_TYPE_AMD 0x8BC0
#define GL_COUNTER_RANGE_AMD 0x8BC1
#define GL_UNSIGNED_INT64_AMD 0x8BC2
#define GL_PERCENTAGE_AMD 0x8BC3
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
#define GL_PERFMON_RESULT_AMD 0x8BC6
#define GL_TEXTURE_WIDTH_QCOM 0x8BD2
#define GL_TEXTURE_HEIGHT_QCOM 0x8BD3
#define GL_TEXTURE_DEPTH_QCOM 0x8BD4
#define GL_TEXTURE_INTERNAL_FORMAT_QCOM 0x8BD5
#define GL_TEXTURE_FORMAT_QCOM 0x8BD6
#define GL_TEXTURE_TYPE_QCOM 0x8BD7
#define GL_TEXTURE_IMAGE_VALID_QCOM 0x8BD8
#define GL_TEXTURE_NUM_LEVELS_QCOM 0x8BD9
#define GL_TEXTURE_TARGET_QCOM 0x8BDA
#define GL_TEXTURE_OBJECT_VALID_QCOM 0x8BDB
#define GL_STATE_RESTORE 0x8BDC
#define GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT 0x8BE7
#define GL_TEXTURE_PROTECTED_EXT 0x8BFA
#define GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM 0x8BFB
#define GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM 0x8BFC
#define GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM 0x8BFD
#define GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM 0x8BFE
#define GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM 0x8BFF
#define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG 0x8C00
#define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG 0x8C01
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG 0x8C02
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG 0x8C03
#define GL_MODULATE_COLOR_IMG 0x8C04
#define GL_RECIP_ADD_SIGNED_ALPHA_IMG 0x8C05
#define GL_TEXTURE_ALPHA_MODULATE_IMG 0x8C06
#define GL_FACTOR_ALPHA_MODULATE_IMG 0x8C07
#define GL_FRAGMENT_ALPHA_MODULATE_IMG 0x8C08
#define GL_ADD_BLEND_IMG 0x8C09
#define GL_SGX_BINARY_IMG 0x8C0A
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#define GL_UNSIGNED_NORMALIZED_EXT 0x8C17
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES 0x8C29
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_OES 0x8C2A
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_OES 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_OES 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_OES 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_EXT 0x8C2F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_SAMPLE_SHADING_OES 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_OES 0x8C37
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R11F_G11F_B10F_APPLE 0x8C3A
#define GL_R11F_G11F_B10F_EXT 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
#define GL_RGB9_E5 0x8C3D
#define GL_RGB9_E5_APPLE 0x8C3D
#define GL_RGB9_E5_EXT 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_APPLE 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
#define GL_SRGB 0x8C40
#define GL_SRGB_EXT 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_EXT 0x8C41
#define GL_SRGB8_NV 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB_ALPHA_EXT 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#define GL_SLUMINANCE_ALPHA_NV 0x8C44
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#define GL_SLUMINANCE8_ALPHA8_NV 0x8C45
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE_EXT 0x8C46
#define GL_SLUMINANCE_NV 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_EXT 0x8C47
#define GL_SLUMINANCE8_NV 0x8C47
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_COMPRESSED_SRGB_S3TC_DXT1_NV 0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV 0x8C4F
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_PRIMITIVES_GENERATED_OES 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_ATC_RGB_AMD 0x8C92
#define GL_ATC_RGBA_EXPLICIT_ALPHA_AMD 0x8C93
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_LOWER_LEFT_EXT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_UPPER_LEFT_EXT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_APPLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_NV 0x8CA6
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_BINDING_OES 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_ANGLE 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BINDING_OES 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_ANGLE 0x8CA8
#define GL_READ_FRAMEBUFFER_APPLE 0x8CA8
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_FRAMEBUFFER_NV 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_ANGLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_APPLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_FRAMEBUFFER_NV 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_ANGLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_APPLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_NV 0x8CAA
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_ANGLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_APPLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_NV 0x8CAB
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_OES 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_OES 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_NV 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT0_NV 0x8CE0
#define GL_COLOR_ATTACHMENT0_OES 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT1_NV 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT2_NV 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT3_NV 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT4_NV 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT5_NV 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT6_NV 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT7_NV 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT8_NV 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_ATTACHMENT9_NV 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT10_NV 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT11_NV 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT12_NV 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT13_NV 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT14_NV 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT15_NV 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_ATTACHMENT_OES 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_ATTACHMENT_OES 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_OES 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_OES 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERBUFFER_WIDTH_OES 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_OES 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_OES 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX1_OES 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX4_OES 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_INDEX8_OES 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_OES 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_OES 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_OES 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_OES 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_OES 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_OES 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_ANGLE 0x8D57
#define GL_MAX_SAMPLES_APPLE 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_SAMPLES_NV 0x8D57
#define GL_TEXTURE_GEN_STR_OES 0x8D60
#define GL_HALF_FLOAT_OES 0x8D61
#define GL_RGB565 0x8D62
#define GL_RGB565_OES 0x8D62
#define GL_ETC1_RGB8_OES 0x8D64
#define GL_TEXTURE_EXTERNAL_OES 0x8D65
#define GL_SAMPLER_EXTERNAL_OES 0x8D66
#define GL_TEXTURE_BINDING_EXTERNAL_OES 0x8D67
#define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES 0x8D68
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0x8D6C
#define GL_RGBA32UI 0x8D70
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGB32UI_EXT 0x8D71
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGB16UI_EXT 0x8D77
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGB8UI_EXT 0x8D7D
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_RGBA32I 0x8D82
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGB32I_EXT 0x8D83
#define GL_ALPHA32I_EXT 0x8D84
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_RGBA16I 0x8D88
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGB16I_EXT 0x8D89
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RGB8I_EXT 0x8D8F
#define GL_ALPHA8I_EXT 0x8D90
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_RED_INTEGER 0x8D94
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_ALPHA_INTEGER 0x8D97
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_LAYER_NV 0x8DAA
#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
#define GL_SHADER_INCLUDE_ARB 0x8DAE
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_BUFFER_OES 0x8DC2
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_NV 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_NV 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_INT_SAMPLER_BUFFER_OES 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES 0x8DD8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_SHADER_OES 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES 0x8DE1
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
#define GL_UNIFORM_BUFFER_EXT 0x8DEE
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_UNSIGNED_INT_10_10_10_2_OES 0x8DF6
#define GL_INT_10_10_10_2_OES 0x8DF7
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_SHADER_COMPILER 0x8DFA
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E1F
#define GL_COLOR_SAMPLES_NV 0x8E20
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#define GL_FRAME_NV 0x8E26
#define GL_FIELDS_NV 0x8E27
#define GL_CURRENT_TIME_NV 0x8E28
#define GL_TIMESTAMP 0x8E28
#define GL_TIMESTAMP_EXT 0x8E28
#define GL_NUM_FILL_STREAMS_NV 0x8E29
#define GL_PRESENT_TIME_NV 0x8E2A
#define GL_PRESENT_DURATION_NV 0x8E2B
#define GL_DEPTH_COMPONENT16_NONLINEAR_NV 0x8E2C
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_OES 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_OES 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_SAMPLE_LOCATION_ARB 0x8E50
#define GL_SAMPLE_LOCATION_NV 0x8E50
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES 0x8E5D
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
#define GL_MAX_MESH_UNIFORM_BLOCKS_NV 0x8E60
#define GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV 0x8E61
#define GL_MAX_MESH_IMAGE_UNIFORMS_NV 0x8E62
#define GL_MAX_MESH_UNIFORM_COMPONENTS_NV 0x8E63
#define GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV 0x8E64
#define GL_MAX_MESH_ATOMIC_COUNTERS_NV 0x8E65
#define GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV 0x8E66
#define GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV 0x8E67
#define GL_MAX_TASK_UNIFORM_BLOCKS_NV 0x8E68
#define GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV 0x8E69
#define GL_MAX_TASK_IMAGE_UNIFORMS_NV 0x8E6A
#define GL_MAX_TASK_UNIFORM_COMPONENTS_NV 0x8E6B
#define GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV 0x8E6C
#define GL_MAX_TASK_ATOMIC_COUNTERS_NV 0x8E6D
#define GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV 0x8E6E
#define GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV 0x8E6F
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_VERTICES_EXT 0x8E72
#define GL_PATCH_VERTICES_OES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_INNER_LEVEL_EXT 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_DEFAULT_OUTER_LEVEL_EXT 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_OES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_MODE_EXT 0x8E76
#define GL_TESS_GEN_MODE_OES 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_SPACING_EXT 0x8E77
#define GL_TESS_GEN_SPACING_OES 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_EXT 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_OES 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_POINT_MODE_EXT 0x8E79
#define GL_TESS_GEN_POINT_MODE_OES 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_ISOLINES_EXT 0x8E7A
#define GL_ISOLINES_OES 0x8E7A
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_ODD_EXT 0x8E7B
#define GL_FRACTIONAL_ODD_OES 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_EVEN_EXT 0x8E7C
#define GL_FRACTIONAL_EVEN_OES 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PATCH_VERTICES_EXT 0x8E7D
#define GL_MAX_PATCH_VERTICES_OES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_EXT 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_OES 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_EXT 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_OES 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES 0x8E86
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_EXT 0x8E87
#define GL_TESS_EVALUATION_SHADER_OES 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_EXT 0x8E88
#define GL_TESS_CONTROL_SHADER_OES 0x8E88
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES 0x8E8A
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_EXT 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT 0x8E8F
#define GL_COVERAGE_COMPONENT_NV 0x8ED0
#define GL_COVERAGE_COMPONENT4_NV 0x8ED1
#define GL_COVERAGE_ATTACHMENT_NV 0x8ED2
#define GL_COVERAGE_BUFFERS_NV 0x8ED3
#define GL_COVERAGE_SAMPLES_NV 0x8ED4
#define GL_COVERAGE_ALL_FRAGMENTS_NV 0x8ED5
#define GL_COVERAGE_EDGE_FRAGMENTS_NV 0x8ED6
#define GL_COVERAGE_AUTOMATIC_NV 0x8ED7
#define GL_INCLUSIVE_EXT 0x8F10
#define GL_EXCLUSIVE_EXT 0x8F11
#define GL_WINDOW_RECTANGLE_EXT 0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15
#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
#define GL_GPU_ADDRESS_NV 0x8F34
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_READ_BUFFER_NV 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_COPY_WRITE_BUFFER_NV 0x8F37
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_MALI_SHADER_BINARY_ARM 0x8F60
#define GL_MALI_PROGRAM_BINARY_ARM 0x8F61
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT 0x8F63
#define GL_SHADER_PIXEL_LOCAL_STORAGE_EXT 0x8F64
#define GL_FETCH_PER_SAMPLE_ARM 0x8F65
#define GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM 0x8F66
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT 0x8F67
#define GL_TEXTURE_ASTC_DECODE_PRECISION_EXT 0x8F69
#define GL_RED_SNORM 0x8F90
#define GL_RG_SNORM 0x8F91
#define GL_RGB_SNORM 0x8F92
#define GL_RGBA_SNORM 0x8F93
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_R16_SNORM_EXT 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RG16_SNORM_EXT 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB16_SNORM_EXT 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA16_SNORM_EXT 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#define GL_PERFMON_GLOBAL_MODE_QCOM 0x8FA0
#define GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM 0x8FA1
#define GL_BINNING_CONTROL_HINT_QCOM 0x8FB0
#define GL_CPU_OPTIMIZED_QCOM 0x8FB1
#define GL_GPU_OPTIMIZED_QCOM 0x8FB2
#define GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM 0x8FB3
#define GL_GPU_DISJOINT_EXT 0x8FBB
#define GL_SR8_EXT 0x8FBD
#define GL_SRG8_EXT 0x8FBE
#define GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT 0x8FBF
#define GL_SHADER_BINARY_VIV 0x8FC4
#define GL_INT8_NV 0x8FE0
#define GL_INT8_VEC2_NV 0x8FE1
#define GL_INT8_VEC3_NV 0x8FE2
#define GL_INT8_VEC4_NV 0x8FE3
#define GL_INT16_NV 0x8FE4
#define GL_INT16_VEC2_NV 0x8FE5
#define GL_INT16_VEC3_NV 0x8FE6
#define GL_INT16_VEC4_NV 0x8FE7
#define GL_INT64_VEC2_ARB 0x8FE9
#define GL_INT64_VEC2_NV 0x8FE9
#define GL_INT64_VEC3_ARB 0x8FEA
#define GL_INT64_VEC3_NV 0x8FEA
#define GL_INT64_VEC4_ARB 0x8FEB
#define GL_INT64_VEC4_NV 0x8FEB
#define GL_UNSIGNED_INT8_NV 0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#define GL_UNSIGNED_INT16_NV 0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_SAMPLER_BUFFER_AMD 0x9001
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
#define GL_TESSELLATION_MODE_AMD 0x9004
#define GL_TESSELLATION_FACTOR_AMD 0x9005
#define GL_DISCRETE_AMD 0x9006
#define GL_CONTINUOUS_AMD 0x9007
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_EXT 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_OES 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_OES 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900F
#define GL_ALPHA_SNORM 0x9010
#define GL_LUMINANCE_SNORM 0x9011
#define GL_LUMINANCE_ALPHA_SNORM 0x9012
#define GL_INTENSITY_SNORM 0x9013
#define GL_ALPHA8_SNORM 0x9014
#define GL_LUMINANCE8_SNORM 0x9015
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
#define GL_INTENSITY8_SNORM 0x9017
#define GL_ALPHA16_SNORM 0x9018
#define GL_LUMINANCE16_SNORM 0x9019
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
#define GL_INTENSITY16_SNORM 0x901B
#define GL_FACTOR_MIN_AMD 0x901C
#define GL_FACTOR_MAX_AMD 0x901D
#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F
#define GL_VIDEO_BUFFER_NV 0x9020
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021
#define GL_FIELD_UPPER_NV 0x9022
#define GL_FIELD_LOWER_NV 0x9023
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
#define GL_PARTIAL_SUCCESS_NV 0x902E
#define GL_SUCCESS_NV 0x902F
#define GL_FAILURE_NV 0x9030
#define GL_YCBYCR8_422_NV 0x9031
#define GL_YCBAYCR8A_4224_NV 0x9032
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_1D_EXT 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_EXT 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_3D_EXT 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_2D_RECT_EXT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_EXT 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_BUFFER_OES 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_OES 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_1D_EXT 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_EXT 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_3D_EXT 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_BUFFER_OES 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_OES 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#define GL_RGB10_A2UI 0x906F
#define GL_PATH_FORMAT_SVG_NV 0x9070
#define GL_PATH_FORMAT_PS_NV 0x9071
#define GL_STANDARD_FONT_NAME_NV 0x9072
#define GL_SYSTEM_FONT_NAME_NV 0x9073
#define GL_FILE_NAME_NV 0x9074
#define GL_PATH_STROKE_WIDTH_NV 0x9075
#define GL_PATH_END_CAPS_NV 0x9076
#define GL_PATH_INITIAL_END_CAP_NV 0x9077
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#define GL_PATH_JOIN_STYLE_NV 0x9079
#define GL_PATH_MITER_LIMIT_NV 0x907A
#define GL_PATH_DASH_CAPS_NV 0x907B
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#define GL_PATH_DASH_OFFSET_NV 0x907E
#define GL_PATH_CLIENT_LENGTH_NV 0x907F
#define GL_PATH_FILL_MODE_NV 0x9080
#define GL_PATH_FILL_MASK_NV 0x9081
#define GL_PATH_FILL_COVER_MODE_NV 0x9082
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#define GL_PATH_STROKE_MASK_NV 0x9084
#define GL_COUNT_UP_NV 0x9088
#define GL_COUNT_DOWN_NV 0x9089
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#define GL_CONVEX_HULL_NV 0x908B
#define GL_BOUNDING_BOX_NV 0x908D
#define GL_TRANSLATE_X_NV 0x908E
#define GL_TRANSLATE_Y_NV 0x908F
#define GL_TRANSLATE_2D_NV 0x9090
#define GL_TRANSLATE_3D_NV 0x9091
#define GL_AFFINE_2D_NV 0x9092
#define GL_AFFINE_3D_NV 0x9094
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#define GL_UTF8_NV 0x909A
#define GL_UTF16_NV 0x909B
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#define GL_PATH_COMMAND_COUNT_NV 0x909D
#define GL_PATH_COORD_COUNT_NV 0x909E
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#define GL_SQUARE_NV 0x90A3
#define GL_ROUND_NV 0x90A4
#define GL_TRIANGULAR_NV 0x90A5
#define GL_BEVEL_NV 0x90A6
#define GL_MITER_REVERT_NV 0x90A7
#define GL_MITER_TRUNCATE_NV 0x90A8
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#define GL_USE_MISSING_GLYPH_NV 0x90AA
#define GL_PATH_ERROR_POSITION_NV 0x90AB
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#define GL_ADJACENT_PAIRS_NV 0x90AE
#define GL_FIRST_TO_REST_NV 0x90AF
#define GL_PATH_GEN_MODE_NV 0x90B0
#define GL_PATH_GEN_COEFF_NV 0x90B1
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#define GL_MOVE_TO_RESETS_NV 0x90B5
#define GL_MOVE_TO_CONTINUES_NV 0x90B6
#define GL_PATH_STENCIL_FUNC_NV 0x90B7
#define GL_PATH_STENCIL_REF_NV 0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SYNC_X11_FENCE_EXT 0x90E1
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COLOR_ATTACHMENT_EXT 0x90F0
#define GL_MULTIVIEW_EXT 0x90F1
#define GL_MAX_MULTIVIEW_BUFFERS_EXT 0x90F2
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_EXT 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
#define GL_COMPUTE_PROGRAM_NV 0x90FB
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_OBJECT_TYPE_APPLE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_CONDITION_APPLE 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_STATUS_APPLE 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLAGS_APPLE 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FENCE_APPLE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNALED_APPLE 0x9118
#define GL_SIGNALED 0x9119
#define GL_SIGNALED_APPLE 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALREADY_SIGNALED_APPLE 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_EXPIRED_APPLE 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONDITION_SATISFIED_APPLE 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_WAIT_FAILED_APPLE 0x911D
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_FORMAT_EXT 0x912F
#define GL_SGX_PROGRAM_BINARY_IMG 0x9130
#define GL_RENDERBUFFER_SAMPLES_IMG 0x9133
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG 0x9134
#define GL_MAX_SAMPLES_IMG 0x9135
#define GL_TEXTURE_SAMPLES_IMG 0x9136
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG 0x9137
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG 0x9138
#define GL_CUBIC_IMG 0x9139
#define GL_CUBIC_MIPMAP_NEAREST_IMG 0x913A
#define GL_CUBIC_MIPMAP_LINEAR_IMG 0x913B
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG 0x913C
#define GL_NUM_DOWNSAMPLE_SCALES_IMG 0x913D
#define GL_DOWNSAMPLE_SCALES_IMG 0x913E
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG 0x913F
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
#define GL_BUFFER_OBJECT_EXT 0x9151
#define GL_DATA_BUFFER_AMD 0x9151
#define GL_PERFORMANCE_MONITOR_AMD 0x9152
#define GL_QUERY_OBJECT_AMD 0x9153
#define GL_QUERY_OBJECT_EXT 0x9153
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
#define GL_SAMPLER_OBJECT_AMD 0x9155
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_AMD 0x9192
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_EXT 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_EXT 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_EXT 0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_EXT 0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT 0x919A
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B
#define GL_MIN_LOD_WARNING_AMD 0x919C
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_EXT 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_OES 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_SIZE_EXT 0x919E
#define GL_TEXTURE_BUFFER_SIZE_OES 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES 0x919F
#define GL_STREAM_RASTERIZATION_AMD 0x91A0
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
#define GL_TEXTURE_SPARSE_ARB 0x91A6
#define GL_TEXTURE_SPARSE_EXT 0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
#define GL_VIRTUAL_PAGE_SIZE_INDEX_EXT 0x91A7
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
#define GL_NUM_VIRTUAL_PAGE_SIZES_EXT 0x91A8
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT 0x91A9
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
#define GL_NUM_SPARSE_LEVELS_EXT 0x91AA
#define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE
#define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0
#define GL_COMPLETION_STATUS_ARB 0x91B1
#define GL_COMPLETION_STATUS_KHR 0x91B1
#define GL_RENDERBUFFER_STORAGE_SAMPLES_AMD 0x91B2
#define GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD 0x91B3
#define GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD 0x91B4
#define GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD 0x91B5
#define GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B6
#define GL_SUPPORTED_MULTISAMPLE_MODES_AMD 0x91B7
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_FLOAT16_MAT2_AMD 0x91C5
#define GL_FLOAT16_MAT3_AMD 0x91C6
#define GL_FLOAT16_MAT4_AMD 0x91C7
#define GL_FLOAT16_MAT2x3_AMD 0x91C8
#define GL_FLOAT16_MAT2x4_AMD 0x91C9
#define GL_FLOAT16_MAT3x2_AMD 0x91CA
#define GL_FLOAT16_MAT3x4_AMD 0x91CB
#define GL_FLOAT16_MAT4x2_AMD 0x91CC
#define GL_FLOAT16_MAT4x3_AMD 0x91CD
#define GL_UNPACK_FLIP_Y_WEBGL 0x9240
#define GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL 0x9241
#define GL_CONTEXT_LOST_WEBGL 0x9242
#define GL_UNPACK_COLORSPACE_CONVERSION_WEBGL 0x9243
#define GL_BROWSER_DEFAULT_WEBGL 0x9244
#define GL_SHADER_BINARY_DMP 0x9250
#define GL_SMAPHS30_PROGRAM_BINARY_DMP 0x9251
#define GL_SMAPHS_PROGRAM_BINARY_DMP 0x9252
#define GL_DMP_PROGRAM_BINARY_DMP 0x9253
#define GL_GCCSO_SHADER_BINARY_FJ 0x9260
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_R11_EAC_OES 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_R11_EAC_OES 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RG11_EAC_OES 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SIGNED_RG11_EAC_OES 0x9273
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_ETC2_OES 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_ETC2_OES 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA8_ETC2_EAC_OES 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES 0x9279
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#define GL_BLEND_OVERLAP_NV 0x9281
#define GL_UNCORRELATED_NV 0x9282
#define GL_DISJOINT_NV 0x9283
#define GL_CONJOINT_NV 0x9284
#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
#define GL_SRC_NV 0x9286
#define GL_DST_NV 0x9287
#define GL_SRC_OVER_NV 0x9288
#define GL_DST_OVER_NV 0x9289
#define GL_SRC_IN_NV 0x928A
#define GL_DST_IN_NV 0x928B
#define GL_SRC_OUT_NV 0x928C
#define GL_DST_OUT_NV 0x928D
#define GL_SRC_ATOP_NV 0x928E
#define GL_DST_ATOP_NV 0x928F
#define GL_PLUS_NV 0x9291
#define GL_PLUS_DARKER_NV 0x9292
#define GL_MULTIPLY 0x9294
#define GL_MULTIPLY_KHR 0x9294
#define GL_MULTIPLY_NV 0x9294
#define GL_SCREEN 0x9295
#define GL_SCREEN_KHR 0x9295
#define GL_SCREEN_NV 0x9295
#define GL_OVERLAY 0x9296
#define GL_OVERLAY_KHR 0x9296
#define GL_OVERLAY_NV 0x9296
#define GL_DARKEN 0x9297
#define GL_DARKEN_KHR 0x9297
#define GL_DARKEN_NV 0x9297
#define GL_LIGHTEN 0x9298
#define GL_LIGHTEN_KHR 0x9298
#define GL_LIGHTEN_NV 0x9298
#define GL_COLORDODGE 0x9299
#define GL_COLORDODGE_KHR 0x9299
#define GL_COLORDODGE_NV 0x9299
#define GL_COLORBURN 0x929A
#define GL_COLORBURN_KHR 0x929A
#define GL_COLORBURN_NV 0x929A
#define GL_HARDLIGHT 0x929B
#define GL_HARDLIGHT_KHR 0x929B
#define GL_HARDLIGHT_NV 0x929B
#define GL_SOFTLIGHT 0x929C
#define GL_SOFTLIGHT_KHR 0x929C
#define GL_SOFTLIGHT_NV 0x929C
#define GL_DIFFERENCE 0x929E
#define GL_DIFFERENCE_KHR 0x929E
#define GL_DIFFERENCE_NV 0x929E
#define GL_MINUS_NV 0x929F
#define GL_EXCLUSION 0x92A0
#define GL_EXCLUSION_KHR 0x92A0
#define GL_EXCLUSION_NV 0x92A0
#define GL_CONTRAST_NV 0x92A1
#define GL_INVERT_RGB_NV 0x92A3
#define GL_LINEARDODGE_NV 0x92A4
#define GL_LINEARBURN_NV 0x92A5
#define GL_VIVIDLIGHT_NV 0x92A6
#define GL_LINEARLIGHT_NV 0x92A7
#define GL_PINLIGHT_NV 0x92A8
#define GL_HARDMIX_NV 0x92A9
#define GL_HSL_HUE 0x92AD
#define GL_HSL_HUE_KHR 0x92AD
#define GL_HSL_HUE_NV 0x92AD
#define GL_HSL_SATURATION 0x92AE
#define GL_HSL_SATURATION_KHR 0x92AE
#define GL_HSL_SATURATION_NV 0x92AE
#define GL_HSL_COLOR 0x92AF
#define GL_HSL_COLOR_KHR 0x92AF
#define GL_HSL_COLOR_NV 0x92AF
#define GL_HSL_LUMINOSITY 0x92B0
#define GL_HSL_LUMINOSITY_KHR 0x92B0
#define GL_HSL_LUMINOSITY_NV 0x92B0
#define GL_PLUS_CLAMPED_NV 0x92B1
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#define GL_MINUS_CLAMPED_NV 0x92B3
#define GL_INVERT_OVG_NV 0x92B4
#define GL_MAX_LGPU_GPUS_NVX 0x92BA
#define GL_MULTICAST_GPUS_NV 0x92BA
#define GL_PURGED_CONTEXT_RESET_NV 0x92BB
#define GL_PRIMITIVE_BOUNDING_BOX 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_EXT 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_OES 0x92BE
#define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD
#define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE
#define GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV 0x92DF
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_KHR 0x92E0
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_PER_PATCH_EXT 0x92E7
#define GL_IS_PER_PATCH_OES 0x92E7
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_OES 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_LOCATION_INDEX_EXT 0x930F
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_EXT 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_OES 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_RASTER_MULTISAMPLE_EXT 0x9327
#define GL_RASTER_SAMPLES_EXT 0x9328
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
#define GL_DEPTH_SAMPLES_NV 0x932D
#define GL_STENCIL_SAMPLES_NV 0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
#define GL_COVERAGE_MODULATION_TABLE_NV 0x9331
#define GL_COVERAGE_MODULATION_NV 0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
#define GL_WARP_SIZE_NV 0x9339
#define GL_WARPS_PER_SM_NV 0x933A
#define GL_SM_COUNT_NV 0x933B
#define GL_FILL_RECTANGLE_NV 0x933C
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D
#define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E
#define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
#define GL_VIEWPORT_SWIZZLE_X_NV 0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A
#define GL_VIEWPORT_SWIZZLE_W_NV 0x935B
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_ORIGIN_EXT 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_CLIP_DEPTH_MODE_EXT 0x935D
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_NEGATIVE_ONE_TO_ONE_EXT 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_ZERO_TO_ONE_EXT 0x935F
#define GL_CLEAR_TEXTURE 0x9365
#define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366
#define GL_TEXTURE_REDUCTION_MODE_EXT 0x9366
#define GL_WEIGHTED_AVERAGE_ARB 0x9367
#define GL_WEIGHTED_AVERAGE_EXT 0x9367
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
#define GL_FONT_UNAVAILABLE_NV 0x936A
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B
#define GL_STANDARD_FONT_FORMAT_NV 0x936C
#define GL_FRAGMENT_INPUT_NV 0x936D
#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
#define GL_MULTISAMPLES_NV 0x9371
#define GL_SUPERSAMPLE_SCALE_X_NV 0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373
#define GL_CONFORMANT_NV 0x9374
#define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
#define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
#define GL_REPRESENTATIVE_FRAGMENT_TEST_NV 0x937F
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
#define GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE 0x93A0
#define GL_BGRA8_EXT 0x93A1
#define GL_TEXTURE_USAGE_ANGLE 0x93A2
#define GL_FRAMEBUFFER_ATTACHMENT_ANGLE 0x93A3
#define GL_PACK_REVERSE_ROW_ORDER_ANGLE 0x93A4
#define GL_PROGRAM_BINARY_ANGLE 0x93A6
#define GL_COMPRESSED_RGBA_ASTC_4x4 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_3x3x3_OES 0x93C0
#define GL_COMPRESSED_RGBA_ASTC_4x3x3_OES 0x93C1
#define GL_COMPRESSED_RGBA_ASTC_4x4x3_OES 0x93C2
#define GL_COMPRESSED_RGBA_ASTC_4x4x4_OES 0x93C3
#define GL_COMPRESSED_RGBA_ASTC_5x4x4_OES 0x93C4
#define GL_COMPRESSED_RGBA_ASTC_5x5x4_OES 0x93C5
#define GL_COMPRESSED_RGBA_ASTC_5x5x5_OES 0x93C6
#define GL_COMPRESSED_RGBA_ASTC_6x5x5_OES 0x93C7
#define GL_COMPRESSED_RGBA_ASTC_6x6x5_OES 0x93C8
#define GL_COMPRESSED_RGBA_ASTC_6x6x6_OES 0x93C9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES 0x93E0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES 0x93E1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES 0x93E2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES 0x93E3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES 0x93E4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES 0x93E5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES 0x93E6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES 0x93E7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES 0x93E8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES 0x93E9
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG 0x93F0
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG 0x93F1
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
#define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0x9530
#define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0x9531
#define GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV 0x9536
#define GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV 0x9537
#define GL_MAX_MESH_OUTPUT_VERTICES_NV 0x9538
#define GL_MAX_MESH_OUTPUT_PRIMITIVES_NV 0x9539
#define GL_MAX_TASK_OUTPUT_COUNT_NV 0x953A
#define GL_MAX_MESH_WORK_GROUP_SIZE_NV 0x953B
#define GL_MAX_TASK_WORK_GROUP_SIZE_NV 0x953C
#define GL_MAX_DRAW_MESH_TASKS_COUNT_NV 0x953D
#define GL_MESH_WORK_GROUP_SIZE_NV 0x953E
#define GL_TASK_WORK_GROUP_SIZE_NV 0x953F
#define GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV 0x9540
#define GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV 0x9542
#define GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV 0x9543
#define GL_QUERY_RESOURCE_SYS_RESERVED_NV 0x9544
#define GL_QUERY_RESOURCE_TEXTURE_NV 0x9545
#define GL_QUERY_RESOURCE_RENDERBUFFER_NV 0x9546
#define GL_QUERY_RESOURCE_BUFFEROBJECT_NV 0x9547
#define GL_PER_GPU_STORAGE_NV 0x9548
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549
#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV 0x9550
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SPIR_V_BINARY 0x9552
#define GL_SPIR_V_BINARY_ARB 0x9552
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_SCISSOR_TEST_EXCLUSIVE_NV 0x9555
#define GL_SCISSOR_BOX_EXCLUSIVE_NV 0x9556
#define GL_MAX_MESH_VIEWS_NV 0x9557
#define GL_RENDER_GPU_MASK_NV 0x9558
#define GL_MESH_SHADER_NV 0x9559
#define GL_TASK_SHADER_NV 0x955A
#define GL_SHADING_RATE_IMAGE_BINDING_NV 0x955B
#define GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV 0x955C
#define GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV 0x955D
#define GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV 0x955E
#define GL_MAX_COARSE_FRAGMENT_SAMPLES_NV 0x955F
#define GL_SHADING_RATE_IMAGE_NV 0x9563
#define GL_SHADING_RATE_NO_INVOCATIONS_NV 0x9564
#define GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV 0x9565
#define GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV 0x9566
#define GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV 0x9567
#define GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV 0x9568
#define GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV 0x9569
#define GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV 0x956A
#define GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV 0x956B
#define GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV 0x956C
#define GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV 0x956D
#define GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV 0x956E
#define GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV 0x956F
#define GL_MESH_VERTICES_OUT_NV 0x9579
#define GL_MESH_PRIMITIVES_OUT_NV 0x957A
#define GL_MESH_OUTPUT_TYPE_NV 0x957B
#define GL_MESH_SUBROUTINE_NV 0x957C
#define GL_TASK_SUBROUTINE_NV 0x957D
#define GL_MESH_SUBROUTINE_UNIFORM_NV 0x957E
#define GL_TASK_SUBROUTINE_UNIFORM_NV 0x957F
#define GL_TEXTURE_TILING_EXT 0x9580
#define GL_DEDICATED_MEMORY_OBJECT_EXT 0x9581
#define GL_NUM_TILING_TYPES_EXT 0x9582
#define GL_TILING_TYPES_EXT 0x9583
#define GL_OPTIMAL_TILING_EXT 0x9584
#define GL_LINEAR_TILING_EXT 0x9585
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0x958B
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C
#define GL_LAYOUT_GENERAL_EXT 0x958D
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0x958E
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590
#define GL_LAYOUT_SHADER_READ_ONLY_EXT 0x9591
#define GL_LAYOUT_TRANSFER_SRC_EXT 0x9592
#define GL_LAYOUT_TRANSFER_DST_EXT 0x9593
#define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0x9594
#define GL_D3D12_FENCE_VALUE_EXT 0x9595
#define GL_NUM_DEVICE_UUIDS_EXT 0x9596
#define GL_DEVICE_UUID_EXT 0x9597
#define GL_DRIVER_UUID_EXT 0x9598
#define GL_DEVICE_LUID_EXT 0x9599
#define GL_DEVICE_NODE_MASK_EXT 0x959A
#define GL_PROTECTED_MEMORY_OBJECT_EXT 0x959B
#define GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV 0x959C
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV 0x959D
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV 0x959E
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV 0x959F
#define GL_REFERENCED_BY_MESH_SHADER_NV 0x95A0
#define GL_REFERENCED_BY_TASK_SHADER_NV 0x95A1
#define GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV 0x95A2
#define GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV 0x95A3
#define GL_ATTACHED_MEMORY_OBJECT_NV 0x95A4
#define GL_ATTACHED_MEMORY_OFFSET_NV 0x95A5
#define GL_MEMORY_ATTACHABLE_ALIGNMENT_NV 0x95A6
#define GL_MEMORY_ATTACHABLE_SIZE_NV 0x95A7
#define GL_MEMORY_ATTACHABLE_NV 0x95A8
#define GL_DETACHED_MEMORY_INCARNATION_NV 0x95A9
#define GL_DETACHED_TEXTURES_NV 0x95AA
#define GL_DETACHED_BUFFERS_NV 0x95AB
#define GL_MAX_DETACHED_TEXTURES_NV 0x95AC
#define GL_MAX_DETACHED_BUFFERS_NV 0x95AD
#define GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV 0x95AE
#define GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV 0x95AF
#define GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV 0x95B0
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_MAX_VIEWS_OVR 0x9631
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
#define GL_GS_SHADER_BINARY_MTK 0x9640
#define GL_GS_PROGRAM_BINARY_MTK 0x9641
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT 0x9650
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT 0x9651
#define GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT 0x9652
#define GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM 0x96A2
#define GL_SHARED_EDGE_NV 0xC0
#define GL_ROUNDED_RECT_NV 0xE8
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
#define GL_ROUNDED_RECT2_NV 0xEA
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
#define GL_ROUNDED_RECT4_NV 0xEC
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
#define GL_ROUNDED_RECT8_NV 0xEE
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
#define GL_RESTART_PATH_NV 0xF0
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#define GL_RECT_NV 0xF6
#define GL_RELATIVE_RECT_NV 0xF7
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#define GL_ARC_TO_NV 0xFE
#define GL_RELATIVE_ARC_TO_NV 0xFF
#define GL_TRACE_ALL_BITS_MESA 0xFFFF
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
#define GL_ALL_PIXELS_AMD 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFFull
#define GL_TIMEOUT_IGNORED_APPLE 0xFFFFFFFFFFFFFFFFull
#define GL_INVALID_INDEX 0xFFFFFFFFu
#define GL_LAYOUT_LINEAR_INTEL 1
#define GL_ONE 1
#define GL_TRUE 1
#define GL_VERSION_ES_CL_1_0 1
#define GL_VERSION_ES_CL_1_1 1
#define GL_VERSION_ES_CM_1_1 1
#define GL_CULL_VERTEX_IBM 103050
#define GL_ALL_STATIC_DATA_IBM 103060
#define GL_STATIC_VERTEX_ARRAY_IBM 103061
#define GL_VERTEX_ARRAY_LIST_IBM 103070
#define GL_NORMAL_ARRAY_LIST_IBM 103071
#define GL_COLOR_ARRAY_LIST_IBM 103072
#define GL_INDEX_ARRAY_LIST_IBM 103073
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
#define GL_UUID_SIZE_EXT 16
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
#define GL_LUID_SIZE_EXT 8

/* Version IDs */
#undef GL_VERSION_1_0
#define GL_VERSION_1_0 1
#undef GL_VERSION_1_1
#define GL_VERSION_1_1 2
#undef GL_VERSION_1_2
#define GL_VERSION_1_2 3
#undef GL_VERSION_1_3
#define GL_VERSION_1_3 4
#undef GL_VERSION_1_4
#define GL_VERSION_1_4 5
#undef GL_VERSION_1_5
#define GL_VERSION_1_5 6
#undef GL_VERSION_2_0
#define GL_VERSION_2_0 7
#undef GL_VERSION_2_1
#define GL_VERSION_2_1 8
#undef GL_VERSION_3_0
#define GL_VERSION_3_0 9
#undef GL_VERSION_3_1
#define GL_VERSION_3_1 10
#undef GL_VERSION_3_2
#define GL_VERSION_3_2 11
#undef GL_VERSION_3_3
#define GL_VERSION_3_3 12
#undef GL_VERSION_4_0
#define GL_VERSION_4_0 13
#undef GL_VERSION_4_1
#define GL_VERSION_4_1 14
#undef GL_VERSION_4_2
#define GL_VERSION_4_2 15
#undef GL_VERSION_4_3
#define GL_VERSION_4_3 16
#undef GL_VERSION_4_4
#define GL_VERSION_4_4 17
#undef GL_VERSION_4_5
#define GL_VERSION_4_5 18
#undef GL_VERSION_4_6
#define GL_VERSION_4_6 19
#undef GL_VERSION_ES_CM_1_0
#define GL_VERSION_ES_CM_1_0 20
#undef GL_ES_VERSION_2_0
#define GL_ES_VERSION_2_0 21
#undef GL_ES_VERSION_3_0
#define GL_ES_VERSION_3_0 22
#undef GL_ES_VERSION_3_1
#define GL_ES_VERSION_3_1 23
#undef GL_ES_VERSION_3_2
#define GL_ES_VERSION_3_2 24
#undef GL_SC_VERSION_2_0
#define GL_SC_VERSION_2_0 25

/* Extension IDs */
#undef GL_3DFX_multisample
#define GL_3DFX_multisample 26
#undef GL_3DFX_tbuffer
#define GL_3DFX_tbuffer 27
#undef GL_3DFX_texture_compression_FXT1
#define GL_3DFX_texture_compression_FXT1 28
#undef GL_AMD_blend_minmax_factor
#define GL_AMD_blend_minmax_factor 29
#undef GL_AMD_compressed_3DC_texture
#define GL_AMD_compressed_3DC_texture 30
#undef GL_AMD_compressed_ATC_texture
#define GL_AMD_compressed_ATC_texture 31
#undef GL_AMD_conservative_depth
#define GL_AMD_conservative_depth 32
#undef GL_AMD_debug_output
#define GL_AMD_debug_output 33
#undef GL_AMD_depth_clamp_separate
#define GL_AMD_depth_clamp_separate 34
#undef GL_AMD_draw_buffers_blend
#define GL_AMD_draw_buffers_blend 35
#undef GL_AMD_framebuffer_multisample_advanced
#define GL_AMD_framebuffer_multisample_advanced 36
#undef GL_AMD_framebuffer_sample_positions
#define GL_AMD_framebuffer_sample_positions 37
#undef GL_AMD_gcn_shader
#define GL_AMD_gcn_shader 38
#undef GL_AMD_gpu_shader_half_float
#define GL_AMD_gpu_shader_half_float 39
#undef GL_AMD_gpu_shader_int16
#define GL_AMD_gpu_shader_int16 40
#undef GL_AMD_gpu_shader_int64
#define GL_AMD_gpu_shader_int64 41
#undef GL_AMD_interleaved_elements
#define GL_AMD_interleaved_elements 42
#undef GL_AMD_multi_draw_indirect
#define GL_AMD_multi_draw_indirect 43
#undef GL_AMD_name_gen_delete
#define GL_AMD_name_gen_delete 44
#undef GL_AMD_occlusion_query_event
#define GL_AMD_occlusion_query_event 45
#undef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor 46
#undef GL_AMD_pinned_memory
#define GL_AMD_pinned_memory 47
#undef GL_AMD_program_binary_Z400
#define GL_AMD_program_binary_Z400 48
#undef GL_AMD_query_buffer_object
#define GL_AMD_query_buffer_object 49
#undef GL_AMD_sample_positions
#define GL_AMD_sample_positions 50
#undef GL_AMD_seamless_cubemap_per_texture
#define GL_AMD_seamless_cubemap_per_texture 51
#undef GL_AMD_shader_atomic_counter_ops
#define GL_AMD_shader_atomic_counter_ops 52
#undef GL_AMD_shader_ballot
#define GL_AMD_shader_ballot 53
#undef GL_AMD_shader_gpu_shader_half_float_fetch
#define GL_AMD_shader_gpu_shader_half_float_fetch 54
#undef GL_AMD_shader_image_load_store_lod
#define GL_AMD_shader_image_load_store_lod 55
#undef GL_AMD_shader_stencil_export
#define GL_AMD_shader_stencil_export 56
#undef GL_AMD_shader_trinary_minmax
#define GL_AMD_shader_trinary_minmax 57
#undef GL_AMD_shader_explicit_vertex_parameter
#define GL_AMD_shader_explicit_vertex_parameter 58
#undef GL_AMD_sparse_texture
#define GL_AMD_sparse_texture 59
#undef GL_AMD_stencil_operation_extended
#define GL_AMD_stencil_operation_extended 60
#undef GL_AMD_texture_gather_bias_lod
#define GL_AMD_texture_gather_bias_lod 61
#undef GL_AMD_texture_texture4
#define GL_AMD_texture_texture4 62
#undef GL_AMD_transform_feedback3_lines_triangles
#define GL_AMD_transform_feedback3_lines_triangles 63
#undef GL_AMD_transform_feedback4
#define GL_AMD_transform_feedback4 64
#undef GL_AMD_vertex_shader_layer
#define GL_AMD_vertex_shader_layer 65
#undef GL_AMD_vertex_shader_tessellator
#define GL_AMD_vertex_shader_tessellator 66
#undef GL_AMD_vertex_shader_viewport_index
#define GL_AMD_vertex_shader_viewport_index 67
#undef GL_ANDROID_extension_pack_es31a
#define GL_ANDROID_extension_pack_es31a 68
#undef GL_ANGLE_depth_texture
#define GL_ANGLE_depth_texture 69
#undef GL_ANGLE_framebuffer_blit
#define GL_ANGLE_framebuffer_blit 70
#undef GL_ANGLE_framebuffer_multisample
#define GL_ANGLE_framebuffer_multisample 71
#undef GL_ANGLE_instanced_arrays
#define GL_ANGLE_instanced_arrays 72
#undef GL_ANGLE_pack_reverse_row_order
#define GL_ANGLE_pack_reverse_row_order 73
#undef GL_ANGLE_program_binary
#define GL_ANGLE_program_binary 74
#undef GL_ANGLE_texture_compression_dxt3
#define GL_ANGLE_texture_compression_dxt3 75
#undef GL_ANGLE_texture_compression_dxt5
#define GL_ANGLE_texture_compression_dxt5 76
#undef GL_ANGLE_texture_usage
#define GL_ANGLE_texture_usage 77
#undef GL_ANGLE_translated_shader_source
#define GL_ANGLE_translated_shader_source 78
#undef GL_APPLE_aux_depth_stencil
#define GL_APPLE_aux_depth_stencil 79
#undef GL_APPLE_client_storage
#define GL_APPLE_client_storage 80
#undef GL_APPLE_clip_distance
#define GL_APPLE_clip_distance 81
#undef GL_APPLE_color_buffer_packed_float
#define GL_APPLE_color_buffer_packed_float 82
#undef GL_APPLE_copy_texture_levels
#define GL_APPLE_copy_texture_levels 83
#undef GL_APPLE_element_array
#define GL_APPLE_element_array 84
#undef GL_APPLE_fence
#define GL_APPLE_fence 85
#undef GL_APPLE_float_pixels
#define GL_APPLE_float_pixels 86
#undef GL_APPLE_flush_buffer_range
#define GL_APPLE_flush_buffer_range 87
#undef GL_APPLE_framebuffer_multisample
#define GL_APPLE_framebuffer_multisample 88
#undef GL_APPLE_object_purgeable
#define GL_APPLE_object_purgeable 89
#undef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422 90
#undef GL_APPLE_row_bytes
#define GL_APPLE_row_bytes 91
#undef GL_APPLE_specular_vector
#define GL_APPLE_specular_vector 92
#undef GL_APPLE_sync
#define GL_APPLE_sync 93
#undef GL_APPLE_texture_2D_limited_npot
#define GL_APPLE_texture_2D_limited_npot 94
#undef GL_APPLE_texture_format_BGRA8888
#define GL_APPLE_texture_format_BGRA8888 95
#undef GL_APPLE_texture_max_level
#define GL_APPLE_texture_max_level 96
#undef GL_APPLE_texture_packed_float
#define GL_APPLE_texture_packed_float 97
#undef GL_APPLE_texture_range
#define GL_APPLE_texture_range 98
#undef GL_APPLE_transform_hint
#define GL_APPLE_transform_hint 99
#undef GL_APPLE_vertex_array_object
#define GL_APPLE_vertex_array_object 100
#undef GL_APPLE_vertex_array_range
#define GL_APPLE_vertex_array_range 101
#undef GL_APPLE_vertex_program_evaluators
#define GL_APPLE_vertex_program_evaluators 102
#undef GL_APPLE_ycbcr_422
#define GL_APPLE_ycbcr_422 103
#undef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 104
#undef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 105
#undef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 106
#undef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 107
#undef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 108
#undef GL_ARB_base_instance
#define GL_ARB_base_instance 109
#undef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 110
#undef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 111
#undef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 112
#undef GL_ARB_cl_event
#define GL_ARB_cl_event 113
#undef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 114
#undef GL_ARB_clear_texture
#define GL_ARB_clear_texture 115
#undef GL_ARB_clip_control
#define GL_ARB_clip_control 116
#undef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float 117
#undef GL_ARB_compatibility
#define GL_ARB_compatibility 118
#undef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 119
#undef GL_ARB_compute_shader
#define GL_ARB_compute_shader 120
#undef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 121
#undef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 122
#undef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 123
#undef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 124
#undef GL_ARB_copy_image
#define GL_ARB_copy_image 125
#undef GL_ARB_cull_distance
#define GL_ARB_cull_distance 126
#undef GL_ARB_debug_output
#define GL_ARB_debug_output 127
#undef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 128
#undef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 129
#undef GL_ARB_depth_texture
#define GL_ARB_depth_texture 130
#undef GL_ARB_derivative_control
#define GL_ARB_derivative_control 131
#undef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 132
#undef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers 133
#undef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 134
#undef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 135
#undef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 136
#undef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 137
#undef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 138
#undef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 139
#undef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 140
#undef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 141
#undef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 142
#undef GL_ARB_fragment_program
#define GL_ARB_fragment_program 143
#undef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow 144
#undef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader 145
#undef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 146
#undef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 147
#undef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 148
#undef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 149
#undef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 150
#undef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 151
#undef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 152
#undef GL_ARB_gl_spirv
#define GL_ARB_gl_spirv 153
#undef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 154
#undef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 155
#undef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 156
#undef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel 157
#undef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 158
#undef GL_ARB_imaging
#define GL_ARB_imaging 159
#undef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 160
#undef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 161
#undef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 162
#undef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 163
#undef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 164
#undef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 165
#undef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 166
#undef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette 167
#undef GL_ARB_multi_bind
#define GL_ARB_multi_bind 168
#undef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 169
#undef GL_ARB_multisample
#define GL_ARB_multisample 170
#undef GL_ARB_multitexture
#define GL_ARB_multitexture 171
#undef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query 172
#undef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 173
#undef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 174
#undef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 175
#undef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 176
#undef GL_ARB_point_parameters
#define GL_ARB_point_parameters 177
#undef GL_ARB_point_sprite
#define GL_ARB_point_sprite 178
#undef GL_ARB_polygon_offset_clamp
#define GL_ARB_polygon_offset_clamp 179
#undef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 180
#undef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 181
#undef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 182
#undef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 183
#undef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 184
#undef GL_ARB_robustness
#define GL_ARB_robustness 185
#undef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation 186
#undef GL_ARB_sample_locations
#define GL_ARB_sample_locations 187
#undef GL_ARB_sample_shading
#define GL_ARB_sample_shading 188
#undef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 189
#undef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 190
#undef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 191
#undef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 192
#undef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 193
#undef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 194
#undef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 195
#undef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 196
#undef GL_ARB_shader_clock
#define GL_ARB_shader_clock 197
#undef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 198
#undef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 199
#undef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 200
#undef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 201
#undef GL_ARB_shader_objects
#define GL_ARB_shader_objects 202
#undef GL_ARB_shader_precision
#define GL_ARB_shader_precision 203
#undef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 204
#undef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 205
#undef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 206
#undef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 207
#undef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod 208
#undef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 209
#undef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100 210
#undef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 211
#undef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 212
#undef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 213
#undef GL_ARB_shadow
#define GL_ARB_shadow 214
#undef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient 215
#undef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 216
#undef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 217
#undef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 218
#undef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 219
#undef GL_ARB_spirv_extensions
#define GL_ARB_spirv_extensions 220
#undef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 221
#undef GL_ARB_sync
#define GL_ARB_sync 222
#undef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 223
#undef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 224
#undef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 225
#undef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 226
#undef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 227
#undef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 228
#undef GL_ARB_texture_compression
#define GL_ARB_texture_compression 229
#undef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 230
#undef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 231
#undef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map 232
#undef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 233
#undef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add 234
#undef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine 235
#undef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar 236
#undef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3 237
#undef GL_ARB_texture_filter_anisotropic
#define GL_ARB_texture_filter_anisotropic 238
#undef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 239
#undef GL_ARB_texture_float
#define GL_ARB_texture_float 240
#undef GL_ARB_texture_gather
#define GL_ARB_texture_gather 241
#undef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 242
#undef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 243
#undef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 244
#undef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 245
#undef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 246
#undef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 247
#undef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle 248
#undef GL_ARB_texture_rg
#define GL_ARB_texture_rg 249
#undef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 250
#undef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 251
#undef GL_ARB_texture_storage
#define GL_ARB_texture_storage 252
#undef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 253
#undef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 254
#undef GL_ARB_texture_view
#define GL_ARB_texture_view 255
#undef GL_ARB_timer_query
#define GL_ARB_timer_query 256
#undef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 257
#undef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 258
#undef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 259
#undef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 260
#undef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix 261
#undef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 262
#undef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 263
#undef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 264
#undef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 265
#undef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 266
#undef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend 267
#undef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object 268
#undef GL_ARB_vertex_program
#define GL_ARB_vertex_program 269
#undef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader 270
#undef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 271
#undef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 272
#undef GL_ARB_viewport_array
#define GL_ARB_viewport_array 273
#undef GL_ARB_window_pos
#define GL_ARB_window_pos 274
#undef GL_ARM_mali_program_binary
#define GL_ARM_mali_program_binary 275
#undef GL_ARM_mali_shader_binary
#define GL_ARM_mali_shader_binary 276
#undef GL_ARM_rgba8
#define GL_ARM_rgba8 277
#undef GL_ARM_shader_framebuffer_fetch
#define GL_ARM_shader_framebuffer_fetch 278
#undef GL_ARM_shader_framebuffer_fetch_depth_stencil
#define GL_ARM_shader_framebuffer_fetch_depth_stencil 279
#undef GL_ATI_draw_buffers
#define GL_ATI_draw_buffers 280
#undef GL_ATI_element_array
#define GL_ATI_element_array 281
#undef GL_ATI_envmap_bumpmap
#define GL_ATI_envmap_bumpmap 282
#undef GL_ATI_fragment_shader
#define GL_ATI_fragment_shader 283
#undef GL_ATI_map_object_buffer
#define GL_ATI_map_object_buffer 284
#undef GL_ATI_meminfo
#define GL_ATI_meminfo 285
#undef GL_ATI_pixel_format_float
#define GL_ATI_pixel_format_float 286
#undef GL_ATI_pn_triangles
#define GL_ATI_pn_triangles 287
#undef GL_ATI_separate_stencil
#define GL_ATI_separate_stencil 288
#undef GL_ATI_text_fragment_shader
#define GL_ATI_text_fragment_shader 289
#undef GL_ATI_texture_env_combine3
#define GL_ATI_texture_env_combine3 290
#undef GL_ATI_texture_float
#define GL_ATI_texture_float 291
#undef GL_ATI_texture_mirror_once
#define GL_ATI_texture_mirror_once 292
#undef GL_ATI_vertex_array_object
#define GL_ATI_vertex_array_object 293
#undef GL_ATI_vertex_attrib_array_object
#define GL_ATI_vertex_attrib_array_object 294
#undef GL_ATI_vertex_streams
#define GL_ATI_vertex_streams 295
#undef GL_DMP_program_binary
#define GL_DMP_program_binary 296
#undef GL_DMP_shader_binary
#define GL_DMP_shader_binary 297
#undef GL_EXT_422_pixels
#define GL_EXT_422_pixels 298
#undef GL_EXT_EGL_image_array
#define GL_EXT_EGL_image_array 299
#undef GL_EXT_EGL_image_storage
#define GL_EXT_EGL_image_storage 300
#undef GL_EXT_YUV_target
#define GL_EXT_YUV_target 301
#undef GL_EXT_abgr
#define GL_EXT_abgr 302
#undef GL_EXT_base_instance
#define GL_EXT_base_instance 303
#undef GL_EXT_bgra
#define GL_EXT_bgra 304
#undef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform 305
#undef GL_EXT_blend_color
#define GL_EXT_blend_color 306
#undef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate 307
#undef GL_EXT_blend_func_extended
#define GL_EXT_blend_func_extended 308
#undef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate 309
#undef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op 310
#undef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax 311
#undef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract 312
#undef GL_EXT_buffer_storage
#define GL_EXT_buffer_storage 313
#undef GL_EXT_clear_texture
#define GL_EXT_clear_texture 314
#undef GL_EXT_clip_control
#define GL_EXT_clip_control 315
#undef GL_EXT_clip_cull_distance
#define GL_EXT_clip_cull_distance 316
#undef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint 317
#undef GL_EXT_cmyka
#define GL_EXT_cmyka 318
#undef GL_EXT_color_buffer_float
#define GL_EXT_color_buffer_float 319
#undef GL_EXT_color_buffer_half_float
#define GL_EXT_color_buffer_half_float 320
#undef GL_EXT_color_subtable
#define GL_EXT_color_subtable 321
#undef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array 322
#undef GL_EXT_conservative_depth
#define GL_EXT_conservative_depth 323
#undef GL_EXT_convolution
#define GL_EXT_convolution 324
#undef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame 325
#undef GL_EXT_copy_image
#define GL_EXT_copy_image 326
#undef GL_EXT_copy_texture
#define GL_EXT_copy_texture 327
#undef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex 328
#undef GL_EXT_debug_label
#define GL_EXT_debug_label 329
#undef GL_EXT_debug_marker
#define GL_EXT_debug_marker 330
#undef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test 331
#undef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 332
#undef GL_EXT_discard_framebuffer
#define GL_EXT_discard_framebuffer 333
#undef GL_EXT_disjoint_timer_query
#define GL_EXT_disjoint_timer_query 334
#undef GL_EXT_draw_buffers
#define GL_EXT_draw_buffers 335
#undef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2 336
#undef GL_EXT_draw_buffers_indexed
#define GL_EXT_draw_buffers_indexed 337
#undef GL_EXT_draw_elements_base_vertex
#define GL_EXT_draw_elements_base_vertex 338
#undef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 339
#undef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements 340
#undef GL_EXT_draw_transform_feedback
#define GL_EXT_draw_transform_feedback 341
#undef GL_EXT_external_buffer
#define GL_EXT_external_buffer 342
#undef GL_EXT_float_blend
#define GL_EXT_float_blend 343
#undef GL_EXT_fog_coord
#define GL_EXT_fog_coord 344
#undef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit 345
#undef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample 346
#undef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled 347
#undef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object 348
#undef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB 349
#undef GL_EXT_geometry_point_size
#define GL_EXT_geometry_point_size 350
#undef GL_EXT_geometry_shader
#define GL_EXT_geometry_shader 351
#undef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4 352
#undef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters 353
#undef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4 354
#undef GL_EXT_gpu_shader5
#define GL_EXT_gpu_shader5 355
#undef GL_EXT_histogram
#define GL_EXT_histogram 356
#undef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats 357
#undef GL_EXT_index_func
#define GL_EXT_index_func 358
#undef GL_EXT_index_material
#define GL_EXT_index_material 359
#undef GL_EXT_index_texture
#define GL_EXT_index_texture 360
#undef GL_EXT_instanced_arrays
#define GL_EXT_instanced_arrays 361
#undef GL_EXT_light_texture
#define GL_EXT_light_texture 362
#undef GL_EXT_map_buffer_range
#define GL_EXT_map_buffer_range 363
#undef GL_EXT_memory_object
#define GL_EXT_memory_object 364
#undef GL_EXT_memory_object_fd
#define GL_EXT_memory_object_fd 365
#undef GL_EXT_memory_object_win32
#define GL_EXT_memory_object_win32 366
#undef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute 367
#undef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays 368
#undef GL_EXT_multi_draw_indirect
#define GL_EXT_multi_draw_indirect 369
#undef GL_EXT_multisample
#define GL_EXT_multisample 370
#undef GL_EXT_multisampled_compatibility
#define GL_EXT_multisampled_compatibility 371
#undef GL_EXT_multisampled_render_to_texture
#define GL_EXT_multisampled_render_to_texture 372
#undef GL_EXT_multiview_draw_buffers
#define GL_EXT_multiview_draw_buffers 373
#undef GL_EXT_occlusion_query_boolean
#define GL_EXT_occlusion_query_boolean 374
#undef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil 375
#undef GL_EXT_packed_float
#define GL_EXT_packed_float 376
#undef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels 377
#undef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture 378
#undef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object 379
#undef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform 380
#undef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table 381
#undef GL_EXT_point_parameters
#define GL_EXT_point_parameters 382
#undef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset 383
#undef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 384
#undef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 385
#undef GL_EXT_primitive_bounding_box
#define GL_EXT_primitive_bounding_box 386
#undef GL_EXT_protected_textures
#define GL_EXT_protected_textures 387
#undef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex 388
#undef GL_EXT_pvrtc_sRGB
#define GL_EXT_pvrtc_sRGB 389
#undef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 390
#undef GL_EXT_read_format_bgra
#define GL_EXT_read_format_bgra 391
#undef GL_EXT_render_snorm
#define GL_EXT_render_snorm 392
#undef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal 393
#undef GL_EXT_robustness
#define GL_EXT_robustness 394
#undef GL_EXT_semaphore
#define GL_EXT_semaphore 395
#undef GL_EXT_semaphore_fd
#define GL_EXT_semaphore_fd 396
#undef GL_EXT_semaphore_win32
#define GL_EXT_semaphore_win32 397
#undef GL_EXT_sRGB
#define GL_EXT_sRGB 398
#undef GL_EXT_sRGB_write_control
#define GL_EXT_sRGB_write_control 399
#undef GL_EXT_secondary_color
#define GL_EXT_secondary_color 400
#undef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 401
#undef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color 402
#undef GL_EXT_shader_framebuffer_fetch
#define GL_EXT_shader_framebuffer_fetch 403
#undef GL_EXT_shader_framebuffer_fetch_non_coherent
#define GL_EXT_shader_framebuffer_fetch_non_coherent 404
#undef GL_EXT_shader_group_vote
#define GL_EXT_shader_group_vote 405
#undef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted 406
#undef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store 407
#undef GL_EXT_shader_implicit_conversions
#define GL_EXT_shader_implicit_conversions 408
#undef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 409
#undef GL_EXT_shader_io_blocks
#define GL_EXT_shader_io_blocks 410
#undef GL_EXT_shader_non_constant_global_initializers
#define GL_EXT_shader_non_constant_global_initializers 411
#undef GL_EXT_shader_pixel_local_storage
#define GL_EXT_shader_pixel_local_storage 412
#undef GL_EXT_shader_pixel_local_storage2
#define GL_EXT_shader_pixel_local_storage2 413
#undef GL_EXT_shader_texture_lod
#define GL_EXT_shader_texture_lod 414
#undef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs 415
#undef GL_EXT_shadow_samplers
#define GL_EXT_shadow_samplers 416
#undef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette 417
#undef GL_EXT_sparse_texture
#define GL_EXT_sparse_texture 418
#undef GL_EXT_sparse_texture2
#define GL_EXT_sparse_texture2 419
#undef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag 420
#undef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side 421
#undef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap 422
#undef GL_EXT_subtexture
#define GL_EXT_subtexture 423
#undef GL_EXT_tessellation_point_size
#define GL_EXT_tessellation_point_size 424
#undef GL_EXT_tessellation_shader
#define GL_EXT_tessellation_shader 425
#undef GL_EXT_texture
#define GL_EXT_texture 426
#undef GL_EXT_texture3D
#define GL_EXT_texture3D 427
#undef GL_EXT_texture_array
#define GL_EXT_texture_array 428
#undef GL_EXT_texture_border_clamp
#define GL_EXT_texture_border_clamp 429
#undef GL_EXT_texture_buffer
#define GL_EXT_texture_buffer 430
#undef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object 431
#undef GL_EXT_texture_compression_astc_decode_mode
#define GL_EXT_texture_compression_astc_decode_mode 432
#undef GL_EXT_texture_compression_bptc
#define GL_EXT_texture_compression_bptc 433
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 434
#undef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc 435
#undef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc 436
#undef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 437
#undef GL_EXT_texture_compression_s3tc_srgb
#define GL_EXT_texture_compression_s3tc_srgb 438
#undef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map 439
#undef GL_EXT_texture_cube_map_array
#define GL_EXT_texture_cube_map_array 440
#undef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add 441
#undef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine 442
#undef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3 443
#undef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic 444
#undef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 445
#undef GL_EXT_texture_format_BGRA8888
#define GL_EXT_texture_format_BGRA8888 446
#undef GL_EXT_texture_format_sRGB_override
#define GL_EXT_texture_format_sRGB_override 447
#undef GL_EXT_texture_integer
#define GL_EXT_texture_integer 448
#undef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias 449
#undef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp 450
#undef GL_EXT_texture_mirror_clamp_to_edge
#define GL_EXT_texture_mirror_clamp_to_edge 451
#undef GL_EXT_texture_norm16
#define GL_EXT_texture_norm16 452
#undef GL_EXT_texture_object
#define GL_EXT_texture_object 453
#undef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal 454
#undef GL_EXT_texture_rg
#define GL_EXT_texture_rg 455
#undef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB 456
#undef GL_EXT_texture_sRGB_R8
#define GL_EXT_texture_sRGB_R8 457
#undef GL_EXT_texture_sRGB_RG8
#define GL_EXT_texture_sRGB_RG8 458
#undef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 459
#undef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent 460
#undef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm 461
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 462
#undef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle 463
#undef GL_EXT_texture_type_2_10_10_10_REV
#define GL_EXT_texture_type_2_10_10_10_REV 464
#undef GL_EXT_texture_view
#define GL_EXT_texture_view 465
#undef GL_EXT_timer_query
#define GL_EXT_timer_query 466
#undef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback 467
#undef GL_EXT_unpack_subimage
#define GL_EXT_unpack_subimage 468
#undef GL_EXT_vertex_array
#define GL_EXT_vertex_array 469
#undef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra 470
#undef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit 471
#undef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader 472
#undef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting 473
#undef GL_EXT_win32_keyed_mutex
#define GL_EXT_win32_keyed_mutex 474
#undef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 475
#undef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object 476
#undef GL_FJ_shader_binary_GCCSO
#define GL_FJ_shader_binary_GCCSO 477
#undef GL_GREMEDY_frame_terminator
#define GL_GREMEDY_frame_terminator 478
#undef GL_GREMEDY_string_marker
#define GL_GREMEDY_string_marker 479
#undef GL_HP_convolution_border_modes
#define GL_HP_convolution_border_modes 480
#undef GL_HP_image_transform
#define GL_HP_image_transform 481
#undef GL_HP_occlusion_test
#define GL_HP_occlusion_test 482
#undef GL_HP_texture_lighting
#define GL_HP_texture_lighting 483
#undef GL_IBM_cull_vertex
#define GL_IBM_cull_vertex 484
#undef GL_IBM_multimode_draw_arrays
#define GL_IBM_multimode_draw_arrays 485
#undef GL_IBM_rasterpos_clip
#define GL_IBM_rasterpos_clip 486
#undef GL_IBM_static_data
#define GL_IBM_static_data 487
#undef GL_IBM_texture_mirrored_repeat
#define GL_IBM_texture_mirrored_repeat 488
#undef GL_IBM_vertex_array_lists
#define GL_IBM_vertex_array_lists 489
#undef GL_IMG_bindless_texture
#define GL_IMG_bindless_texture 490
#undef GL_IMG_framebuffer_downsample
#define GL_IMG_framebuffer_downsample 491
#undef GL_IMG_multisampled_render_to_texture
#define GL_IMG_multisampled_render_to_texture 492
#undef GL_IMG_program_binary
#define GL_IMG_program_binary 493
#undef GL_IMG_read_format
#define GL_IMG_read_format 494
#undef GL_IMG_shader_binary
#define GL_IMG_shader_binary 495
#undef GL_IMG_texture_compression_pvrtc
#define GL_IMG_texture_compression_pvrtc 496
#undef GL_IMG_texture_compression_pvrtc2
#define GL_IMG_texture_compression_pvrtc2 497
#undef GL_IMG_texture_env_enhanced_fixed_function
#define GL_IMG_texture_env_enhanced_fixed_function 498
#undef GL_IMG_texture_filter_cubic
#define GL_IMG_texture_filter_cubic 499
#undef GL_IMG_user_clip_plane
#define GL_IMG_user_clip_plane 500
#undef GL_INGR_blend_func_separate
#define GL_INGR_blend_func_separate 501
#undef GL_INGR_color_clamp
#define GL_INGR_color_clamp 502
#undef GL_INGR_interlace_read
#define GL_INGR_interlace_read 503
#undef GL_INTEL_conservative_rasterization
#define GL_INTEL_conservative_rasterization 504
#undef GL_INTEL_fragment_shader_ordering
#define GL_INTEL_fragment_shader_ordering 505
#undef GL_INTEL_framebuffer_CMAA
#define GL_INTEL_framebuffer_CMAA 506
#undef GL_INTEL_map_texture
#define GL_INTEL_map_texture 507
#undef GL_INTEL_blackhole_render
#define GL_INTEL_blackhole_render 508
#undef GL_INTEL_parallel_arrays
#define GL_INTEL_parallel_arrays 509
#undef GL_INTEL_performance_query
#define GL_INTEL_performance_query 510
#undef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 511
#undef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 512
#undef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 513
#undef GL_KHR_debug
#define GL_KHR_debug 514
#undef GL_KHR_no_error
#define GL_KHR_no_error 515
#undef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 516
#undef GL_KHR_robustness
#define GL_KHR_robustness 517
#undef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 518
#undef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 519
#undef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 520
#undef GL_KHR_parallel_shader_compile
#define GL_KHR_parallel_shader_compile 521
#undef GL_MESAX_texture_stack
#define GL_MESAX_texture_stack 522
#undef GL_MESA_framebuffer_flip_y
#define GL_MESA_framebuffer_flip_y 523
#undef GL_MESA_pack_invert
#define GL_MESA_pack_invert 524
#undef GL_MESA_program_binary_formats
#define GL_MESA_program_binary_formats 525
#undef GL_MESA_resize_buffers
#define GL_MESA_resize_buffers 526
#undef GL_MESA_shader_integer_functions
#define GL_MESA_shader_integer_functions 527
#undef GL_MESA_tile_raster_order
#define GL_MESA_tile_raster_order 528
#undef GL_MESA_window_pos
#define GL_MESA_window_pos 529
#undef GL_MESA_ycbcr_texture
#define GL_MESA_ycbcr_texture 530
#undef GL_NVX_blend_equation_advanced_multi_draw_buffers
#define GL_NVX_blend_equation_advanced_multi_draw_buffers 531
#undef GL_NVX_cross_process_interop
#define GL_NVX_cross_process_interop 532
#undef GL_NVX_conditional_render
#define GL_NVX_conditional_render 533
#undef GL_NVX_gpu_memory_info
#define GL_NVX_gpu_memory_info 534
#undef GL_NVX_linked_gpu_multicast
#define GL_NVX_linked_gpu_multicast 535
#undef GL_NV_alpha_to_coverage_dither_control
#define GL_NV_alpha_to_coverage_dither_control 536
#undef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect 537
#undef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count 538
#undef GL_NV_bindless_texture
#define GL_NV_bindless_texture 539
#undef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced 540
#undef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent 541
#undef GL_NV_blend_minmax_factor
#define GL_NV_blend_minmax_factor 542
#undef GL_NV_blend_square
#define GL_NV_blend_square 543
#undef GL_NV_clip_space_w_scaling
#define GL_NV_clip_space_w_scaling 544
#undef GL_NV_command_list
#define GL_NV_command_list 545
#undef GL_NV_compute_program5
#define GL_NV_compute_program5 546
#undef GL_NV_compute_shader_derivatives
#define GL_NV_compute_shader_derivatives 547
#undef GL_NV_conditional_render
#define GL_NV_conditional_render 548
#undef GL_NV_conservative_raster
#define GL_NV_conservative_raster 549
#undef GL_NV_conservative_raster_dilate
#define GL_NV_conservative_raster_dilate 550
#undef GL_NV_conservative_raster_pre_snap
#define GL_NV_conservative_raster_pre_snap 551
#undef GL_NV_conservative_raster_pre_snap_triangles
#define GL_NV_conservative_raster_pre_snap_triangles 552
#undef GL_NV_conservative_raster_underestimation
#define GL_NV_conservative_raster_underestimation 553
#undef GL_NV_copy_buffer
#define GL_NV_copy_buffer 554
#undef GL_NV_copy_depth_to_color
#define GL_NV_copy_depth_to_color 555
#undef GL_NV_copy_image
#define GL_NV_copy_image 556
#undef GL_NV_coverage_sample
#define GL_NV_coverage_sample 557
#undef GL_NV_deep_texture3D
#define GL_NV_deep_texture3D 558
#undef GL_NV_depth_buffer_float
#define GL_NV_depth_buffer_float 559
#undef GL_NV_depth_clamp
#define GL_NV_depth_clamp 560
#undef GL_NV_depth_nonlinear
#define GL_NV_depth_nonlinear 561
#undef GL_NV_draw_buffers
#define GL_NV_draw_buffers 562
#undef GL_NV_draw_instanced
#define GL_NV_draw_instanced 563
#undef GL_NV_draw_texture
#define GL_NV_draw_texture 564
#undef GL_NV_draw_vulkan_image
#define GL_NV_draw_vulkan_image 565
#undef GL_NV_evaluators
#define GL_NV_evaluators 566
#undef GL_NV_explicit_attrib_location
#define GL_NV_explicit_attrib_location 567
#undef GL_NV_explicit_multisample
#define GL_NV_explicit_multisample 568
#undef GL_NV_fbo_color_attachments
#define GL_NV_fbo_color_attachments 569
#undef GL_NV_fence
#define GL_NV_fence 570
#undef GL_NV_fill_rectangle
#define GL_NV_fill_rectangle 571
#undef GL_NV_float_buffer
#define GL_NV_float_buffer 572
#undef GL_NV_fog_distance
#define GL_NV_fog_distance 573
#undef GL_NV_fragment_coverage_to_color
#define GL_NV_fragment_coverage_to_color 574
#undef GL_NV_fragment_program
#define GL_NV_fragment_program 575
#undef GL_NV_fragment_program2
#define GL_NV_fragment_program2 576
#undef GL_NV_fragment_program4
#define GL_NV_fragment_program4 577
#undef GL_NV_fragment_program_option
#define GL_NV_fragment_program_option 578
#undef GL_NV_fragment_shader_barycentric
#define GL_NV_fragment_shader_barycentric 579
#undef GL_NV_fragment_shader_interlock
#define GL_NV_fragment_shader_interlock 580
#undef GL_NV_framebuffer_blit
#define GL_NV_framebuffer_blit 581
#undef GL_NV_framebuffer_mixed_samples
#define GL_NV_framebuffer_mixed_samples 582
#undef GL_NV_framebuffer_multisample
#define GL_NV_framebuffer_multisample 583
#undef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage 584
#undef GL_NV_generate_mipmap_sRGB
#define GL_NV_generate_mipmap_sRGB 585
#undef GL_NV_geometry_program4
#define GL_NV_geometry_program4 586
#undef GL_NV_geometry_shader4
#define GL_NV_geometry_shader4 587
#undef GL_NV_geometry_shader_passthrough
#define GL_NV_geometry_shader_passthrough 588
#undef GL_NV_gpu_program4
#define GL_NV_gpu_program4 589
#undef GL_NV_gpu_program5
#define GL_NV_gpu_program5 590
#undef GL_NV_gpu_program5_mem_extended
#define GL_NV_gpu_program5_mem_extended 591
#undef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5 592
#undef GL_NV_half_float
#define GL_NV_half_float 593
#undef GL_NV_image_formats
#define GL_NV_image_formats 594
#undef GL_NV_instanced_arrays
#define GL_NV_instanced_arrays 595
#undef GL_NV_internalformat_sample_query
#define GL_NV_internalformat_sample_query 596
#undef GL_NV_light_max_exponent
#define GL_NV_light_max_exponent 597
#undef GL_NV_gpu_multicast
#define GL_NV_gpu_multicast 598
#undef GL_NV_memory_attachment
#define GL_NV_memory_attachment 599
#undef GL_NV_mesh_shader
#define GL_NV_mesh_shader 600
#undef GL_NV_multisample_coverage
#define GL_NV_multisample_coverage 601
#undef GL_NV_multisample_filter_hint
#define GL_NV_multisample_filter_hint 602
#undef GL_NV_non_square_matrices
#define GL_NV_non_square_matrices 603
#undef GL_NV_occlusion_query
#define GL_NV_occlusion_query 604
#undef GL_NV_packed_depth_stencil
#define GL_NV_packed_depth_stencil 605
#undef GL_NV_parameter_buffer_object
#define GL_NV_parameter_buffer_object 606
#undef GL_NV_parameter_buffer_object2
#define GL_NV_parameter_buffer_object2 607
#undef GL_NV_path_rendering
#define GL_NV_path_rendering 608
#undef GL_NV_path_rendering_shared_edge
#define GL_NV_path_rendering_shared_edge 609
#undef GL_NV_pixel_data_range
#define GL_NV_pixel_data_range 610
#undef GL_NV_pixel_buffer_object
#define GL_NV_pixel_buffer_object 611
#undef GL_NV_point_sprite
#define GL_NV_point_sprite 612
#undef GL_NV_polygon_mode
#define GL_NV_polygon_mode 613
#undef GL_NV_present_video
#define GL_NV_present_video 614
#undef GL_NV_primitive_restart
#define GL_NV_primitive_restart 615
#undef GL_NV_query_resource
#define GL_NV_query_resource 616
#undef GL_NV_query_resource_tag
#define GL_NV_query_resource_tag 617
#undef GL_NV_read_buffer
#define GL_NV_read_buffer 618
#undef GL_NV_read_buffer_front
#define GL_NV_read_buffer_front 619
#undef GL_NV_read_depth
#define GL_NV_read_depth 620
#undef GL_NV_read_depth_stencil
#define GL_NV_read_depth_stencil 621
#undef GL_NV_read_stencil
#define GL_NV_read_stencil 622
#undef GL_NV_register_combiners
#define GL_NV_register_combiners 623
#undef GL_NV_register_combiners2
#define GL_NV_register_combiners2 624
#undef GL_NV_representative_fragment_test
#define GL_NV_representative_fragment_test 625
#undef GL_NV_robustness_video_memory_purge
#define GL_NV_robustness_video_memory_purge 626
#undef GL_NV_sRGB_formats
#define GL_NV_sRGB_formats 627
#undef GL_NV_sample_locations
#define GL_NV_sample_locations 628
#undef GL_NV_sample_mask_override_coverage
#define GL_NV_sample_mask_override_coverage 629
#undef GL_NV_scissor_exclusive
#define GL_NV_scissor_exclusive 630
#undef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters 631
#undef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float 632
#undef GL_NV_shader_atomic_float64
#define GL_NV_shader_atomic_float64 633
#undef GL_NV_shader_atomic_fp16_vector
#define GL_NV_shader_atomic_fp16_vector 634
#undef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64 635
#undef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load 636
#undef GL_NV_shader_buffer_store
#define GL_NV_shader_buffer_store 637
#undef GL_NV_shader_noperspective_interpolation
#define GL_NV_shader_noperspective_interpolation 638
#undef GL_NV_shader_storage_buffer_object
#define GL_NV_shader_storage_buffer_object 639
#undef GL_NV_shader_texture_footprint
#define GL_NV_shader_texture_footprint 640
#undef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group 641
#undef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle 642
#undef GL_NV_shading_rate_image
#define GL_NV_shading_rate_image 643
#undef GL_NV_shadow_samplers_array
#define GL_NV_shadow_samplers_array 644
#undef GL_NV_shadow_samplers_cube
#define GL_NV_shadow_samplers_cube 645
#undef GL_NV_stereo_view_rendering
#define GL_NV_stereo_view_rendering 646
#undef GL_NV_tessellation_program5
#define GL_NV_tessellation_program5 647
#undef GL_NV_texgen_emboss
#define GL_NV_texgen_emboss 648
#undef GL_NV_texgen_reflection
#define GL_NV_texgen_reflection 649
#undef GL_NV_texture_barrier
#define GL_NV_texture_barrier 650
#undef GL_NV_texture_border_clamp
#define GL_NV_texture_border_clamp 651
#undef GL_NV_texture_compression_s3tc_update
#define GL_NV_texture_compression_s3tc_update 652
#undef GL_NV_texture_compression_vtc
#define GL_NV_texture_compression_vtc 653
#undef GL_NV_texture_env_combine4
#define GL_NV_texture_env_combine4 654
#undef GL_NV_texture_expand_normal
#define GL_NV_texture_expand_normal 655
#undef GL_NV_texture_multisample
#define GL_NV_texture_multisample 656
#undef GL_NV_texture_npot_2D_mipmap
#define GL_NV_texture_npot_2D_mipmap 657
#undef GL_NV_texture_rectangle
#define GL_NV_texture_rectangle 658
#undef GL_NV_texture_rectangle_compressed
#define GL_NV_texture_rectangle_compressed 659
#undef GL_NV_texture_shader
#define GL_NV_texture_shader 660
#undef GL_NV_texture_shader2
#define GL_NV_texture_shader2 661
#undef GL_NV_texture_shader3
#define GL_NV_texture_shader3 662
#undef GL_NV_transform_feedback
#define GL_NV_transform_feedback 663
#undef GL_NV_transform_feedback2
#define GL_NV_transform_feedback2 664
#undef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory 665
#undef GL_NV_vdpau_interop
#define GL_NV_vdpau_interop 666
#undef GL_NV_vertex_array_range
#define GL_NV_vertex_array_range 667
#undef GL_NV_vertex_array_range2
#define GL_NV_vertex_array_range2 668
#undef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit 669
#undef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory 670
#undef GL_NV_vertex_program
#define GL_NV_vertex_program 671
#undef GL_NV_vertex_program1_1
#define GL_NV_vertex_program1_1 672
#undef GL_NV_vertex_program2
#define GL_NV_vertex_program2 673
#undef GL_NV_vertex_program2_option
#define GL_NV_vertex_program2_option 674
#undef GL_NV_vertex_program3
#define GL_NV_vertex_program3 675
#undef GL_NV_vertex_program4
#define GL_NV_vertex_program4 676
#undef GL_NV_video_capture
#define GL_NV_video_capture 677
#undef GL_NV_viewport_array
#define GL_NV_viewport_array 678
#undef GL_NV_viewport_array2
#define GL_NV_viewport_array2 679
#undef GL_NV_viewport_swizzle
#define GL_NV_viewport_swizzle 680
#undef GL_OES_EGL_image
#define GL_OES_EGL_image 681
#undef GL_OES_EGL_image_external
#define GL_OES_EGL_image_external 682
#undef GL_OES_EGL_image_external_essl3
#define GL_OES_EGL_image_external_essl3 683
#undef GL_OES_blend_equation_separate
#define GL_OES_blend_equation_separate 684
#undef GL_OES_blend_func_separate
#define GL_OES_blend_func_separate 685
#undef GL_OES_blend_subtract
#define GL_OES_blend_subtract 686
#undef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates 687
#undef GL_OES_compressed_ETC1_RGB8_sub_texture
#define GL_OES_compressed_ETC1_RGB8_sub_texture 688
#undef GL_OES_compressed_ETC1_RGB8_texture
#define GL_OES_compressed_ETC1_RGB8_texture 689
#undef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture 690
#undef GL_OES_copy_image
#define GL_OES_copy_image 691
#undef GL_OES_depth24
#define GL_OES_depth24 692
#undef GL_OES_depth32
#define GL_OES_depth32 693
#undef GL_OES_depth_texture
#define GL_OES_depth_texture 694
#undef GL_OES_draw_buffers_indexed
#define GL_OES_draw_buffers_indexed 695
#undef GL_OES_draw_elements_base_vertex
#define GL_OES_draw_elements_base_vertex 696
#undef GL_OES_draw_texture
#define GL_OES_draw_texture 697
#undef GL_OES_element_index_uint
#define GL_OES_element_index_uint 698
#undef GL_OES_extended_matrix_palette
#define GL_OES_extended_matrix_palette 699
#undef GL_OES_fbo_render_mipmap
#define GL_OES_fbo_render_mipmap 700
#undef GL_OES_fixed_point
#define GL_OES_fixed_point 701
#undef GL_OES_fragment_precision_high
#define GL_OES_fragment_precision_high 702
#undef GL_OES_framebuffer_object
#define GL_OES_framebuffer_object 703
#undef GL_OES_geometry_point_size
#define GL_OES_geometry_point_size 704
#undef GL_OES_geometry_shader
#define GL_OES_geometry_shader 705
#undef GL_OES_get_program_binary
#define GL_OES_get_program_binary 706
#undef GL_OES_gpu_shader5
#define GL_OES_gpu_shader5 707
#undef GL_OES_mapbuffer
#define GL_OES_mapbuffer 708
#undef GL_OES_matrix_get
#define GL_OES_matrix_get 709
#undef GL_OES_matrix_palette
#define GL_OES_matrix_palette 710
#undef GL_OES_packed_depth_stencil
#define GL_OES_packed_depth_stencil 711
#undef GL_OES_point_size_array
#define GL_OES_point_size_array 712
#undef GL_OES_point_sprite
#define GL_OES_point_sprite 713
#undef GL_OES_primitive_bounding_box
#define GL_OES_primitive_bounding_box 714
#undef GL_OES_query_matrix
#define GL_OES_query_matrix 715
#undef GL_OES_read_format
#define GL_OES_read_format 716
#undef GL_OES_required_internalformat
#define GL_OES_required_internalformat 717
#undef GL_OES_rgb8_rgba8
#define GL_OES_rgb8_rgba8 718
#undef GL_OES_sample_shading
#define GL_OES_sample_shading 719
#undef GL_OES_sample_variables
#define GL_OES_sample_variables 720
#undef GL_OES_shader_image_atomic
#define GL_OES_shader_image_atomic 721
#undef GL_OES_shader_io_blocks
#define GL_OES_shader_io_blocks 722
#undef GL_OES_shader_multisample_interpolation
#define GL_OES_shader_multisample_interpolation 723
#undef GL_OES_single_precision
#define GL_OES_single_precision 724
#undef GL_OES_standard_derivatives
#define GL_OES_standard_derivatives 725
#undef GL_OES_stencil1
#define GL_OES_stencil1 726
#undef GL_OES_stencil4
#define GL_OES_stencil4 727
#undef GL_OES_stencil8
#define GL_OES_stencil8 728
#undef GL_OES_stencil_wrap
#define GL_OES_stencil_wrap 729
#undef GL_OES_surfaceless_context
#define GL_OES_surfaceless_context 730
#undef GL_OES_tessellation_point_size
#define GL_OES_tessellation_point_size 731
#undef GL_OES_tessellation_shader
#define GL_OES_tessellation_shader 732
#undef GL_OES_texture_3D
#define GL_OES_texture_3D 733
#undef GL_OES_texture_border_clamp
#define GL_OES_texture_border_clamp 734
#undef GL_OES_texture_buffer
#define GL_OES_texture_buffer 735
#undef GL_OES_texture_compression_astc
#define GL_OES_texture_compression_astc 736
#undef GL_OES_texture_cube_map
#define GL_OES_texture_cube_map 737
#undef GL_OES_texture_cube_map_array
#define GL_OES_texture_cube_map_array 738
#undef GL_OES_texture_env_crossbar
#define GL_OES_texture_env_crossbar 739
#undef GL_OES_texture_float
#define GL_OES_texture_float 740
#undef GL_OES_texture_float_linear
#define GL_OES_texture_float_linear 741
#undef GL_OES_texture_half_float
#define GL_OES_texture_half_float 742
#undef GL_OES_texture_half_float_linear
#define GL_OES_texture_half_float_linear 743
#undef GL_OES_texture_mirrored_repeat
#define GL_OES_texture_mirrored_repeat 744
#undef GL_OES_texture_npot
#define GL_OES_texture_npot 745
#undef GL_OES_texture_stencil8
#define GL_OES_texture_stencil8 746
#undef GL_OES_texture_storage_multisample_2d_array
#define GL_OES_texture_storage_multisample_2d_array 747
#undef GL_OES_texture_view
#define GL_OES_texture_view 748
#undef GL_OES_vertex_array_object
#define GL_OES_vertex_array_object 749
#undef GL_OES_vertex_half_float
#define GL_OES_vertex_half_float 750
#undef GL_OES_vertex_type_10_10_10_2
#define GL_OES_vertex_type_10_10_10_2 751
#undef GL_OES_viewport_array
#define GL_OES_viewport_array 752
#undef GL_OML_interlace
#define GL_OML_interlace 753
#undef GL_OML_resample
#define GL_OML_resample 754
#undef GL_OML_subsample
#define GL_OML_subsample 755
#undef GL_OVR_multiview
#define GL_OVR_multiview 756
#undef GL_OVR_multiview2
#define GL_OVR_multiview2 757
#undef GL_OVR_multiview_multisampled_render_to_texture
#define GL_OVR_multiview_multisampled_render_to_texture 758
#undef GL_PGI_misc_hints
#define GL_PGI_misc_hints 759
#undef GL_PGI_vertex_hints
#define GL_PGI_vertex_hints 760
#undef GL_QCOM_alpha_test
#define GL_QCOM_alpha_test 761
#undef GL_QCOM_binning_control
#define GL_QCOM_binning_control 762
#undef GL_QCOM_driver_control
#define GL_QCOM_driver_control 763
#undef GL_QCOM_extended_get
#define GL_QCOM_extended_get 764
#undef GL_QCOM_extended_get2
#define GL_QCOM_extended_get2 765
#undef GL_QCOM_framebuffer_foveated
#define GL_QCOM_framebuffer_foveated 766
#undef GL_QCOM_texture_foveated
#define GL_QCOM_texture_foveated 767
#undef GL_QCOM_texture_foveated_subsampled_layout
#define GL_QCOM_texture_foveated_subsampled_layout 768
#undef GL_QCOM_perfmon_global_mode
#define GL_QCOM_perfmon_global_mode 769
#undef GL_QCOM_shader_framebuffer_fetch_noncoherent
#define GL_QCOM_shader_framebuffer_fetch_noncoherent 770
#undef GL_QCOM_shader_framebuffer_fetch_rate
#define GL_QCOM_shader_framebuffer_fetch_rate 771
#undef GL_QCOM_tiled_rendering
#define GL_QCOM_tiled_rendering 772
#undef GL_QCOM_writeonly_rendering
#define GL_QCOM_writeonly_rendering 773
#undef GL_REND_screen_coordinates
#define GL_REND_screen_coordinates 774
#undef GL_S3_s3tc
#define GL_S3_s3tc 775
#undef GL_SGIS_detail_texture
#define GL_SGIS_detail_texture 776
#undef GL_SGIS_fog_function
#define GL_SGIS_fog_function 777
#undef GL_SGIS_generate_mipmap
#define GL_SGIS_generate_mipmap 778
#undef GL_SGIS_multisample
#define GL_SGIS_multisample 779
#undef GL_SGIS_pixel_texture
#define GL_SGIS_pixel_texture 780
#undef GL_SGIS_point_line_texgen
#define GL_SGIS_point_line_texgen 781
#undef GL_SGIS_point_parameters
#define GL_SGIS_point_parameters 782
#undef GL_SGIS_sharpen_texture
#define GL_SGIS_sharpen_texture 783
#undef GL_SGIS_texture4D
#define GL_SGIS_texture4D 784
#undef GL_SGIS_texture_border_clamp
#define GL_SGIS_texture_border_clamp 785
#undef GL_SGIS_texture_color_mask
#define GL_SGIS_texture_color_mask 786
#undef GL_SGIS_texture_edge_clamp
#define GL_SGIS_texture_edge_clamp 787
#undef GL_SGIS_texture_filter4
#define GL_SGIS_texture_filter4 788
#undef GL_SGIS_texture_lod
#define GL_SGIS_texture_lod 789
#undef GL_SGIS_texture_select
#define GL_SGIS_texture_select 790
#undef GL_SGIX_async
#define GL_SGIX_async 791
#undef GL_SGIX_async_histogram
#define GL_SGIX_async_histogram 792
#undef GL_SGIX_async_pixel
#define GL_SGIX_async_pixel 793
#undef GL_SGIX_blend_alpha_minmax
#define GL_SGIX_blend_alpha_minmax 794
#undef GL_SGIX_calligraphic_fragment
#define GL_SGIX_calligraphic_fragment 795
#undef GL_SGIX_clipmap
#define GL_SGIX_clipmap 796
#undef GL_SGIX_convolution_accuracy
#define GL_SGIX_convolution_accuracy 797
#undef GL_SGIX_depth_pass_instrument
#define GL_SGIX_depth_pass_instrument 798
#undef GL_SGIX_depth_texture
#define GL_SGIX_depth_texture 799
#undef GL_SGIX_flush_raster
#define GL_SGIX_flush_raster 800
#undef GL_SGIX_fog_offset
#define GL_SGIX_fog_offset 801
#undef GL_SGIX_fragment_lighting
#define GL_SGIX_fragment_lighting 802
#undef GL_SGIX_framezoom
#define GL_SGIX_framezoom 803
#undef GL_SGIX_igloo_interface
#define GL_SGIX_igloo_interface 804
#undef GL_SGIX_instruments
#define GL_SGIX_instruments 805
#undef GL_SGIX_interlace
#define GL_SGIX_interlace 806
#undef GL_SGIX_ir_instrument1
#define GL_SGIX_ir_instrument1 807
#undef GL_SGIX_list_priority
#define GL_SGIX_list_priority 808
#undef GL_SGIX_pixel_texture
#define GL_SGIX_pixel_texture 809
#undef GL_SGIX_pixel_tiles
#define GL_SGIX_pixel_tiles 810
#undef GL_SGIX_polynomial_ffd
#define GL_SGIX_polynomial_ffd 811
#undef GL_SGIX_reference_plane
#define GL_SGIX_reference_plane 812
#undef GL_SGIX_resample
#define GL_SGIX_resample 813
#undef GL_SGIX_scalebias_hint
#define GL_SGIX_scalebias_hint 814
#undef GL_SGIX_shadow
#define GL_SGIX_shadow 815
#undef GL_SGIX_shadow_ambient
#define GL_SGIX_shadow_ambient 816
#undef GL_SGIX_sprite
#define GL_SGIX_sprite 817
#undef GL_SGIX_subsample
#define GL_SGIX_subsample 818
#undef GL_SGIX_tag_sample_buffer
#define GL_SGIX_tag_sample_buffer 819
#undef GL_SGIX_texture_add_env
#define GL_SGIX_texture_add_env 820
#undef GL_SGIX_texture_coordinate_clamp
#define GL_SGIX_texture_coordinate_clamp 821
#undef GL_SGIX_texture_lod_bias
#define GL_SGIX_texture_lod_bias 822
#undef GL_SGIX_texture_multi_buffer
#define GL_SGIX_texture_multi_buffer 823
#undef GL_SGIX_texture_scale_bias
#define GL_SGIX_texture_scale_bias 824
#undef GL_SGIX_vertex_preclip
#define GL_SGIX_vertex_preclip 825
#undef GL_SGIX_ycrcb
#define GL_SGIX_ycrcb 826
#undef GL_SGIX_ycrcb_subsample
#define GL_SGIX_ycrcb_subsample 827
#undef GL_SGIX_ycrcba
#define GL_SGIX_ycrcba 828
#undef GL_SGI_color_matrix
#define GL_SGI_color_matrix 829
#undef GL_SGI_color_table
#define GL_SGI_color_table 830
#undef GL_SGI_texture_color_table
#define GL_SGI_texture_color_table 831
#undef GL_SUNX_constant_data
#define GL_SUNX_constant_data 832
#undef GL_SUN_convolution_border_modes
#define GL_SUN_convolution_border_modes 833
#undef GL_SUN_global_alpha
#define GL_SUN_global_alpha 834
#undef GL_SUN_mesh_array
#define GL_SUN_mesh_array 835
#undef GL_SUN_slice_accum
#define GL_SUN_slice_accum 836
#undef GL_SUN_triangle_list
#define GL_SUN_triangle_list 837
#undef GL_SUN_vertex
#define GL_SUN_vertex 838
#undef GL_VIV_shader_binary
#define GL_VIV_shader_binary 839
#undef GL_WIN_phong_shading
#define GL_WIN_phong_shading 840
#undef GL_WIN_specular_fog
#define GL_WIN_specular_fog 841
#undef GL_EXT_Cg_shader
#define GL_EXT_Cg_shader 842
#undef GL_EXTX_framebuffer_mixed_formats
#define GL_EXTX_framebuffer_mixed_formats 843
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 844
#undef GL_EXT_texture_edge_clamp
#define GL_EXT_texture_edge_clamp 845
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 846
#undef GL_EXT_import_sync_object
#define GL_EXT_import_sync_object 847
#undef GL_KTX_buffer_region
#define GL_KTX_buffer_region 848
#undef GL_NV_ES1_1_compatibility
#define GL_NV_ES1_1_compatibility 849
#undef GL_NV_ES3_1_compatibility
#define GL_NV_ES3_1_compatibility 850
#undef GL_EXT_texture_lod
#define GL_EXT_texture_lod 851

#if defined(__cplusplus)
extern "C" {
#endif

/*!
 * generic BrebisGL Procedure signature
 */
typedef void(KHRONOS_APIENTRY*BrebisGLProc)(void);

/*!
 * BrebisGetProcAddress signature.
 */
typedef BrebisGLProc (*BrebisGLGetProcAddressFunc)(const char *);

/*!
 * BrebisGetProcAddress function pointer used to wrangle all the GL and
 * GLES functions and extensions. Automatically points the a default
 * implementation, and can be overriden by the user if they need something
 * specific. Make sure that it is set before calling brebisGLInit()
 */
extern BrebisGLGetProcAddressFunc brebisGLGetProcAddress;


/*!
 * User is required to call this function as soon as the GL context has been created.
 * Failing to calling this function will result in a crash.
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
khronos_int8_t brebisGLInit(void);

/*!
 * User should call this function as soon as the GL context is destroyed. It is not
 * mandatory, but is highly recommended. User can also opt to create anew GL context
 * and call brebisGLInit() instead.
 */
void brebisGLShutdown(void);

/*!
 * Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.
 *
 * Usage example:
 *
 * \code
 * if(brebisGLSupport(GL_VERSION_3_0) || brebisGLSupport(GL_ES_VERSION_3_0))
 * {
 *     void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *        glUnmapBuffer(target);
 * }
 * else if (brebisGLSupport(GL_EXT_map_buffer_range) && brebisGLSupport(GL_OES_mapbuffer)
 * {
 *     void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *     glUnmapBufferOES(target);
 * }
 * else
 * {
 *     glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
 * }
 * \endcode
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
BREBIS_FORCE_INLINE khronos_int8_t brebisGLSupport(khronos_usize_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \code
         // Only checks if compiled in debug.
         brebisGLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         brebisGLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \endcode

     \note brebisGLCheckErrorDebug is disabled when the application is compiled for a release build.
     \warning calling glGetError can affect your rendering performance. We recommend
     using brebisGLCheckErrorDebug instead of brebisGLCheckError so that the production
     build won't be impacted. If you want to use brebisGLCheckError, make sure it is not called
     during time critical code path.
 */
void _brebisGLCheckError(const char* fileName, int lineNumber);
#if !defined(brebisGLCheckError)
    #define brebisGLCheckError(x) x; _brebisGLCheckError(__FILE__, __LINE__)
#endif
#if !defined(brebisGLCheckErrorDebug)
    #if !defined(NDEBUG)
        #define brebisGLCheckErrorDebug(x) x; _brebisGLCheckError(__FILE__, __LINE__)
    #else
        #define brebisGLCheckErrorDebug(x) x
    #endif
#endif

/* Type definitions */
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef khronos_uint32_t GLhandleARB;
#endif
typedef khronos_uint32_t GLenum;
typedef khronos_uint8_t GLboolean;
typedef khronos_uint32_t GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_int16_t GLshort;
typedef khronos_int32_t GLint;
typedef khronos_int32_t GLclampx;
typedef khronos_uint8_t GLubyte;
typedef khronos_uint16_t GLushort;
typedef khronos_uint32_t GLuint;
typedef khronos_int32_t GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_uint16_t GLhalf;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_int64_t GLint64;
typedef khronos_uint64_t GLuint64;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_intptr_t GLsizeiptrARB;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (KHRONOS_APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef khronos_uint16_t GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (KHRONOS_APIENTRY *GLVULKANPROCNV)(void);


typedef struct BrebisGLConfig
{
    khronos_int8_t support[852];

    void (KHRONOS_APIENTRY * brebisAccum)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisAccumxOES)(GLenum, GLfixed);
    GLboolean(KHRONOS_APIENTRY * brebisAcquireKeyedMutexWin32EXT)(GLuint, GLuint64, GLuint);
    void (KHRONOS_APIENTRY * brebisActiveProgramEXT)(GLuint);
    void (KHRONOS_APIENTRY * brebisActiveShaderProgram)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisActiveShaderProgramEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisActiveStencilFaceEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY * brebisActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY * brebisActiveVaryingNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisAlphaFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisAlphaFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisAlphaFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisAlphaFunc)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisAlphaFuncQCOM)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY * brebisAlphaFuncx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisAlphaFuncxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisAlphaToCoverageDitherControlNV)(GLenum);
    void (KHRONOS_APIENTRY * brebisApplyFramebufferAttachmentCMAAINTEL)(void);
    void (KHRONOS_APIENTRY * brebisApplyTextureEXT)(GLenum);
    GLboolean(KHRONOS_APIENTRY * brebisAreProgramsResidentNV)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY * brebisAreTexturesResident)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY * brebisAreTexturesResidentEXT)(GLsizei, const GLuint *, GLboolean *);
    void (KHRONOS_APIENTRY * brebisArrayElement)(GLint);
    void (KHRONOS_APIENTRY * brebisArrayElementEXT)(GLint);
    void (KHRONOS_APIENTRY * brebisArrayObjectATI)(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisAsyncMarkerSGIX)(GLuint);
    void (KHRONOS_APIENTRY * brebisAttachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY * brebisAttachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisBegin)(GLenum);
    void (KHRONOS_APIENTRY * brebisBeginConditionalRender)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisBeginConditionalRenderNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisBeginConditionalRenderNVX)(GLuint);
    void (KHRONOS_APIENTRY * brebisBeginFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY * brebisBeginOcclusionQueryNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisBeginPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY * brebisBeginPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY * brebisBeginQuery)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBeginQueryARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBeginQueryEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBeginQueryIndexed)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisBeginTransformFeedback)(GLenum);
    void (KHRONOS_APIENTRY * brebisBeginTransformFeedbackEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisBeginTransformFeedbackNV)(GLenum);
    void (KHRONOS_APIENTRY * brebisBeginVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY * brebisBeginVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisBindAttribLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisBindAttribLocationARB)(GLhandleARB, GLuint, const GLcharARB *);
    void (KHRONOS_APIENTRY * brebisBindBuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindBufferARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindBufferBase)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisBindBufferBaseEXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisBindBufferBaseNV)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisBindBufferOffsetEXT)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY * brebisBindBufferOffsetNV)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY * brebisBindBufferRange)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisBindBufferRangeEXT)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisBindBufferRangeNV)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisBindBuffersBase)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisBindBuffersRange)(GLenum, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *);
    void (KHRONOS_APIENTRY * brebisBindFragDataLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisBindFragDataLocationEXT)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisBindFragDataLocationIndexed)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisBindFragDataLocationIndexedEXT)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisBindFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY * brebisBindFramebuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindFramebufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindFramebufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindImageTexture)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBindImageTextureEXT)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisBindImageTextures)(GLuint, GLsizei, const GLuint *);
    GLuint(KHRONOS_APIENTRY * brebisBindLightParameterEXT)(GLenum, GLenum);
    GLuint(KHRONOS_APIENTRY * brebisBindMaterialParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBindMultiTextureEXT)(GLenum, GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY * brebisBindParameterEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisBindProgramARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindProgramNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY * brebisBindProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY * brebisBindRenderbuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindRenderbufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindRenderbufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindSampler)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisBindSamplers)(GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisBindShadingRateImageNV)(GLuint);
    GLuint(KHRONOS_APIENTRY * brebisBindTexGenParameterEXT)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBindTexture)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindTextureEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindTextureUnit)(GLuint, GLuint);
    GLuint(KHRONOS_APIENTRY * brebisBindTextureUnitParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBindTextures)(GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisBindTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBindVertexArray)(GLuint);
    void (KHRONOS_APIENTRY * brebisBindVertexArrayAPPLE)(GLuint);
    void (KHRONOS_APIENTRY * brebisBindVertexArrayOES)(GLuint);
    void (KHRONOS_APIENTRY * brebisBindVertexBuffer)(GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY * brebisBindVertexBuffers)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY * brebisBindVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY * brebisBindVideoCaptureStreamBufferNV)(GLuint, GLuint, GLenum, GLintptrARB);
    void (KHRONOS_APIENTRY * brebisBindVideoCaptureStreamTextureNV)(GLuint, GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisBinormal3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisBinormal3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisBinormal3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisBinormal3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisBinormal3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisBinormal3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisBinormal3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisBinormal3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY * brebisBinormal3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisBinormal3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisBinormalPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisBitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisBitmapxOES)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisBlendBarrier)(void);
    void (KHRONOS_APIENTRY * brebisBlendBarrierKHR)(void);
    void (KHRONOS_APIENTRY * brebisBlendBarrierNV)(void);
    void (KHRONOS_APIENTRY * brebisBlendColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisBlendColorEXT)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisBlendColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisBlendEquation)(GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationIndexedAMD)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationOES)(GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationSeparate)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationSeparateEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationSeparateIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationSeparateOES)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationSeparatei)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationSeparateiARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationSeparateiEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationSeparateiOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationi)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationiARB)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationiEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendEquationiOES)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFunc)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncSeparateEXT)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncSeparateINGR)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncSeparateIndexedAMD)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncSeparateOES)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncSeparatei)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncSeparateiARB)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncSeparateiEXT)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFuncSeparateiOES)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFunci)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFunciARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFunciEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendFunciOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisBlendParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisBlitFramebuffer)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * brebisBlitFramebufferANGLE)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * brebisBlitFramebufferEXT)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * brebisBlitFramebufferNV)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * brebisBlitNamedFramebuffer)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * brebisBufferAddressRangeNV)(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisBufferAttachMemoryNV)(GLenum, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisBufferData)(GLenum, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY * brebisBufferDataARB)(GLenum, GLsizeiptrARB, const void *, GLenum);
    void (KHRONOS_APIENTRY * brebisBufferPageCommitmentARB)(GLenum, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY * brebisBufferParameteriAPPLE)(GLenum, GLenum, GLint);
    GLuint(KHRONOS_APIENTRY * brebisBufferRegionEnabled)(void);
    void (KHRONOS_APIENTRY * brebisBufferStorage)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * brebisBufferStorageEXT)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * brebisBufferStorageExternalEXT)(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY * brebisBufferStorageMemEXT)(GLenum, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisBufferSubData)(GLenum, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * brebisBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, const void *);
    void (KHRONOS_APIENTRY * brebisCallCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisCallList)(GLuint);
    void (KHRONOS_APIENTRY * brebisCallLists)(GLsizei, GLenum, const void *);
    GLenum(KHRONOS_APIENTRY * brebisCheckFramebufferStatus)(GLenum);
    GLenum(KHRONOS_APIENTRY * brebisCheckFramebufferStatusEXT)(GLenum);
    GLenum(KHRONOS_APIENTRY * brebisCheckFramebufferStatusOES)(GLenum);
    GLenum(KHRONOS_APIENTRY * brebisCheckNamedFramebufferStatus)(GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY * brebisCheckNamedFramebufferStatusEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisClampColor)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisClampColorARB)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisClear)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisClearAccumxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisClearBufferData)(GLenum, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClearBufferSubData)(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClearBufferfi)(GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY * brebisClearBufferfv)(GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisClearBufferiv)(GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY * brebisClearBufferuiv)(GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisClearColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisClearColorIiEXT)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisClearColorIuiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisClearColorx)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisClearColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisClearDepth)(GLdouble);
    void (KHRONOS_APIENTRY * brebisClearDepthdNV)(GLdouble);
    void (KHRONOS_APIENTRY * brebisClearDepthf)(GLfloat);
    void (KHRONOS_APIENTRY * brebisClearDepthfOES)(GLclampf);
    void (KHRONOS_APIENTRY * brebisClearDepthx)(GLfixed);
    void (KHRONOS_APIENTRY * brebisClearDepthxOES)(GLfixed);
    void (KHRONOS_APIENTRY * brebisClearIndex)(GLfloat);
    void (KHRONOS_APIENTRY * brebisClearNamedBufferData)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClearNamedBufferDataEXT)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClearNamedBufferSubData)(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClearNamedBufferSubDataEXT)(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClearNamedFramebufferfi)(GLuint, GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY * brebisClearNamedFramebufferfv)(GLuint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisClearNamedFramebufferiv)(GLuint, GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY * brebisClearNamedFramebufferuiv)(GLuint, GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisClearPixelLocalStorageuiEXT)(GLsizei, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisClearStencil)(GLint);
    void (KHRONOS_APIENTRY * brebisClearTexImage)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClearTexImageEXT)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClearTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClearTexSubImageEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisClientActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY * brebisClientActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY * brebisClientActiveVertexStreamATI)(GLenum);
    void (KHRONOS_APIENTRY * brebisClientAttribDefaultEXT)(GLbitfield);
    GLenum(KHRONOS_APIENTRY * brebisClientWaitSync)(GLsync, GLbitfield, GLuint64);
    GLenum(KHRONOS_APIENTRY * brebisClientWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY * brebisClipControl)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisClipControlEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisClipPlane)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisClipPlanef)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisClipPlanefIMG)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisClipPlanefOES)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisClipPlanex)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisClipPlanexIMG)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisClipPlanexOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisColor3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisColor3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisColor3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisColor3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisColor3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisColor3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisColor3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisColor3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisColor3iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisColor3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisColor3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisColor3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * brebisColor3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * brebisColor3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisColor3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY * brebisColor3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * brebisColor3usv)(const GLushort *);
    void (KHRONOS_APIENTRY * brebisColor3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisColor3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisColor4b)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisColor4bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisColor4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisColor4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisColor4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisColor4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisColor4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisColor4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisColor4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisColor4iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisColor4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisColor4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisColor4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * brebisColor4ubVertex2fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisColor4ubVertex2fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisColor4ubVertex3fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisColor4ubVertex3fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisColor4ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * brebisColor4ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisColor4uiv)(const GLuint *);
    void (KHRONOS_APIENTRY * brebisColor4us)(GLushort, GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * brebisColor4usv)(const GLushort *);
    void (KHRONOS_APIENTRY * brebisColor4x)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisColor4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisColor4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisColorFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisColorFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisColorFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * brebisColorMaskIndexedEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * brebisColorMaski)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * brebisColorMaskiEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * brebisColorMaskiOES)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * brebisColorMaterial)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisColorP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisColorP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisColorPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * brebisColorPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY * brebisColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisColorSubTableEXT)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisColorTableEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisColorTableParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisColorTableParameterfvSGI)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisColorTableParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisColorTableParameterivSGI)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisColorTableSGI)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisCombinerInputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisCombinerOutputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * brebisCombinerParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisCombinerParameterfvNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisCombinerParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisCombinerParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisCombinerStageParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisCommandListSegmentsNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisCompileCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisCompileShader)(GLuint);
    void (KHRONOS_APIENTRY * brebisCompileShaderARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * brebisCompileShaderIncludeARB)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY * brebisCompressedMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexImage1DARB)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexImage2DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexImage3DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexSubImage1DARB)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexSubImage2DARB)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexSubImage3DARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTextureImage3DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisCompressedTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisConservativeRasterParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisConservativeRasterParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisConvolutionFilter1DEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisConvolutionFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisConvolutionParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisConvolutionParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisConvolutionParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisConvolutionParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisConvolutionParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisConvolutionParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisConvolutionParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisConvolutionParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisConvolutionParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisConvolutionParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisCopyBufferSubData)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisCopyBufferSubDataNV)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisCopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyColorSubTableEXT)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyColorTableSGI)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyConvolutionFilter1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyConvolutionFilter2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyImageSubData)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyImageSubDataEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyImageSubDataNV)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyImageSubDataOES)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisCopyMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisCopyMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyNamedBufferSubData)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisCopyPathNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisCopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
    void (KHRONOS_APIENTRY * brebisCopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisCopyTexImage1DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisCopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisCopyTexImage2DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisCopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTexSubImage1DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisCopyTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisCopyTextureLevelsAPPLE)(GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTextureSubImage1D)(GLuint, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCopyTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisCoverFillPathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisCoverStrokePathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisCoverageMaskNV)(GLboolean);
    void (KHRONOS_APIENTRY * brebisCoverageModulationNV)(GLenum);
    void (KHRONOS_APIENTRY * brebisCoverageModulationTableNV)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisCoverageOperationNV)(GLenum);
    void (KHRONOS_APIENTRY * brebisCreateBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCreateCommandListsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCreateFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCreateMemoryObjectsEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCreatePerfQueryINTEL)(GLuint, GLuint *);
    GLuint(KHRONOS_APIENTRY * brebisCreateProgram)(void);
    GLhandleARB(KHRONOS_APIENTRY * brebisCreateProgramObjectARB)(void);
    void (KHRONOS_APIENTRY * brebisCreateProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCreateQueries)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCreateRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCreateSamplers)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * brebisCreateShader)(GLenum);
    GLhandleARB(KHRONOS_APIENTRY * brebisCreateShaderObjectARB)(GLenum);
    GLuint(KHRONOS_APIENTRY * brebisCreateShaderProgramEXT)(GLenum, const GLchar *);
    GLuint(KHRONOS_APIENTRY * brebisCreateShaderProgramv)(GLenum, GLsizei, const GLchar *const*);
    GLuint(KHRONOS_APIENTRY * brebisCreateShaderProgramvEXT)(GLenum, GLsizei, const GLchar **);
    void (KHRONOS_APIENTRY * brebisCreateStatesNV)(GLsizei, GLuint *);
    GLsync(KHRONOS_APIENTRY * brebisCreateSyncFromCLeventARB)(struct _cl_context *, struct _cl_event *, GLbitfield);
    void (KHRONOS_APIENTRY * brebisCreateTextures)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCreateTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCreateVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisCullFace)(GLenum);
    void (KHRONOS_APIENTRY * brebisCullParameterdvEXT)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisCullParameterfvEXT)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisCurrentPaletteMatrixARB)(GLint);
    void (KHRONOS_APIENTRY * brebisCurrentPaletteMatrixOES)(GLuint);
    void (KHRONOS_APIENTRY * brebisDebugMessageCallback)(GLDEBUGPROC, const void *);
    void (KHRONOS_APIENTRY * brebisDebugMessageCallbackAMD)(GLDEBUGPROCAMD, void *);
    void (KHRONOS_APIENTRY * brebisDebugMessageCallbackARB)(GLDEBUGPROCARB, const void *);
    void (KHRONOS_APIENTRY * brebisDebugMessageCallbackKHR)(GLDEBUGPROCKHR, const void *);
    void (KHRONOS_APIENTRY * brebisDebugMessageControl)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * brebisDebugMessageControlARB)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * brebisDebugMessageControlKHR)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * brebisDebugMessageEnableAMD)(GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY * brebisDebugMessageInsert)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisDebugMessageInsertAMD)(GLenum, GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisDebugMessageInsertARB)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisDebugMessageInsertKHR)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisDeformSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisDeformationMap3dSGIX)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisDeformationMap3fSGIX)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisDeleteAsyncMarkersSGIX)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDeleteBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY * brebisDeleteBuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteBuffersARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteCommandListsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteFencesAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteFencesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY * brebisDeleteFramebuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteFramebuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteFramebuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteLists)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDeleteMemoryObjectsEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteNamedStringARB)(GLint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisDeleteNamesAMD)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * brebisDeleteOcclusionQueriesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeletePathsNV)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDeletePerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisDeletePerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY * brebisDeleteProgram)(GLuint);
    void (KHRONOS_APIENTRY * brebisDeleteProgramPipelines)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteProgramPipelinesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteProgramsARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteQueries)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteQueriesARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteQueriesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteQueryResourceTagNV)(GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisDeleteRenderbuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteRenderbuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteRenderbuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteSamplers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteSemaphoresEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteShader)(GLuint);
    void (KHRONOS_APIENTRY * brebisDeleteStatesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteSync)(GLsync);
    void (KHRONOS_APIENTRY * brebisDeleteSyncAPPLE)(GLsync);
    void (KHRONOS_APIENTRY * brebisDeleteTextures)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteTexturesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteTransformFeedbacks)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteTransformFeedbacksNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteVertexArrays)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteVertexArraysAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteVertexArraysOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisDeleteVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY * brebisDepthBoundsEXT)(GLclampd, GLclampd);
    void (KHRONOS_APIENTRY * brebisDepthBoundsdNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisDepthFunc)(GLenum);
    void (KHRONOS_APIENTRY * brebisDepthMask)(GLboolean);
    void (KHRONOS_APIENTRY * brebisDepthRange)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisDepthRangeArrayfvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisDepthRangeArrayfvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisDepthRangeArrayv)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisDepthRangeIndexed)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisDepthRangeIndexedfNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisDepthRangeIndexedfOES)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisDepthRangedNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisDepthRangef)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisDepthRangefOES)(GLclampf, GLclampf);
    void (KHRONOS_APIENTRY * brebisDepthRangex)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisDepthRangexOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisDetachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY * brebisDetachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisDetailTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisDisable)(GLenum);
    void (KHRONOS_APIENTRY * brebisDisableClientState)(GLenum);
    void (KHRONOS_APIENTRY * brebisDisableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDisableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDisableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY * brebisDisableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDisableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY * brebisDisableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisDisableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisDisableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisDisableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisDisableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY * brebisDisableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY * brebisDisablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDisableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDisableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDisableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDiscardFramebufferEXT)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisDispatchCompute)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisDispatchComputeGroupSizeARB)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisDispatchComputeIndirect)(GLintptr);
    void (KHRONOS_APIENTRY * brebisDrawArrays)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawArraysEXT)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawArraysIndirect)(GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisDrawArraysInstanced)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawArraysInstancedANGLE)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawArraysInstancedARB)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawArraysInstancedBaseInstance)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawArraysInstancedBaseInstanceEXT)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawArraysInstancedEXT)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawArraysInstancedNV)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawBuffer)(GLenum);
    void (KHRONOS_APIENTRY * brebisDrawBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisDrawBuffers)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisDrawBuffersARB)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisDrawBuffersATI)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisDrawBuffersEXT)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisDrawBuffersIndexedEXT)(GLint, const GLenum *, const GLint *);
    void (KHRONOS_APIENTRY * brebisDrawBuffersNV)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisDrawCommandsAddressNV)(GLenum, const GLuint64 *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawCommandsNV)(GLenum, GLuint, const GLintptr *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawCommandsStatesAddressNV)(const GLuint64 *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawCommandsStatesNV)(GLuint, const GLintptr *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawElementArrayAPPLE)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawElementArrayATI)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawElements)(GLenum, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisDrawElementsBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * brebisDrawElementsBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * brebisDrawElementsBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * brebisDrawElementsIndirect)(GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstanced)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedANGLE)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedARB)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedBaseVertexBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedBaseVertexBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawElementsInstancedNV)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawMeshArraysSUN)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawMeshTasksIndirectNV)(GLintptr);
    void (KHRONOS_APIENTRY * brebisDrawMeshTasksNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawPixels)(GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawRangeElementArrayATI)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisDrawRangeElementsBaseVertex)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * brebisDrawRangeElementsBaseVertexEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * brebisDrawRangeElementsBaseVertexOES)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * brebisDrawRangeElementsEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisDrawTexfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisDrawTexfvOES)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisDrawTexiOES)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisDrawTexivOES)(const GLint *);
    void (KHRONOS_APIENTRY * brebisDrawTexsOES)(GLshort, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisDrawTexsvOES)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisDrawTextureNV)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisDrawTexxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisDrawTexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisDrawTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawTransformFeedbackEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawTransformFeedbackInstanced)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawTransformFeedbackInstancedEXT)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawTransformFeedbackStream)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisDrawTransformFeedbackStreamInstanced)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY * brebisDrawVkImageNV)(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisEGLImageTargetRenderbufferStorageOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY * brebisEGLImageTargetTexStorageEXT)(GLenum, GLeglImageOES, const GLint* );
    void (KHRONOS_APIENTRY * brebisEGLImageTargetTexture2DOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY * brebisEGLImageTargetTextureStorageEXT)(GLuint, GLeglImageOES, const GLint* );
    void (KHRONOS_APIENTRY * brebisEdgeFlag)(GLboolean);
    void (KHRONOS_APIENTRY * brebisEdgeFlagFormatNV)(GLsizei);
    void (KHRONOS_APIENTRY * brebisEdgeFlagPointer)(GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisEdgeFlagPointerEXT)(GLsizei, GLsizei, const GLboolean *);
    void (KHRONOS_APIENTRY * brebisEdgeFlagPointerListIBM)(GLint, const GLboolean **, GLint);
    void (KHRONOS_APIENTRY * brebisEdgeFlagv)(const GLboolean *);
    void (KHRONOS_APIENTRY * brebisElementPointerAPPLE)(GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisElementPointerATI)(GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisEnable)(GLenum);
    void (KHRONOS_APIENTRY * brebisEnableClientState)(GLenum);
    void (KHRONOS_APIENTRY * brebisEnableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisEnableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisEnableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY * brebisEnableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisEnableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY * brebisEnableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisEnableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisEnableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisEnableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisEnableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY * brebisEnableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY * brebisEnablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisEnableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisEnableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisEnableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisEnd)(void);
    void (KHRONOS_APIENTRY * brebisEndConditionalRender)(void);
    void (KHRONOS_APIENTRY * brebisEndConditionalRenderNV)(void);
    void (KHRONOS_APIENTRY * brebisEndConditionalRenderNVX)(void);
    void (KHRONOS_APIENTRY * brebisEndFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY * brebisEndList)(void);
    void (KHRONOS_APIENTRY * brebisEndOcclusionQueryNV)(void);
    void (KHRONOS_APIENTRY * brebisEndPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY * brebisEndPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY * brebisEndQuery)(GLenum);
    void (KHRONOS_APIENTRY * brebisEndQueryARB)(GLenum);
    void (KHRONOS_APIENTRY * brebisEndQueryEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisEndQueryIndexed)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisEndTilingQCOM)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisEndTransformFeedback)(void);
    void (KHRONOS_APIENTRY * brebisEndTransformFeedbackEXT)(void);
    void (KHRONOS_APIENTRY * brebisEndTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY * brebisEndVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY * brebisEndVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisEvalCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY * brebisEvalCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisEvalCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY * brebisEvalCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisEvalCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY * brebisEvalCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisEvalCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisEvalCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisEvalCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisEvalCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisEvalCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisEvalCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisEvalMapsNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisEvalMesh1)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisEvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisEvalPoint1)(GLint);
    void (KHRONOS_APIENTRY * brebisEvalPoint2)(GLint, GLint);
    void (KHRONOS_APIENTRY * brebisEvaluateDepthValuesARB)(void);
    void (KHRONOS_APIENTRY * brebisExecuteProgramNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisExtGetBufferPointervQCOM)(GLenum, void **);
    void (KHRONOS_APIENTRY * brebisExtGetBuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * brebisExtGetFramebuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * brebisExtGetProgramBinarySourceQCOM)(GLuint, GLenum, GLchar *, GLint *);
    void (KHRONOS_APIENTRY * brebisExtGetProgramsQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * brebisExtGetRenderbuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * brebisExtGetShadersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY * brebisExtGetTexLevelParameterivQCOM)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisExtGetTexSubImageQCOM)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisExtGetTexturesQCOM)(GLuint *, GLint, GLint *);
    GLboolean(KHRONOS_APIENTRY * brebisExtIsProgramBinaryQCOM)(GLuint);
    void (KHRONOS_APIENTRY * brebisExtTexObjectStateOverrideiQCOM)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisExtractComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisFeedbackBuffer)(GLsizei, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisFeedbackBufferxOES)(GLsizei, GLenum, const GLfixed *);
    GLsync(KHRONOS_APIENTRY * brebisFenceSync)(GLenum, GLbitfield);
    GLsync(KHRONOS_APIENTRY * brebisFenceSyncAPPLE)(GLenum, GLbitfield);
    void (KHRONOS_APIENTRY * brebisFinalCombinerInputNV)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisFinish)(void);
    GLint(KHRONOS_APIENTRY * brebisFinishAsyncSGIX)(GLuint *);
    void (KHRONOS_APIENTRY * brebisFinishFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY * brebisFinishFenceNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisFinishObjectAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisFinishTextureSUNX)(void);
    void (KHRONOS_APIENTRY * brebisFlush)(void);
    void (KHRONOS_APIENTRY * brebisFlushMappedBufferRange)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisFlushMappedBufferRangeAPPLE)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisFlushMappedBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisFlushMappedNamedBufferRange)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisFlushMappedNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisFlushPixelDataRangeNV)(GLenum);
    void (KHRONOS_APIENTRY * brebisFlushRasterSGIX)(void);
    void (KHRONOS_APIENTRY * brebisFlushStaticDataIBM)(GLenum);
    void (KHRONOS_APIENTRY * brebisFlushVertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisFlushVertexArrayRangeNV)(void);
    void (KHRONOS_APIENTRY * brebisFogCoordFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisFogCoordPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisFogCoordPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisFogCoordPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * brebisFogCoordd)(GLdouble);
    void (KHRONOS_APIENTRY * brebisFogCoorddEXT)(GLdouble);
    void (KHRONOS_APIENTRY * brebisFogCoorddv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisFogCoorddvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisFogCoordf)(GLfloat);
    void (KHRONOS_APIENTRY * brebisFogCoordfEXT)(GLfloat);
    void (KHRONOS_APIENTRY * brebisFogCoordfv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFogCoordfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFogCoordhNV)(GLhalfNV);
    void (KHRONOS_APIENTRY * brebisFogCoordhvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisFogFuncSGIS)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFogf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisFogfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFogi)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisFogiv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisFogx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisFogxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisFogxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisFogxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisFragmentColorMaterialSGIX)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisFragmentCoverageColorNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisFragmentLightModelfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisFragmentLightModelfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFragmentLightModeliSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisFragmentLightModelivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisFragmentLightfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisFragmentLightfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFragmentLightiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisFragmentLightivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisFragmentMaterialfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisFragmentMaterialfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFragmentMaterialiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisFragmentMaterialivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisFrameTerminatorGREMEDY)(void);
    void (KHRONOS_APIENTRY * brebisFrameZoomSGIX)(GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferDrawBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisFramebufferDrawBuffersEXT)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisFramebufferFetchBarrierEXT)(void);
    void (KHRONOS_APIENTRY * brebisFramebufferFetchBarrierQCOM)(void);
    void (KHRONOS_APIENTRY * brebisFramebufferFoveationConfigQCOM)(GLuint, GLuint, GLuint, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * brebisFramebufferFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisFramebufferParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferPixelLocalStorageSizeEXT)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY * brebisFramebufferReadBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisFramebufferRenderbuffer)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisFramebufferRenderbufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisFramebufferRenderbufferOES)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisFramebufferSampleLocationsfvARB)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFramebufferSampleLocationsfvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFramebufferSamplePositionsfvAMD)(GLenum, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture1D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture1DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture2D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture2DDownsampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture2DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture2DMultisampleEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture2DMultisampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture2DOES)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture3D)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture3DEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTexture3DOES)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureARB)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureEXT)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureFaceARB)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureFaceEXT)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureLayer)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureLayerARB)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureLayerDownsampleIMG)(GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureLayerEXT)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureMultisampleMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisFramebufferTextureOES)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisFreeObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY * brebisFrontFace)(GLenum);
    void (KHRONOS_APIENTRY * brebisFrustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisFrustumf)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisFrustumfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisFrustumx)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisFrustumxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    GLuint(KHRONOS_APIENTRY * brebisGenAsyncMarkersSGIX)(GLsizei);
    void (KHRONOS_APIENTRY * brebisGenBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenBuffersARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenFencesAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenFencesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * brebisGenFragmentShadersATI)(GLuint);
    void (KHRONOS_APIENTRY * brebisGenFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenFramebuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenFramebuffersOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * brebisGenLists)(GLsizei);
    void (KHRONOS_APIENTRY * brebisGenNamesAMD)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenOcclusionQueriesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * brebisGenPathsNV)(GLsizei);
    void (KHRONOS_APIENTRY * brebisGenPerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenProgramPipelinesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenProgramsARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenProgramsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenQueries)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenQueriesARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenQueriesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenQueryResourceTagNV)(GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisGenRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenRenderbuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenRenderbuffersOES)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenSamplers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenSemaphoresEXT)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * brebisGenSymbolsEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisGenTextures)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenTexturesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenTransformFeedbacksNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenVertexArraysAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGenVertexArraysOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY * brebisGenVertexShadersEXT)(GLuint);
    void (KHRONOS_APIENTRY * brebisGenerateMipmap)(GLenum);
    void (KHRONOS_APIENTRY * brebisGenerateMipmapEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisGenerateMipmapOES)(GLenum);
    void (KHRONOS_APIENTRY * brebisGenerateMultiTexMipmapEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisGenerateTextureMipmap)(GLuint);
    void (KHRONOS_APIENTRY * brebisGenerateTextureMipmapEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisGetActiveAtomicCounterBufferiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetActiveAttrib)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetActiveAttribARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY * brebisGetActiveSubroutineName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetActiveSubroutineUniformName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetActiveSubroutineUniformiv)(GLuint, GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetActiveUniform)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetActiveUniformARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY * brebisGetActiveUniformBlockName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetActiveUniformBlockiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetActiveUniformName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetActiveUniformsiv)(GLuint, GLsizei, const GLuint *, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetActiveVaryingNV)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetArrayObjectfvATI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetArrayObjectivATI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetAttachedObjectsARB)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *);
    void (KHRONOS_APIENTRY * brebisGetAttachedShaders)(GLuint, GLsizei, GLsizei *, GLuint *);
    GLint(KHRONOS_APIENTRY * brebisGetAttribLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetAttribLocationARB)(GLhandleARB, const GLcharARB *);
    void (KHRONOS_APIENTRY * brebisGetBooleanIndexedvEXT)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY * brebisGetBooleani_v)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY * brebisGetBooleanv)(GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * brebisGetBufferParameteri64v)(GLenum, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetBufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetBufferParameterivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetBufferParameterui64vNV)(GLenum, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetBufferPointerv)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetBufferPointervARB)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetBufferPointervOES)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetBufferSubData)(GLenum, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY * brebisGetBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, void *);
    void (KHRONOS_APIENTRY * brebisGetClipPlane)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetClipPlanef)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetClipPlanefOES)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetClipPlanex)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetClipPlanexOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetColorTable)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetColorTableEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetColorTableParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetColorTableParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetColorTableParameterfvSGI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetColorTableParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetColorTableParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetColorTableParameterivSGI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetColorTableSGI)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetCombinerInputParameterfvNV)(GLenum, GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetCombinerInputParameterivNV)(GLenum, GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetCombinerOutputParameterfvNV)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetCombinerOutputParameterivNV)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetCombinerStageParameterfvNV)(GLenum, GLenum, GLfloat *);
    GLuint(KHRONOS_APIENTRY * brebisGetCommandHeaderNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisGetCompressedMultiTexImageEXT)(GLenum, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * brebisGetCompressedTexImage)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * brebisGetCompressedTexImageARB)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * brebisGetCompressedTextureImage)(GLuint, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetCompressedTextureImageEXT)(GLuint, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY * brebisGetCompressedTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetConvolutionFilter)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetConvolutionFilterEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetConvolutionParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetConvolutionParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetConvolutionParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetConvolutionParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetConvolutionParameterxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetCoverageModulationTableNV)(GLsizei, GLfloat *);
    GLuint(KHRONOS_APIENTRY * brebisGetDebugMessageLog)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * brebisGetDebugMessageLogAMD)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * brebisGetDebugMessageLogARB)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * brebisGetDebugMessageLogKHR)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetDetailTexFuncSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetDoubleIndexedvEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetDoublei_v)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetDoublei_vEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetDoublev)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetDriverControlStringQCOM)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetDriverControlsQCOM)(GLint *, GLsizei, GLuint *);
    GLenum(KHRONOS_APIENTRY * brebisGetError)(void);
    void (KHRONOS_APIENTRY * brebisGetFenceivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetFinalCombinerInputParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFinalCombinerInputParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetFirstPerfQueryIdINTEL)(GLuint *);
    void (KHRONOS_APIENTRY * brebisGetFixedv)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetFixedvOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetFloatIndexedvEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFloati_v)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFloati_vEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFloati_vNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFloati_vOES)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFloatv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFogFuncSGIS)(GLfloat *);
    GLint(KHRONOS_APIENTRY * brebisGetFragDataIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetFragDataIndexEXT)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetFragDataLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetFragDataLocationEXT)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisGetFragmentLightfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFragmentLightivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetFragmentMaterialfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFragmentMaterialivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetFramebufferAttachmentParameteriv)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetFramebufferAttachmentParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetFramebufferAttachmentParameterivOES)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetFramebufferParameterfvAMD)(GLenum, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetFramebufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    GLsizei(KHRONOS_APIENTRY * brebisGetFramebufferPixelLocalStorageSizeEXT)(GLuint);
    GLenum(KHRONOS_APIENTRY * brebisGetGraphicsResetStatus)(void);
    GLenum(KHRONOS_APIENTRY * brebisGetGraphicsResetStatusARB)(void);
    GLenum(KHRONOS_APIENTRY * brebisGetGraphicsResetStatusEXT)(void);
    GLenum(KHRONOS_APIENTRY * brebisGetGraphicsResetStatusKHR)(void);
    GLhandleARB(KHRONOS_APIENTRY * brebisGetHandleARB)(GLenum);
    void (KHRONOS_APIENTRY * brebisGetHistogram)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetHistogramEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetHistogramParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetHistogramParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetHistogramParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetHistogramParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetHistogramParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY * brebisGetImageHandleARB)(GLuint, GLint, GLboolean, GLint, GLenum);
    GLuint64(KHRONOS_APIENTRY * brebisGetImageHandleNV)(GLuint, GLint, GLboolean, GLint, GLenum);
    void (KHRONOS_APIENTRY * brebisGetImageTransformParameterfvHP)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetImageTransformParameterivHP)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetInfoLogARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    GLint(KHRONOS_APIENTRY * brebisGetInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY * brebisGetInteger64i_v)(GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetInteger64v)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetInteger64vAPPLE)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetIntegerIndexedvEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetIntegeri_v)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetIntegeri_vEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetIntegerui64i_vNV)(GLenum, GLuint, GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetIntegerui64vNV)(GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetIntegerv)(GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetInternalformatSampleivNV)(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisGetInternalformati64v)(GLenum, GLenum, GLenum, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetInternalformativ)(GLenum, GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisGetInvariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * brebisGetInvariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetInvariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetLightfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetLightiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetLightxOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetLightxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetLightxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetListParameterfvSGIX)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetListParameterivSGIX)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetLocalConstantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * brebisGetLocalConstantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetLocalConstantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMapAttribParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMapAttribParameterivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void *);
    void (KHRONOS_APIENTRY * brebisGetMapParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMapParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMapdv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetMapfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMapiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMapxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetMaterialfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMaterialiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisGetMaterialxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetMaterialxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetMemoryObjectDetachedResourcesuivNV)(GLuint, GLenum, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetMemoryObjectParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMinmax)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetMinmaxEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetMinmaxParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMinmaxParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMinmaxParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMinmaxParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexEnvivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexGendvEXT)(GLenum, GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexGenfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexGenivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexImageEXT)(GLenum, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexLevelParameterfvEXT)(GLenum, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexLevelParameterivEXT)(GLenum, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMultiTexParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetMultisamplefv)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetMultisamplefvNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetNamedBufferParameteri64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetNamedBufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedBufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedBufferParameterui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetNamedBufferPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetNamedBufferPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY * brebisGetNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY * brebisGetNamedFramebufferAttachmentParameteriv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedFramebufferAttachmentParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedFramebufferParameterfvAMD)(GLuint, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetNamedFramebufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedProgramLocalParameterIivEXT)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedProgramLocalParameterIuivEXT)(GLuint, GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetNamedProgramLocalParameterdvEXT)(GLuint, GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetNamedProgramLocalParameterfvEXT)(GLuint, GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetNamedProgramStringEXT)(GLuint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetNamedProgramivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedRenderbufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedRenderbufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNamedStringARB)(GLint, const GLchar *, GLsizei, GLint *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetNamedStringivARB)(GLint, const GLchar *, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetNextPerfQueryIdINTEL)(GLuint, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetObjectBufferfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetObjectBufferivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetObjectLabel)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetObjectLabelEXT)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetObjectLabelKHR)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetObjectParameterfvARB)(GLhandleARB, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetObjectParameterivAPPLE)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetObjectParameterivARB)(GLhandleARB, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetObjectPtrLabel)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetObjectPtrLabelKHR)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetOcclusionQueryivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetOcclusionQueryuivNV)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetPathColorGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPathColorGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetPathCommandsNV)(GLuint, GLubyte *);
    void (KHRONOS_APIENTRY * brebisGetPathCoordsNV)(GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPathDashArrayNV)(GLuint, GLfloat *);
    GLfloat(KHRONOS_APIENTRY * brebisGetPathLengthNV)(GLuint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisGetPathMetricRangeNV)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPathMetricsNV)(GLbitfield, GLsizei, GLenum, const void *, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPathParameterfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPathParameterivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetPathSpacingNV)(GLenum, GLsizei, GLenum, const void *, GLuint, GLfloat, GLfloat, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPathTexGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPathTexGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetPerfCounterInfoINTEL)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *);
    void (KHRONOS_APIENTRY * brebisGetPerfMonitorCounterDataAMD)(GLuint, GLenum, GLsizei, GLuint *, GLint *);
    void (KHRONOS_APIENTRY * brebisGetPerfMonitorCounterInfoAMD)(GLuint, GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetPerfMonitorCounterStringAMD)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetPerfMonitorCountersAMD)(GLuint, GLint *, GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetPerfMonitorGroupStringAMD)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetPerfMonitorGroupsAMD)(GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetPerfQueryDataINTEL)(GLuint, GLuint, GLsizei, void *, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetPerfQueryIdByNameINTEL)(GLchar *, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetPerfQueryInfoINTEL)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetPixelMapfv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPixelMapuiv)(GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetPixelMapusv)(GLenum, GLushort *);
    void (KHRONOS_APIENTRY * brebisGetPixelMapxv)(GLenum, GLint, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetPixelTexGenParameterfvSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPixelTexGenParameterivSGIS)(GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetPixelTransformParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetPixelTransformParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetPointerIndexedvEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY * brebisGetPointeri_vEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY * brebisGetPointerv)(GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetPointervEXT)(GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetPointervKHR)(GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetPolygonStipple)(GLubyte *);
    void (KHRONOS_APIENTRY * brebisGetProgramBinary)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY * brebisGetProgramBinaryOES)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY * brebisGetProgramEnvParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetProgramEnvParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetProgramEnvParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetProgramEnvParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetProgramInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetProgramInterfaceiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetProgramLocalParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetProgramLocalParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetProgramLocalParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetProgramLocalParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetProgramNamedParameterdvNV)(GLuint, GLsizei, const GLubyte *, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetProgramNamedParameterfvNV)(GLuint, GLsizei, const GLubyte *, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetProgramParameterdvNV)(GLenum, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetProgramParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetProgramPipelineInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetProgramPipelineInfoLogEXT)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetProgramPipelineiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetProgramPipelineivEXT)(GLuint, GLenum, GLint *);
    GLuint(KHRONOS_APIENTRY * brebisGetProgramResourceIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetProgramResourceLocation)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetProgramResourceLocationIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetProgramResourceLocationIndexEXT)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY * brebisGetProgramResourceName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetProgramResourcefvNV)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetProgramResourceiv)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * brebisGetProgramStageiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetProgramStringARB)(GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetProgramStringNV)(GLuint, GLenum, GLubyte *);
    void (KHRONOS_APIENTRY * brebisGetProgramSubroutineParameteruivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetProgramiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetProgramivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetProgramivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetQueryBufferObjecti64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * brebisGetQueryBufferObjectiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * brebisGetQueryBufferObjectui64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * brebisGetQueryBufferObjectuiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY * brebisGetQueryIndexediv)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjecti64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjecti64vEXT)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjectiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjectivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjectivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjectui64v)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjectui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjectuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjectuivARB)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetQueryObjectuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetQueryiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetQueryivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetQueryivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetRenderbufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetRenderbufferParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetRenderbufferParameterivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetSamplerParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetSamplerParameterIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetSamplerParameterIivOES)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetSamplerParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetSamplerParameterIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetSamplerParameterIuivOES)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetSamplerParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetSamplerParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetSemaphoreParameterui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * brebisGetSeparableFilter)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY * brebisGetSeparableFilterEXT)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY * brebisGetShaderInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetShaderPrecisionFormat)(GLenum, GLenum, GLint *, GLint *);
    void (KHRONOS_APIENTRY * brebisGetShaderSource)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetShaderSourceARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    void (KHRONOS_APIENTRY * brebisGetShaderiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetShadingRateImagePaletteNV)(GLuint, GLuint, GLenum *);
    void (KHRONOS_APIENTRY * brebisGetShadingRateSampleLocationivNV)(GLenum, GLuint, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetSharpenTexFuncSGIS)(GLenum, GLfloat *);
    GLushort(KHRONOS_APIENTRY * brebisGetStageIndexNV)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY * brebisGetString)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY * brebisGetStringi)(GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY * brebisGetSubroutineIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetSubroutineUniformLocation)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY * brebisGetSynciv)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * brebisGetSyncivAPPLE)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexBumpParameterfvATI)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTexBumpParameterivATI)(GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexEnvfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTexEnviv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexEnvxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetTexEnvxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetTexFilterFuncSGIS)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTexGendv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetTexGenfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTexGenfvOES)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTexGeniv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexGenivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexGenxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetTexImage)(GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexLevelParameterxvOES)(GLenum, GLint, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetTexParameterIiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexParameterIivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexParameterIivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexParameterIuiv)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetTexParameterIuivEXT)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetTexParameterIuivOES)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetTexParameterPointervAPPLE)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetTexParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTexParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTexParameterxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY * brebisGetTexParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY * brebisGetTextureHandleARB)(GLuint);
    GLuint64(KHRONOS_APIENTRY * brebisGetTextureHandleIMG)(GLuint);
    GLuint64(KHRONOS_APIENTRY * brebisGetTextureHandleNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisGetTextureImage)(GLuint, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetTextureImageEXT)(GLuint, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisGetTextureLevelParameterfv)(GLuint, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTextureLevelParameterfvEXT)(GLuint, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTextureLevelParameteriv)(GLuint, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTextureLevelParameterivEXT)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTextureParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTextureParameterIivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTextureParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetTextureParameterIuivEXT)(GLuint, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetTextureParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTextureParameterfvEXT)(GLuint, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetTextureParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTextureParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    GLuint64(KHRONOS_APIENTRY * brebisGetTextureSamplerHandleARB)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY * brebisGetTextureSamplerHandleIMG)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY * brebisGetTextureSamplerHandleNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisGetTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetTrackMatrixivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTransformFeedbackVarying)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetTransformFeedbackVaryingEXT)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY * brebisGetTransformFeedbackVaryingNV)(GLuint, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTransformFeedbacki64_v)(GLuint, GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetTransformFeedbacki_v)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTransformFeedbackiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetTranslatedShaderSourceANGLE)(GLuint, GLsizei, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY * brebisGetUniformBlockIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetUniformBufferSizeEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisGetUniformIndices)(GLuint, GLsizei, const GLchar *const*, GLuint *);
    GLint(KHRONOS_APIENTRY * brebisGetUniformLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY * brebisGetUniformLocationARB)(GLhandleARB, const GLcharARB *);
    GLintptr(KHRONOS_APIENTRY * brebisGetUniformOffsetEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisGetUniformSubroutineuiv)(GLenum, GLint, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetUniformdv)(GLuint, GLint, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetUniformfv)(GLuint, GLint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetUniformfvARB)(GLhandleARB, GLint, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetUniformi64vARB)(GLuint, GLint, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetUniformi64vNV)(GLuint, GLint, GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetUniformiv)(GLuint, GLint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetUniformivARB)(GLhandleARB, GLint, GLint *);
    void (KHRONOS_APIENTRY * brebisGetUniformui64vARB)(GLuint, GLint, GLuint64 *);
    void (KHRONOS_APIENTRY * brebisGetUniformui64vNV)(GLuint, GLint, GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetUniformuiv)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetUniformuivEXT)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetUnsignedBytei_vEXT)(GLenum, GLuint, GLubyte *);
    void (KHRONOS_APIENTRY * brebisGetUnsignedBytevEXT)(GLenum, GLubyte *);
    void (KHRONOS_APIENTRY * brebisGetVariantArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetVariantArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY * brebisGetVariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetVariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVariantPointervEXT)(GLuint, GLenum, void **);
    GLint(KHRONOS_APIENTRY * brebisGetVaryingLocationNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisGetVertexArrayIndexed64iv)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetVertexArrayIndexediv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVertexArrayIntegeri_vEXT)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVertexArrayIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVertexArrayPointeri_vEXT)(GLuint, GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetVertexArrayPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetVertexArrayiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribLdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribLdvEXT)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribLi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribLui64vARB)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribLui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribPointervARB)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribPointervNV)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribdvARB)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribdvNV)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribfvARB)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVertexAttribivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVideoCaptureStreamdvNV)(GLuint, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetVideoCaptureStreamfvNV)(GLuint, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetVideoCaptureStreamivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVideoCaptureivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVideoi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetVideoivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisGetVideoui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisGetVideouivNV)(GLuint, GLenum, GLuint *);
    GLVULKANPROCNV(KHRONOS_APIENTRY * brebisGetVkProcAddrNV)(const GLchar *);
    void (KHRONOS_APIENTRY * brebisGetnColorTable)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnColorTableARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnCompressedTexImage)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnCompressedTexImageARB)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnConvolutionFilter)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnConvolutionFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnHistogram)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnHistogramARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnMapdv)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetnMapdvARB)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetnMapfv)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetnMapfvARB)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetnMapiv)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisGetnMapivARB)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisGetnMinmax)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnMinmaxARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnPixelMapfv)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetnPixelMapfvARB)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetnPixelMapuiv)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetnPixelMapuivARB)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetnPixelMapusv)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY * brebisGetnPixelMapusvARB)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY * brebisGetnPolygonStipple)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY * brebisGetnPolygonStippleARB)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY * brebisGetnSeparableFilter)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY * brebisGetnSeparableFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY * brebisGetnTexImage)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnTexImageARB)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisGetnUniformdv)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetnUniformdvARB)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY * brebisGetnUniformfv)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetnUniformfvARB)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetnUniformfvEXT)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetnUniformfvKHR)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY * brebisGetnUniformi64vARB)(GLuint, GLint, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY * brebisGetnUniformiv)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisGetnUniformivARB)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisGetnUniformivEXT)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisGetnUniformivKHR)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisGetnUniformui64vARB)(GLuint, GLint, GLsizei, GLuint64 *);
    void (KHRONOS_APIENTRY * brebisGetnUniformuiv)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetnUniformuivARB)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGetnUniformuivKHR)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisGlobalAlphaFactorbSUN)(GLbyte);
    void (KHRONOS_APIENTRY * brebisGlobalAlphaFactordSUN)(GLdouble);
    void (KHRONOS_APIENTRY * brebisGlobalAlphaFactorfSUN)(GLfloat);
    void (KHRONOS_APIENTRY * brebisGlobalAlphaFactoriSUN)(GLint);
    void (KHRONOS_APIENTRY * brebisGlobalAlphaFactorsSUN)(GLshort);
    void (KHRONOS_APIENTRY * brebisGlobalAlphaFactorubSUN)(GLubyte);
    void (KHRONOS_APIENTRY * brebisGlobalAlphaFactoruiSUN)(GLuint);
    void (KHRONOS_APIENTRY * brebisGlobalAlphaFactorusSUN)(GLushort);
    void (KHRONOS_APIENTRY * brebisHint)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisHintPGI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisHistogram)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * brebisHistogramEXT)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * brebisIglooInterfaceSGIX)(GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisImageTransformParameterfHP)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisImageTransformParameterfvHP)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisImageTransformParameteriHP)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisImageTransformParameterivHP)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisImportMemoryFdEXT)(GLuint, GLuint64, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisImportMemoryWin32HandleEXT)(GLuint, GLuint64, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisImportMemoryWin32NameEXT)(GLuint, GLuint64, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisImportSemaphoreFdEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisImportSemaphoreWin32HandleEXT)(GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisImportSemaphoreWin32NameEXT)(GLuint, GLenum, const void *);
    GLsync(KHRONOS_APIENTRY * brebisImportSyncEXT)(GLenum, GLintptr, GLbitfield);
    void (KHRONOS_APIENTRY * brebisIndexFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisIndexFuncEXT)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY * brebisIndexMask)(GLuint);
    void (KHRONOS_APIENTRY * brebisIndexMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisIndexPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisIndexPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisIndexPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * brebisIndexd)(GLdouble);
    void (KHRONOS_APIENTRY * brebisIndexdv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisIndexf)(GLfloat);
    void (KHRONOS_APIENTRY * brebisIndexfv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisIndexi)(GLint);
    void (KHRONOS_APIENTRY * brebisIndexiv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisIndexs)(GLshort);
    void (KHRONOS_APIENTRY * brebisIndexsv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisIndexub)(GLubyte);
    void (KHRONOS_APIENTRY * brebisIndexubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * brebisIndexxOES)(GLfixed);
    void (KHRONOS_APIENTRY * brebisIndexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisInitNames)(void);
    void (KHRONOS_APIENTRY * brebisInsertComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisInsertEventMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisInstrumentsBufferSGIX)(GLsizei, GLint *);
    void (KHRONOS_APIENTRY * brebisInterleavedArrays)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisInterpolatePathsNV)(GLuint, GLuint, GLuint, GLfloat);
    void (KHRONOS_APIENTRY * brebisInvalidateBufferData)(GLuint);
    void (KHRONOS_APIENTRY * brebisInvalidateBufferSubData)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisInvalidateFramebuffer)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisInvalidateNamedFramebufferData)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisInvalidateNamedFramebufferSubData)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisInvalidateSubFramebuffer)(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisInvalidateTexImage)(GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisInvalidateTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    GLboolean(KHRONOS_APIENTRY * brebisIsAsyncMarkerSGIX)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsBufferARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsBufferResidentNV)(GLenum);
    GLboolean(KHRONOS_APIENTRY * brebisIsCommandListNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsEnabled)(GLenum);
    GLboolean(KHRONOS_APIENTRY * brebisIsEnabledIndexedEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsEnabledi)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsEnablediEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsEnablediNV)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsEnablediOES)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsFramebuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsFramebufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsFramebufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsImageHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * brebisIsImageHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * brebisIsList)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsMemoryObjectEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsNameAMD)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsNamedBufferResidentNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsNamedStringARB)(GLint, const GLchar *);
    GLboolean(KHRONOS_APIENTRY * brebisIsObjectBufferATI)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsOcclusionQueryNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsPathNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsPointInFillPathNV)(GLuint, GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY * brebisIsPointInStrokePathNV)(GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY * brebisIsProgram)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsProgramARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsProgramNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsProgramPipeline)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsProgramPipelineEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsQuery)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsQueryARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsQueryEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsRenderbuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsRenderbufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsRenderbufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsSampler)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsSemaphoreEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsShader)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsStateNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsSync)(GLsync);
    GLboolean(KHRONOS_APIENTRY * brebisIsSyncAPPLE)(GLsync);
    GLboolean(KHRONOS_APIENTRY * brebisIsTexture)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsTextureEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsTextureHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * brebisIsTextureHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY * brebisIsTransformFeedback)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsTransformFeedbackNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsVariantEnabledEXT)(GLuint, GLenum);
    GLboolean(KHRONOS_APIENTRY * brebisIsVertexArray)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsVertexArrayAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsVertexArrayOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisIsVertexAttribEnabledAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisLGPUCopyImageSubDataNVX)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisLGPUInterlockNVX)(void);
    void (KHRONOS_APIENTRY * brebisLGPUNamedBufferSubDataNVX)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * brebisLabelObjectEXT)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisLightEnviSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisLightModelf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisLightModelfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisLightModeli)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisLightModeliv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisLightModelx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisLightModelxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisLightModelxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisLightModelxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisLightf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisLightfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisLighti)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisLightiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisLightx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisLightxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisLightxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisLightxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisLineStipple)(GLint, GLushort);
    void (KHRONOS_APIENTRY * brebisLineWidth)(GLfloat);
    void (KHRONOS_APIENTRY * brebisLineWidthx)(GLfixed);
    void (KHRONOS_APIENTRY * brebisLineWidthxOES)(GLfixed);
    void (KHRONOS_APIENTRY * brebisLinkProgram)(GLuint);
    void (KHRONOS_APIENTRY * brebisLinkProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * brebisListBase)(GLuint);
    void (KHRONOS_APIENTRY * brebisListDrawCommandsStatesClientNV)(GLuint, GLuint, const void **, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY * brebisListParameterfSGIX)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisListParameterfvSGIX)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisListParameteriSGIX)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisListParameterivSGIX)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisLoadIdentity)(void);
    void (KHRONOS_APIENTRY * brebisLoadIdentityDeformationMapSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisLoadMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisLoadMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisLoadMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisLoadMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisLoadName)(GLuint);
    void (KHRONOS_APIENTRY * brebisLoadPaletteFromModelViewMatrixOES)(void);
    void (KHRONOS_APIENTRY * brebisLoadProgramNV)(GLenum, GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisLoadTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisLoadTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisLoadTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisLoadTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisLoadTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisLockArraysEXT)(GLint, GLsizei);
    void (KHRONOS_APIENTRY * brebisLogicOp)(GLenum);
    void (KHRONOS_APIENTRY * brebisMakeBufferNonResidentNV)(GLenum);
    void (KHRONOS_APIENTRY * brebisMakeBufferResidentNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisMakeImageHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY * brebisMakeImageHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY * brebisMakeImageHandleResidentARB)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY * brebisMakeImageHandleResidentNV)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY * brebisMakeNamedBufferNonResidentNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisMakeNamedBufferResidentNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisMakeTextureHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY * brebisMakeTextureHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY * brebisMakeTextureHandleResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY * brebisMakeTextureHandleResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY * brebisMap1d)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMap1f)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMap1xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void (KHRONOS_APIENTRY * brebisMap2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMap2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMap2xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void *(KHRONOS_APIENTRY * brebisMapBuffer)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY * brebisMapBufferARB)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY * brebisMapBufferOES)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY * brebisMapBufferRange)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY * brebisMapBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void (KHRONOS_APIENTRY * brebisMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *);
    void (KHRONOS_APIENTRY * brebisMapGrid1d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMapGrid1f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMapGrid1xOES)(GLint, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisMapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMapGrid2xOES)(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
    void *(KHRONOS_APIENTRY * brebisMapNamedBuffer)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY * brebisMapNamedBufferEXT)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY * brebisMapNamedBufferRange)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY * brebisMapNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY * brebisMapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY * brebisMapParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMapParameterivNV)(GLenum, GLenum, const GLint *);
    void *(KHRONOS_APIENTRY * brebisMapTexture2DINTEL)(GLuint, GLint, GLbitfield, GLint *, GLenum *);
    void (KHRONOS_APIENTRY * brebisMapVertexAttrib1dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMapVertexAttrib1fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMapVertexAttrib2dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMapVertexAttrib2fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMaterialf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisMaterialfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMateriali)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisMaterialiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMaterialx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisMaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisMaterialxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisMaterialxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisMatrixFrustumEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMatrixIndexPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisMatrixIndexPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisMatrixIndexubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisMatrixIndexuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisMatrixIndexusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY * brebisMatrixLoad3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixLoad3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixLoadIdentityEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisMatrixLoadTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixLoadTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMatrixLoadTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixLoaddEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMatrixLoadfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixMode)(GLenum);
    void (KHRONOS_APIENTRY * brebisMatrixMult3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixMult3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixMultTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixMultTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMatrixMultTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixMultdEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMatrixMultfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMatrixOrthoEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMatrixPopEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisMatrixPushEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisMatrixRotatedEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMatrixRotatefEXT)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMatrixScaledEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMatrixScalefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMatrixTranslatedEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMatrixTranslatefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMaxShaderCompilerThreadsARB)(GLuint);
    void (KHRONOS_APIENTRY * brebisMaxShaderCompilerThreadsKHR)(GLuint);
    void (KHRONOS_APIENTRY * brebisMemoryBarrier)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisMemoryBarrierByRegion)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisMemoryBarrierEXT)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisMemoryObjectParameterivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMinSampleShading)(GLfloat);
    void (KHRONOS_APIENTRY * brebisMinSampleShadingARB)(GLfloat);
    void (KHRONOS_APIENTRY * brebisMinSampleShadingOES)(GLfloat);
    void (KHRONOS_APIENTRY * brebisMinmax)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * brebisMinmaxEXT)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY * brebisMultMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisMultMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisMultTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisMultiDrawArrays)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawArraysEXT)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawArraysIndirect)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawArraysIndirectAMD)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawArraysIndirectBindlessCountNV)(GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisMultiDrawArraysIndirectBindlessNV)(GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisMultiDrawArraysIndirectCount)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawArraysIndirectCountARB)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawArraysIndirectEXT)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementArrayAPPLE)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawElements)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsBaseVertex)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsBaseVertexEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsIndirect)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsIndirectAMD)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsIndirectBindlessCountNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsIndirectBindlessNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsIndirectCount)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsIndirectCountARB)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawElementsIndirectEXT)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawMeshTasksIndirectCountNV)(GLintptr, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawMeshTasksIndirectNV)(GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY * brebisMultiModeDrawArraysIBM)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisMultiModeDrawElementsIBM)(const GLenum *, const GLsizei *, GLenum, const void *const*, GLsizei, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexBufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1bOES)(GLenum, GLbyte);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1d)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1dARB)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1f)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1fARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1hNV)(GLenum, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1i)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1iARB)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1s)(GLenum, GLshort);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1sARB)(GLenum, GLshort);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1xOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord1xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2bOES)(GLenum, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2d)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2dARB)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2f)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2fARB)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2hNV)(GLenum, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2i)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2iARB)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2s)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2sARB)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2xOES)(GLenum, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord2xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3bOES)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3dARB)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3fARB)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3i)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3iARB)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3sARB)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3xOES)(GLenum, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord3xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4bOES)(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4dARB)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4fARB)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4iARB)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4sARB)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4x)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4xOES)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisMultiTexCoord4xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoordP1ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoordP1uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoordP2ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoordP2uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoordP3ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoordP3uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoordP4ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisMultiTexCoordP4uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisMultiTexCoordPointerEXT)(GLenum, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisMultiTexEnvfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexEnviEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexEnvivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexGendEXT)(GLenum, GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY * brebisMultiTexGendvEXT)(GLenum, GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisMultiTexGenfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexGenfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexGeniEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexGenivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisMultiTexParameterfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMultiTexParameteriEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisMultiTexParameterivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisMultiTexRenderbufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisMulticastBarrierNV)(void);
    void (KHRONOS_APIENTRY * brebisMulticastBlitFramebufferNV)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY * brebisMulticastBufferSubDataNV)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * brebisMulticastCopyBufferSubDataNV)(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisMulticastCopyImageSubDataNV)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisMulticastFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisMulticastGetQueryObjecti64vNV)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY * brebisMulticastGetQueryObjectivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY * brebisMulticastGetQueryObjectui64vNV)(GLuint, GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY * brebisMulticastGetQueryObjectuivNV)(GLuint, GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY * brebisMulticastWaitSyncNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * brebisNamedBufferAttachMemoryNV)(GLuint, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisNamedBufferData)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY * brebisNamedBufferDataEXT)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY * brebisNamedBufferPageCommitmentARB)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY * brebisNamedBufferPageCommitmentEXT)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY * brebisNamedBufferStorage)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * brebisNamedBufferStorageEXT)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY * brebisNamedBufferStorageExternalEXT)(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY * brebisNamedBufferStorageMemEXT)(GLuint, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * brebisNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY * brebisNamedCopyBufferSubDataEXT)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferDrawBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferDrawBuffers)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferReadBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferRenderbuffer)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferRenderbufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferSampleLocationsfvARB)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferSamplePositionsfvAMD)(GLuint, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferTexture)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferTexture1DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferTexture2DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferTexture3DEXT)(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferTextureEXT)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferTextureFaceEXT)(GLuint, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferTextureLayer)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisNamedFramebufferTextureLayerEXT)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParameter4dEXT)(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParameter4dvEXT)(GLuint, GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParameter4fEXT)(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParameter4fvEXT)(GLuint, GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParameterI4iEXT)(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParameterI4ivEXT)(GLuint, GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParameterI4uiEXT)(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParameterI4uivEXT)(GLuint, GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParameters4fvEXT)(GLuint, GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParametersI4ivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisNamedProgramLocalParametersI4uivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisNamedProgramStringEXT)(GLuint, GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisNamedRenderbufferStorage)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisNamedRenderbufferStorageEXT)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisNamedRenderbufferStorageMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisNamedRenderbufferStorageMultisampleAdvancedAMD)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisNamedRenderbufferStorageMultisampleCoverageEXT)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisNamedRenderbufferStorageMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisNamedStringARB)(GLenum, GLint, const GLchar *, GLint, const GLchar *);
    GLuint(KHRONOS_APIENTRY * brebisNewBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY * brebisNewList)(GLuint, GLenum);
    GLuint(KHRONOS_APIENTRY * brebisNewObjectBufferATI)(GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY * brebisNormal3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisNormal3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisNormal3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisNormal3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisNormal3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisNormal3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisNormal3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisNormal3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisNormal3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisNormal3iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisNormal3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisNormal3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisNormal3x)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisNormal3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisNormal3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisNormalFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisNormalP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisNormalP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisNormalPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisNormalPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisNormalPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * brebisNormalPointervINTEL)(GLenum, const void **);
    void (KHRONOS_APIENTRY * brebisNormalStream3bATI)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisNormalStream3bvATI)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisNormalStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisNormalStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisNormalStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisNormalStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisNormalStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisNormalStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisNormalStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisNormalStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisObjectLabel)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisObjectLabelKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisObjectPtrLabel)(const void *, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisObjectPtrLabelKHR)(const void *, GLsizei, const GLchar *);
    GLenum(KHRONOS_APIENTRY * brebisObjectPurgeableAPPLE)(GLenum, GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY * brebisObjectUnpurgeableAPPLE)(GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisOrtho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisOrthof)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisOrthofOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisOrthox)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisOrthoxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisPNTrianglesfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPNTrianglesiATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPassTexCoordATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisPassThrough)(GLfloat);
    void (KHRONOS_APIENTRY * brebisPassThroughxOES)(GLfixed);
    void (KHRONOS_APIENTRY * brebisPatchParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPatchParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPatchParameteriEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPatchParameteriOES)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPathColorGenNV)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPathCommandsNV)(GLuint, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisPathCoordsNV)(GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisPathCoverDepthFuncNV)(GLenum);
    void (KHRONOS_APIENTRY * brebisPathDashArrayNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPathFogGenNV)(GLenum);
    GLenum(KHRONOS_APIENTRY * brebisPathGlyphIndexArrayNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY * brebisPathGlyphIndexRangeNV)(GLenum, const void *, GLbitfield, GLuint, GLfloat, GLuint[2]);
    void (KHRONOS_APIENTRY * brebisPathGlyphRangeNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
    void (KHRONOS_APIENTRY * brebisPathGlyphsNV)(GLuint, GLenum, const void *, GLbitfield, GLsizei, GLenum, const void *, GLenum, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY * brebisPathMemoryGlyphIndexArrayNV)(GLuint, GLenum, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
    void (KHRONOS_APIENTRY * brebisPathParameterfNV)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPathParameterfvNV)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPathParameteriNV)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPathParameterivNV)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisPathStencilDepthOffsetNV)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPathStencilFuncNV)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisPathStringNV)(GLuint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisPathSubCommandsNV)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisPathSubCoordsNV)(GLuint, GLsizei, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisPathTexGenNV)(GLenum, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPauseTransformFeedback)(void);
    void (KHRONOS_APIENTRY * brebisPauseTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY * brebisPixelDataRangeNV)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisPixelMapfv)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPixelMapuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisPixelMapusv)(GLenum, GLsizei, const GLushort *);
    void (KHRONOS_APIENTRY * brebisPixelMapx)(GLenum, GLint, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisPixelStoref)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPixelStorei)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPixelStorex)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisPixelTexGenParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPixelTexGenParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPixelTexGenParameteriSGIS)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPixelTexGenParameterivSGIS)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisPixelTexGenSGIX)(GLenum);
    void (KHRONOS_APIENTRY * brebisPixelTransferf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPixelTransferi)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPixelTransferxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisPixelTransformParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPixelTransformParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPixelTransformParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPixelTransformParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisPixelZoom)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPixelZoomxOES)(GLfixed, GLfixed);
    GLboolean(KHRONOS_APIENTRY * brebisPointAlongPathNV)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *);
    void (KHRONOS_APIENTRY * brebisPointParameterf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPointParameterfARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPointParameterfEXT)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPointParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisPointParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPointParameterfvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPointParameterfvEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPointParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPointParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPointParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisPointParameteriv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisPointParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisPointParameterx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisPointParameterxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisPointParameterxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisPointParameterxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisPointSize)(GLfloat);
    void (KHRONOS_APIENTRY * brebisPointSizePointerOES)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisPointSizex)(GLfixed);
    void (KHRONOS_APIENTRY * brebisPointSizexOES)(GLfixed);
    GLint(KHRONOS_APIENTRY * brebisPollAsyncSGIX)(GLuint *);
    GLint(KHRONOS_APIENTRY * brebisPollInstrumentsSGIX)(GLint *);
    void (KHRONOS_APIENTRY * brebisPolygonMode)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisPolygonModeNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisPolygonOffset)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPolygonOffsetClamp)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPolygonOffsetClampEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPolygonOffsetEXT)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPolygonOffsetx)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisPolygonOffsetxOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisPolygonStipple)(const GLubyte *);
    void (KHRONOS_APIENTRY * brebisPopAttrib)(void);
    void (KHRONOS_APIENTRY * brebisPopClientAttrib)(void);
    void (KHRONOS_APIENTRY * brebisPopDebugGroup)(void);
    void (KHRONOS_APIENTRY * brebisPopDebugGroupKHR)(void);
    void (KHRONOS_APIENTRY * brebisPopGroupMarkerEXT)(void);
    void (KHRONOS_APIENTRY * brebisPopMatrix)(void);
    void (KHRONOS_APIENTRY * brebisPopName)(void);
    void (KHRONOS_APIENTRY * brebisPresentFrameDualFillNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisPresentFrameKeyedNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisPrimitiveBoundingBox)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPrimitiveBoundingBoxARB)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPrimitiveBoundingBoxEXT)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPrimitiveBoundingBoxOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisPrimitiveRestartIndex)(GLuint);
    void (KHRONOS_APIENTRY * brebisPrimitiveRestartIndexNV)(GLuint);
    void (KHRONOS_APIENTRY * brebisPrimitiveRestartNV)(void);
    void (KHRONOS_APIENTRY * brebisPrioritizeTextures)(GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisPrioritizeTexturesEXT)(GLsizei, const GLuint *, const GLclampf *);
    void (KHRONOS_APIENTRY * brebisPrioritizeTexturesxOES)(GLsizei, const GLuint *, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisProgramBinary)(GLuint, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * brebisProgramBinaryOES)(GLuint, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY * brebisProgramBufferParametersIivNV)(GLenum, GLuint, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramBufferParametersIuivNV)(GLenum, GLuint, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramBufferParametersfvNV)(GLenum, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramEnvParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramEnvParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramEnvParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramEnvParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramEnvParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramEnvParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramEnvParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramEnvParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramEnvParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramEnvParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramEnvParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramLocalParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramLocalParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramLocalParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramLocalParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramLocalParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramLocalParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramLocalParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramLocalParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramLocalParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramLocalParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramLocalParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramNamedParameter4dNV)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramNamedParameter4dvNV)(GLuint, GLsizei, const GLubyte *, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramNamedParameter4fNV)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramNamedParameter4fvNV)(GLuint, GLsizei, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramParameter4dNV)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramParameter4dvNV)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramParameter4fNV)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramParameter4fvNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisProgramParameteriARB)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisProgramParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisProgramParameters4dvNV)(GLenum, GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramParameters4fvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramPathFragmentInputGenNV)(GLuint, GLint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramStringARB)(GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisProgramSubroutineParametersuivNV)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1d)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramUniform1dEXT)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramUniform1dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1f)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramUniform1fEXT)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramUniform1fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramUniform1i64ARB)(GLuint, GLint, GLint64);
    void (KHRONOS_APIENTRY * brebisProgramUniform1i64NV)(GLuint, GLint, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisProgramUniform1i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramUniform1iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1ui)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramUniform1ui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * brebisProgramUniform1ui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisProgramUniform1ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1uiEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramUniform1uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform1uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2d)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramUniform2dEXT)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramUniform2dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2f)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramUniform2fEXT)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramUniform2fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramUniform2i64ARB)(GLuint, GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY * brebisProgramUniform2i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisProgramUniform2i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramUniform2iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2ui)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramUniform2ui64ARB)(GLuint, GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * brebisProgramUniform2ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisProgramUniform2ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2uiEXT)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramUniform2uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform2uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3d)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramUniform3dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramUniform3dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3f)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramUniform3fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramUniform3fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramUniform3i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * brebisProgramUniform3i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisProgramUniform3i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramUniform3iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3ui)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramUniform3ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * brebisProgramUniform3ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisProgramUniform3ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramUniform3uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform3uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4d)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramUniform4dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisProgramUniform4dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4f)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramUniform4fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisProgramUniform4fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4i)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramUniform4i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * brebisProgramUniform4i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisProgramUniform4i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4iEXT)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisProgramUniform4iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4ui)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramUniform4ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * brebisProgramUniform4ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisProgramUniform4ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisProgramUniform4uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramUniform4uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisProgramUniformHandleui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * brebisProgramUniformHandleui64IMG)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * brebisProgramUniformHandleui64NV)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY * brebisProgramUniformHandleui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniformHandleui64vIMG)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniformHandleui64vNV)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix2x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix3x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformMatrix4x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisProgramUniformui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisProgramUniformui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisProgramVertexLimitNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisProvokingVertex)(GLenum);
    void (KHRONOS_APIENTRY * brebisProvokingVertexEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisPushAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisPushClientAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisPushClientAttribDefaultEXT)(GLbitfield);
    void (KHRONOS_APIENTRY * brebisPushDebugGroup)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisPushDebugGroupKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisPushGroupMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY * brebisPushMatrix)(void);
    void (KHRONOS_APIENTRY * brebisPushName)(GLuint);
    void (KHRONOS_APIENTRY * brebisQueryCounter)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisQueryCounterEXT)(GLuint, GLenum);
    GLbitfield(KHRONOS_APIENTRY * brebisQueryMatrixxOES)(GLfixed *, GLint *);
    void (KHRONOS_APIENTRY * brebisQueryObjectParameteruiAMD)(GLenum, GLuint, GLenum, GLuint);
    GLint(KHRONOS_APIENTRY * brebisQueryResourceNV)(GLenum, GLint, GLuint, GLint *);
    void (KHRONOS_APIENTRY * brebisQueryResourceTagNV)(GLint, const GLchar *);
    void (KHRONOS_APIENTRY * brebisRasterPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisRasterPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisRasterPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisRasterPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisRasterPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * brebisRasterPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisRasterPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisRasterPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisRasterPos2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisRasterPos2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisRasterPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisRasterPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisRasterPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisRasterPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisRasterPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisRasterPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisRasterPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisRasterPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisRasterPos3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisRasterPos3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisRasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisRasterPos4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisRasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisRasterPos4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisRasterPos4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisRasterPos4iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisRasterPos4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisRasterPos4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisRasterPos4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisRasterPos4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisRasterSamplesEXT)(GLuint, GLboolean);
    void (KHRONOS_APIENTRY * brebisReadBuffer)(GLenum);
    void (KHRONOS_APIENTRY * brebisReadBufferIndexedEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisReadBufferNV)(GLenum);
    void (KHRONOS_APIENTRY * brebisReadBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisReadInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY * brebisReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY * brebisReadnPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisReadnPixelsARB)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisReadnPixelsEXT)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisReadnPixelsKHR)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisRectd)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisRectdv)(const GLdouble *, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisRectf)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisRectfv)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisRecti)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisRectiv)(const GLint *, const GLint *);
    void (KHRONOS_APIENTRY * brebisRects)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisRectsv)(const GLshort *, const GLshort *);
    void (KHRONOS_APIENTRY * brebisRectxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisRectxvOES)(const GLfixed *, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisReferencePlaneSGIX)(const GLdouble *);
    GLboolean(KHRONOS_APIENTRY * brebisReleaseKeyedMutexWin32EXT)(GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisReleaseShaderCompiler)(void);
    void (KHRONOS_APIENTRY * brebisRenderGpuMaskNV)(GLbitfield);
    GLint(KHRONOS_APIENTRY * brebisRenderMode)(GLenum);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorage)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageEXT)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageMultisampleANGLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageMultisampleAPPLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageMultisampleAdvancedAMD)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageMultisampleIMG)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageMultisampleNV)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisRenderbufferStorageOES)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisReplacementCodePointerSUN)(GLenum, GLsizei, const void **);
    void (KHRONOS_APIENTRY * brebisReplacementCodeubSUN)(GLubyte);
    void (KHRONOS_APIENTRY * brebisReplacementCodeubvSUN)(const GLubyte *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiColor3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiColor3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiColor4ubVertex3fSUN)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiColor4ubVertex3fvSUN)(const GLuint *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiSUN)(GLuint);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiTexCoord2fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiTexCoord2fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuiVertex3fvSUN)(const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeuivSUN)(const GLuint *);
    void (KHRONOS_APIENTRY * brebisReplacementCodeusSUN)(GLushort);
    void (KHRONOS_APIENTRY * brebisReplacementCodeusvSUN)(const GLushort *);
    void (KHRONOS_APIENTRY * brebisRequestResidentProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisResetHistogram)(GLenum);
    void (KHRONOS_APIENTRY * brebisResetHistogramEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisResetMemoryObjectParameterNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisResetMinmax)(GLenum);
    void (KHRONOS_APIENTRY * brebisResetMinmaxEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisResizeBuffersMESA)(void);
    void (KHRONOS_APIENTRY * brebisResolveDepthValuesNV)(void);
    void (KHRONOS_APIENTRY * brebisResolveMultisampleFramebufferAPPLE)(void);
    void (KHRONOS_APIENTRY * brebisResumeTransformFeedback)(void);
    void (KHRONOS_APIENTRY * brebisResumeTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY * brebisRotated)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisRotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisRotatex)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisRotatexOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisSampleCoverage)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY * brebisSampleCoverageARB)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY * brebisSampleCoveragex)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY * brebisSampleCoveragexOES)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY * brebisSampleMapATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisSampleMaskEXT)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY * brebisSampleMaskIndexedNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * brebisSampleMaskSGIS)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY * brebisSampleMaski)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * brebisSamplePatternEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisSamplePatternSGIS)(GLenum);
    void (KHRONOS_APIENTRY * brebisSamplerParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisSamplerParameterIivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisSamplerParameterIivOES)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisSamplerParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisSamplerParameterIuivEXT)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisSamplerParameterIuivOES)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisSamplerParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisSamplerParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisSamplerParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisSamplerParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisScaled)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisScalef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisScalex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisScalexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisScissor)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisScissorArrayv)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisScissorArrayvNV)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisScissorArrayvOES)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisScissorExclusiveArrayvNV)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisScissorExclusiveNV)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisScissorIndexed)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisScissorIndexedNV)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisScissorIndexedOES)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisScissorIndexedv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisScissorIndexedvNV)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisScissorIndexedvOES)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3ubEXT)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3ubvEXT)(const GLubyte *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3uivEXT)(const GLuint *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3usEXT)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3usv)(const GLushort *);
    void (KHRONOS_APIENTRY * brebisSecondaryColor3usvEXT)(const GLushort *);
    void (KHRONOS_APIENTRY * brebisSecondaryColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisSecondaryColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisSecondaryColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisSecondaryColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisSecondaryColorPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisSecondaryColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * brebisSelectBuffer)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY * brebisSelectPerfMonitorCountersAMD)(GLuint, GLboolean, GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY * brebisSemaphoreParameterui64vEXT)(GLuint, GLenum, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisSeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY * brebisSeparableFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY * brebisSetFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY * brebisSetFenceNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisSetFragmentShaderConstantATI)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisSetInvariantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisSetLocalConstantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisSetMultisamplefvAMD)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisShadeModel)(GLenum);
    void (KHRONOS_APIENTRY * brebisShaderBinary)(GLsizei, const GLuint *, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY * brebisShaderOp1EXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisShaderOp2EXT)(GLenum, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisShaderOp3EXT)(GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisShaderSource)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY * brebisShaderSourceARB)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *);
    void (KHRONOS_APIENTRY * brebisShaderStorageBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisShadingRateImageBarrierNV)(GLboolean);
    void (KHRONOS_APIENTRY * brebisShadingRateImagePaletteNV)(GLuint, GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY * brebisShadingRateSampleOrderCustomNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisShadingRateSampleOrderNV)(GLenum);
    void (KHRONOS_APIENTRY * brebisSharpenTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisSignalSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY * brebisSignalVkFenceNV)(GLuint64);
    void (KHRONOS_APIENTRY * brebisSignalVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY * brebisSpecializeShader)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
    void (KHRONOS_APIENTRY * brebisSpecializeShaderARB)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
    void (KHRONOS_APIENTRY * brebisSpriteParameterfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisSpriteParameterfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisSpriteParameteriSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisSpriteParameterivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisStartInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY * brebisStartTilingQCOM)(GLuint, GLuint, GLuint, GLuint, GLbitfield);
    void (KHRONOS_APIENTRY * brebisStateCaptureNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisStencilClearTagEXT)(GLsizei, GLuint);
    void (KHRONOS_APIENTRY * brebisStencilFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisStencilFillPathNV)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisStencilFunc)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisStencilFuncSeparate)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisStencilFuncSeparateATI)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisStencilMask)(GLuint);
    void (KHRONOS_APIENTRY * brebisStencilMaskSeparate)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisStencilOp)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisStencilOpSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisStencilOpSeparateATI)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisStencilOpValueAMD)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisStencilStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisStencilStrokePathNV)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisStencilThenCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisStencilThenCoverFillPathNV)(GLuint, GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisStencilThenCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisStencilThenCoverStrokePathNV)(GLuint, GLint, GLuint, GLenum);
    void (KHRONOS_APIENTRY * brebisStopInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY * brebisStringMarkerGREMEDY)(GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisSubpixelPrecisionBiasNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisSwizzleEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisSyncTextureINTEL)(GLuint);
    void (KHRONOS_APIENTRY * brebisTagSampleBufferSGIX)(void);
    void (KHRONOS_APIENTRY * brebisTangent3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisTangent3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisTangent3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisTangent3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisTangent3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTangent3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTangent3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisTangent3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY * brebisTangent3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisTangent3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisTangentPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisTbufferMask3DFX)(GLuint);
    void (KHRONOS_APIENTRY * brebisTessellationFactorAMD)(GLfloat);
    void (KHRONOS_APIENTRY * brebisTessellationModeAMD)(GLenum);
    GLboolean(KHRONOS_APIENTRY * brebisTestFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisTestFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisTestObjectAPPLE)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexAttachMemoryNV)(GLenum, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTexBuffer)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexBufferARB)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexBufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexBufferOES)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexBufferRange)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisTexBufferRangeEXT)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisTexBufferRangeOES)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisTexBumpParameterfvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexBumpParameterivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTexCoord1bOES)(GLbyte);
    void (KHRONOS_APIENTRY * brebisTexCoord1bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisTexCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY * brebisTexCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisTexCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord1hNV)(GLhalfNV);
    void (KHRONOS_APIENTRY * brebisTexCoord1hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisTexCoord1i)(GLint);
    void (KHRONOS_APIENTRY * brebisTexCoord1iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisTexCoord1s)(GLshort);
    void (KHRONOS_APIENTRY * brebisTexCoord1sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisTexCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY * brebisTexCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisTexCoord2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisTexCoord2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisTexCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisTexCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisTexCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord2fColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord2fColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord2fColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord2fColor4ubVertex3fSUN)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord2fColor4ubVertex3fvSUN)(const GLfloat *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord2fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord2fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord2fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord2fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisTexCoord2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisTexCoord2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * brebisTexCoord2iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisTexCoord2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisTexCoord2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisTexCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisTexCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisTexCoord3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisTexCoord3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisTexCoord3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisTexCoord3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisTexCoord3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisTexCoord3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisTexCoord3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisTexCoord3iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisTexCoord3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisTexCoord3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisTexCoord3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisTexCoord3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisTexCoord4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisTexCoord4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisTexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisTexCoord4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisTexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord4fColor4fNormal3fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord4fColor4fNormal3fVertex4fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord4fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexCoord4fVertex4fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexCoord4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisTexCoord4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisTexCoord4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisTexCoord4iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisTexCoord4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisTexCoord4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisTexCoord4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisTexCoord4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisTexCoordFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisTexCoordP1ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexCoordP1uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisTexCoordP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexCoordP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisTexCoordP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexCoordP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisTexCoordP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexCoordP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisTexCoordPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisTexCoordPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisTexCoordPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * brebisTexCoordPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY * brebisTexEnvf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexEnvfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexEnvi)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisTexEnviv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTexEnvx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisTexEnvxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisTexEnvxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisTexEnvxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisTexFilterFuncSGIS)(GLenum, GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexGend)(GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY * brebisTexGendv)(GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisTexGenf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexGenfOES)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexGenfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexGenfvOES)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexGeni)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisTexGeniOES)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisTexGeniv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTexGenivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTexGenxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisTexGenxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisTexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexImage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTexImage2DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexImage3DEXT)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexImage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTexImage3DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexImage4DSGIS)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexPageCommitmentARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTexPageCommitmentEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTexParameterIiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTexParameterIivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTexParameterIivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTexParameterIuiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisTexParameterIuivEXT)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisTexParameterIuivOES)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisTexParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisTexParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTexParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisTexParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTexParameterx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisTexParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY * brebisTexParameterxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisTexParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY * brebisTexRenderbufferNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTexStorage1D)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisTexStorage1DEXT)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisTexStorage2D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisTexStorage2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisTexStorage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTexStorage3D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisTexStorage3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisTexStorage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTexStorage3DMultisampleOES)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTexStorageMem1DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTexStorageMem2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTexStorageMem2DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTexStorageMem3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTexStorageMem3DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTexStorageSparseAMD)(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY * brebisTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexSubImage1DEXT)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTexSubImage4DSGIS)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureAttachMemoryNV)(GLuint, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTextureBarrier)(void);
    void (KHRONOS_APIENTRY * brebisTextureBarrierNV)(void);
    void (KHRONOS_APIENTRY * brebisTextureBuffer)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTextureBufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTextureBufferRange)(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisTextureBufferRangeEXT)(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisTextureColorMaskSGIS)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTextureImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureImage2DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureImage2DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureImage2DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureImage3DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureImage3DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureImage3DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureLightEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisTextureMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisTextureNormalEXT)(GLenum);
    void (KHRONOS_APIENTRY * brebisTexturePageCommitmentEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTextureParameterIivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTextureParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisTextureParameterIuivEXT)(GLuint, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisTextureParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisTextureParameterfEXT)(GLuint, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisTextureParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTextureParameterfvEXT)(GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTextureParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisTextureParameteriEXT)(GLuint, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisTextureParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTextureParameterivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisTextureRangeAPPLE)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisTextureRenderbufferEXT)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisTextureStorage1D)(GLuint, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisTextureStorage1DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisTextureStorage2D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisTextureStorage2DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisTextureStorage2DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureStorage2DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureStorage3D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisTextureStorage3DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisTextureStorage3DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureStorage3DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY * brebisTextureStorageMem1DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTextureStorageMem2DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTextureStorageMem2DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTextureStorageMem3DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTextureStorageMem3DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY * brebisTextureStorageSparseAMD)(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY * brebisTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY * brebisTextureView)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisTextureViewEXT)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisTextureViewOES)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisTrackMatrixNV)(GLenum, GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisTransformFeedbackAttribsNV)(GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY * brebisTransformFeedbackBufferBase)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisTransformFeedbackBufferRange)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY * brebisTransformFeedbackStreamAttribsNV)(GLsizei, const GLint *, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY * brebisTransformFeedbackVaryings)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY * brebisTransformFeedbackVaryingsEXT)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY * brebisTransformFeedbackVaryingsNV)(GLuint, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY * brebisTransformPathNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisTranslated)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisTranslatef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisTranslatex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisTranslatexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisUniform1d)(GLint, GLdouble);
    void (KHRONOS_APIENTRY * brebisUniform1dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniform1f)(GLint, GLfloat);
    void (KHRONOS_APIENTRY * brebisUniform1fARB)(GLint, GLfloat);
    void (KHRONOS_APIENTRY * brebisUniform1fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniform1fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniform1i)(GLint, GLint);
    void (KHRONOS_APIENTRY * brebisUniform1i64ARB)(GLint, GLint64);
    void (KHRONOS_APIENTRY * brebisUniform1i64NV)(GLint, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisUniform1i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * brebisUniform1i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisUniform1iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY * brebisUniform1iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisUniform1ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisUniform1ui)(GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniform1ui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * brebisUniform1ui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisUniform1ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisUniform1ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisUniform1uiEXT)(GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniform1uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisUniform1uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisUniform2d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisUniform2dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniform2f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisUniform2fARB)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisUniform2fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniform2fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniform2i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisUniform2i64ARB)(GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY * brebisUniform2i64NV)(GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisUniform2i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * brebisUniform2i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisUniform2iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisUniform2iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisUniform2ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisUniform2ui)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniform2ui64ARB)(GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * brebisUniform2ui64NV)(GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisUniform2ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisUniform2ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisUniform2uiEXT)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniform2uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisUniform2uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisUniform3d)(GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisUniform3dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniform3f)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisUniform3fARB)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisUniform3fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniform3fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniform3i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisUniform3i64ARB)(GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * brebisUniform3i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisUniform3i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * brebisUniform3i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisUniform3iARB)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisUniform3iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisUniform3ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisUniform3ui)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniform3ui64ARB)(GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * brebisUniform3ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisUniform3ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisUniform3ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisUniform3uiEXT)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniform3uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisUniform3uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisUniform4d)(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisUniform4dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniform4f)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisUniform4fARB)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisUniform4fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniform4fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniform4i)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisUniform4i64ARB)(GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY * brebisUniform4i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisUniform4i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY * brebisUniform4i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisUniform4iARB)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisUniform4iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisUniform4ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisUniform4ui)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniform4ui64ARB)(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY * brebisUniform4ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisUniform4ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisUniform4ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisUniform4uiEXT)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniform4uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisUniform4uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisUniformBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniformBufferEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY * brebisUniformHandleui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * brebisUniformHandleui64IMG)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * brebisUniformHandleui64NV)(GLint, GLuint64);
    void (KHRONOS_APIENTRY * brebisUniformHandleui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisUniformHandleui64vIMG)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisUniformHandleui64vNV)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix2fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix2x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix2x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix2x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix2x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix2x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix2x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix3fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix3x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix3x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix3x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix3x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix3x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix3x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix4fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix4x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix4x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix4x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix4x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix4x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformMatrix4x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisUniformSubroutinesuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisUniformui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisUniformui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisUnlockArraysEXT)(void);
    GLboolean(KHRONOS_APIENTRY * brebisUnmapBuffer)(GLenum);
    GLboolean(KHRONOS_APIENTRY * brebisUnmapBufferARB)(GLenum);
    GLboolean(KHRONOS_APIENTRY * brebisUnmapBufferOES)(GLenum);
    GLboolean(KHRONOS_APIENTRY * brebisUnmapNamedBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY * brebisUnmapNamedBufferEXT)(GLuint);
    void (KHRONOS_APIENTRY * brebisUnmapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY * brebisUnmapTexture2DINTEL)(GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisUpdateObjectBufferATI)(GLuint, GLuint, GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY * brebisUseProgram)(GLuint);
    void (KHRONOS_APIENTRY * brebisUseProgramObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * brebisUseProgramStages)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY * brebisUseProgramStagesEXT)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY * brebisUseShaderProgramEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVDPAUFiniNV)(void);
    void (KHRONOS_APIENTRY * brebisVDPAUGetSurfaceivNV)(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY * brebisVDPAUInitNV)(const void *, const void *);
    GLboolean(KHRONOS_APIENTRY * brebisVDPAUIsSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY * brebisVDPAUMapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY * brebisVDPAURegisterOutputSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY * brebisVDPAURegisterVideoSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVDPAUSurfaceAccessNV)(GLvdpauSurfaceNV, GLenum);
    void (KHRONOS_APIENTRY * brebisVDPAUUnmapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    void (KHRONOS_APIENTRY * brebisVDPAUUnregisterSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY * brebisValidateProgram)(GLuint);
    void (KHRONOS_APIENTRY * brebisValidateProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY * brebisValidateProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY * brebisValidateProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY * brebisVariantArrayObjectATI)(GLuint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVariantPointerEXT)(GLuint, GLenum, GLuint, const void *);
    void (KHRONOS_APIENTRY * brebisVariantbvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVariantdvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVariantfvEXT)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVariantivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVariantsvEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVariantubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisVariantuivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVariantusvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * brebisVertex2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisVertex2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVertex2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertex2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertex2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertex2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertex2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisVertex2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertex2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertex2iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisVertex2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertex2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertex2xOES)(GLfixed);
    void (KHRONOS_APIENTRY * brebisVertex2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisVertex3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisVertex3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVertex3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertex3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertex3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertex3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertex3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisVertex3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertex3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertex3iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisVertex3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertex3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertex3xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisVertex3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisVertex4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY * brebisVertex4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertex4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertex4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertex4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisVertex4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertex4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertex4iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisVertex4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertex4sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertex4xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY * brebisVertex4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY * brebisVertexArrayAttribBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayAttribFormat)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayAttribIFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayAttribLFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayBindVertexBufferEXT)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY * brebisVertexArrayBindingDivisor)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayEdgeFlagOffsetEXT)(GLuint, GLuint, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayElementBuffer)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayFogCoordOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayIndexOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayMultiTexCoordOffsetEXT)(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayNormalOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayParameteriAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisVertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY * brebisVertexArrayRangeNV)(GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexArraySecondaryColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayTexCoordOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexAttribBindingEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexAttribDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexAttribFormatEXT)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexAttribIFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexAttribIOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexAttribLFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexAttribLOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexAttribOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexBindingDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexBuffer)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexBuffers)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY * brebisVertexArrayVertexOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1dARB)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1dNV)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1f)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1fARB)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1fNV)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1hNV)(GLuint, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1s)(GLuint, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1sARB)(GLuint, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1sNV)(GLuint, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib1svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2dARB)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2dNV)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2f)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2fARB)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2fNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2hNV)(GLuint, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2s)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2sARB)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2sNV)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib2svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3dARB)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3dNV)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3f)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3fARB)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3fNV)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3s)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3sARB)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3sNV)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib3svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4Nbv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4NbvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4Niv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4NivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4Nsv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4NsvARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4Nub)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4NubARB)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4Nubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4NubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4Nuiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4NuivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4Nusv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4NusvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4bvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4dARB)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4dNV)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4f)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4fARB)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4fNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4ivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4s)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4sARB)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4sNV)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4ubNV)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4ubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4ubvNV)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4uivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * brebisVertexAttrib4usvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * brebisVertexAttribArrayObjectATI)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribBinding)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribDivisorANGLE)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribDivisorARB)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribDivisorEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribDivisorNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribFormat)(GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribFormatNV)(GLuint, GLint, GLenum, GLboolean, GLsizei);
    void (KHRONOS_APIENTRY * brebisVertexAttribI1i)(GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI1iEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI1iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI1ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI1ui)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI1uiEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI1uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI1uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI2i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI2iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI2iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI2ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI2ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI2uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI2uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI2uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI3i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI3iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI3iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI3ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI3ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI3uiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI3uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI3uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4bvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4svEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4ubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4ui)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4uiEXT)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * brebisVertexAttribI4usvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY * brebisVertexAttribIFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribIFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisVertexAttribIPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexAttribIPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1dEXT)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1i64NV)(GLuint, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1ui64ARB)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1ui64NV)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1ui64vARB)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL1ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttribL2dEXT)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttribL2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL2dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL2i64NV)(GLuint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisVertexAttribL2i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL2ui64NV)(GLuint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisVertexAttribL2ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttribL3dEXT)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttribL3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL3dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL3i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisVertexAttribL3i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL3ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisVertexAttribL3ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttribL4dEXT)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexAttribL4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL4dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL4i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY * brebisVertexAttribL4i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY * brebisVertexAttribL4ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY * brebisVertexAttribL4ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisVertexAttribLFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribLFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisVertexAttribLPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexAttribLPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexAttribP1ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribP1uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribP2ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribP2uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribP3ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribP3uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribP4ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexAttribP4uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexAttribParameteriAMD)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisVertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexAttribPointerARB)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexAttribPointerNV)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs1dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs1fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs1hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs1svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs2dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs2fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs2hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs2svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs3dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs3fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs3hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs3svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs4dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs4fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs4hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs4svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexAttribs4ubvNV)(GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisVertexBindingDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexBlendARB)(GLint);
    void (KHRONOS_APIENTRY * brebisVertexBlendEnvfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexBlendEnviATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisVertexFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY * brebisVertexP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY * brebisVertexP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY * brebisVertexPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY * brebisVertexPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY * brebisVertexStream1dATI)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexStream1dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexStream1fATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexStream1fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexStream1iATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY * brebisVertexStream1ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexStream1sATI)(GLenum, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexStream1svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexStream2dATI)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexStream2dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexStream2fATI)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexStream2fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexStream2iATI)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexStream2ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexStream2sATI)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexStream2svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexStream4dATI)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisVertexStream4dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVertexStream4fATI)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexStream4fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexStream4iATI)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisVertexStream4ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisVertexStream4sATI)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisVertexStream4svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY * brebisVertexWeightPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisVertexWeightfEXT)(GLfloat);
    void (KHRONOS_APIENTRY * brebisVertexWeightfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVertexWeighthNV)(GLhalfNV);
    void (KHRONOS_APIENTRY * brebisVertexWeighthvNV)(const GLhalfNV *);
    GLenum(KHRONOS_APIENTRY * brebisVideoCaptureNV)(GLuint, GLuint *, GLuint64EXT *);
    void (KHRONOS_APIENTRY * brebisVideoCaptureStreamParameterdvNV)(GLuint, GLuint, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisVideoCaptureStreamParameterfvNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisVideoCaptureStreamParameterivNV)(GLuint, GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY * brebisViewport)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY * brebisViewportArrayv)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisViewportArrayvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisViewportArrayvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisViewportIndexedf)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisViewportIndexedfNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisViewportIndexedfOES)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisViewportIndexedfv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisViewportIndexedfvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisViewportIndexedfvOES)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisViewportPositionWScaleNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisViewportSwizzleNV)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY * brebisWaitSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY * brebisWaitSync)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY * brebisWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY * brebisWaitVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY * brebisWeightPathsNV)(GLuint, GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisWeightPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisWeightPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY * brebisWeightbvARB)(GLint, const GLbyte *);
    void (KHRONOS_APIENTRY * brebisWeightdvARB)(GLint, const GLdouble *);
    void (KHRONOS_APIENTRY * brebisWeightfvARB)(GLint, const GLfloat *);
    void (KHRONOS_APIENTRY * brebisWeightivARB)(GLint, const GLint *);
    void (KHRONOS_APIENTRY * brebisWeightsvARB)(GLint, const GLshort *);
    void (KHRONOS_APIENTRY * brebisWeightubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY * brebisWeightuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY * brebisWeightusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY * brebisWindowPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisWindowPos2dARB)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisWindowPos2dMESA)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisWindowPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisWindowPos2dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisWindowPos2dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisWindowPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisWindowPos2fARB)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisWindowPos2fMESA)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisWindowPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisWindowPos2fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisWindowPos2fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisWindowPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY * brebisWindowPos2iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY * brebisWindowPos2iMESA)(GLint, GLint);
    void (KHRONOS_APIENTRY * brebisWindowPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisWindowPos2ivARB)(const GLint *);
    void (KHRONOS_APIENTRY * brebisWindowPos2ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY * brebisWindowPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisWindowPos2sARB)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisWindowPos2sMESA)(GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisWindowPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisWindowPos2svARB)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisWindowPos2svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisWindowPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisWindowPos3dARB)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisWindowPos3dMESA)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisWindowPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisWindowPos3dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisWindowPos3dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisWindowPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisWindowPos3fARB)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisWindowPos3fMESA)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisWindowPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisWindowPos3fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisWindowPos3fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisWindowPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisWindowPos3iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisWindowPos3iMESA)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisWindowPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY * brebisWindowPos3ivARB)(const GLint *);
    void (KHRONOS_APIENTRY * brebisWindowPos3ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY * brebisWindowPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisWindowPos3sARB)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisWindowPos3sMESA)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisWindowPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisWindowPos3svARB)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisWindowPos3svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisWindowPos4dMESA)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY * brebisWindowPos4dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY * brebisWindowPos4fMESA)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY * brebisWindowPos4fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY * brebisWindowPos4iMESA)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY * brebisWindowPos4ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY * brebisWindowPos4sMESA)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY * brebisWindowPos4svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY * brebisWindowRectanglesEXT)(GLenum, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY * brebisWriteMaskEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);

} BrebisGLConfig;

extern BrebisGLConfig brebisGL; /* global instance. */

BREBIS_FORCE_INLINE khronos_int8_t brebisGLSupport(khronos_usize_t id) {
    return brebisGL.support[id];
}

BREBIS_FORCE_INLINE void  brebisAccum(GLenum op, GLfloat value) { brebisGL.brebisAccum(op, value); }
#define glAccum brebisAccum
BREBIS_FORCE_INLINE void  brebisAccumxOES(GLenum op, GLfixed value) { brebisGL.brebisAccumxOES(op, value); }
#define glAccumxOES brebisAccumxOES
BREBIS_FORCE_INLINE GLboolean brebisAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) { return brebisGL.brebisAcquireKeyedMutexWin32EXT(memory, key, timeout); }
#define glAcquireKeyedMutexWin32EXT brebisAcquireKeyedMutexWin32EXT
BREBIS_FORCE_INLINE void  brebisActiveProgramEXT(GLuint program) { brebisGL.brebisActiveProgramEXT(program); }
#define glActiveProgramEXT brebisActiveProgramEXT
BREBIS_FORCE_INLINE void  brebisActiveShaderProgram(GLuint pipeline, GLuint program) { brebisGL.brebisActiveShaderProgram(pipeline, program); }
#define glActiveShaderProgram brebisActiveShaderProgram
BREBIS_FORCE_INLINE void  brebisActiveShaderProgramEXT(GLuint pipeline, GLuint program) { brebisGL.brebisActiveShaderProgramEXT(pipeline, program); }
#define glActiveShaderProgramEXT brebisActiveShaderProgramEXT
BREBIS_FORCE_INLINE void  brebisActiveStencilFaceEXT(GLenum face) { brebisGL.brebisActiveStencilFaceEXT(face); }
#define glActiveStencilFaceEXT brebisActiveStencilFaceEXT
BREBIS_FORCE_INLINE void  brebisActiveTexture(GLenum texture) { brebisGL.brebisActiveTexture(texture); }
#define glActiveTexture brebisActiveTexture
BREBIS_FORCE_INLINE void  brebisActiveTextureARB(GLenum texture) { brebisGL.brebisActiveTextureARB(texture); }
#define glActiveTextureARB brebisActiveTextureARB
BREBIS_FORCE_INLINE void  brebisActiveVaryingNV(GLuint program, const GLchar * name) { brebisGL.brebisActiveVaryingNV(program, name); }
#define glActiveVaryingNV brebisActiveVaryingNV
BREBIS_FORCE_INLINE void  brebisAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { brebisGL.brebisAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod); }
#define glAlphaFragmentOp1ATI brebisAlphaFragmentOp1ATI
BREBIS_FORCE_INLINE void  brebisAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { brebisGL.brebisAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
#define glAlphaFragmentOp2ATI brebisAlphaFragmentOp2ATI
BREBIS_FORCE_INLINE void  brebisAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { brebisGL.brebisAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
#define glAlphaFragmentOp3ATI brebisAlphaFragmentOp3ATI
BREBIS_FORCE_INLINE void  brebisAlphaFunc(GLenum func, GLfloat ref) { brebisGL.brebisAlphaFunc(func, ref); }
#define glAlphaFunc brebisAlphaFunc
BREBIS_FORCE_INLINE void  brebisAlphaFuncQCOM(GLenum func, GLclampf ref) { brebisGL.brebisAlphaFuncQCOM(func, ref); }
#define glAlphaFuncQCOM brebisAlphaFuncQCOM
BREBIS_FORCE_INLINE void  brebisAlphaFuncx(GLenum func, GLfixed ref) { brebisGL.brebisAlphaFuncx(func, ref); }
#define glAlphaFuncx brebisAlphaFuncx
BREBIS_FORCE_INLINE void  brebisAlphaFuncxOES(GLenum func, GLfixed ref) { brebisGL.brebisAlphaFuncxOES(func, ref); }
#define glAlphaFuncxOES brebisAlphaFuncxOES
BREBIS_FORCE_INLINE void  brebisAlphaToCoverageDitherControlNV(GLenum mode) { brebisGL.brebisAlphaToCoverageDitherControlNV(mode); }
#define glAlphaToCoverageDitherControlNV brebisAlphaToCoverageDitherControlNV
BREBIS_FORCE_INLINE void  brebisApplyFramebufferAttachmentCMAAINTEL(void) { brebisGL.brebisApplyFramebufferAttachmentCMAAINTEL(); }
#define glApplyFramebufferAttachmentCMAAINTEL brebisApplyFramebufferAttachmentCMAAINTEL
BREBIS_FORCE_INLINE void  brebisApplyTextureEXT(GLenum mode) { brebisGL.brebisApplyTextureEXT(mode); }
#define glApplyTextureEXT brebisApplyTextureEXT
BREBIS_FORCE_INLINE GLboolean brebisAreProgramsResidentNV(GLsizei n, const GLuint * programs, GLboolean * residences) { return brebisGL.brebisAreProgramsResidentNV(n, programs, residences); }
#define glAreProgramsResidentNV brebisAreProgramsResidentNV
BREBIS_FORCE_INLINE GLboolean brebisAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) { return brebisGL.brebisAreTexturesResident(n, textures, residences); }
#define glAreTexturesResident brebisAreTexturesResident
BREBIS_FORCE_INLINE GLboolean brebisAreTexturesResidentEXT(GLsizei n, const GLuint * textures, GLboolean * residences) { return brebisGL.brebisAreTexturesResidentEXT(n, textures, residences); }
#define glAreTexturesResidentEXT brebisAreTexturesResidentEXT
BREBIS_FORCE_INLINE void  brebisArrayElement(GLint i) { brebisGL.brebisArrayElement(i); }
#define glArrayElement brebisArrayElement
BREBIS_FORCE_INLINE void  brebisArrayElementEXT(GLint i) { brebisGL.brebisArrayElementEXT(i); }
#define glArrayElementEXT brebisArrayElementEXT
BREBIS_FORCE_INLINE void  brebisArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { brebisGL.brebisArrayObjectATI(array, size, type, stride, buffer, offset); }
#define glArrayObjectATI brebisArrayObjectATI
BREBIS_FORCE_INLINE void  brebisAsyncMarkerSGIX(GLuint marker) { brebisGL.brebisAsyncMarkerSGIX(marker); }
#define glAsyncMarkerSGIX brebisAsyncMarkerSGIX
BREBIS_FORCE_INLINE void  brebisAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) { brebisGL.brebisAttachObjectARB(containerObj, obj); }
#define glAttachObjectARB brebisAttachObjectARB
BREBIS_FORCE_INLINE void  brebisAttachShader(GLuint program, GLuint shader) { brebisGL.brebisAttachShader(program, shader); }
#define glAttachShader brebisAttachShader
BREBIS_FORCE_INLINE void  brebisBegin(GLenum mode) { brebisGL.brebisBegin(mode); }
#define glBegin brebisBegin
BREBIS_FORCE_INLINE void  brebisBeginConditionalRender(GLuint id, GLenum mode) { brebisGL.brebisBeginConditionalRender(id, mode); }
#define glBeginConditionalRender brebisBeginConditionalRender
BREBIS_FORCE_INLINE void  brebisBeginConditionalRenderNV(GLuint id, GLenum mode) { brebisGL.brebisBeginConditionalRenderNV(id, mode); }
#define glBeginConditionalRenderNV brebisBeginConditionalRenderNV
BREBIS_FORCE_INLINE void  brebisBeginConditionalRenderNVX(GLuint id) { brebisGL.brebisBeginConditionalRenderNVX(id); }
#define glBeginConditionalRenderNVX brebisBeginConditionalRenderNVX
BREBIS_FORCE_INLINE void  brebisBeginFragmentShaderATI(void) { brebisGL.brebisBeginFragmentShaderATI(); }
#define glBeginFragmentShaderATI brebisBeginFragmentShaderATI
BREBIS_FORCE_INLINE void  brebisBeginOcclusionQueryNV(GLuint id) { brebisGL.brebisBeginOcclusionQueryNV(id); }
#define glBeginOcclusionQueryNV brebisBeginOcclusionQueryNV
BREBIS_FORCE_INLINE void  brebisBeginPerfMonitorAMD(GLuint monitor) { brebisGL.brebisBeginPerfMonitorAMD(monitor); }
#define glBeginPerfMonitorAMD brebisBeginPerfMonitorAMD
BREBIS_FORCE_INLINE void  brebisBeginPerfQueryINTEL(GLuint queryHandle) { brebisGL.brebisBeginPerfQueryINTEL(queryHandle); }
#define glBeginPerfQueryINTEL brebisBeginPerfQueryINTEL
BREBIS_FORCE_INLINE void  brebisBeginQuery(GLenum target, GLuint id) { brebisGL.brebisBeginQuery(target, id); }
#define glBeginQuery brebisBeginQuery
BREBIS_FORCE_INLINE void  brebisBeginQueryARB(GLenum target, GLuint id) { brebisGL.brebisBeginQueryARB(target, id); }
#define glBeginQueryARB brebisBeginQueryARB
BREBIS_FORCE_INLINE void  brebisBeginQueryEXT(GLenum target, GLuint id) { brebisGL.brebisBeginQueryEXT(target, id); }
#define glBeginQueryEXT brebisBeginQueryEXT
BREBIS_FORCE_INLINE void  brebisBeginQueryIndexed(GLenum target, GLuint index, GLuint id) { brebisGL.brebisBeginQueryIndexed(target, index, id); }
#define glBeginQueryIndexed brebisBeginQueryIndexed
BREBIS_FORCE_INLINE void  brebisBeginTransformFeedback(GLenum primitiveMode) { brebisGL.brebisBeginTransformFeedback(primitiveMode); }
#define glBeginTransformFeedback brebisBeginTransformFeedback
BREBIS_FORCE_INLINE void  brebisBeginTransformFeedbackEXT(GLenum primitiveMode) { brebisGL.brebisBeginTransformFeedbackEXT(primitiveMode); }
#define glBeginTransformFeedbackEXT brebisBeginTransformFeedbackEXT
BREBIS_FORCE_INLINE void  brebisBeginTransformFeedbackNV(GLenum primitiveMode) { brebisGL.brebisBeginTransformFeedbackNV(primitiveMode); }
#define glBeginTransformFeedbackNV brebisBeginTransformFeedbackNV
BREBIS_FORCE_INLINE void  brebisBeginVertexShaderEXT(void) { brebisGL.brebisBeginVertexShaderEXT(); }
#define glBeginVertexShaderEXT brebisBeginVertexShaderEXT
BREBIS_FORCE_INLINE void  brebisBeginVideoCaptureNV(GLuint video_capture_slot) { brebisGL.brebisBeginVideoCaptureNV(video_capture_slot); }
#define glBeginVideoCaptureNV brebisBeginVideoCaptureNV
BREBIS_FORCE_INLINE void  brebisBindAttribLocation(GLuint program, GLuint index, const GLchar * name) { brebisGL.brebisBindAttribLocation(program, index, name); }
#define glBindAttribLocation brebisBindAttribLocation
BREBIS_FORCE_INLINE void  brebisBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB * name) { brebisGL.brebisBindAttribLocationARB(programObj, index, name); }
#define glBindAttribLocationARB brebisBindAttribLocationARB
BREBIS_FORCE_INLINE void  brebisBindBuffer(GLenum target, GLuint buffer) { brebisGL.brebisBindBuffer(target, buffer); }
#define glBindBuffer brebisBindBuffer
BREBIS_FORCE_INLINE void  brebisBindBufferARB(GLenum target, GLuint buffer) { brebisGL.brebisBindBufferARB(target, buffer); }
#define glBindBufferARB brebisBindBufferARB
BREBIS_FORCE_INLINE void  brebisBindBufferBase(GLenum target, GLuint index, GLuint buffer) { brebisGL.brebisBindBufferBase(target, index, buffer); }
#define glBindBufferBase brebisBindBufferBase
BREBIS_FORCE_INLINE void  brebisBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) { brebisGL.brebisBindBufferBaseEXT(target, index, buffer); }
#define glBindBufferBaseEXT brebisBindBufferBaseEXT
BREBIS_FORCE_INLINE void  brebisBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) { brebisGL.brebisBindBufferBaseNV(target, index, buffer); }
#define glBindBufferBaseNV brebisBindBufferBaseNV
BREBIS_FORCE_INLINE void  brebisBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { brebisGL.brebisBindBufferOffsetEXT(target, index, buffer, offset); }
#define glBindBufferOffsetEXT brebisBindBufferOffsetEXT
BREBIS_FORCE_INLINE void  brebisBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { brebisGL.brebisBindBufferOffsetNV(target, index, buffer, offset); }
#define glBindBufferOffsetNV brebisBindBufferOffsetNV
BREBIS_FORCE_INLINE void  brebisBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { brebisGL.brebisBindBufferRange(target, index, buffer, offset, size); }
#define glBindBufferRange brebisBindBufferRange
BREBIS_FORCE_INLINE void  brebisBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { brebisGL.brebisBindBufferRangeEXT(target, index, buffer, offset, size); }
#define glBindBufferRangeEXT brebisBindBufferRangeEXT
BREBIS_FORCE_INLINE void  brebisBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { brebisGL.brebisBindBufferRangeNV(target, index, buffer, offset, size); }
#define glBindBufferRangeNV brebisBindBufferRangeNV
BREBIS_FORCE_INLINE void  brebisBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers) { brebisGL.brebisBindBuffersBase(target, first, count, buffers); }
#define glBindBuffersBase brebisBindBuffersBase
BREBIS_FORCE_INLINE void  brebisBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) { brebisGL.brebisBindBuffersRange(target, first, count, buffers, offsets, sizes); }
#define glBindBuffersRange brebisBindBuffersRange
BREBIS_FORCE_INLINE void  brebisBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) { brebisGL.brebisBindFragDataLocation(program, color, name); }
#define glBindFragDataLocation brebisBindFragDataLocation
BREBIS_FORCE_INLINE void  brebisBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar * name) { brebisGL.brebisBindFragDataLocationEXT(program, color, name); }
#define glBindFragDataLocationEXT brebisBindFragDataLocationEXT
BREBIS_FORCE_INLINE void  brebisBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { brebisGL.brebisBindFragDataLocationIndexed(program, colorNumber, index, name); }
#define glBindFragDataLocationIndexed brebisBindFragDataLocationIndexed
BREBIS_FORCE_INLINE void  brebisBindFragDataLocationIndexedEXT(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { brebisGL.brebisBindFragDataLocationIndexedEXT(program, colorNumber, index, name); }
#define glBindFragDataLocationIndexedEXT brebisBindFragDataLocationIndexedEXT
BREBIS_FORCE_INLINE void  brebisBindFragmentShaderATI(GLuint id) { brebisGL.brebisBindFragmentShaderATI(id); }
#define glBindFragmentShaderATI brebisBindFragmentShaderATI
BREBIS_FORCE_INLINE void  brebisBindFramebuffer(GLenum target, GLuint framebuffer) { brebisGL.brebisBindFramebuffer(target, framebuffer); }
#define glBindFramebuffer brebisBindFramebuffer
BREBIS_FORCE_INLINE void  brebisBindFramebufferEXT(GLenum target, GLuint framebuffer) { brebisGL.brebisBindFramebufferEXT(target, framebuffer); }
#define glBindFramebufferEXT brebisBindFramebufferEXT
BREBIS_FORCE_INLINE void  brebisBindFramebufferOES(GLenum target, GLuint framebuffer) { brebisGL.brebisBindFramebufferOES(target, framebuffer); }
#define glBindFramebufferOES brebisBindFramebufferOES
BREBIS_FORCE_INLINE void  brebisBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { brebisGL.brebisBindImageTexture(unit, texture, level, layered, layer, access, format); }
#define glBindImageTexture brebisBindImageTexture
BREBIS_FORCE_INLINE void  brebisBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) { brebisGL.brebisBindImageTextureEXT(index, texture, level, layered, layer, access, format); }
#define glBindImageTextureEXT brebisBindImageTextureEXT
BREBIS_FORCE_INLINE void  brebisBindImageTextures(GLuint first, GLsizei count, const GLuint * textures) { brebisGL.brebisBindImageTextures(first, count, textures); }
#define glBindImageTextures brebisBindImageTextures
BREBIS_FORCE_INLINE GLuint brebisBindLightParameterEXT(GLenum light, GLenum value) { return brebisGL.brebisBindLightParameterEXT(light, value); }
#define glBindLightParameterEXT brebisBindLightParameterEXT
BREBIS_FORCE_INLINE GLuint brebisBindMaterialParameterEXT(GLenum face, GLenum value) { return brebisGL.brebisBindMaterialParameterEXT(face, value); }
#define glBindMaterialParameterEXT brebisBindMaterialParameterEXT
BREBIS_FORCE_INLINE void  brebisBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) { brebisGL.brebisBindMultiTextureEXT(texunit, target, texture); }
#define glBindMultiTextureEXT brebisBindMultiTextureEXT
BREBIS_FORCE_INLINE GLuint brebisBindParameterEXT(GLenum value) { return brebisGL.brebisBindParameterEXT(value); }
#define glBindParameterEXT brebisBindParameterEXT
BREBIS_FORCE_INLINE void  brebisBindProgramARB(GLenum target, GLuint program) { brebisGL.brebisBindProgramARB(target, program); }
#define glBindProgramARB brebisBindProgramARB
BREBIS_FORCE_INLINE void  brebisBindProgramNV(GLenum target, GLuint id) { brebisGL.brebisBindProgramNV(target, id); }
#define glBindProgramNV brebisBindProgramNV
BREBIS_FORCE_INLINE void  brebisBindProgramPipeline(GLuint pipeline) { brebisGL.brebisBindProgramPipeline(pipeline); }
#define glBindProgramPipeline brebisBindProgramPipeline
BREBIS_FORCE_INLINE void  brebisBindProgramPipelineEXT(GLuint pipeline) { brebisGL.brebisBindProgramPipelineEXT(pipeline); }
#define glBindProgramPipelineEXT brebisBindProgramPipelineEXT
BREBIS_FORCE_INLINE void  brebisBindRenderbuffer(GLenum target, GLuint renderbuffer) { brebisGL.brebisBindRenderbuffer(target, renderbuffer); }
#define glBindRenderbuffer brebisBindRenderbuffer
BREBIS_FORCE_INLINE void  brebisBindRenderbufferEXT(GLenum target, GLuint renderbuffer) { brebisGL.brebisBindRenderbufferEXT(target, renderbuffer); }
#define glBindRenderbufferEXT brebisBindRenderbufferEXT
BREBIS_FORCE_INLINE void  brebisBindRenderbufferOES(GLenum target, GLuint renderbuffer) { brebisGL.brebisBindRenderbufferOES(target, renderbuffer); }
#define glBindRenderbufferOES brebisBindRenderbufferOES
BREBIS_FORCE_INLINE void  brebisBindSampler(GLuint unit, GLuint sampler) { brebisGL.brebisBindSampler(unit, sampler); }
#define glBindSampler brebisBindSampler
BREBIS_FORCE_INLINE void  brebisBindSamplers(GLuint first, GLsizei count, const GLuint * samplers) { brebisGL.brebisBindSamplers(first, count, samplers); }
#define glBindSamplers brebisBindSamplers
BREBIS_FORCE_INLINE void  brebisBindShadingRateImageNV(GLuint texture) { brebisGL.brebisBindShadingRateImageNV(texture); }
#define glBindShadingRateImageNV brebisBindShadingRateImageNV
BREBIS_FORCE_INLINE GLuint brebisBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) { return brebisGL.brebisBindTexGenParameterEXT(unit, coord, value); }
#define glBindTexGenParameterEXT brebisBindTexGenParameterEXT
BREBIS_FORCE_INLINE void  brebisBindTexture(GLenum target, GLuint texture) { brebisGL.brebisBindTexture(target, texture); }
#define glBindTexture brebisBindTexture
BREBIS_FORCE_INLINE void  brebisBindTextureEXT(GLenum target, GLuint texture) { brebisGL.brebisBindTextureEXT(target, texture); }
#define glBindTextureEXT brebisBindTextureEXT
BREBIS_FORCE_INLINE void  brebisBindTextureUnit(GLuint unit, GLuint texture) { brebisGL.brebisBindTextureUnit(unit, texture); }
#define glBindTextureUnit brebisBindTextureUnit
BREBIS_FORCE_INLINE GLuint brebisBindTextureUnitParameterEXT(GLenum unit, GLenum value) { return brebisGL.brebisBindTextureUnitParameterEXT(unit, value); }
#define glBindTextureUnitParameterEXT brebisBindTextureUnitParameterEXT
BREBIS_FORCE_INLINE void  brebisBindTextures(GLuint first, GLsizei count, const GLuint * textures) { brebisGL.brebisBindTextures(first, count, textures); }
#define glBindTextures brebisBindTextures
BREBIS_FORCE_INLINE void  brebisBindTransformFeedback(GLenum target, GLuint id) { brebisGL.brebisBindTransformFeedback(target, id); }
#define glBindTransformFeedback brebisBindTransformFeedback
BREBIS_FORCE_INLINE void  brebisBindTransformFeedbackNV(GLenum target, GLuint id) { brebisGL.brebisBindTransformFeedbackNV(target, id); }
#define glBindTransformFeedbackNV brebisBindTransformFeedbackNV
BREBIS_FORCE_INLINE void  brebisBindVertexArray(GLuint array) { brebisGL.brebisBindVertexArray(array); }
#define glBindVertexArray brebisBindVertexArray
BREBIS_FORCE_INLINE void  brebisBindVertexArrayAPPLE(GLuint array) { brebisGL.brebisBindVertexArrayAPPLE(array); }
#define glBindVertexArrayAPPLE brebisBindVertexArrayAPPLE
BREBIS_FORCE_INLINE void  brebisBindVertexArrayOES(GLuint array) { brebisGL.brebisBindVertexArrayOES(array); }
#define glBindVertexArrayOES brebisBindVertexArrayOES
BREBIS_FORCE_INLINE void  brebisBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { brebisGL.brebisBindVertexBuffer(bindingindex, buffer, offset, stride); }
#define glBindVertexBuffer brebisBindVertexBuffer
BREBIS_FORCE_INLINE void  brebisBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { brebisGL.brebisBindVertexBuffers(first, count, buffers, offsets, strides); }
#define glBindVertexBuffers brebisBindVertexBuffers
BREBIS_FORCE_INLINE void  brebisBindVertexShaderEXT(GLuint id) { brebisGL.brebisBindVertexShaderEXT(id); }
#define glBindVertexShaderEXT brebisBindVertexShaderEXT
BREBIS_FORCE_INLINE void  brebisBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) { brebisGL.brebisBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset); }
#define glBindVideoCaptureStreamBufferNV brebisBindVideoCaptureStreamBufferNV
BREBIS_FORCE_INLINE void  brebisBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) { brebisGL.brebisBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture); }
#define glBindVideoCaptureStreamTextureNV brebisBindVideoCaptureStreamTextureNV
BREBIS_FORCE_INLINE void  brebisBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) { brebisGL.brebisBinormal3bEXT(bx, by, bz); }
#define glBinormal3bEXT brebisBinormal3bEXT
BREBIS_FORCE_INLINE void  brebisBinormal3bvEXT(const GLbyte * v) { brebisGL.brebisBinormal3bvEXT(v); }
#define glBinormal3bvEXT brebisBinormal3bvEXT
BREBIS_FORCE_INLINE void  brebisBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) { brebisGL.brebisBinormal3dEXT(bx, by, bz); }
#define glBinormal3dEXT brebisBinormal3dEXT
BREBIS_FORCE_INLINE void  brebisBinormal3dvEXT(const GLdouble * v) { brebisGL.brebisBinormal3dvEXT(v); }
#define glBinormal3dvEXT brebisBinormal3dvEXT
BREBIS_FORCE_INLINE void  brebisBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) { brebisGL.brebisBinormal3fEXT(bx, by, bz); }
#define glBinormal3fEXT brebisBinormal3fEXT
BREBIS_FORCE_INLINE void  brebisBinormal3fvEXT(const GLfloat * v) { brebisGL.brebisBinormal3fvEXT(v); }
#define glBinormal3fvEXT brebisBinormal3fvEXT
BREBIS_FORCE_INLINE void  brebisBinormal3iEXT(GLint bx, GLint by, GLint bz) { brebisGL.brebisBinormal3iEXT(bx, by, bz); }
#define glBinormal3iEXT brebisBinormal3iEXT
BREBIS_FORCE_INLINE void  brebisBinormal3ivEXT(const GLint * v) { brebisGL.brebisBinormal3ivEXT(v); }
#define glBinormal3ivEXT brebisBinormal3ivEXT
BREBIS_FORCE_INLINE void  brebisBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) { brebisGL.brebisBinormal3sEXT(bx, by, bz); }
#define glBinormal3sEXT brebisBinormal3sEXT
BREBIS_FORCE_INLINE void  brebisBinormal3svEXT(const GLshort * v) { brebisGL.brebisBinormal3svEXT(v); }
#define glBinormal3svEXT brebisBinormal3svEXT
BREBIS_FORCE_INLINE void  brebisBinormalPointerEXT(GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisBinormalPointerEXT(type, stride, pointer); }
#define glBinormalPointerEXT brebisBinormalPointerEXT
BREBIS_FORCE_INLINE void  brebisBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) { brebisGL.brebisBitmap(width, height, xorig, yorig, xmove, ymove, bitmap); }
#define glBitmap brebisBitmap
BREBIS_FORCE_INLINE void  brebisBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap) { brebisGL.brebisBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap); }
#define glBitmapxOES brebisBitmapxOES
BREBIS_FORCE_INLINE void  brebisBlendBarrier(void) { brebisGL.brebisBlendBarrier(); }
#define glBlendBarrier brebisBlendBarrier
BREBIS_FORCE_INLINE void  brebisBlendBarrierKHR(void) { brebisGL.brebisBlendBarrierKHR(); }
#define glBlendBarrierKHR brebisBlendBarrierKHR
BREBIS_FORCE_INLINE void  brebisBlendBarrierNV(void) { brebisGL.brebisBlendBarrierNV(); }
#define glBlendBarrierNV brebisBlendBarrierNV
BREBIS_FORCE_INLINE void  brebisBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { brebisGL.brebisBlendColor(red, green, blue, alpha); }
#define glBlendColor brebisBlendColor
BREBIS_FORCE_INLINE void  brebisBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { brebisGL.brebisBlendColorEXT(red, green, blue, alpha); }
#define glBlendColorEXT brebisBlendColorEXT
BREBIS_FORCE_INLINE void  brebisBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { brebisGL.brebisBlendColorxOES(red, green, blue, alpha); }
#define glBlendColorxOES brebisBlendColorxOES
BREBIS_FORCE_INLINE void  brebisBlendEquation(GLenum mode) { brebisGL.brebisBlendEquation(mode); }
#define glBlendEquation brebisBlendEquation
BREBIS_FORCE_INLINE void  brebisBlendEquationEXT(GLenum mode) { brebisGL.brebisBlendEquationEXT(mode); }
#define glBlendEquationEXT brebisBlendEquationEXT
BREBIS_FORCE_INLINE void  brebisBlendEquationIndexedAMD(GLuint buf, GLenum mode) { brebisGL.brebisBlendEquationIndexedAMD(buf, mode); }
#define glBlendEquationIndexedAMD brebisBlendEquationIndexedAMD
BREBIS_FORCE_INLINE void  brebisBlendEquationOES(GLenum mode) { brebisGL.brebisBlendEquationOES(mode); }
#define glBlendEquationOES brebisBlendEquationOES
BREBIS_FORCE_INLINE void  brebisBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) { brebisGL.brebisBlendEquationSeparate(modeRGB, modeAlpha); }
#define glBlendEquationSeparate brebisBlendEquationSeparate
BREBIS_FORCE_INLINE void  brebisBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) { brebisGL.brebisBlendEquationSeparateEXT(modeRGB, modeAlpha); }
#define glBlendEquationSeparateEXT brebisBlendEquationSeparateEXT
BREBIS_FORCE_INLINE void  brebisBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { brebisGL.brebisBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparateIndexedAMD brebisBlendEquationSeparateIndexedAMD
BREBIS_FORCE_INLINE void  brebisBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha) { brebisGL.brebisBlendEquationSeparateOES(modeRGB, modeAlpha); }
#define glBlendEquationSeparateOES brebisBlendEquationSeparateOES
BREBIS_FORCE_INLINE void  brebisBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { brebisGL.brebisBlendEquationSeparatei(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparatei brebisBlendEquationSeparatei
BREBIS_FORCE_INLINE void  brebisBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { brebisGL.brebisBlendEquationSeparateiARB(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparateiARB brebisBlendEquationSeparateiARB
BREBIS_FORCE_INLINE void  brebisBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { brebisGL.brebisBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparateiEXT brebisBlendEquationSeparateiEXT
BREBIS_FORCE_INLINE void  brebisBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { brebisGL.brebisBlendEquationSeparateiOES(buf, modeRGB, modeAlpha); }
#define glBlendEquationSeparateiOES brebisBlendEquationSeparateiOES
BREBIS_FORCE_INLINE void  brebisBlendEquationi(GLuint buf, GLenum mode) { brebisGL.brebisBlendEquationi(buf, mode); }
#define glBlendEquationi brebisBlendEquationi
BREBIS_FORCE_INLINE void  brebisBlendEquationiARB(GLuint buf, GLenum mode) { brebisGL.brebisBlendEquationiARB(buf, mode); }
#define glBlendEquationiARB brebisBlendEquationiARB
BREBIS_FORCE_INLINE void  brebisBlendEquationiEXT(GLuint buf, GLenum mode) { brebisGL.brebisBlendEquationiEXT(buf, mode); }
#define glBlendEquationiEXT brebisBlendEquationiEXT
BREBIS_FORCE_INLINE void  brebisBlendEquationiOES(GLuint buf, GLenum mode) { brebisGL.brebisBlendEquationiOES(buf, mode); }
#define glBlendEquationiOES brebisBlendEquationiOES
BREBIS_FORCE_INLINE void  brebisBlendFunc(GLenum sfactor, GLenum dfactor) { brebisGL.brebisBlendFunc(sfactor, dfactor); }
#define glBlendFunc brebisBlendFunc
BREBIS_FORCE_INLINE void  brebisBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) { brebisGL.brebisBlendFuncIndexedAMD(buf, src, dst); }
#define glBlendFuncIndexedAMD brebisBlendFuncIndexedAMD
BREBIS_FORCE_INLINE void  brebisBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { brebisGL.brebisBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
#define glBlendFuncSeparate brebisBlendFuncSeparate
BREBIS_FORCE_INLINE void  brebisBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { brebisGL.brebisBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
#define glBlendFuncSeparateEXT brebisBlendFuncSeparateEXT
BREBIS_FORCE_INLINE void  brebisBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { brebisGL.brebisBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
#define glBlendFuncSeparateINGR brebisBlendFuncSeparateINGR
BREBIS_FORCE_INLINE void  brebisBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { brebisGL.brebisBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateIndexedAMD brebisBlendFuncSeparateIndexedAMD
BREBIS_FORCE_INLINE void  brebisBlendFuncSeparateOES(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { brebisGL.brebisBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateOES brebisBlendFuncSeparateOES
BREBIS_FORCE_INLINE void  brebisBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { brebisGL.brebisBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparatei brebisBlendFuncSeparatei
BREBIS_FORCE_INLINE void  brebisBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { brebisGL.brebisBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateiARB brebisBlendFuncSeparateiARB
BREBIS_FORCE_INLINE void  brebisBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { brebisGL.brebisBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateiEXT brebisBlendFuncSeparateiEXT
BREBIS_FORCE_INLINE void  brebisBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { brebisGL.brebisBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
#define glBlendFuncSeparateiOES brebisBlendFuncSeparateiOES
BREBIS_FORCE_INLINE void  brebisBlendFunci(GLuint buf, GLenum src, GLenum dst) { brebisGL.brebisBlendFunci(buf, src, dst); }
#define glBlendFunci brebisBlendFunci
BREBIS_FORCE_INLINE void  brebisBlendFunciARB(GLuint buf, GLenum src, GLenum dst) { brebisGL.brebisBlendFunciARB(buf, src, dst); }
#define glBlendFunciARB brebisBlendFunciARB
BREBIS_FORCE_INLINE void  brebisBlendFunciEXT(GLuint buf, GLenum src, GLenum dst) { brebisGL.brebisBlendFunciEXT(buf, src, dst); }
#define glBlendFunciEXT brebisBlendFunciEXT
BREBIS_FORCE_INLINE void  brebisBlendFunciOES(GLuint buf, GLenum src, GLenum dst) { brebisGL.brebisBlendFunciOES(buf, src, dst); }
#define glBlendFunciOES brebisBlendFunciOES
BREBIS_FORCE_INLINE void  brebisBlendParameteriNV(GLenum pname, GLint value) { brebisGL.brebisBlendParameteriNV(pname, value); }
#define glBlendParameteriNV brebisBlendParameteriNV
BREBIS_FORCE_INLINE void  brebisBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { brebisGL.brebisBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitFramebuffer brebisBlitFramebuffer
BREBIS_FORCE_INLINE void  brebisBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { brebisGL.brebisBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitFramebufferANGLE brebisBlitFramebufferANGLE
BREBIS_FORCE_INLINE void  brebisBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { brebisGL.brebisBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitFramebufferEXT brebisBlitFramebufferEXT
BREBIS_FORCE_INLINE void  brebisBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { brebisGL.brebisBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitFramebufferNV brebisBlitFramebufferNV
BREBIS_FORCE_INLINE void  brebisBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { brebisGL.brebisBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glBlitNamedFramebuffer brebisBlitNamedFramebuffer
BREBIS_FORCE_INLINE void  brebisBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) { brebisGL.brebisBufferAddressRangeNV(pname, index, address, length); }
#define glBufferAddressRangeNV brebisBufferAddressRangeNV
BREBIS_FORCE_INLINE void  brebisBufferAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) { brebisGL.brebisBufferAttachMemoryNV(target, memory, offset); }
#define glBufferAttachMemoryNV brebisBufferAttachMemoryNV
BREBIS_FORCE_INLINE void  brebisBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) { brebisGL.brebisBufferData(target, size, data, usage); }
#define glBufferData brebisBufferData
BREBIS_FORCE_INLINE void  brebisBufferDataARB(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage) { brebisGL.brebisBufferDataARB(target, size, data, usage); }
#define glBufferDataARB brebisBufferDataARB
BREBIS_FORCE_INLINE void  brebisBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) { brebisGL.brebisBufferPageCommitmentARB(target, offset, size, commit); }
#define glBufferPageCommitmentARB brebisBufferPageCommitmentARB
BREBIS_FORCE_INLINE void  brebisBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) { brebisGL.brebisBufferParameteriAPPLE(target, pname, param); }
#define glBufferParameteriAPPLE brebisBufferParameteriAPPLE
BREBIS_FORCE_INLINE GLuint brebisBufferRegionEnabled(void) { return brebisGL.brebisBufferRegionEnabled(); }
#define glBufferRegionEnabled brebisBufferRegionEnabled
BREBIS_FORCE_INLINE void  brebisBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { brebisGL.brebisBufferStorage(target, size, data, flags); }
#define glBufferStorage brebisBufferStorage
BREBIS_FORCE_INLINE void  brebisBufferStorageEXT(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { brebisGL.brebisBufferStorageEXT(target, size, data, flags); }
#define glBufferStorageEXT brebisBufferStorageEXT
BREBIS_FORCE_INLINE void  brebisBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { brebisGL.brebisBufferStorageExternalEXT(target, offset, size, clientBuffer, flags); }
#define glBufferStorageExternalEXT brebisBufferStorageExternalEXT
BREBIS_FORCE_INLINE void  brebisBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) { brebisGL.brebisBufferStorageMemEXT(target, size, memory, offset); }
#define glBufferStorageMemEXT brebisBufferStorageMemEXT
BREBIS_FORCE_INLINE void  brebisBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) { brebisGL.brebisBufferSubData(target, offset, size, data); }
#define glBufferSubData brebisBufferSubData
BREBIS_FORCE_INLINE void  brebisBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data) { brebisGL.brebisBufferSubDataARB(target, offset, size, data); }
#define glBufferSubDataARB brebisBufferSubDataARB
BREBIS_FORCE_INLINE void  brebisCallCommandListNV(GLuint list) { brebisGL.brebisCallCommandListNV(list); }
#define glCallCommandListNV brebisCallCommandListNV
BREBIS_FORCE_INLINE void  brebisCallList(GLuint list) { brebisGL.brebisCallList(list); }
#define glCallList brebisCallList
BREBIS_FORCE_INLINE void  brebisCallLists(GLsizei n, GLenum type, const void * lists) { brebisGL.brebisCallLists(n, type, lists); }
#define glCallLists brebisCallLists
BREBIS_FORCE_INLINE GLenum brebisCheckFramebufferStatus(GLenum target) { return brebisGL.brebisCheckFramebufferStatus(target); }
#define glCheckFramebufferStatus brebisCheckFramebufferStatus
BREBIS_FORCE_INLINE GLenum brebisCheckFramebufferStatusEXT(GLenum target) { return brebisGL.brebisCheckFramebufferStatusEXT(target); }
#define glCheckFramebufferStatusEXT brebisCheckFramebufferStatusEXT
BREBIS_FORCE_INLINE GLenum brebisCheckFramebufferStatusOES(GLenum target) { return brebisGL.brebisCheckFramebufferStatusOES(target); }
#define glCheckFramebufferStatusOES brebisCheckFramebufferStatusOES
BREBIS_FORCE_INLINE GLenum brebisCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) { return brebisGL.brebisCheckNamedFramebufferStatus(framebuffer, target); }
#define glCheckNamedFramebufferStatus brebisCheckNamedFramebufferStatus
BREBIS_FORCE_INLINE GLenum brebisCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) { return brebisGL.brebisCheckNamedFramebufferStatusEXT(framebuffer, target); }
#define glCheckNamedFramebufferStatusEXT brebisCheckNamedFramebufferStatusEXT
BREBIS_FORCE_INLINE void  brebisClampColor(GLenum target, GLenum clamp) { brebisGL.brebisClampColor(target, clamp); }
#define glClampColor brebisClampColor
BREBIS_FORCE_INLINE void  brebisClampColorARB(GLenum target, GLenum clamp) { brebisGL.brebisClampColorARB(target, clamp); }
#define glClampColorARB brebisClampColorARB
BREBIS_FORCE_INLINE void  brebisClear(GLbitfield mask) { brebisGL.brebisClear(mask); }
#define glClear brebisClear
BREBIS_FORCE_INLINE void  brebisClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { brebisGL.brebisClearAccum(red, green, blue, alpha); }
#define glClearAccum brebisClearAccum
BREBIS_FORCE_INLINE void  brebisClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { brebisGL.brebisClearAccumxOES(red, green, blue, alpha); }
#define glClearAccumxOES brebisClearAccumxOES
BREBIS_FORCE_INLINE void  brebisClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearBufferData(target, internalformat, format, type, data); }
#define glClearBufferData brebisClearBufferData
BREBIS_FORCE_INLINE void  brebisClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearBufferSubData(target, internalformat, offset, size, format, type, data); }
#define glClearBufferSubData brebisClearBufferSubData
BREBIS_FORCE_INLINE void  brebisClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { brebisGL.brebisClearBufferfi(buffer, drawbuffer, depth, stencil); }
#define glClearBufferfi brebisClearBufferfi
BREBIS_FORCE_INLINE void  brebisClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) { brebisGL.brebisClearBufferfv(buffer, drawbuffer, value); }
#define glClearBufferfv brebisClearBufferfv
BREBIS_FORCE_INLINE void  brebisClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) { brebisGL.brebisClearBufferiv(buffer, drawbuffer, value); }
#define glClearBufferiv brebisClearBufferiv
BREBIS_FORCE_INLINE void  brebisClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) { brebisGL.brebisClearBufferuiv(buffer, drawbuffer, value); }
#define glClearBufferuiv brebisClearBufferuiv
BREBIS_FORCE_INLINE void  brebisClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { brebisGL.brebisClearColor(red, green, blue, alpha); }
#define glClearColor brebisClearColor
BREBIS_FORCE_INLINE void  brebisClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) { brebisGL.brebisClearColorIiEXT(red, green, blue, alpha); }
#define glClearColorIiEXT brebisClearColorIiEXT
BREBIS_FORCE_INLINE void  brebisClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) { brebisGL.brebisClearColorIuiEXT(red, green, blue, alpha); }
#define glClearColorIuiEXT brebisClearColorIuiEXT
BREBIS_FORCE_INLINE void  brebisClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { brebisGL.brebisClearColorx(red, green, blue, alpha); }
#define glClearColorx brebisClearColorx
BREBIS_FORCE_INLINE void  brebisClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { brebisGL.brebisClearColorxOES(red, green, blue, alpha); }
#define glClearColorxOES brebisClearColorxOES
BREBIS_FORCE_INLINE void  brebisClearDepth(GLdouble depth) { brebisGL.brebisClearDepth(depth); }
#define glClearDepth brebisClearDepth
BREBIS_FORCE_INLINE void  brebisClearDepthdNV(GLdouble depth) { brebisGL.brebisClearDepthdNV(depth); }
#define glClearDepthdNV brebisClearDepthdNV
BREBIS_FORCE_INLINE void  brebisClearDepthf(GLfloat d) { brebisGL.brebisClearDepthf(d); }
#define glClearDepthf brebisClearDepthf
BREBIS_FORCE_INLINE void  brebisClearDepthfOES(GLclampf depth) { brebisGL.brebisClearDepthfOES(depth); }
#define glClearDepthfOES brebisClearDepthfOES
BREBIS_FORCE_INLINE void  brebisClearDepthx(GLfixed depth) { brebisGL.brebisClearDepthx(depth); }
#define glClearDepthx brebisClearDepthx
BREBIS_FORCE_INLINE void  brebisClearDepthxOES(GLfixed depth) { brebisGL.brebisClearDepthxOES(depth); }
#define glClearDepthxOES brebisClearDepthxOES
BREBIS_FORCE_INLINE void  brebisClearIndex(GLfloat c) { brebisGL.brebisClearIndex(c); }
#define glClearIndex brebisClearIndex
BREBIS_FORCE_INLINE void  brebisClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearNamedBufferData(buffer, internalformat, format, type, data); }
#define glClearNamedBufferData brebisClearNamedBufferData
BREBIS_FORCE_INLINE void  brebisClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearNamedBufferDataEXT(buffer, internalformat, format, type, data); }
#define glClearNamedBufferDataEXT brebisClearNamedBufferDataEXT
BREBIS_FORCE_INLINE void  brebisClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data); }
#define glClearNamedBufferSubData brebisClearNamedBufferSubData
BREBIS_FORCE_INLINE void  brebisClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data); }
#define glClearNamedBufferSubDataEXT brebisClearNamedBufferSubDataEXT
BREBIS_FORCE_INLINE void  brebisClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { brebisGL.brebisClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil); }
#define glClearNamedFramebufferfi brebisClearNamedFramebufferfi
BREBIS_FORCE_INLINE void  brebisClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) { brebisGL.brebisClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value); }
#define glClearNamedFramebufferfv brebisClearNamedFramebufferfv
BREBIS_FORCE_INLINE void  brebisClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) { brebisGL.brebisClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value); }
#define glClearNamedFramebufferiv brebisClearNamedFramebufferiv
BREBIS_FORCE_INLINE void  brebisClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) { brebisGL.brebisClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value); }
#define glClearNamedFramebufferuiv brebisClearNamedFramebufferuiv
BREBIS_FORCE_INLINE void  brebisClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint * values) { brebisGL.brebisClearPixelLocalStorageuiEXT(offset, n, values); }
#define glClearPixelLocalStorageuiEXT brebisClearPixelLocalStorageuiEXT
BREBIS_FORCE_INLINE void  brebisClearStencil(GLint s) { brebisGL.brebisClearStencil(s); }
#define glClearStencil brebisClearStencil
BREBIS_FORCE_INLINE void  brebisClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearTexImage(texture, level, format, type, data); }
#define glClearTexImage brebisClearTexImage
BREBIS_FORCE_INLINE void  brebisClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearTexImageEXT(texture, level, format, type, data); }
#define glClearTexImageEXT brebisClearTexImageEXT
BREBIS_FORCE_INLINE void  brebisClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
#define glClearTexSubImage brebisClearTexSubImage
BREBIS_FORCE_INLINE void  brebisClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { brebisGL.brebisClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
#define glClearTexSubImageEXT brebisClearTexSubImageEXT
BREBIS_FORCE_INLINE void  brebisClientActiveTexture(GLenum texture) { brebisGL.brebisClientActiveTexture(texture); }
#define glClientActiveTexture brebisClientActiveTexture
BREBIS_FORCE_INLINE void  brebisClientActiveTextureARB(GLenum texture) { brebisGL.brebisClientActiveTextureARB(texture); }
#define glClientActiveTextureARB brebisClientActiveTextureARB
BREBIS_FORCE_INLINE void  brebisClientActiveVertexStreamATI(GLenum stream) { brebisGL.brebisClientActiveVertexStreamATI(stream); }
#define glClientActiveVertexStreamATI brebisClientActiveVertexStreamATI
BREBIS_FORCE_INLINE void  brebisClientAttribDefaultEXT(GLbitfield mask) { brebisGL.brebisClientAttribDefaultEXT(mask); }
#define glClientAttribDefaultEXT brebisClientAttribDefaultEXT
BREBIS_FORCE_INLINE GLenum brebisClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { return brebisGL.brebisClientWaitSync(sync, flags, timeout); }
#define glClientWaitSync brebisClientWaitSync
BREBIS_FORCE_INLINE GLenum brebisClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { return brebisGL.brebisClientWaitSyncAPPLE(sync, flags, timeout); }
#define glClientWaitSyncAPPLE brebisClientWaitSyncAPPLE
BREBIS_FORCE_INLINE void  brebisClipControl(GLenum origin, GLenum depth) { brebisGL.brebisClipControl(origin, depth); }
#define glClipControl brebisClipControl
BREBIS_FORCE_INLINE void  brebisClipControlEXT(GLenum origin, GLenum depth) { brebisGL.brebisClipControlEXT(origin, depth); }
#define glClipControlEXT brebisClipControlEXT
BREBIS_FORCE_INLINE void  brebisClipPlane(GLenum plane, const GLdouble * equation) { brebisGL.brebisClipPlane(plane, equation); }
#define glClipPlane brebisClipPlane
BREBIS_FORCE_INLINE void  brebisClipPlanef(GLenum p, const GLfloat * eqn) { brebisGL.brebisClipPlanef(p, eqn); }
#define glClipPlanef brebisClipPlanef
BREBIS_FORCE_INLINE void  brebisClipPlanefIMG(GLenum p, const GLfloat * eqn) { brebisGL.brebisClipPlanefIMG(p, eqn); }
#define glClipPlanefIMG brebisClipPlanefIMG
BREBIS_FORCE_INLINE void  brebisClipPlanefOES(GLenum plane, const GLfloat * equation) { brebisGL.brebisClipPlanefOES(plane, equation); }
#define glClipPlanefOES brebisClipPlanefOES
BREBIS_FORCE_INLINE void  brebisClipPlanex(GLenum plane, const GLfixed * equation) { brebisGL.brebisClipPlanex(plane, equation); }
#define glClipPlanex brebisClipPlanex
BREBIS_FORCE_INLINE void  brebisClipPlanexIMG(GLenum p, const GLfixed * eqn) { brebisGL.brebisClipPlanexIMG(p, eqn); }
#define glClipPlanexIMG brebisClipPlanexIMG
BREBIS_FORCE_INLINE void  brebisClipPlanexOES(GLenum plane, const GLfixed * equation) { brebisGL.brebisClipPlanexOES(plane, equation); }
#define glClipPlanexOES brebisClipPlanexOES
BREBIS_FORCE_INLINE void  brebisColor3b(GLbyte red, GLbyte green, GLbyte blue) { brebisGL.brebisColor3b(red, green, blue); }
#define glColor3b brebisColor3b
BREBIS_FORCE_INLINE void  brebisColor3bv(const GLbyte * v) { brebisGL.brebisColor3bv(v); }
#define glColor3bv brebisColor3bv
BREBIS_FORCE_INLINE void  brebisColor3d(GLdouble red, GLdouble green, GLdouble blue) { brebisGL.brebisColor3d(red, green, blue); }
#define glColor3d brebisColor3d
BREBIS_FORCE_INLINE void  brebisColor3dv(const GLdouble * v) { brebisGL.brebisColor3dv(v); }
#define glColor3dv brebisColor3dv
BREBIS_FORCE_INLINE void  brebisColor3f(GLfloat red, GLfloat green, GLfloat blue) { brebisGL.brebisColor3f(red, green, blue); }
#define glColor3f brebisColor3f
BREBIS_FORCE_INLINE void  brebisColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisColor3fVertex3fSUN(r, g, b, x, y, z); }
#define glColor3fVertex3fSUN brebisColor3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v) { brebisGL.brebisColor3fVertex3fvSUN(c, v); }
#define glColor3fVertex3fvSUN brebisColor3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisColor3fv(const GLfloat * v) { brebisGL.brebisColor3fv(v); }
#define glColor3fv brebisColor3fv
BREBIS_FORCE_INLINE void  brebisColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { brebisGL.brebisColor3hNV(red, green, blue); }
#define glColor3hNV brebisColor3hNV
BREBIS_FORCE_INLINE void  brebisColor3hvNV(const GLhalfNV * v) { brebisGL.brebisColor3hvNV(v); }
#define glColor3hvNV brebisColor3hvNV
BREBIS_FORCE_INLINE void  brebisColor3i(GLint red, GLint green, GLint blue) { brebisGL.brebisColor3i(red, green, blue); }
#define glColor3i brebisColor3i
BREBIS_FORCE_INLINE void  brebisColor3iv(const GLint * v) { brebisGL.brebisColor3iv(v); }
#define glColor3iv brebisColor3iv
BREBIS_FORCE_INLINE void  brebisColor3s(GLshort red, GLshort green, GLshort blue) { brebisGL.brebisColor3s(red, green, blue); }
#define glColor3s brebisColor3s
BREBIS_FORCE_INLINE void  brebisColor3sv(const GLshort * v) { brebisGL.brebisColor3sv(v); }
#define glColor3sv brebisColor3sv
BREBIS_FORCE_INLINE void  brebisColor3ub(GLubyte red, GLubyte green, GLubyte blue) { brebisGL.brebisColor3ub(red, green, blue); }
#define glColor3ub brebisColor3ub
BREBIS_FORCE_INLINE void  brebisColor3ubv(const GLubyte * v) { brebisGL.brebisColor3ubv(v); }
#define glColor3ubv brebisColor3ubv
BREBIS_FORCE_INLINE void  brebisColor3ui(GLuint red, GLuint green, GLuint blue) { brebisGL.brebisColor3ui(red, green, blue); }
#define glColor3ui brebisColor3ui
BREBIS_FORCE_INLINE void  brebisColor3uiv(const GLuint * v) { brebisGL.brebisColor3uiv(v); }
#define glColor3uiv brebisColor3uiv
BREBIS_FORCE_INLINE void  brebisColor3us(GLushort red, GLushort green, GLushort blue) { brebisGL.brebisColor3us(red, green, blue); }
#define glColor3us brebisColor3us
BREBIS_FORCE_INLINE void  brebisColor3usv(const GLushort * v) { brebisGL.brebisColor3usv(v); }
#define glColor3usv brebisColor3usv
BREBIS_FORCE_INLINE void  brebisColor3xOES(GLfixed red, GLfixed green, GLfixed blue) { brebisGL.brebisColor3xOES(red, green, blue); }
#define glColor3xOES brebisColor3xOES
BREBIS_FORCE_INLINE void  brebisColor3xvOES(const GLfixed * components) { brebisGL.brebisColor3xvOES(components); }
#define glColor3xvOES brebisColor3xvOES
BREBIS_FORCE_INLINE void  brebisColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) { brebisGL.brebisColor4b(red, green, blue, alpha); }
#define glColor4b brebisColor4b
BREBIS_FORCE_INLINE void  brebisColor4bv(const GLbyte * v) { brebisGL.brebisColor4bv(v); }
#define glColor4bv brebisColor4bv
BREBIS_FORCE_INLINE void  brebisColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) { brebisGL.brebisColor4d(red, green, blue, alpha); }
#define glColor4d brebisColor4d
BREBIS_FORCE_INLINE void  brebisColor4dv(const GLdouble * v) { brebisGL.brebisColor4dv(v); }
#define glColor4dv brebisColor4dv
BREBIS_FORCE_INLINE void  brebisColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { brebisGL.brebisColor4f(red, green, blue, alpha); }
#define glColor4f brebisColor4f
BREBIS_FORCE_INLINE void  brebisColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z); }
#define glColor4fNormal3fVertex3fSUN brebisColor4fNormal3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v) { brebisGL.brebisColor4fNormal3fVertex3fvSUN(c, n, v); }
#define glColor4fNormal3fVertex3fvSUN brebisColor4fNormal3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisColor4fv(const GLfloat * v) { brebisGL.brebisColor4fv(v); }
#define glColor4fv brebisColor4fv
BREBIS_FORCE_INLINE void  brebisColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) { brebisGL.brebisColor4hNV(red, green, blue, alpha); }
#define glColor4hNV brebisColor4hNV
BREBIS_FORCE_INLINE void  brebisColor4hvNV(const GLhalfNV * v) { brebisGL.brebisColor4hvNV(v); }
#define glColor4hvNV brebisColor4hvNV
BREBIS_FORCE_INLINE void  brebisColor4i(GLint red, GLint green, GLint blue, GLint alpha) { brebisGL.brebisColor4i(red, green, blue, alpha); }
#define glColor4i brebisColor4i
BREBIS_FORCE_INLINE void  brebisColor4iv(const GLint * v) { brebisGL.brebisColor4iv(v); }
#define glColor4iv brebisColor4iv
BREBIS_FORCE_INLINE void  brebisColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) { brebisGL.brebisColor4s(red, green, blue, alpha); }
#define glColor4s brebisColor4s
BREBIS_FORCE_INLINE void  brebisColor4sv(const GLshort * v) { brebisGL.brebisColor4sv(v); }
#define glColor4sv brebisColor4sv
BREBIS_FORCE_INLINE void  brebisColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) { brebisGL.brebisColor4ub(red, green, blue, alpha); }
#define glColor4ub brebisColor4ub
BREBIS_FORCE_INLINE void  brebisColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) { brebisGL.brebisColor4ubVertex2fSUN(r, g, b, a, x, y); }
#define glColor4ubVertex2fSUN brebisColor4ubVertex2fSUN
BREBIS_FORCE_INLINE void  brebisColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v) { brebisGL.brebisColor4ubVertex2fvSUN(c, v); }
#define glColor4ubVertex2fvSUN brebisColor4ubVertex2fvSUN
BREBIS_FORCE_INLINE void  brebisColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisColor4ubVertex3fSUN(r, g, b, a, x, y, z); }
#define glColor4ubVertex3fSUN brebisColor4ubVertex3fSUN
BREBIS_FORCE_INLINE void  brebisColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v) { brebisGL.brebisColor4ubVertex3fvSUN(c, v); }
#define glColor4ubVertex3fvSUN brebisColor4ubVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisColor4ubv(const GLubyte * v) { brebisGL.brebisColor4ubv(v); }
#define glColor4ubv brebisColor4ubv
BREBIS_FORCE_INLINE void  brebisColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) { brebisGL.brebisColor4ui(red, green, blue, alpha); }
#define glColor4ui brebisColor4ui
BREBIS_FORCE_INLINE void  brebisColor4uiv(const GLuint * v) { brebisGL.brebisColor4uiv(v); }
#define glColor4uiv brebisColor4uiv
BREBIS_FORCE_INLINE void  brebisColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) { brebisGL.brebisColor4us(red, green, blue, alpha); }
#define glColor4us brebisColor4us
BREBIS_FORCE_INLINE void  brebisColor4usv(const GLushort * v) { brebisGL.brebisColor4usv(v); }
#define glColor4usv brebisColor4usv
BREBIS_FORCE_INLINE void  brebisColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { brebisGL.brebisColor4x(red, green, blue, alpha); }
#define glColor4x brebisColor4x
BREBIS_FORCE_INLINE void  brebisColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { brebisGL.brebisColor4xOES(red, green, blue, alpha); }
#define glColor4xOES brebisColor4xOES
BREBIS_FORCE_INLINE void  brebisColor4xvOES(const GLfixed * components) { brebisGL.brebisColor4xvOES(components); }
#define glColor4xvOES brebisColor4xvOES
BREBIS_FORCE_INLINE void  brebisColorFormatNV(GLint size, GLenum type, GLsizei stride) { brebisGL.brebisColorFormatNV(size, type, stride); }
#define glColorFormatNV brebisColorFormatNV
BREBIS_FORCE_INLINE void  brebisColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { brebisGL.brebisColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod); }
#define glColorFragmentOp1ATI brebisColorFragmentOp1ATI
BREBIS_FORCE_INLINE void  brebisColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { brebisGL.brebisColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
#define glColorFragmentOp2ATI brebisColorFragmentOp2ATI
BREBIS_FORCE_INLINE void  brebisColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { brebisGL.brebisColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
#define glColorFragmentOp3ATI brebisColorFragmentOp3ATI
BREBIS_FORCE_INLINE void  brebisColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { brebisGL.brebisColorMask(red, green, blue, alpha); }
#define glColorMask brebisColorMask
BREBIS_FORCE_INLINE void  brebisColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { brebisGL.brebisColorMaskIndexedEXT(index, r, g, b, a); }
#define glColorMaskIndexedEXT brebisColorMaskIndexedEXT
BREBIS_FORCE_INLINE void  brebisColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { brebisGL.brebisColorMaski(index, r, g, b, a); }
#define glColorMaski brebisColorMaski
BREBIS_FORCE_INLINE void  brebisColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { brebisGL.brebisColorMaskiEXT(index, r, g, b, a); }
#define glColorMaskiEXT brebisColorMaskiEXT
BREBIS_FORCE_INLINE void  brebisColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { brebisGL.brebisColorMaskiOES(index, r, g, b, a); }
#define glColorMaskiOES brebisColorMaskiOES
BREBIS_FORCE_INLINE void  brebisColorMaterial(GLenum face, GLenum mode) { brebisGL.brebisColorMaterial(face, mode); }
#define glColorMaterial brebisColorMaterial
BREBIS_FORCE_INLINE void  brebisColorP3ui(GLenum type, GLuint color) { brebisGL.brebisColorP3ui(type, color); }
#define glColorP3ui brebisColorP3ui
BREBIS_FORCE_INLINE void  brebisColorP3uiv(GLenum type, const GLuint * color) { brebisGL.brebisColorP3uiv(type, color); }
#define glColorP3uiv brebisColorP3uiv
BREBIS_FORCE_INLINE void  brebisColorP4ui(GLenum type, GLuint color) { brebisGL.brebisColorP4ui(type, color); }
#define glColorP4ui brebisColorP4ui
BREBIS_FORCE_INLINE void  brebisColorP4uiv(GLenum type, const GLuint * color) { brebisGL.brebisColorP4uiv(type, color); }
#define glColorP4uiv brebisColorP4uiv
BREBIS_FORCE_INLINE void  brebisColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisColorPointer(size, type, stride, pointer); }
#define glColorPointer brebisColorPointer
BREBIS_FORCE_INLINE void  brebisColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { brebisGL.brebisColorPointerEXT(size, type, stride, count, pointer); }
#define glColorPointerEXT brebisColorPointerEXT
BREBIS_FORCE_INLINE void  brebisColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { brebisGL.brebisColorPointerListIBM(size, type, stride, pointer, ptrstride); }
#define glColorPointerListIBM brebisColorPointerListIBM
BREBIS_FORCE_INLINE void  brebisColorPointervINTEL(GLint size, GLenum type, const void ** pointer) { brebisGL.brebisColorPointervINTEL(size, type, pointer); }
#define glColorPointervINTEL brebisColorPointervINTEL
BREBIS_FORCE_INLINE void  brebisColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { brebisGL.brebisColorSubTable(target, start, count, format, type, data); }
#define glColorSubTable brebisColorSubTable
BREBIS_FORCE_INLINE void  brebisColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { brebisGL.brebisColorSubTableEXT(target, start, count, format, type, data); }
#define glColorSubTableEXT brebisColorSubTableEXT
BREBIS_FORCE_INLINE void  brebisColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { brebisGL.brebisColorTable(target, internalformat, width, format, type, table); }
#define glColorTable brebisColorTable
BREBIS_FORCE_INLINE void  brebisColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table) { brebisGL.brebisColorTableEXT(target, internalFormat, width, format, type, table); }
#define glColorTableEXT brebisColorTableEXT
BREBIS_FORCE_INLINE void  brebisColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisColorTableParameterfv(target, pname, params); }
#define glColorTableParameterfv brebisColorTableParameterfv
BREBIS_FORCE_INLINE void  brebisColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisColorTableParameterfvSGI(target, pname, params); }
#define glColorTableParameterfvSGI brebisColorTableParameterfvSGI
BREBIS_FORCE_INLINE void  brebisColorTableParameteriv(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisColorTableParameteriv(target, pname, params); }
#define glColorTableParameteriv brebisColorTableParameteriv
BREBIS_FORCE_INLINE void  brebisColorTableParameterivSGI(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisColorTableParameterivSGI(target, pname, params); }
#define glColorTableParameterivSGI brebisColorTableParameterivSGI
BREBIS_FORCE_INLINE void  brebisColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { brebisGL.brebisColorTableSGI(target, internalformat, width, format, type, table); }
#define glColorTableSGI brebisColorTableSGI
BREBIS_FORCE_INLINE void  brebisCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { brebisGL.brebisCombinerInputNV(stage, portion, variable, input, mapping, componentUsage); }
#define glCombinerInputNV brebisCombinerInputNV
BREBIS_FORCE_INLINE void  brebisCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) { brebisGL.brebisCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum); }
#define glCombinerOutputNV brebisCombinerOutputNV
BREBIS_FORCE_INLINE void  brebisCombinerParameterfNV(GLenum pname, GLfloat param) { brebisGL.brebisCombinerParameterfNV(pname, param); }
#define glCombinerParameterfNV brebisCombinerParameterfNV
BREBIS_FORCE_INLINE void  brebisCombinerParameterfvNV(GLenum pname, const GLfloat * params) { brebisGL.brebisCombinerParameterfvNV(pname, params); }
#define glCombinerParameterfvNV brebisCombinerParameterfvNV
BREBIS_FORCE_INLINE void  brebisCombinerParameteriNV(GLenum pname, GLint param) { brebisGL.brebisCombinerParameteriNV(pname, param); }
#define glCombinerParameteriNV brebisCombinerParameteriNV
BREBIS_FORCE_INLINE void  brebisCombinerParameterivNV(GLenum pname, const GLint * params) { brebisGL.brebisCombinerParameterivNV(pname, params); }
#define glCombinerParameterivNV brebisCombinerParameterivNV
BREBIS_FORCE_INLINE void  brebisCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params) { brebisGL.brebisCombinerStageParameterfvNV(stage, pname, params); }
#define glCombinerStageParameterfvNV brebisCombinerStageParameterfvNV
BREBIS_FORCE_INLINE void  brebisCommandListSegmentsNV(GLuint list, GLuint segments) { brebisGL.brebisCommandListSegmentsNV(list, segments); }
#define glCommandListSegmentsNV brebisCommandListSegmentsNV
BREBIS_FORCE_INLINE void  brebisCompileCommandListNV(GLuint list) { brebisGL.brebisCompileCommandListNV(list); }
#define glCompileCommandListNV brebisCompileCommandListNV
BREBIS_FORCE_INLINE void  brebisCompileShader(GLuint shader) { brebisGL.brebisCompileShader(shader); }
#define glCompileShader brebisCompileShader
BREBIS_FORCE_INLINE void  brebisCompileShaderARB(GLhandleARB shaderObj) { brebisGL.brebisCompileShaderARB(shaderObj); }
#define glCompileShaderARB brebisCompileShaderARB
BREBIS_FORCE_INLINE void  brebisCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length) { brebisGL.brebisCompileShaderIncludeARB(shader, count, path, length); }
#define glCompileShaderIncludeARB brebisCompileShaderIncludeARB
BREBIS_FORCE_INLINE void  brebisCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits); }
#define glCompressedMultiTexImage1DEXT brebisCompressedMultiTexImage1DEXT
BREBIS_FORCE_INLINE void  brebisCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits); }
#define glCompressedMultiTexImage2DEXT brebisCompressedMultiTexImage2DEXT
BREBIS_FORCE_INLINE void  brebisCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits); }
#define glCompressedMultiTexImage3DEXT brebisCompressedMultiTexImage3DEXT
BREBIS_FORCE_INLINE void  brebisCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits); }
#define glCompressedMultiTexSubImage1DEXT brebisCompressedMultiTexSubImage1DEXT
BREBIS_FORCE_INLINE void  brebisCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
#define glCompressedMultiTexSubImage2DEXT brebisCompressedMultiTexSubImage2DEXT
BREBIS_FORCE_INLINE void  brebisCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
#define glCompressedMultiTexSubImage3DEXT brebisCompressedMultiTexSubImage3DEXT
BREBIS_FORCE_INLINE void  brebisCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data); }
#define glCompressedTexImage1D brebisCompressedTexImage1D
BREBIS_FORCE_INLINE void  brebisCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data); }
#define glCompressedTexImage1DARB brebisCompressedTexImage1DARB
BREBIS_FORCE_INLINE void  brebisCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
#define glCompressedTexImage2D brebisCompressedTexImage2D
BREBIS_FORCE_INLINE void  brebisCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data); }
#define glCompressedTexImage2DARB brebisCompressedTexImage2DARB
BREBIS_FORCE_INLINE void  brebisCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data); }
#define glCompressedTexImage3D brebisCompressedTexImage3D
BREBIS_FORCE_INLINE void  brebisCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data); }
#define glCompressedTexImage3DARB brebisCompressedTexImage3DARB
BREBIS_FORCE_INLINE void  brebisCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data); }
#define glCompressedTexImage3DOES brebisCompressedTexImage3DOES
BREBIS_FORCE_INLINE void  brebisCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data); }
#define glCompressedTexSubImage1D brebisCompressedTexSubImage1D
BREBIS_FORCE_INLINE void  brebisCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data); }
#define glCompressedTexSubImage1DARB brebisCompressedTexSubImage1DARB
BREBIS_FORCE_INLINE void  brebisCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
#define glCompressedTexSubImage2D brebisCompressedTexSubImage2D
BREBIS_FORCE_INLINE void  brebisCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
#define glCompressedTexSubImage2DARB brebisCompressedTexSubImage2DARB
BREBIS_FORCE_INLINE void  brebisCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
#define glCompressedTexSubImage3D brebisCompressedTexSubImage3D
BREBIS_FORCE_INLINE void  brebisCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
#define glCompressedTexSubImage3DARB brebisCompressedTexSubImage3DARB
BREBIS_FORCE_INLINE void  brebisCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
#define glCompressedTexSubImage3DOES brebisCompressedTexSubImage3DOES
BREBIS_FORCE_INLINE void  brebisCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits); }
#define glCompressedTextureImage1DEXT brebisCompressedTextureImage1DEXT
BREBIS_FORCE_INLINE void  brebisCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits); }
#define glCompressedTextureImage2DEXT brebisCompressedTextureImage2DEXT
BREBIS_FORCE_INLINE void  brebisCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits); }
#define glCompressedTextureImage3DEXT brebisCompressedTextureImage3DEXT
BREBIS_FORCE_INLINE void  brebisCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data); }
#define glCompressedTextureSubImage1D brebisCompressedTextureSubImage1D
BREBIS_FORCE_INLINE void  brebisCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits); }
#define glCompressedTextureSubImage1DEXT brebisCompressedTextureSubImage1DEXT
BREBIS_FORCE_INLINE void  brebisCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data); }
#define glCompressedTextureSubImage2D brebisCompressedTextureSubImage2D
BREBIS_FORCE_INLINE void  brebisCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
#define glCompressedTextureSubImage2DEXT brebisCompressedTextureSubImage2DEXT
BREBIS_FORCE_INLINE void  brebisCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { brebisGL.brebisCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
#define glCompressedTextureSubImage3D brebisCompressedTextureSubImage3D
BREBIS_FORCE_INLINE void  brebisCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { brebisGL.brebisCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
#define glCompressedTextureSubImage3DEXT brebisCompressedTextureSubImage3DEXT
BREBIS_FORCE_INLINE void  brebisConservativeRasterParameterfNV(GLenum pname, GLfloat value) { brebisGL.brebisConservativeRasterParameterfNV(pname, value); }
#define glConservativeRasterParameterfNV brebisConservativeRasterParameterfNV
BREBIS_FORCE_INLINE void  brebisConservativeRasterParameteriNV(GLenum pname, GLint param) { brebisGL.brebisConservativeRasterParameteriNV(pname, param); }
#define glConservativeRasterParameteriNV brebisConservativeRasterParameteriNV
BREBIS_FORCE_INLINE void  brebisConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { brebisGL.brebisConvolutionFilter1D(target, internalformat, width, format, type, image); }
#define glConvolutionFilter1D brebisConvolutionFilter1D
BREBIS_FORCE_INLINE void  brebisConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { brebisGL.brebisConvolutionFilter1DEXT(target, internalformat, width, format, type, image); }
#define glConvolutionFilter1DEXT brebisConvolutionFilter1DEXT
BREBIS_FORCE_INLINE void  brebisConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { brebisGL.brebisConvolutionFilter2D(target, internalformat, width, height, format, type, image); }
#define glConvolutionFilter2D brebisConvolutionFilter2D
BREBIS_FORCE_INLINE void  brebisConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { brebisGL.brebisConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image); }
#define glConvolutionFilter2DEXT brebisConvolutionFilter2DEXT
BREBIS_FORCE_INLINE void  brebisConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) { brebisGL.brebisConvolutionParameterf(target, pname, params); }
#define glConvolutionParameterf brebisConvolutionParameterf
BREBIS_FORCE_INLINE void  brebisConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) { brebisGL.brebisConvolutionParameterfEXT(target, pname, params); }
#define glConvolutionParameterfEXT brebisConvolutionParameterfEXT
BREBIS_FORCE_INLINE void  brebisConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisConvolutionParameterfv(target, pname, params); }
#define glConvolutionParameterfv brebisConvolutionParameterfv
BREBIS_FORCE_INLINE void  brebisConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisConvolutionParameterfvEXT(target, pname, params); }
#define glConvolutionParameterfvEXT brebisConvolutionParameterfvEXT
BREBIS_FORCE_INLINE void  brebisConvolutionParameteri(GLenum target, GLenum pname, GLint params) { brebisGL.brebisConvolutionParameteri(target, pname, params); }
#define glConvolutionParameteri brebisConvolutionParameteri
BREBIS_FORCE_INLINE void  brebisConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) { brebisGL.brebisConvolutionParameteriEXT(target, pname, params); }
#define glConvolutionParameteriEXT brebisConvolutionParameteriEXT
BREBIS_FORCE_INLINE void  brebisConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisConvolutionParameteriv(target, pname, params); }
#define glConvolutionParameteriv brebisConvolutionParameteriv
BREBIS_FORCE_INLINE void  brebisConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisConvolutionParameterivEXT(target, pname, params); }
#define glConvolutionParameterivEXT brebisConvolutionParameterivEXT
BREBIS_FORCE_INLINE void  brebisConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param) { brebisGL.brebisConvolutionParameterxOES(target, pname, param); }
#define glConvolutionParameterxOES brebisConvolutionParameterxOES
BREBIS_FORCE_INLINE void  brebisConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { brebisGL.brebisConvolutionParameterxvOES(target, pname, params); }
#define glConvolutionParameterxvOES brebisConvolutionParameterxvOES
BREBIS_FORCE_INLINE void  brebisCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { brebisGL.brebisCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); }
#define glCopyBufferSubData brebisCopyBufferSubData
BREBIS_FORCE_INLINE void  brebisCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { brebisGL.brebisCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size); }
#define glCopyBufferSubDataNV brebisCopyBufferSubDataNV
BREBIS_FORCE_INLINE void  brebisCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyColorSubTable(target, start, x, y, width); }
#define glCopyColorSubTable brebisCopyColorSubTable
BREBIS_FORCE_INLINE void  brebisCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyColorSubTableEXT(target, start, x, y, width); }
#define glCopyColorSubTableEXT brebisCopyColorSubTableEXT
BREBIS_FORCE_INLINE void  brebisCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyColorTable(target, internalformat, x, y, width); }
#define glCopyColorTable brebisCopyColorTable
BREBIS_FORCE_INLINE void  brebisCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyColorTableSGI(target, internalformat, x, y, width); }
#define glCopyColorTableSGI brebisCopyColorTableSGI
BREBIS_FORCE_INLINE void  brebisCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyConvolutionFilter1D(target, internalformat, x, y, width); }
#define glCopyConvolutionFilter1D brebisCopyConvolutionFilter1D
BREBIS_FORCE_INLINE void  brebisCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyConvolutionFilter1DEXT(target, internalformat, x, y, width); }
#define glCopyConvolutionFilter1DEXT brebisCopyConvolutionFilter1DEXT
BREBIS_FORCE_INLINE void  brebisCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyConvolutionFilter2D(target, internalformat, x, y, width, height); }
#define glCopyConvolutionFilter2D brebisCopyConvolutionFilter2D
BREBIS_FORCE_INLINE void  brebisCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height); }
#define glCopyConvolutionFilter2DEXT brebisCopyConvolutionFilter2DEXT
BREBIS_FORCE_INLINE void  brebisCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { brebisGL.brebisCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#define glCopyImageSubData brebisCopyImageSubData
BREBIS_FORCE_INLINE void  brebisCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { brebisGL.brebisCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#define glCopyImageSubDataEXT brebisCopyImageSubDataEXT
BREBIS_FORCE_INLINE void  brebisCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { brebisGL.brebisCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
#define glCopyImageSubDataNV brebisCopyImageSubDataNV
BREBIS_FORCE_INLINE void  brebisCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { brebisGL.brebisCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#define glCopyImageSubDataOES brebisCopyImageSubDataOES
BREBIS_FORCE_INLINE void  brebisCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { brebisGL.brebisCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border); }
#define glCopyMultiTexImage1DEXT brebisCopyMultiTexImage1DEXT
BREBIS_FORCE_INLINE void  brebisCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { brebisGL.brebisCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border); }
#define glCopyMultiTexImage2DEXT brebisCopyMultiTexImage2DEXT
BREBIS_FORCE_INLINE void  brebisCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width); }
#define glCopyMultiTexSubImage1DEXT brebisCopyMultiTexSubImage1DEXT
BREBIS_FORCE_INLINE void  brebisCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height); }
#define glCopyMultiTexSubImage2DEXT brebisCopyMultiTexSubImage2DEXT
BREBIS_FORCE_INLINE void  brebisCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyMultiTexSubImage3DEXT brebisCopyMultiTexSubImage3DEXT
BREBIS_FORCE_INLINE void  brebisCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { brebisGL.brebisCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); }
#define glCopyNamedBufferSubData brebisCopyNamedBufferSubData
BREBIS_FORCE_INLINE void  brebisCopyPathNV(GLuint resultPath, GLuint srcPath) { brebisGL.brebisCopyPathNV(resultPath, srcPath); }
#define glCopyPathNV brebisCopyPathNV
BREBIS_FORCE_INLINE void  brebisCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) { brebisGL.brebisCopyPixels(x, y, width, height, type); }
#define glCopyPixels brebisCopyPixels
BREBIS_FORCE_INLINE void  brebisCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { brebisGL.brebisCopyTexImage1D(target, level, internalformat, x, y, width, border); }
#define glCopyTexImage1D brebisCopyTexImage1D
BREBIS_FORCE_INLINE void  brebisCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { brebisGL.brebisCopyTexImage1DEXT(target, level, internalformat, x, y, width, border); }
#define glCopyTexImage1DEXT brebisCopyTexImage1DEXT
BREBIS_FORCE_INLINE void  brebisCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { brebisGL.brebisCopyTexImage2D(target, level, internalformat, x, y, width, height, border); }
#define glCopyTexImage2D brebisCopyTexImage2D
BREBIS_FORCE_INLINE void  brebisCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { brebisGL.brebisCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border); }
#define glCopyTexImage2DEXT brebisCopyTexImage2DEXT
BREBIS_FORCE_INLINE void  brebisCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyTexSubImage1D(target, level, xoffset, x, y, width); }
#define glCopyTexSubImage1D brebisCopyTexSubImage1D
BREBIS_FORCE_INLINE void  brebisCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyTexSubImage1DEXT(target, level, xoffset, x, y, width); }
#define glCopyTexSubImage1DEXT brebisCopyTexSubImage1DEXT
BREBIS_FORCE_INLINE void  brebisCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }
#define glCopyTexSubImage2D brebisCopyTexSubImage2D
BREBIS_FORCE_INLINE void  brebisCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height); }
#define glCopyTexSubImage2DEXT brebisCopyTexSubImage2DEXT
BREBIS_FORCE_INLINE void  brebisCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTexSubImage3D brebisCopyTexSubImage3D
BREBIS_FORCE_INLINE void  brebisCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTexSubImage3DEXT brebisCopyTexSubImage3DEXT
BREBIS_FORCE_INLINE void  brebisCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTexSubImage3DOES brebisCopyTexSubImage3DOES
BREBIS_FORCE_INLINE void  brebisCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { brebisGL.brebisCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border); }
#define glCopyTextureImage1DEXT brebisCopyTextureImage1DEXT
BREBIS_FORCE_INLINE void  brebisCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { brebisGL.brebisCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border); }
#define glCopyTextureImage2DEXT brebisCopyTextureImage2DEXT
BREBIS_FORCE_INLINE void  brebisCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) { brebisGL.brebisCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount); }
#define glCopyTextureLevelsAPPLE brebisCopyTextureLevelsAPPLE
BREBIS_FORCE_INLINE void  brebisCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyTextureSubImage1D(texture, level, xoffset, x, y, width); }
#define glCopyTextureSubImage1D brebisCopyTextureSubImage1D
BREBIS_FORCE_INLINE void  brebisCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { brebisGL.brebisCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width); }
#define glCopyTextureSubImage1DEXT brebisCopyTextureSubImage1DEXT
BREBIS_FORCE_INLINE void  brebisCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); }
#define glCopyTextureSubImage2D brebisCopyTextureSubImage2D
BREBIS_FORCE_INLINE void  brebisCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height); }
#define glCopyTextureSubImage2DEXT brebisCopyTextureSubImage2DEXT
BREBIS_FORCE_INLINE void  brebisCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTextureSubImage3D brebisCopyTextureSubImage3D
BREBIS_FORCE_INLINE void  brebisCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
#define glCopyTextureSubImage3DEXT brebisCopyTextureSubImage3DEXT
BREBIS_FORCE_INLINE void  brebisCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { brebisGL.brebisCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
#define glCoverFillPathInstancedNV brebisCoverFillPathInstancedNV
BREBIS_FORCE_INLINE void  brebisCoverFillPathNV(GLuint path, GLenum coverMode) { brebisGL.brebisCoverFillPathNV(path, coverMode); }
#define glCoverFillPathNV brebisCoverFillPathNV
BREBIS_FORCE_INLINE void  brebisCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { brebisGL.brebisCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
#define glCoverStrokePathInstancedNV brebisCoverStrokePathInstancedNV
BREBIS_FORCE_INLINE void  brebisCoverStrokePathNV(GLuint path, GLenum coverMode) { brebisGL.brebisCoverStrokePathNV(path, coverMode); }
#define glCoverStrokePathNV brebisCoverStrokePathNV
BREBIS_FORCE_INLINE void  brebisCoverageMaskNV(GLboolean mask) { brebisGL.brebisCoverageMaskNV(mask); }
#define glCoverageMaskNV brebisCoverageMaskNV
BREBIS_FORCE_INLINE void  brebisCoverageModulationNV(GLenum components) { brebisGL.brebisCoverageModulationNV(components); }
#define glCoverageModulationNV brebisCoverageModulationNV
BREBIS_FORCE_INLINE void  brebisCoverageModulationTableNV(GLsizei n, const GLfloat * v) { brebisGL.brebisCoverageModulationTableNV(n, v); }
#define glCoverageModulationTableNV brebisCoverageModulationTableNV
BREBIS_FORCE_INLINE void  brebisCoverageOperationNV(GLenum operation) { brebisGL.brebisCoverageOperationNV(operation); }
#define glCoverageOperationNV brebisCoverageOperationNV
BREBIS_FORCE_INLINE void  brebisCreateBuffers(GLsizei n, GLuint * buffers) { brebisGL.brebisCreateBuffers(n, buffers); }
#define glCreateBuffers brebisCreateBuffers
BREBIS_FORCE_INLINE void  brebisCreateCommandListsNV(GLsizei n, GLuint * lists) { brebisGL.brebisCreateCommandListsNV(n, lists); }
#define glCreateCommandListsNV brebisCreateCommandListsNV
BREBIS_FORCE_INLINE void  brebisCreateFramebuffers(GLsizei n, GLuint * framebuffers) { brebisGL.brebisCreateFramebuffers(n, framebuffers); }
#define glCreateFramebuffers brebisCreateFramebuffers
BREBIS_FORCE_INLINE void  brebisCreateMemoryObjectsEXT(GLsizei n, GLuint * memoryObjects) { brebisGL.brebisCreateMemoryObjectsEXT(n, memoryObjects); }
#define glCreateMemoryObjectsEXT brebisCreateMemoryObjectsEXT
BREBIS_FORCE_INLINE void  brebisCreatePerfQueryINTEL(GLuint queryId, GLuint * queryHandle) { brebisGL.brebisCreatePerfQueryINTEL(queryId, queryHandle); }
#define glCreatePerfQueryINTEL brebisCreatePerfQueryINTEL
BREBIS_FORCE_INLINE GLuint brebisCreateProgram(void) { return brebisGL.brebisCreateProgram(); }
#define glCreateProgram brebisCreateProgram
BREBIS_FORCE_INLINE GLhandleARB brebisCreateProgramObjectARB(void) { return brebisGL.brebisCreateProgramObjectARB(); }
#define glCreateProgramObjectARB brebisCreateProgramObjectARB
BREBIS_FORCE_INLINE void  brebisCreateProgramPipelines(GLsizei n, GLuint * pipelines) { brebisGL.brebisCreateProgramPipelines(n, pipelines); }
#define glCreateProgramPipelines brebisCreateProgramPipelines
BREBIS_FORCE_INLINE void  brebisCreateQueries(GLenum target, GLsizei n, GLuint * ids) { brebisGL.brebisCreateQueries(target, n, ids); }
#define glCreateQueries brebisCreateQueries
BREBIS_FORCE_INLINE void  brebisCreateRenderbuffers(GLsizei n, GLuint * renderbuffers) { brebisGL.brebisCreateRenderbuffers(n, renderbuffers); }
#define glCreateRenderbuffers brebisCreateRenderbuffers
BREBIS_FORCE_INLINE void  brebisCreateSamplers(GLsizei n, GLuint * samplers) { brebisGL.brebisCreateSamplers(n, samplers); }
#define glCreateSamplers brebisCreateSamplers
BREBIS_FORCE_INLINE GLuint brebisCreateShader(GLenum type) { return brebisGL.brebisCreateShader(type); }
#define glCreateShader brebisCreateShader
BREBIS_FORCE_INLINE GLhandleARB brebisCreateShaderObjectARB(GLenum shaderType) { return brebisGL.brebisCreateShaderObjectARB(shaderType); }
#define glCreateShaderObjectARB brebisCreateShaderObjectARB
BREBIS_FORCE_INLINE GLuint brebisCreateShaderProgramEXT(GLenum type, const GLchar * string) { return brebisGL.brebisCreateShaderProgramEXT(type, string); }
#define glCreateShaderProgramEXT brebisCreateShaderProgramEXT
BREBIS_FORCE_INLINE GLuint brebisCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) { return brebisGL.brebisCreateShaderProgramv(type, count, strings); }
#define glCreateShaderProgramv brebisCreateShaderProgramv
BREBIS_FORCE_INLINE GLuint brebisCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar ** strings) { return brebisGL.brebisCreateShaderProgramvEXT(type, count, strings); }
#define glCreateShaderProgramvEXT brebisCreateShaderProgramvEXT
BREBIS_FORCE_INLINE void  brebisCreateStatesNV(GLsizei n, GLuint * states) { brebisGL.brebisCreateStatesNV(n, states); }
#define glCreateStatesNV brebisCreateStatesNV
BREBIS_FORCE_INLINE GLsync brebisCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags) { return brebisGL.brebisCreateSyncFromCLeventARB(context, event, flags); }
#define glCreateSyncFromCLeventARB brebisCreateSyncFromCLeventARB
BREBIS_FORCE_INLINE void  brebisCreateTextures(GLenum target, GLsizei n, GLuint * textures) { brebisGL.brebisCreateTextures(target, n, textures); }
#define glCreateTextures brebisCreateTextures
BREBIS_FORCE_INLINE void  brebisCreateTransformFeedbacks(GLsizei n, GLuint * ids) { brebisGL.brebisCreateTransformFeedbacks(n, ids); }
#define glCreateTransformFeedbacks brebisCreateTransformFeedbacks
BREBIS_FORCE_INLINE void  brebisCreateVertexArrays(GLsizei n, GLuint * arrays) { brebisGL.brebisCreateVertexArrays(n, arrays); }
#define glCreateVertexArrays brebisCreateVertexArrays
BREBIS_FORCE_INLINE void  brebisCullFace(GLenum mode) { brebisGL.brebisCullFace(mode); }
#define glCullFace brebisCullFace
BREBIS_FORCE_INLINE void  brebisCullParameterdvEXT(GLenum pname, GLdouble * params) { brebisGL.brebisCullParameterdvEXT(pname, params); }
#define glCullParameterdvEXT brebisCullParameterdvEXT
BREBIS_FORCE_INLINE void  brebisCullParameterfvEXT(GLenum pname, GLfloat * params) { brebisGL.brebisCullParameterfvEXT(pname, params); }
#define glCullParameterfvEXT brebisCullParameterfvEXT
BREBIS_FORCE_INLINE void  brebisCurrentPaletteMatrixARB(GLint index) { brebisGL.brebisCurrentPaletteMatrixARB(index); }
#define glCurrentPaletteMatrixARB brebisCurrentPaletteMatrixARB
BREBIS_FORCE_INLINE void  brebisCurrentPaletteMatrixOES(GLuint matrixpaletteindex) { brebisGL.brebisCurrentPaletteMatrixOES(matrixpaletteindex); }
#define glCurrentPaletteMatrixOES brebisCurrentPaletteMatrixOES
BREBIS_FORCE_INLINE void  brebisDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) { brebisGL.brebisDebugMessageCallback(callback, userParam); }
#define glDebugMessageCallback brebisDebugMessageCallback
BREBIS_FORCE_INLINE void  brebisDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void * userParam) { brebisGL.brebisDebugMessageCallbackAMD(callback, userParam); }
#define glDebugMessageCallbackAMD brebisDebugMessageCallbackAMD
BREBIS_FORCE_INLINE void  brebisDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void * userParam) { brebisGL.brebisDebugMessageCallbackARB(callback, userParam); }
#define glDebugMessageCallbackARB brebisDebugMessageCallbackARB
BREBIS_FORCE_INLINE void  brebisDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void * userParam) { brebisGL.brebisDebugMessageCallbackKHR(callback, userParam); }
#define glDebugMessageCallbackKHR brebisDebugMessageCallbackKHR
BREBIS_FORCE_INLINE void  brebisDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { brebisGL.brebisDebugMessageControl(source, type, severity, count, ids, enabled); }
#define glDebugMessageControl brebisDebugMessageControl
BREBIS_FORCE_INLINE void  brebisDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { brebisGL.brebisDebugMessageControlARB(source, type, severity, count, ids, enabled); }
#define glDebugMessageControlARB brebisDebugMessageControlARB
BREBIS_FORCE_INLINE void  brebisDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { brebisGL.brebisDebugMessageControlKHR(source, type, severity, count, ids, enabled); }
#define glDebugMessageControlKHR brebisDebugMessageControlKHR
BREBIS_FORCE_INLINE void  brebisDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { brebisGL.brebisDebugMessageEnableAMD(category, severity, count, ids, enabled); }
#define glDebugMessageEnableAMD brebisDebugMessageEnableAMD
BREBIS_FORCE_INLINE void  brebisDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { brebisGL.brebisDebugMessageInsert(source, type, id, severity, length, buf); }
#define glDebugMessageInsert brebisDebugMessageInsert
BREBIS_FORCE_INLINE void  brebisDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf) { brebisGL.brebisDebugMessageInsertAMD(category, severity, id, length, buf); }
#define glDebugMessageInsertAMD brebisDebugMessageInsertAMD
BREBIS_FORCE_INLINE void  brebisDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { brebisGL.brebisDebugMessageInsertARB(source, type, id, severity, length, buf); }
#define glDebugMessageInsertARB brebisDebugMessageInsertARB
BREBIS_FORCE_INLINE void  brebisDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { brebisGL.brebisDebugMessageInsertKHR(source, type, id, severity, length, buf); }
#define glDebugMessageInsertKHR brebisDebugMessageInsertKHR
BREBIS_FORCE_INLINE void  brebisDeformSGIX(GLbitfield mask) { brebisGL.brebisDeformSGIX(mask); }
#define glDeformSGIX brebisDeformSGIX
BREBIS_FORCE_INLINE void  brebisDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points) { brebisGL.brebisDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
#define glDeformationMap3dSGIX brebisDeformationMap3dSGIX
BREBIS_FORCE_INLINE void  brebisDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points) { brebisGL.brebisDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
#define glDeformationMap3fSGIX brebisDeformationMap3fSGIX
BREBIS_FORCE_INLINE void  brebisDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) { brebisGL.brebisDeleteAsyncMarkersSGIX(marker, range); }
#define glDeleteAsyncMarkersSGIX brebisDeleteAsyncMarkersSGIX
BREBIS_FORCE_INLINE void  brebisDeleteBufferRegion(GLenum region) { brebisGL.brebisDeleteBufferRegion(region); }
#define glDeleteBufferRegion brebisDeleteBufferRegion
BREBIS_FORCE_INLINE void  brebisDeleteBuffers(GLsizei n, const GLuint * buffers) { brebisGL.brebisDeleteBuffers(n, buffers); }
#define glDeleteBuffers brebisDeleteBuffers
BREBIS_FORCE_INLINE void  brebisDeleteBuffersARB(GLsizei n, const GLuint * buffers) { brebisGL.brebisDeleteBuffersARB(n, buffers); }
#define glDeleteBuffersARB brebisDeleteBuffersARB
BREBIS_FORCE_INLINE void  brebisDeleteCommandListsNV(GLsizei n, const GLuint * lists) { brebisGL.brebisDeleteCommandListsNV(n, lists); }
#define glDeleteCommandListsNV brebisDeleteCommandListsNV
BREBIS_FORCE_INLINE void  brebisDeleteFencesAPPLE(GLsizei n, const GLuint * fences) { brebisGL.brebisDeleteFencesAPPLE(n, fences); }
#define glDeleteFencesAPPLE brebisDeleteFencesAPPLE
BREBIS_FORCE_INLINE void  brebisDeleteFencesNV(GLsizei n, const GLuint * fences) { brebisGL.brebisDeleteFencesNV(n, fences); }
#define glDeleteFencesNV brebisDeleteFencesNV
BREBIS_FORCE_INLINE void  brebisDeleteFragmentShaderATI(GLuint id) { brebisGL.brebisDeleteFragmentShaderATI(id); }
#define glDeleteFragmentShaderATI brebisDeleteFragmentShaderATI
BREBIS_FORCE_INLINE void  brebisDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) { brebisGL.brebisDeleteFramebuffers(n, framebuffers); }
#define glDeleteFramebuffers brebisDeleteFramebuffers
BREBIS_FORCE_INLINE void  brebisDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers) { brebisGL.brebisDeleteFramebuffersEXT(n, framebuffers); }
#define glDeleteFramebuffersEXT brebisDeleteFramebuffersEXT
BREBIS_FORCE_INLINE void  brebisDeleteFramebuffersOES(GLsizei n, const GLuint * framebuffers) { brebisGL.brebisDeleteFramebuffersOES(n, framebuffers); }
#define glDeleteFramebuffersOES brebisDeleteFramebuffersOES
BREBIS_FORCE_INLINE void  brebisDeleteLists(GLuint list, GLsizei range) { brebisGL.brebisDeleteLists(list, range); }
#define glDeleteLists brebisDeleteLists
BREBIS_FORCE_INLINE void  brebisDeleteMemoryObjectsEXT(GLsizei n, const GLuint * memoryObjects) { brebisGL.brebisDeleteMemoryObjectsEXT(n, memoryObjects); }
#define glDeleteMemoryObjectsEXT brebisDeleteMemoryObjectsEXT
BREBIS_FORCE_INLINE void  brebisDeleteNamedStringARB(GLint namelen, const GLchar * name) { brebisGL.brebisDeleteNamedStringARB(namelen, name); }
#define glDeleteNamedStringARB brebisDeleteNamedStringARB
BREBIS_FORCE_INLINE void  brebisDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint * names) { brebisGL.brebisDeleteNamesAMD(identifier, num, names); }
#define glDeleteNamesAMD brebisDeleteNamesAMD
BREBIS_FORCE_INLINE void  brebisDeleteObjectARB(GLhandleARB obj) { brebisGL.brebisDeleteObjectARB(obj); }
#define glDeleteObjectARB brebisDeleteObjectARB
BREBIS_FORCE_INLINE void  brebisDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids) { brebisGL.brebisDeleteOcclusionQueriesNV(n, ids); }
#define glDeleteOcclusionQueriesNV brebisDeleteOcclusionQueriesNV
BREBIS_FORCE_INLINE void  brebisDeletePathsNV(GLuint path, GLsizei range) { brebisGL.brebisDeletePathsNV(path, range); }
#define glDeletePathsNV brebisDeletePathsNV
BREBIS_FORCE_INLINE void  brebisDeletePerfMonitorsAMD(GLsizei n, GLuint * monitors) { brebisGL.brebisDeletePerfMonitorsAMD(n, monitors); }
#define glDeletePerfMonitorsAMD brebisDeletePerfMonitorsAMD
BREBIS_FORCE_INLINE void  brebisDeletePerfQueryINTEL(GLuint queryHandle) { brebisGL.brebisDeletePerfQueryINTEL(queryHandle); }
#define glDeletePerfQueryINTEL brebisDeletePerfQueryINTEL
BREBIS_FORCE_INLINE void  brebisDeleteProgram(GLuint program) { brebisGL.brebisDeleteProgram(program); }
#define glDeleteProgram brebisDeleteProgram
BREBIS_FORCE_INLINE void  brebisDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) { brebisGL.brebisDeleteProgramPipelines(n, pipelines); }
#define glDeleteProgramPipelines brebisDeleteProgramPipelines
BREBIS_FORCE_INLINE void  brebisDeleteProgramPipelinesEXT(GLsizei n, const GLuint * pipelines) { brebisGL.brebisDeleteProgramPipelinesEXT(n, pipelines); }
#define glDeleteProgramPipelinesEXT brebisDeleteProgramPipelinesEXT
BREBIS_FORCE_INLINE void  brebisDeleteProgramsARB(GLsizei n, const GLuint * programs) { brebisGL.brebisDeleteProgramsARB(n, programs); }
#define glDeleteProgramsARB brebisDeleteProgramsARB
BREBIS_FORCE_INLINE void  brebisDeleteProgramsNV(GLsizei n, const GLuint * programs) { brebisGL.brebisDeleteProgramsNV(n, programs); }
#define glDeleteProgramsNV brebisDeleteProgramsNV
BREBIS_FORCE_INLINE void  brebisDeleteQueries(GLsizei n, const GLuint * ids) { brebisGL.brebisDeleteQueries(n, ids); }
#define glDeleteQueries brebisDeleteQueries
BREBIS_FORCE_INLINE void  brebisDeleteQueriesARB(GLsizei n, const GLuint * ids) { brebisGL.brebisDeleteQueriesARB(n, ids); }
#define glDeleteQueriesARB brebisDeleteQueriesARB
BREBIS_FORCE_INLINE void  brebisDeleteQueriesEXT(GLsizei n, const GLuint * ids) { brebisGL.brebisDeleteQueriesEXT(n, ids); }
#define glDeleteQueriesEXT brebisDeleteQueriesEXT
BREBIS_FORCE_INLINE void  brebisDeleteQueryResourceTagNV(GLsizei n, const GLint * tagIds) { brebisGL.brebisDeleteQueryResourceTagNV(n, tagIds); }
#define glDeleteQueryResourceTagNV brebisDeleteQueryResourceTagNV
BREBIS_FORCE_INLINE void  brebisDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) { brebisGL.brebisDeleteRenderbuffers(n, renderbuffers); }
#define glDeleteRenderbuffers brebisDeleteRenderbuffers
BREBIS_FORCE_INLINE void  brebisDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers) { brebisGL.brebisDeleteRenderbuffersEXT(n, renderbuffers); }
#define glDeleteRenderbuffersEXT brebisDeleteRenderbuffersEXT
BREBIS_FORCE_INLINE void  brebisDeleteRenderbuffersOES(GLsizei n, const GLuint * renderbuffers) { brebisGL.brebisDeleteRenderbuffersOES(n, renderbuffers); }
#define glDeleteRenderbuffersOES brebisDeleteRenderbuffersOES
BREBIS_FORCE_INLINE void  brebisDeleteSamplers(GLsizei count, const GLuint * samplers) { brebisGL.brebisDeleteSamplers(count, samplers); }
#define glDeleteSamplers brebisDeleteSamplers
BREBIS_FORCE_INLINE void  brebisDeleteSemaphoresEXT(GLsizei n, const GLuint * semaphores) { brebisGL.brebisDeleteSemaphoresEXT(n, semaphores); }
#define glDeleteSemaphoresEXT brebisDeleteSemaphoresEXT
BREBIS_FORCE_INLINE void  brebisDeleteShader(GLuint shader) { brebisGL.brebisDeleteShader(shader); }
#define glDeleteShader brebisDeleteShader
BREBIS_FORCE_INLINE void  brebisDeleteStatesNV(GLsizei n, const GLuint * states) { brebisGL.brebisDeleteStatesNV(n, states); }
#define glDeleteStatesNV brebisDeleteStatesNV
BREBIS_FORCE_INLINE void  brebisDeleteSync(GLsync sync) { brebisGL.brebisDeleteSync(sync); }
#define glDeleteSync brebisDeleteSync
BREBIS_FORCE_INLINE void  brebisDeleteSyncAPPLE(GLsync sync) { brebisGL.brebisDeleteSyncAPPLE(sync); }
#define glDeleteSyncAPPLE brebisDeleteSyncAPPLE
BREBIS_FORCE_INLINE void  brebisDeleteTextures(GLsizei n, const GLuint * textures) { brebisGL.brebisDeleteTextures(n, textures); }
#define glDeleteTextures brebisDeleteTextures
BREBIS_FORCE_INLINE void  brebisDeleteTexturesEXT(GLsizei n, const GLuint * textures) { brebisGL.brebisDeleteTexturesEXT(n, textures); }
#define glDeleteTexturesEXT brebisDeleteTexturesEXT
BREBIS_FORCE_INLINE void  brebisDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) { brebisGL.brebisDeleteTransformFeedbacks(n, ids); }
#define glDeleteTransformFeedbacks brebisDeleteTransformFeedbacks
BREBIS_FORCE_INLINE void  brebisDeleteTransformFeedbacksNV(GLsizei n, const GLuint * ids) { brebisGL.brebisDeleteTransformFeedbacksNV(n, ids); }
#define glDeleteTransformFeedbacksNV brebisDeleteTransformFeedbacksNV
BREBIS_FORCE_INLINE void  brebisDeleteVertexArrays(GLsizei n, const GLuint * arrays) { brebisGL.brebisDeleteVertexArrays(n, arrays); }
#define glDeleteVertexArrays brebisDeleteVertexArrays
BREBIS_FORCE_INLINE void  brebisDeleteVertexArraysAPPLE(GLsizei n, const GLuint * arrays) { brebisGL.brebisDeleteVertexArraysAPPLE(n, arrays); }
#define glDeleteVertexArraysAPPLE brebisDeleteVertexArraysAPPLE
BREBIS_FORCE_INLINE void  brebisDeleteVertexArraysOES(GLsizei n, const GLuint * arrays) { brebisGL.brebisDeleteVertexArraysOES(n, arrays); }
#define glDeleteVertexArraysOES brebisDeleteVertexArraysOES
BREBIS_FORCE_INLINE void  brebisDeleteVertexShaderEXT(GLuint id) { brebisGL.brebisDeleteVertexShaderEXT(id); }
#define glDeleteVertexShaderEXT brebisDeleteVertexShaderEXT
BREBIS_FORCE_INLINE void  brebisDepthBoundsEXT(GLclampd zmin, GLclampd zmax) { brebisGL.brebisDepthBoundsEXT(zmin, zmax); }
#define glDepthBoundsEXT brebisDepthBoundsEXT
BREBIS_FORCE_INLINE void  brebisDepthBoundsdNV(GLdouble zmin, GLdouble zmax) { brebisGL.brebisDepthBoundsdNV(zmin, zmax); }
#define glDepthBoundsdNV brebisDepthBoundsdNV
BREBIS_FORCE_INLINE void  brebisDepthFunc(GLenum func) { brebisGL.brebisDepthFunc(func); }
#define glDepthFunc brebisDepthFunc
BREBIS_FORCE_INLINE void  brebisDepthMask(GLboolean flag) { brebisGL.brebisDepthMask(flag); }
#define glDepthMask brebisDepthMask
BREBIS_FORCE_INLINE void  brebisDepthRange(GLdouble n, GLdouble f) { brebisGL.brebisDepthRange(n, f); }
#define glDepthRange brebisDepthRange
BREBIS_FORCE_INLINE void  brebisDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat * v) { brebisGL.brebisDepthRangeArrayfvNV(first, count, v); }
#define glDepthRangeArrayfvNV brebisDepthRangeArrayfvNV
BREBIS_FORCE_INLINE void  brebisDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat * v) { brebisGL.brebisDepthRangeArrayfvOES(first, count, v); }
#define glDepthRangeArrayfvOES brebisDepthRangeArrayfvOES
BREBIS_FORCE_INLINE void  brebisDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v) { brebisGL.brebisDepthRangeArrayv(first, count, v); }
#define glDepthRangeArrayv brebisDepthRangeArrayv
BREBIS_FORCE_INLINE void  brebisDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) { brebisGL.brebisDepthRangeIndexed(index, n, f); }
#define glDepthRangeIndexed brebisDepthRangeIndexed
BREBIS_FORCE_INLINE void  brebisDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f) { brebisGL.brebisDepthRangeIndexedfNV(index, n, f); }
#define glDepthRangeIndexedfNV brebisDepthRangeIndexedfNV
BREBIS_FORCE_INLINE void  brebisDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f) { brebisGL.brebisDepthRangeIndexedfOES(index, n, f); }
#define glDepthRangeIndexedfOES brebisDepthRangeIndexedfOES
BREBIS_FORCE_INLINE void  brebisDepthRangedNV(GLdouble zNear, GLdouble zFar) { brebisGL.brebisDepthRangedNV(zNear, zFar); }
#define glDepthRangedNV brebisDepthRangedNV
BREBIS_FORCE_INLINE void  brebisDepthRangef(GLfloat n, GLfloat f) { brebisGL.brebisDepthRangef(n, f); }
#define glDepthRangef brebisDepthRangef
BREBIS_FORCE_INLINE void  brebisDepthRangefOES(GLclampf n, GLclampf f) { brebisGL.brebisDepthRangefOES(n, f); }
#define glDepthRangefOES brebisDepthRangefOES
BREBIS_FORCE_INLINE void  brebisDepthRangex(GLfixed n, GLfixed f) { brebisGL.brebisDepthRangex(n, f); }
#define glDepthRangex brebisDepthRangex
BREBIS_FORCE_INLINE void  brebisDepthRangexOES(GLfixed n, GLfixed f) { brebisGL.brebisDepthRangexOES(n, f); }
#define glDepthRangexOES brebisDepthRangexOES
BREBIS_FORCE_INLINE void  brebisDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) { brebisGL.brebisDetachObjectARB(containerObj, attachedObj); }
#define glDetachObjectARB brebisDetachObjectARB
BREBIS_FORCE_INLINE void  brebisDetachShader(GLuint program, GLuint shader) { brebisGL.brebisDetachShader(program, shader); }
#define glDetachShader brebisDetachShader
BREBIS_FORCE_INLINE void  brebisDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { brebisGL.brebisDetailTexFuncSGIS(target, n, points); }
#define glDetailTexFuncSGIS brebisDetailTexFuncSGIS
BREBIS_FORCE_INLINE void  brebisDisable(GLenum cap) { brebisGL.brebisDisable(cap); }
#define glDisable brebisDisable
BREBIS_FORCE_INLINE void  brebisDisableClientState(GLenum array) { brebisGL.brebisDisableClientState(array); }
#define glDisableClientState brebisDisableClientState
BREBIS_FORCE_INLINE void  brebisDisableClientStateIndexedEXT(GLenum array, GLuint index) { brebisGL.brebisDisableClientStateIndexedEXT(array, index); }
#define glDisableClientStateIndexedEXT brebisDisableClientStateIndexedEXT
BREBIS_FORCE_INLINE void  brebisDisableClientStateiEXT(GLenum array, GLuint index) { brebisGL.brebisDisableClientStateiEXT(array, index); }
#define glDisableClientStateiEXT brebisDisableClientStateiEXT
BREBIS_FORCE_INLINE void  brebisDisableDriverControlQCOM(GLuint driverControl) { brebisGL.brebisDisableDriverControlQCOM(driverControl); }
#define glDisableDriverControlQCOM brebisDisableDriverControlQCOM
BREBIS_FORCE_INLINE void  brebisDisableIndexedEXT(GLenum target, GLuint index) { brebisGL.brebisDisableIndexedEXT(target, index); }
#define glDisableIndexedEXT brebisDisableIndexedEXT
BREBIS_FORCE_INLINE void  brebisDisableVariantClientStateEXT(GLuint id) { brebisGL.brebisDisableVariantClientStateEXT(id); }
#define glDisableVariantClientStateEXT brebisDisableVariantClientStateEXT
BREBIS_FORCE_INLINE void  brebisDisableVertexArrayAttrib(GLuint vaobj, GLuint index) { brebisGL.brebisDisableVertexArrayAttrib(vaobj, index); }
#define glDisableVertexArrayAttrib brebisDisableVertexArrayAttrib
BREBIS_FORCE_INLINE void  brebisDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { brebisGL.brebisDisableVertexArrayAttribEXT(vaobj, index); }
#define glDisableVertexArrayAttribEXT brebisDisableVertexArrayAttribEXT
BREBIS_FORCE_INLINE void  brebisDisableVertexArrayEXT(GLuint vaobj, GLenum array) { brebisGL.brebisDisableVertexArrayEXT(vaobj, array); }
#define glDisableVertexArrayEXT brebisDisableVertexArrayEXT
BREBIS_FORCE_INLINE void  brebisDisableVertexAttribAPPLE(GLuint index, GLenum pname) { brebisGL.brebisDisableVertexAttribAPPLE(index, pname); }
#define glDisableVertexAttribAPPLE brebisDisableVertexAttribAPPLE
BREBIS_FORCE_INLINE void  brebisDisableVertexAttribArray(GLuint index) { brebisGL.brebisDisableVertexAttribArray(index); }
#define glDisableVertexAttribArray brebisDisableVertexAttribArray
BREBIS_FORCE_INLINE void  brebisDisableVertexAttribArrayARB(GLuint index) { brebisGL.brebisDisableVertexAttribArrayARB(index); }
#define glDisableVertexAttribArrayARB brebisDisableVertexAttribArrayARB
BREBIS_FORCE_INLINE void  brebisDisablei(GLenum target, GLuint index) { brebisGL.brebisDisablei(target, index); }
#define glDisablei brebisDisablei
BREBIS_FORCE_INLINE void  brebisDisableiEXT(GLenum target, GLuint index) { brebisGL.brebisDisableiEXT(target, index); }
#define glDisableiEXT brebisDisableiEXT
BREBIS_FORCE_INLINE void  brebisDisableiNV(GLenum target, GLuint index) { brebisGL.brebisDisableiNV(target, index); }
#define glDisableiNV brebisDisableiNV
BREBIS_FORCE_INLINE void  brebisDisableiOES(GLenum target, GLuint index) { brebisGL.brebisDisableiOES(target, index); }
#define glDisableiOES brebisDisableiOES
BREBIS_FORCE_INLINE void  brebisDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum * attachments) { brebisGL.brebisDiscardFramebufferEXT(target, numAttachments, attachments); }
#define glDiscardFramebufferEXT brebisDiscardFramebufferEXT
BREBIS_FORCE_INLINE void  brebisDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { brebisGL.brebisDispatchCompute(num_groups_x, num_groups_y, num_groups_z); }
#define glDispatchCompute brebisDispatchCompute
BREBIS_FORCE_INLINE void  brebisDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) { brebisGL.brebisDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z); }
#define glDispatchComputeGroupSizeARB brebisDispatchComputeGroupSizeARB
BREBIS_FORCE_INLINE void  brebisDispatchComputeIndirect(GLintptr indirect) { brebisGL.brebisDispatchComputeIndirect(indirect); }
#define glDispatchComputeIndirect brebisDispatchComputeIndirect
BREBIS_FORCE_INLINE void  brebisDrawArrays(GLenum mode, GLint first, GLsizei count) { brebisGL.brebisDrawArrays(mode, first, count); }
#define glDrawArrays brebisDrawArrays
BREBIS_FORCE_INLINE void  brebisDrawArraysEXT(GLenum mode, GLint first, GLsizei count) { brebisGL.brebisDrawArraysEXT(mode, first, count); }
#define glDrawArraysEXT brebisDrawArraysEXT
BREBIS_FORCE_INLINE void  brebisDrawArraysIndirect(GLenum mode, const void * indirect) { brebisGL.brebisDrawArraysIndirect(mode, indirect); }
#define glDrawArraysIndirect brebisDrawArraysIndirect
BREBIS_FORCE_INLINE void  brebisDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { brebisGL.brebisDrawArraysInstanced(mode, first, count, instancecount); }
#define glDrawArraysInstanced brebisDrawArraysInstanced
BREBIS_FORCE_INLINE void  brebisDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { brebisGL.brebisDrawArraysInstancedANGLE(mode, first, count, primcount); }
#define glDrawArraysInstancedANGLE brebisDrawArraysInstancedANGLE
BREBIS_FORCE_INLINE void  brebisDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { brebisGL.brebisDrawArraysInstancedARB(mode, first, count, primcount); }
#define glDrawArraysInstancedARB brebisDrawArraysInstancedARB
BREBIS_FORCE_INLINE void  brebisDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { brebisGL.brebisDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance); }
#define glDrawArraysInstancedBaseInstance brebisDrawArraysInstancedBaseInstance
BREBIS_FORCE_INLINE void  brebisDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { brebisGL.brebisDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance); }
#define glDrawArraysInstancedBaseInstanceEXT brebisDrawArraysInstancedBaseInstanceEXT
BREBIS_FORCE_INLINE void  brebisDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) { brebisGL.brebisDrawArraysInstancedEXT(mode, start, count, primcount); }
#define glDrawArraysInstancedEXT brebisDrawArraysInstancedEXT
BREBIS_FORCE_INLINE void  brebisDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { brebisGL.brebisDrawArraysInstancedNV(mode, first, count, primcount); }
#define glDrawArraysInstancedNV brebisDrawArraysInstancedNV
BREBIS_FORCE_INLINE void  brebisDrawBuffer(GLenum buf) { brebisGL.brebisDrawBuffer(buf); }
#define glDrawBuffer brebisDrawBuffer
BREBIS_FORCE_INLINE void  brebisDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest) { brebisGL.brebisDrawBufferRegion(region, x, y, width, height, xDest, yDest); }
#define glDrawBufferRegion brebisDrawBufferRegion
BREBIS_FORCE_INLINE void  brebisDrawBuffers(GLsizei n, const GLenum * bufs) { brebisGL.brebisDrawBuffers(n, bufs); }
#define glDrawBuffers brebisDrawBuffers
BREBIS_FORCE_INLINE void  brebisDrawBuffersARB(GLsizei n, const GLenum * bufs) { brebisGL.brebisDrawBuffersARB(n, bufs); }
#define glDrawBuffersARB brebisDrawBuffersARB
BREBIS_FORCE_INLINE void  brebisDrawBuffersATI(GLsizei n, const GLenum * bufs) { brebisGL.brebisDrawBuffersATI(n, bufs); }
#define glDrawBuffersATI brebisDrawBuffersATI
BREBIS_FORCE_INLINE void  brebisDrawBuffersEXT(GLsizei n, const GLenum * bufs) { brebisGL.brebisDrawBuffersEXT(n, bufs); }
#define glDrawBuffersEXT brebisDrawBuffersEXT
BREBIS_FORCE_INLINE void  brebisDrawBuffersIndexedEXT(GLint n, const GLenum * location, const GLint * indices) { brebisGL.brebisDrawBuffersIndexedEXT(n, location, indices); }
#define glDrawBuffersIndexedEXT brebisDrawBuffersIndexedEXT
BREBIS_FORCE_INLINE void  brebisDrawBuffersNV(GLsizei n, const GLenum * bufs) { brebisGL.brebisDrawBuffersNV(n, bufs); }
#define glDrawBuffersNV brebisDrawBuffersNV
BREBIS_FORCE_INLINE void  brebisDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count) { brebisGL.brebisDrawCommandsAddressNV(primitiveMode, indirects, sizes, count); }
#define glDrawCommandsAddressNV brebisDrawCommandsAddressNV
BREBIS_FORCE_INLINE void  brebisDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count) { brebisGL.brebisDrawCommandsNV(primitiveMode, buffer, indirects, sizes, count); }
#define glDrawCommandsNV brebisDrawCommandsNV
BREBIS_FORCE_INLINE void  brebisDrawCommandsStatesAddressNV(const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { brebisGL.brebisDrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count); }
#define glDrawCommandsStatesAddressNV brebisDrawCommandsStatesAddressNV
BREBIS_FORCE_INLINE void  brebisDrawCommandsStatesNV(GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { brebisGL.brebisDrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count); }
#define glDrawCommandsStatesNV brebisDrawCommandsStatesNV
BREBIS_FORCE_INLINE void  brebisDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) { brebisGL.brebisDrawElementArrayAPPLE(mode, first, count); }
#define glDrawElementArrayAPPLE brebisDrawElementArrayAPPLE
BREBIS_FORCE_INLINE void  brebisDrawElementArrayATI(GLenum mode, GLsizei count) { brebisGL.brebisDrawElementArrayATI(mode, count); }
#define glDrawElementArrayATI brebisDrawElementArrayATI
BREBIS_FORCE_INLINE void  brebisDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) { brebisGL.brebisDrawElements(mode, count, type, indices); }
#define glDrawElements brebisDrawElements
BREBIS_FORCE_INLINE void  brebisDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { brebisGL.brebisDrawElementsBaseVertex(mode, count, type, indices, basevertex); }
#define glDrawElementsBaseVertex brebisDrawElementsBaseVertex
BREBIS_FORCE_INLINE void  brebisDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { brebisGL.brebisDrawElementsBaseVertexEXT(mode, count, type, indices, basevertex); }
#define glDrawElementsBaseVertexEXT brebisDrawElementsBaseVertexEXT
BREBIS_FORCE_INLINE void  brebisDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { brebisGL.brebisDrawElementsBaseVertexOES(mode, count, type, indices, basevertex); }
#define glDrawElementsBaseVertexOES brebisDrawElementsBaseVertexOES
BREBIS_FORCE_INLINE void  brebisDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) { brebisGL.brebisDrawElementsIndirect(mode, type, indirect); }
#define glDrawElementsIndirect brebisDrawElementsIndirect
BREBIS_FORCE_INLINE void  brebisDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) { brebisGL.brebisDrawElementsInstanced(mode, count, type, indices, instancecount); }
#define glDrawElementsInstanced brebisDrawElementsInstanced
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { brebisGL.brebisDrawElementsInstancedANGLE(mode, count, type, indices, primcount); }
#define glDrawElementsInstancedANGLE brebisDrawElementsInstancedANGLE
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { brebisGL.brebisDrawElementsInstancedARB(mode, count, type, indices, primcount); }
#define glDrawElementsInstancedARB brebisDrawElementsInstancedARB
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { brebisGL.brebisDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance); }
#define glDrawElementsInstancedBaseInstance brebisDrawElementsInstancedBaseInstance
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { brebisGL.brebisDrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance); }
#define glDrawElementsInstancedBaseInstanceEXT brebisDrawElementsInstancedBaseInstanceEXT
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { brebisGL.brebisDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
#define glDrawElementsInstancedBaseVertex brebisDrawElementsInstancedBaseVertex
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { brebisGL.brebisDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance); }
#define glDrawElementsInstancedBaseVertexBaseInstance brebisDrawElementsInstancedBaseVertexBaseInstance
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { brebisGL.brebisDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance); }
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT brebisDrawElementsInstancedBaseVertexBaseInstanceEXT
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { brebisGL.brebisDrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex); }
#define glDrawElementsInstancedBaseVertexEXT brebisDrawElementsInstancedBaseVertexEXT
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { brebisGL.brebisDrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex); }
#define glDrawElementsInstancedBaseVertexOES brebisDrawElementsInstancedBaseVertexOES
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { brebisGL.brebisDrawElementsInstancedEXT(mode, count, type, indices, primcount); }
#define glDrawElementsInstancedEXT brebisDrawElementsInstancedEXT
BREBIS_FORCE_INLINE void  brebisDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { brebisGL.brebisDrawElementsInstancedNV(mode, count, type, indices, primcount); }
#define glDrawElementsInstancedNV brebisDrawElementsInstancedNV
BREBIS_FORCE_INLINE void  brebisDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) { brebisGL.brebisDrawMeshArraysSUN(mode, first, count, width); }
#define glDrawMeshArraysSUN brebisDrawMeshArraysSUN
BREBIS_FORCE_INLINE void  brebisDrawMeshTasksIndirectNV(GLintptr indirect) { brebisGL.brebisDrawMeshTasksIndirectNV(indirect); }
#define glDrawMeshTasksIndirectNV brebisDrawMeshTasksIndirectNV
BREBIS_FORCE_INLINE void  brebisDrawMeshTasksNV(GLuint first, GLuint count) { brebisGL.brebisDrawMeshTasksNV(first, count); }
#define glDrawMeshTasksNV brebisDrawMeshTasksNV
BREBIS_FORCE_INLINE void  brebisDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisDrawPixels(width, height, format, type, pixels); }
#define glDrawPixels brebisDrawPixels
BREBIS_FORCE_INLINE void  brebisDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) { brebisGL.brebisDrawRangeElementArrayAPPLE(mode, start, end, first, count); }
#define glDrawRangeElementArrayAPPLE brebisDrawRangeElementArrayAPPLE
BREBIS_FORCE_INLINE void  brebisDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) { brebisGL.brebisDrawRangeElementArrayATI(mode, start, end, count); }
#define glDrawRangeElementArrayATI brebisDrawRangeElementArrayATI
BREBIS_FORCE_INLINE void  brebisDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { brebisGL.brebisDrawRangeElements(mode, start, end, count, type, indices); }
#define glDrawRangeElements brebisDrawRangeElements
BREBIS_FORCE_INLINE void  brebisDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { brebisGL.brebisDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
#define glDrawRangeElementsBaseVertex brebisDrawRangeElementsBaseVertex
BREBIS_FORCE_INLINE void  brebisDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { brebisGL.brebisDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex); }
#define glDrawRangeElementsBaseVertexEXT brebisDrawRangeElementsBaseVertexEXT
BREBIS_FORCE_INLINE void  brebisDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { brebisGL.brebisDrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex); }
#define glDrawRangeElementsBaseVertexOES brebisDrawRangeElementsBaseVertexOES
BREBIS_FORCE_INLINE void  brebisDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { brebisGL.brebisDrawRangeElementsEXT(mode, start, end, count, type, indices); }
#define glDrawRangeElementsEXT brebisDrawRangeElementsEXT
BREBIS_FORCE_INLINE void  brebisDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) { brebisGL.brebisDrawTexfOES(x, y, z, width, height); }
#define glDrawTexfOES brebisDrawTexfOES
BREBIS_FORCE_INLINE void  brebisDrawTexfvOES(const GLfloat * coords) { brebisGL.brebisDrawTexfvOES(coords); }
#define glDrawTexfvOES brebisDrawTexfvOES
BREBIS_FORCE_INLINE void  brebisDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height) { brebisGL.brebisDrawTexiOES(x, y, z, width, height); }
#define glDrawTexiOES brebisDrawTexiOES
BREBIS_FORCE_INLINE void  brebisDrawTexivOES(const GLint * coords) { brebisGL.brebisDrawTexivOES(coords); }
#define glDrawTexivOES brebisDrawTexivOES
BREBIS_FORCE_INLINE void  brebisDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height) { brebisGL.brebisDrawTexsOES(x, y, z, width, height); }
#define glDrawTexsOES brebisDrawTexsOES
BREBIS_FORCE_INLINE void  brebisDrawTexsvOES(const GLshort * coords) { brebisGL.brebisDrawTexsvOES(coords); }
#define glDrawTexsvOES brebisDrawTexsvOES
BREBIS_FORCE_INLINE void  brebisDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { brebisGL.brebisDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
#define glDrawTextureNV brebisDrawTextureNV
BREBIS_FORCE_INLINE void  brebisDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height) { brebisGL.brebisDrawTexxOES(x, y, z, width, height); }
#define glDrawTexxOES brebisDrawTexxOES
BREBIS_FORCE_INLINE void  brebisDrawTexxvOES(const GLfixed * coords) { brebisGL.brebisDrawTexxvOES(coords); }
#define glDrawTexxvOES brebisDrawTexxvOES
BREBIS_FORCE_INLINE void  brebisDrawTransformFeedback(GLenum mode, GLuint id) { brebisGL.brebisDrawTransformFeedback(mode, id); }
#define glDrawTransformFeedback brebisDrawTransformFeedback
BREBIS_FORCE_INLINE void  brebisDrawTransformFeedbackEXT(GLenum mode, GLuint id) { brebisGL.brebisDrawTransformFeedbackEXT(mode, id); }
#define glDrawTransformFeedbackEXT brebisDrawTransformFeedbackEXT
BREBIS_FORCE_INLINE void  brebisDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) { brebisGL.brebisDrawTransformFeedbackInstanced(mode, id, instancecount); }
#define glDrawTransformFeedbackInstanced brebisDrawTransformFeedbackInstanced
BREBIS_FORCE_INLINE void  brebisDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount) { brebisGL.brebisDrawTransformFeedbackInstancedEXT(mode, id, instancecount); }
#define glDrawTransformFeedbackInstancedEXT brebisDrawTransformFeedbackInstancedEXT
BREBIS_FORCE_INLINE void  brebisDrawTransformFeedbackNV(GLenum mode, GLuint id) { brebisGL.brebisDrawTransformFeedbackNV(mode, id); }
#define glDrawTransformFeedbackNV brebisDrawTransformFeedbackNV
BREBIS_FORCE_INLINE void  brebisDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) { brebisGL.brebisDrawTransformFeedbackStream(mode, id, stream); }
#define glDrawTransformFeedbackStream brebisDrawTransformFeedbackStream
BREBIS_FORCE_INLINE void  brebisDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { brebisGL.brebisDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount); }
#define glDrawTransformFeedbackStreamInstanced brebisDrawTransformFeedbackStreamInstanced
BREBIS_FORCE_INLINE void  brebisDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { brebisGL.brebisDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
#define glDrawVkImageNV brebisDrawVkImageNV
BREBIS_FORCE_INLINE void  brebisEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) { brebisGL.brebisEGLImageTargetRenderbufferStorageOES(target, image); }
#define glEGLImageTargetRenderbufferStorageOES brebisEGLImageTargetRenderbufferStorageOES
BREBIS_FORCE_INLINE void  brebisEGLImageTargetTexStorageEXT(GLenum target, GLeglImageOES image, const GLint*  attrib_list) { brebisGL.brebisEGLImageTargetTexStorageEXT(target, image, attrib_list); }
#define glEGLImageTargetTexStorageEXT brebisEGLImageTargetTexStorageEXT
BREBIS_FORCE_INLINE void  brebisEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) { brebisGL.brebisEGLImageTargetTexture2DOES(target, image); }
#define glEGLImageTargetTexture2DOES brebisEGLImageTargetTexture2DOES
BREBIS_FORCE_INLINE void  brebisEGLImageTargetTextureStorageEXT(GLuint texture, GLeglImageOES image, const GLint*  attrib_list) { brebisGL.brebisEGLImageTargetTextureStorageEXT(texture, image, attrib_list); }
#define glEGLImageTargetTextureStorageEXT brebisEGLImageTargetTextureStorageEXT
BREBIS_FORCE_INLINE void  brebisEdgeFlag(GLboolean flag) { brebisGL.brebisEdgeFlag(flag); }
#define glEdgeFlag brebisEdgeFlag
BREBIS_FORCE_INLINE void  brebisEdgeFlagFormatNV(GLsizei stride) { brebisGL.brebisEdgeFlagFormatNV(stride); }
#define glEdgeFlagFormatNV brebisEdgeFlagFormatNV
BREBIS_FORCE_INLINE void  brebisEdgeFlagPointer(GLsizei stride, const void * pointer) { brebisGL.brebisEdgeFlagPointer(stride, pointer); }
#define glEdgeFlagPointer brebisEdgeFlagPointer
BREBIS_FORCE_INLINE void  brebisEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean * pointer) { brebisGL.brebisEdgeFlagPointerEXT(stride, count, pointer); }
#define glEdgeFlagPointerEXT brebisEdgeFlagPointerEXT
BREBIS_FORCE_INLINE void  brebisEdgeFlagPointerListIBM(GLint stride, const GLboolean ** pointer, GLint ptrstride) { brebisGL.brebisEdgeFlagPointerListIBM(stride, pointer, ptrstride); }
#define glEdgeFlagPointerListIBM brebisEdgeFlagPointerListIBM
BREBIS_FORCE_INLINE void  brebisEdgeFlagv(const GLboolean * flag) { brebisGL.brebisEdgeFlagv(flag); }
#define glEdgeFlagv brebisEdgeFlagv
BREBIS_FORCE_INLINE void  brebisElementPointerAPPLE(GLenum type, const void * pointer) { brebisGL.brebisElementPointerAPPLE(type, pointer); }
#define glElementPointerAPPLE brebisElementPointerAPPLE
BREBIS_FORCE_INLINE void  brebisElementPointerATI(GLenum type, const void * pointer) { brebisGL.brebisElementPointerATI(type, pointer); }
#define glElementPointerATI brebisElementPointerATI
BREBIS_FORCE_INLINE void  brebisEnable(GLenum cap) { brebisGL.brebisEnable(cap); }
#define glEnable brebisEnable
BREBIS_FORCE_INLINE void  brebisEnableClientState(GLenum array) { brebisGL.brebisEnableClientState(array); }
#define glEnableClientState brebisEnableClientState
BREBIS_FORCE_INLINE void  brebisEnableClientStateIndexedEXT(GLenum array, GLuint index) { brebisGL.brebisEnableClientStateIndexedEXT(array, index); }
#define glEnableClientStateIndexedEXT brebisEnableClientStateIndexedEXT
BREBIS_FORCE_INLINE void  brebisEnableClientStateiEXT(GLenum array, GLuint index) { brebisGL.brebisEnableClientStateiEXT(array, index); }
#define glEnableClientStateiEXT brebisEnableClientStateiEXT
BREBIS_FORCE_INLINE void  brebisEnableDriverControlQCOM(GLuint driverControl) { brebisGL.brebisEnableDriverControlQCOM(driverControl); }
#define glEnableDriverControlQCOM brebisEnableDriverControlQCOM
BREBIS_FORCE_INLINE void  brebisEnableIndexedEXT(GLenum target, GLuint index) { brebisGL.brebisEnableIndexedEXT(target, index); }
#define glEnableIndexedEXT brebisEnableIndexedEXT
BREBIS_FORCE_INLINE void  brebisEnableVariantClientStateEXT(GLuint id) { brebisGL.brebisEnableVariantClientStateEXT(id); }
#define glEnableVariantClientStateEXT brebisEnableVariantClientStateEXT
BREBIS_FORCE_INLINE void  brebisEnableVertexArrayAttrib(GLuint vaobj, GLuint index) { brebisGL.brebisEnableVertexArrayAttrib(vaobj, index); }
#define glEnableVertexArrayAttrib brebisEnableVertexArrayAttrib
BREBIS_FORCE_INLINE void  brebisEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { brebisGL.brebisEnableVertexArrayAttribEXT(vaobj, index); }
#define glEnableVertexArrayAttribEXT brebisEnableVertexArrayAttribEXT
BREBIS_FORCE_INLINE void  brebisEnableVertexArrayEXT(GLuint vaobj, GLenum array) { brebisGL.brebisEnableVertexArrayEXT(vaobj, array); }
#define glEnableVertexArrayEXT brebisEnableVertexArrayEXT
BREBIS_FORCE_INLINE void  brebisEnableVertexAttribAPPLE(GLuint index, GLenum pname) { brebisGL.brebisEnableVertexAttribAPPLE(index, pname); }
#define glEnableVertexAttribAPPLE brebisEnableVertexAttribAPPLE
BREBIS_FORCE_INLINE void  brebisEnableVertexAttribArray(GLuint index) { brebisGL.brebisEnableVertexAttribArray(index); }
#define glEnableVertexAttribArray brebisEnableVertexAttribArray
BREBIS_FORCE_INLINE void  brebisEnableVertexAttribArrayARB(GLuint index) { brebisGL.brebisEnableVertexAttribArrayARB(index); }
#define glEnableVertexAttribArrayARB brebisEnableVertexAttribArrayARB
BREBIS_FORCE_INLINE void  brebisEnablei(GLenum target, GLuint index) { brebisGL.brebisEnablei(target, index); }
#define glEnablei brebisEnablei
BREBIS_FORCE_INLINE void  brebisEnableiEXT(GLenum target, GLuint index) { brebisGL.brebisEnableiEXT(target, index); }
#define glEnableiEXT brebisEnableiEXT
BREBIS_FORCE_INLINE void  brebisEnableiNV(GLenum target, GLuint index) { brebisGL.brebisEnableiNV(target, index); }
#define glEnableiNV brebisEnableiNV
BREBIS_FORCE_INLINE void  brebisEnableiOES(GLenum target, GLuint index) { brebisGL.brebisEnableiOES(target, index); }
#define glEnableiOES brebisEnableiOES
BREBIS_FORCE_INLINE void  brebisEnd(void) { brebisGL.brebisEnd(); }
#define glEnd brebisEnd
BREBIS_FORCE_INLINE void  brebisEndConditionalRender(void) { brebisGL.brebisEndConditionalRender(); }
#define glEndConditionalRender brebisEndConditionalRender
BREBIS_FORCE_INLINE void  brebisEndConditionalRenderNV(void) { brebisGL.brebisEndConditionalRenderNV(); }
#define glEndConditionalRenderNV brebisEndConditionalRenderNV
BREBIS_FORCE_INLINE void  brebisEndConditionalRenderNVX(void) { brebisGL.brebisEndConditionalRenderNVX(); }
#define glEndConditionalRenderNVX brebisEndConditionalRenderNVX
BREBIS_FORCE_INLINE void  brebisEndFragmentShaderATI(void) { brebisGL.brebisEndFragmentShaderATI(); }
#define glEndFragmentShaderATI brebisEndFragmentShaderATI
BREBIS_FORCE_INLINE void  brebisEndList(void) { brebisGL.brebisEndList(); }
#define glEndList brebisEndList
BREBIS_FORCE_INLINE void  brebisEndOcclusionQueryNV(void) { brebisGL.brebisEndOcclusionQueryNV(); }
#define glEndOcclusionQueryNV brebisEndOcclusionQueryNV
BREBIS_FORCE_INLINE void  brebisEndPerfMonitorAMD(GLuint monitor) { brebisGL.brebisEndPerfMonitorAMD(monitor); }
#define glEndPerfMonitorAMD brebisEndPerfMonitorAMD
BREBIS_FORCE_INLINE void  brebisEndPerfQueryINTEL(GLuint queryHandle) { brebisGL.brebisEndPerfQueryINTEL(queryHandle); }
#define glEndPerfQueryINTEL brebisEndPerfQueryINTEL
BREBIS_FORCE_INLINE void  brebisEndQuery(GLenum target) { brebisGL.brebisEndQuery(target); }
#define glEndQuery brebisEndQuery
BREBIS_FORCE_INLINE void  brebisEndQueryARB(GLenum target) { brebisGL.brebisEndQueryARB(target); }
#define glEndQueryARB brebisEndQueryARB
BREBIS_FORCE_INLINE void  brebisEndQueryEXT(GLenum target) { brebisGL.brebisEndQueryEXT(target); }
#define glEndQueryEXT brebisEndQueryEXT
BREBIS_FORCE_INLINE void  brebisEndQueryIndexed(GLenum target, GLuint index) { brebisGL.brebisEndQueryIndexed(target, index); }
#define glEndQueryIndexed brebisEndQueryIndexed
BREBIS_FORCE_INLINE void  brebisEndTilingQCOM(GLbitfield preserveMask) { brebisGL.brebisEndTilingQCOM(preserveMask); }
#define glEndTilingQCOM brebisEndTilingQCOM
BREBIS_FORCE_INLINE void  brebisEndTransformFeedback(void) { brebisGL.brebisEndTransformFeedback(); }
#define glEndTransformFeedback brebisEndTransformFeedback
BREBIS_FORCE_INLINE void  brebisEndTransformFeedbackEXT(void) { brebisGL.brebisEndTransformFeedbackEXT(); }
#define glEndTransformFeedbackEXT brebisEndTransformFeedbackEXT
BREBIS_FORCE_INLINE void  brebisEndTransformFeedbackNV(void) { brebisGL.brebisEndTransformFeedbackNV(); }
#define glEndTransformFeedbackNV brebisEndTransformFeedbackNV
BREBIS_FORCE_INLINE void  brebisEndVertexShaderEXT(void) { brebisGL.brebisEndVertexShaderEXT(); }
#define glEndVertexShaderEXT brebisEndVertexShaderEXT
BREBIS_FORCE_INLINE void  brebisEndVideoCaptureNV(GLuint video_capture_slot) { brebisGL.brebisEndVideoCaptureNV(video_capture_slot); }
#define glEndVideoCaptureNV brebisEndVideoCaptureNV
BREBIS_FORCE_INLINE void  brebisEvalCoord1d(GLdouble u) { brebisGL.brebisEvalCoord1d(u); }
#define glEvalCoord1d brebisEvalCoord1d
BREBIS_FORCE_INLINE void  brebisEvalCoord1dv(const GLdouble * u) { brebisGL.brebisEvalCoord1dv(u); }
#define glEvalCoord1dv brebisEvalCoord1dv
BREBIS_FORCE_INLINE void  brebisEvalCoord1f(GLfloat u) { brebisGL.brebisEvalCoord1f(u); }
#define glEvalCoord1f brebisEvalCoord1f
BREBIS_FORCE_INLINE void  brebisEvalCoord1fv(const GLfloat * u) { brebisGL.brebisEvalCoord1fv(u); }
#define glEvalCoord1fv brebisEvalCoord1fv
BREBIS_FORCE_INLINE void  brebisEvalCoord1xOES(GLfixed u) { brebisGL.brebisEvalCoord1xOES(u); }
#define glEvalCoord1xOES brebisEvalCoord1xOES
BREBIS_FORCE_INLINE void  brebisEvalCoord1xvOES(const GLfixed * coords) { brebisGL.brebisEvalCoord1xvOES(coords); }
#define glEvalCoord1xvOES brebisEvalCoord1xvOES
BREBIS_FORCE_INLINE void  brebisEvalCoord2d(GLdouble u, GLdouble v) { brebisGL.brebisEvalCoord2d(u, v); }
#define glEvalCoord2d brebisEvalCoord2d
BREBIS_FORCE_INLINE void  brebisEvalCoord2dv(const GLdouble * u) { brebisGL.brebisEvalCoord2dv(u); }
#define glEvalCoord2dv brebisEvalCoord2dv
BREBIS_FORCE_INLINE void  brebisEvalCoord2f(GLfloat u, GLfloat v) { brebisGL.brebisEvalCoord2f(u, v); }
#define glEvalCoord2f brebisEvalCoord2f
BREBIS_FORCE_INLINE void  brebisEvalCoord2fv(const GLfloat * u) { brebisGL.brebisEvalCoord2fv(u); }
#define glEvalCoord2fv brebisEvalCoord2fv
BREBIS_FORCE_INLINE void  brebisEvalCoord2xOES(GLfixed u, GLfixed v) { brebisGL.brebisEvalCoord2xOES(u, v); }
#define glEvalCoord2xOES brebisEvalCoord2xOES
BREBIS_FORCE_INLINE void  brebisEvalCoord2xvOES(const GLfixed * coords) { brebisGL.brebisEvalCoord2xvOES(coords); }
#define glEvalCoord2xvOES brebisEvalCoord2xvOES
BREBIS_FORCE_INLINE void  brebisEvalMapsNV(GLenum target, GLenum mode) { brebisGL.brebisEvalMapsNV(target, mode); }
#define glEvalMapsNV brebisEvalMapsNV
BREBIS_FORCE_INLINE void  brebisEvalMesh1(GLenum mode, GLint i1, GLint i2) { brebisGL.brebisEvalMesh1(mode, i1, i2); }
#define glEvalMesh1 brebisEvalMesh1
BREBIS_FORCE_INLINE void  brebisEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) { brebisGL.brebisEvalMesh2(mode, i1, i2, j1, j2); }
#define glEvalMesh2 brebisEvalMesh2
BREBIS_FORCE_INLINE void  brebisEvalPoint1(GLint i) { brebisGL.brebisEvalPoint1(i); }
#define glEvalPoint1 brebisEvalPoint1
BREBIS_FORCE_INLINE void  brebisEvalPoint2(GLint i, GLint j) { brebisGL.brebisEvalPoint2(i, j); }
#define glEvalPoint2 brebisEvalPoint2
BREBIS_FORCE_INLINE void  brebisEvaluateDepthValuesARB(void) { brebisGL.brebisEvaluateDepthValuesARB(); }
#define glEvaluateDepthValuesARB brebisEvaluateDepthValuesARB
BREBIS_FORCE_INLINE void  brebisExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params) { brebisGL.brebisExecuteProgramNV(target, id, params); }
#define glExecuteProgramNV brebisExecuteProgramNV
BREBIS_FORCE_INLINE void  brebisExtGetBufferPointervQCOM(GLenum target, void ** params) { brebisGL.brebisExtGetBufferPointervQCOM(target, params); }
#define glExtGetBufferPointervQCOM brebisExtGetBufferPointervQCOM
BREBIS_FORCE_INLINE void  brebisExtGetBuffersQCOM(GLuint * buffers, GLint maxBuffers, GLint * numBuffers) { brebisGL.brebisExtGetBuffersQCOM(buffers, maxBuffers, numBuffers); }
#define glExtGetBuffersQCOM brebisExtGetBuffersQCOM
BREBIS_FORCE_INLINE void  brebisExtGetFramebuffersQCOM(GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers) { brebisGL.brebisExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers); }
#define glExtGetFramebuffersQCOM brebisExtGetFramebuffersQCOM
BREBIS_FORCE_INLINE void  brebisExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar * source, GLint * length) { brebisGL.brebisExtGetProgramBinarySourceQCOM(program, shadertype, source, length); }
#define glExtGetProgramBinarySourceQCOM brebisExtGetProgramBinarySourceQCOM
BREBIS_FORCE_INLINE void  brebisExtGetProgramsQCOM(GLuint * programs, GLint maxPrograms, GLint * numPrograms) { brebisGL.brebisExtGetProgramsQCOM(programs, maxPrograms, numPrograms); }
#define glExtGetProgramsQCOM brebisExtGetProgramsQCOM
BREBIS_FORCE_INLINE void  brebisExtGetRenderbuffersQCOM(GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers) { brebisGL.brebisExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers); }
#define glExtGetRenderbuffersQCOM brebisExtGetRenderbuffersQCOM
BREBIS_FORCE_INLINE void  brebisExtGetShadersQCOM(GLuint * shaders, GLint maxShaders, GLint * numShaders) { brebisGL.brebisExtGetShadersQCOM(shaders, maxShaders, numShaders); }
#define glExtGetShadersQCOM brebisExtGetShadersQCOM
BREBIS_FORCE_INLINE void  brebisExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params) { brebisGL.brebisExtGetTexLevelParameterivQCOM(texture, face, level, pname, params); }
#define glExtGetTexLevelParameterivQCOM brebisExtGetTexLevelParameterivQCOM
BREBIS_FORCE_INLINE void  brebisExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels) { brebisGL.brebisExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels); }
#define glExtGetTexSubImageQCOM brebisExtGetTexSubImageQCOM
BREBIS_FORCE_INLINE void  brebisExtGetTexturesQCOM(GLuint * textures, GLint maxTextures, GLint * numTextures) { brebisGL.brebisExtGetTexturesQCOM(textures, maxTextures, numTextures); }
#define glExtGetTexturesQCOM brebisExtGetTexturesQCOM
BREBIS_FORCE_INLINE GLboolean brebisExtIsProgramBinaryQCOM(GLuint program) { return brebisGL.brebisExtIsProgramBinaryQCOM(program); }
#define glExtIsProgramBinaryQCOM brebisExtIsProgramBinaryQCOM
BREBIS_FORCE_INLINE void  brebisExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) { brebisGL.brebisExtTexObjectStateOverrideiQCOM(target, pname, param); }
#define glExtTexObjectStateOverrideiQCOM brebisExtTexObjectStateOverrideiQCOM
BREBIS_FORCE_INLINE void  brebisExtractComponentEXT(GLuint res, GLuint src, GLuint num) { brebisGL.brebisExtractComponentEXT(res, src, num); }
#define glExtractComponentEXT brebisExtractComponentEXT
BREBIS_FORCE_INLINE void  brebisFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) { brebisGL.brebisFeedbackBuffer(size, type, buffer); }
#define glFeedbackBuffer brebisFeedbackBuffer
BREBIS_FORCE_INLINE void  brebisFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed * buffer) { brebisGL.brebisFeedbackBufferxOES(n, type, buffer); }
#define glFeedbackBufferxOES brebisFeedbackBufferxOES
BREBIS_FORCE_INLINE GLsync brebisFenceSync(GLenum condition, GLbitfield flags) { return brebisGL.brebisFenceSync(condition, flags); }
#define glFenceSync brebisFenceSync
BREBIS_FORCE_INLINE GLsync brebisFenceSyncAPPLE(GLenum condition, GLbitfield flags) { return brebisGL.brebisFenceSyncAPPLE(condition, flags); }
#define glFenceSyncAPPLE brebisFenceSyncAPPLE
BREBIS_FORCE_INLINE void  brebisFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { brebisGL.brebisFinalCombinerInputNV(variable, input, mapping, componentUsage); }
#define glFinalCombinerInputNV brebisFinalCombinerInputNV
BREBIS_FORCE_INLINE void  brebisFinish(void) { brebisGL.brebisFinish(); }
#define glFinish brebisFinish
BREBIS_FORCE_INLINE GLint brebisFinishAsyncSGIX(GLuint * markerp) { return brebisGL.brebisFinishAsyncSGIX(markerp); }
#define glFinishAsyncSGIX brebisFinishAsyncSGIX
BREBIS_FORCE_INLINE void  brebisFinishFenceAPPLE(GLuint fence) { brebisGL.brebisFinishFenceAPPLE(fence); }
#define glFinishFenceAPPLE brebisFinishFenceAPPLE
BREBIS_FORCE_INLINE void  brebisFinishFenceNV(GLuint fence) { brebisGL.brebisFinishFenceNV(fence); }
#define glFinishFenceNV brebisFinishFenceNV
BREBIS_FORCE_INLINE void  brebisFinishObjectAPPLE(GLenum object, GLint name) { brebisGL.brebisFinishObjectAPPLE(object, name); }
#define glFinishObjectAPPLE brebisFinishObjectAPPLE
BREBIS_FORCE_INLINE void  brebisFinishTextureSUNX(void) { brebisGL.brebisFinishTextureSUNX(); }
#define glFinishTextureSUNX brebisFinishTextureSUNX
BREBIS_FORCE_INLINE void  brebisFlush(void) { brebisGL.brebisFlush(); }
#define glFlush brebisFlush
BREBIS_FORCE_INLINE void  brebisFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) { brebisGL.brebisFlushMappedBufferRange(target, offset, length); }
#define glFlushMappedBufferRange brebisFlushMappedBufferRange
BREBIS_FORCE_INLINE void  brebisFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) { brebisGL.brebisFlushMappedBufferRangeAPPLE(target, offset, size); }
#define glFlushMappedBufferRangeAPPLE brebisFlushMappedBufferRangeAPPLE
BREBIS_FORCE_INLINE void  brebisFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) { brebisGL.brebisFlushMappedBufferRangeEXT(target, offset, length); }
#define glFlushMappedBufferRangeEXT brebisFlushMappedBufferRangeEXT
BREBIS_FORCE_INLINE void  brebisFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) { brebisGL.brebisFlushMappedNamedBufferRange(buffer, offset, length); }
#define glFlushMappedNamedBufferRange brebisFlushMappedNamedBufferRange
BREBIS_FORCE_INLINE void  brebisFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) { brebisGL.brebisFlushMappedNamedBufferRangeEXT(buffer, offset, length); }
#define glFlushMappedNamedBufferRangeEXT brebisFlushMappedNamedBufferRangeEXT
BREBIS_FORCE_INLINE void  brebisFlushPixelDataRangeNV(GLenum target) { brebisGL.brebisFlushPixelDataRangeNV(target); }
#define glFlushPixelDataRangeNV brebisFlushPixelDataRangeNV
BREBIS_FORCE_INLINE void  brebisFlushRasterSGIX(void) { brebisGL.brebisFlushRasterSGIX(); }
#define glFlushRasterSGIX brebisFlushRasterSGIX
BREBIS_FORCE_INLINE void  brebisFlushStaticDataIBM(GLenum target) { brebisGL.brebisFlushStaticDataIBM(target); }
#define glFlushStaticDataIBM brebisFlushStaticDataIBM
BREBIS_FORCE_INLINE void  brebisFlushVertexArrayRangeAPPLE(GLsizei length, void * pointer) { brebisGL.brebisFlushVertexArrayRangeAPPLE(length, pointer); }
#define glFlushVertexArrayRangeAPPLE brebisFlushVertexArrayRangeAPPLE
BREBIS_FORCE_INLINE void  brebisFlushVertexArrayRangeNV(void) { brebisGL.brebisFlushVertexArrayRangeNV(); }
#define glFlushVertexArrayRangeNV brebisFlushVertexArrayRangeNV
BREBIS_FORCE_INLINE void  brebisFogCoordFormatNV(GLenum type, GLsizei stride) { brebisGL.brebisFogCoordFormatNV(type, stride); }
#define glFogCoordFormatNV brebisFogCoordFormatNV
BREBIS_FORCE_INLINE void  brebisFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisFogCoordPointer(type, stride, pointer); }
#define glFogCoordPointer brebisFogCoordPointer
BREBIS_FORCE_INLINE void  brebisFogCoordPointerEXT(GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisFogCoordPointerEXT(type, stride, pointer); }
#define glFogCoordPointerEXT brebisFogCoordPointerEXT
BREBIS_FORCE_INLINE void  brebisFogCoordPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { brebisGL.brebisFogCoordPointerListIBM(type, stride, pointer, ptrstride); }
#define glFogCoordPointerListIBM brebisFogCoordPointerListIBM
BREBIS_FORCE_INLINE void  brebisFogCoordd(GLdouble coord) { brebisGL.brebisFogCoordd(coord); }
#define glFogCoordd brebisFogCoordd
BREBIS_FORCE_INLINE void  brebisFogCoorddEXT(GLdouble coord) { brebisGL.brebisFogCoorddEXT(coord); }
#define glFogCoorddEXT brebisFogCoorddEXT
BREBIS_FORCE_INLINE void  brebisFogCoorddv(const GLdouble * coord) { brebisGL.brebisFogCoorddv(coord); }
#define glFogCoorddv brebisFogCoorddv
BREBIS_FORCE_INLINE void  brebisFogCoorddvEXT(const GLdouble * coord) { brebisGL.brebisFogCoorddvEXT(coord); }
#define glFogCoorddvEXT brebisFogCoorddvEXT
BREBIS_FORCE_INLINE void  brebisFogCoordf(GLfloat coord) { brebisGL.brebisFogCoordf(coord); }
#define glFogCoordf brebisFogCoordf
BREBIS_FORCE_INLINE void  brebisFogCoordfEXT(GLfloat coord) { brebisGL.brebisFogCoordfEXT(coord); }
#define glFogCoordfEXT brebisFogCoordfEXT
BREBIS_FORCE_INLINE void  brebisFogCoordfv(const GLfloat * coord) { brebisGL.brebisFogCoordfv(coord); }
#define glFogCoordfv brebisFogCoordfv
BREBIS_FORCE_INLINE void  brebisFogCoordfvEXT(const GLfloat * coord) { brebisGL.brebisFogCoordfvEXT(coord); }
#define glFogCoordfvEXT brebisFogCoordfvEXT
BREBIS_FORCE_INLINE void  brebisFogCoordhNV(GLhalfNV fog) { brebisGL.brebisFogCoordhNV(fog); }
#define glFogCoordhNV brebisFogCoordhNV
BREBIS_FORCE_INLINE void  brebisFogCoordhvNV(const GLhalfNV * fog) { brebisGL.brebisFogCoordhvNV(fog); }
#define glFogCoordhvNV brebisFogCoordhvNV
BREBIS_FORCE_INLINE void  brebisFogFuncSGIS(GLsizei n, const GLfloat * points) { brebisGL.brebisFogFuncSGIS(n, points); }
#define glFogFuncSGIS brebisFogFuncSGIS
BREBIS_FORCE_INLINE void  brebisFogf(GLenum pname, GLfloat param) { brebisGL.brebisFogf(pname, param); }
#define glFogf brebisFogf
BREBIS_FORCE_INLINE void  brebisFogfv(GLenum pname, const GLfloat * params) { brebisGL.brebisFogfv(pname, params); }
#define glFogfv brebisFogfv
BREBIS_FORCE_INLINE void  brebisFogi(GLenum pname, GLint param) { brebisGL.brebisFogi(pname, param); }
#define glFogi brebisFogi
BREBIS_FORCE_INLINE void  brebisFogiv(GLenum pname, const GLint * params) { brebisGL.brebisFogiv(pname, params); }
#define glFogiv brebisFogiv
BREBIS_FORCE_INLINE void  brebisFogx(GLenum pname, GLfixed param) { brebisGL.brebisFogx(pname, param); }
#define glFogx brebisFogx
BREBIS_FORCE_INLINE void  brebisFogxOES(GLenum pname, GLfixed param) { brebisGL.brebisFogxOES(pname, param); }
#define glFogxOES brebisFogxOES
BREBIS_FORCE_INLINE void  brebisFogxv(GLenum pname, const GLfixed * param) { brebisGL.brebisFogxv(pname, param); }
#define glFogxv brebisFogxv
BREBIS_FORCE_INLINE void  brebisFogxvOES(GLenum pname, const GLfixed * param) { brebisGL.brebisFogxvOES(pname, param); }
#define glFogxvOES brebisFogxvOES
BREBIS_FORCE_INLINE void  brebisFragmentColorMaterialSGIX(GLenum face, GLenum mode) { brebisGL.brebisFragmentColorMaterialSGIX(face, mode); }
#define glFragmentColorMaterialSGIX brebisFragmentColorMaterialSGIX
BREBIS_FORCE_INLINE void  brebisFragmentCoverageColorNV(GLuint color) { brebisGL.brebisFragmentCoverageColorNV(color); }
#define glFragmentCoverageColorNV brebisFragmentCoverageColorNV
BREBIS_FORCE_INLINE void  brebisFragmentLightModelfSGIX(GLenum pname, GLfloat param) { brebisGL.brebisFragmentLightModelfSGIX(pname, param); }
#define glFragmentLightModelfSGIX brebisFragmentLightModelfSGIX
BREBIS_FORCE_INLINE void  brebisFragmentLightModelfvSGIX(GLenum pname, const GLfloat * params) { brebisGL.brebisFragmentLightModelfvSGIX(pname, params); }
#define glFragmentLightModelfvSGIX brebisFragmentLightModelfvSGIX
BREBIS_FORCE_INLINE void  brebisFragmentLightModeliSGIX(GLenum pname, GLint param) { brebisGL.brebisFragmentLightModeliSGIX(pname, param); }
#define glFragmentLightModeliSGIX brebisFragmentLightModeliSGIX
BREBIS_FORCE_INLINE void  brebisFragmentLightModelivSGIX(GLenum pname, const GLint * params) { brebisGL.brebisFragmentLightModelivSGIX(pname, params); }
#define glFragmentLightModelivSGIX brebisFragmentLightModelivSGIX
BREBIS_FORCE_INLINE void  brebisFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) { brebisGL.brebisFragmentLightfSGIX(light, pname, param); }
#define glFragmentLightfSGIX brebisFragmentLightfSGIX
BREBIS_FORCE_INLINE void  brebisFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat * params) { brebisGL.brebisFragmentLightfvSGIX(light, pname, params); }
#define glFragmentLightfvSGIX brebisFragmentLightfvSGIX
BREBIS_FORCE_INLINE void  brebisFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) { brebisGL.brebisFragmentLightiSGIX(light, pname, param); }
#define glFragmentLightiSGIX brebisFragmentLightiSGIX
BREBIS_FORCE_INLINE void  brebisFragmentLightivSGIX(GLenum light, GLenum pname, const GLint * params) { brebisGL.brebisFragmentLightivSGIX(light, pname, params); }
#define glFragmentLightivSGIX brebisFragmentLightivSGIX
BREBIS_FORCE_INLINE void  brebisFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) { brebisGL.brebisFragmentMaterialfSGIX(face, pname, param); }
#define glFragmentMaterialfSGIX brebisFragmentMaterialfSGIX
BREBIS_FORCE_INLINE void  brebisFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat * params) { brebisGL.brebisFragmentMaterialfvSGIX(face, pname, params); }
#define glFragmentMaterialfvSGIX brebisFragmentMaterialfvSGIX
BREBIS_FORCE_INLINE void  brebisFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) { brebisGL.brebisFragmentMaterialiSGIX(face, pname, param); }
#define glFragmentMaterialiSGIX brebisFragmentMaterialiSGIX
BREBIS_FORCE_INLINE void  brebisFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint * params) { brebisGL.brebisFragmentMaterialivSGIX(face, pname, params); }
#define glFragmentMaterialivSGIX brebisFragmentMaterialivSGIX
BREBIS_FORCE_INLINE void  brebisFrameTerminatorGREMEDY(void) { brebisGL.brebisFrameTerminatorGREMEDY(); }
#define glFrameTerminatorGREMEDY brebisFrameTerminatorGREMEDY
BREBIS_FORCE_INLINE void  brebisFrameZoomSGIX(GLint factor) { brebisGL.brebisFrameZoomSGIX(factor); }
#define glFrameZoomSGIX brebisFrameZoomSGIX
BREBIS_FORCE_INLINE void  brebisFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) { brebisGL.brebisFramebufferDrawBufferEXT(framebuffer, mode); }
#define glFramebufferDrawBufferEXT brebisFramebufferDrawBufferEXT
BREBIS_FORCE_INLINE void  brebisFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum * bufs) { brebisGL.brebisFramebufferDrawBuffersEXT(framebuffer, n, bufs); }
#define glFramebufferDrawBuffersEXT brebisFramebufferDrawBuffersEXT
BREBIS_FORCE_INLINE void  brebisFramebufferFetchBarrierEXT(void) { brebisGL.brebisFramebufferFetchBarrierEXT(); }
#define glFramebufferFetchBarrierEXT brebisFramebufferFetchBarrierEXT
BREBIS_FORCE_INLINE void  brebisFramebufferFetchBarrierQCOM(void) { brebisGL.brebisFramebufferFetchBarrierQCOM(); }
#define glFramebufferFetchBarrierQCOM brebisFramebufferFetchBarrierQCOM
BREBIS_FORCE_INLINE void  brebisFramebufferFoveationConfigQCOM(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint * providedFeatures) { brebisGL.brebisFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures); }
#define glFramebufferFoveationConfigQCOM brebisFramebufferFoveationConfigQCOM
BREBIS_FORCE_INLINE void  brebisFramebufferFoveationParametersQCOM(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { brebisGL.brebisFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
#define glFramebufferFoveationParametersQCOM brebisFramebufferFoveationParametersQCOM
BREBIS_FORCE_INLINE void  brebisFramebufferParameteri(GLenum target, GLenum pname, GLint param) { brebisGL.brebisFramebufferParameteri(target, pname, param); }
#define glFramebufferParameteri brebisFramebufferParameteri
BREBIS_FORCE_INLINE void  brebisFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size) { brebisGL.brebisFramebufferPixelLocalStorageSizeEXT(target, size); }
#define glFramebufferPixelLocalStorageSizeEXT brebisFramebufferPixelLocalStorageSizeEXT
BREBIS_FORCE_INLINE void  brebisFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) { brebisGL.brebisFramebufferReadBufferEXT(framebuffer, mode); }
#define glFramebufferReadBufferEXT brebisFramebufferReadBufferEXT
BREBIS_FORCE_INLINE void  brebisFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { brebisGL.brebisFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer); }
#define glFramebufferRenderbuffer brebisFramebufferRenderbuffer
BREBIS_FORCE_INLINE void  brebisFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { brebisGL.brebisFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer); }
#define glFramebufferRenderbufferEXT brebisFramebufferRenderbufferEXT
BREBIS_FORCE_INLINE void  brebisFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { brebisGL.brebisFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer); }
#define glFramebufferRenderbufferOES brebisFramebufferRenderbufferOES
BREBIS_FORCE_INLINE void  brebisFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { brebisGL.brebisFramebufferSampleLocationsfvARB(target, start, count, v); }
#define glFramebufferSampleLocationsfvARB brebisFramebufferSampleLocationsfvARB
BREBIS_FORCE_INLINE void  brebisFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { brebisGL.brebisFramebufferSampleLocationsfvNV(target, start, count, v); }
#define glFramebufferSampleLocationsfvNV brebisFramebufferSampleLocationsfvNV
BREBIS_FORCE_INLINE void  brebisFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { brebisGL.brebisFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values); }
#define glFramebufferSamplePositionsfvAMD brebisFramebufferSamplePositionsfvAMD
BREBIS_FORCE_INLINE void  brebisFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) { brebisGL.brebisFramebufferTexture(target, attachment, texture, level); }
#define glFramebufferTexture brebisFramebufferTexture
BREBIS_FORCE_INLINE void  brebisFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { brebisGL.brebisFramebufferTexture1D(target, attachment, textarget, texture, level); }
#define glFramebufferTexture1D brebisFramebufferTexture1D
BREBIS_FORCE_INLINE void  brebisFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { brebisGL.brebisFramebufferTexture1DEXT(target, attachment, textarget, texture, level); }
#define glFramebufferTexture1DEXT brebisFramebufferTexture1DEXT
BREBIS_FORCE_INLINE void  brebisFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { brebisGL.brebisFramebufferTexture2D(target, attachment, textarget, texture, level); }
#define glFramebufferTexture2D brebisFramebufferTexture2D
BREBIS_FORCE_INLINE void  brebisFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) { brebisGL.brebisFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale); }
#define glFramebufferTexture2DDownsampleIMG brebisFramebufferTexture2DDownsampleIMG
BREBIS_FORCE_INLINE void  brebisFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { brebisGL.brebisFramebufferTexture2DEXT(target, attachment, textarget, texture, level); }
#define glFramebufferTexture2DEXT brebisFramebufferTexture2DEXT
BREBIS_FORCE_INLINE void  brebisFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { brebisGL.brebisFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples); }
#define glFramebufferTexture2DMultisampleEXT brebisFramebufferTexture2DMultisampleEXT
BREBIS_FORCE_INLINE void  brebisFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { brebisGL.brebisFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples); }
#define glFramebufferTexture2DMultisampleIMG brebisFramebufferTexture2DMultisampleIMG
BREBIS_FORCE_INLINE void  brebisFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { brebisGL.brebisFramebufferTexture2DOES(target, attachment, textarget, texture, level); }
#define glFramebufferTexture2DOES brebisFramebufferTexture2DOES
BREBIS_FORCE_INLINE void  brebisFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { brebisGL.brebisFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset); }
#define glFramebufferTexture3D brebisFramebufferTexture3D
BREBIS_FORCE_INLINE void  brebisFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { brebisGL.brebisFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset); }
#define glFramebufferTexture3DEXT brebisFramebufferTexture3DEXT
BREBIS_FORCE_INLINE void  brebisFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { brebisGL.brebisFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset); }
#define glFramebufferTexture3DOES brebisFramebufferTexture3DOES
BREBIS_FORCE_INLINE void  brebisFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) { brebisGL.brebisFramebufferTextureARB(target, attachment, texture, level); }
#define glFramebufferTextureARB brebisFramebufferTextureARB
BREBIS_FORCE_INLINE void  brebisFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) { brebisGL.brebisFramebufferTextureEXT(target, attachment, texture, level); }
#define glFramebufferTextureEXT brebisFramebufferTextureEXT
BREBIS_FORCE_INLINE void  brebisFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { brebisGL.brebisFramebufferTextureFaceARB(target, attachment, texture, level, face); }
#define glFramebufferTextureFaceARB brebisFramebufferTextureFaceARB
BREBIS_FORCE_INLINE void  brebisFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { brebisGL.brebisFramebufferTextureFaceEXT(target, attachment, texture, level, face); }
#define glFramebufferTextureFaceEXT brebisFramebufferTextureFaceEXT
BREBIS_FORCE_INLINE void  brebisFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { brebisGL.brebisFramebufferTextureLayer(target, attachment, texture, level, layer); }
#define glFramebufferTextureLayer brebisFramebufferTextureLayer
BREBIS_FORCE_INLINE void  brebisFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { brebisGL.brebisFramebufferTextureLayerARB(target, attachment, texture, level, layer); }
#define glFramebufferTextureLayerARB brebisFramebufferTextureLayerARB
BREBIS_FORCE_INLINE void  brebisFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) { brebisGL.brebisFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale); }
#define glFramebufferTextureLayerDownsampleIMG brebisFramebufferTextureLayerDownsampleIMG
BREBIS_FORCE_INLINE void  brebisFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { brebisGL.brebisFramebufferTextureLayerEXT(target, attachment, texture, level, layer); }
#define glFramebufferTextureLayerEXT brebisFramebufferTextureLayerEXT
BREBIS_FORCE_INLINE void  brebisFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) { brebisGL.brebisFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews); }
#define glFramebufferTextureMultisampleMultiviewOVR brebisFramebufferTextureMultisampleMultiviewOVR
BREBIS_FORCE_INLINE void  brebisFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) { brebisGL.brebisFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews); }
#define glFramebufferTextureMultiviewOVR brebisFramebufferTextureMultiviewOVR
BREBIS_FORCE_INLINE void  brebisFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level) { brebisGL.brebisFramebufferTextureOES(target, attachment, texture, level); }
#define glFramebufferTextureOES brebisFramebufferTextureOES
BREBIS_FORCE_INLINE void  brebisFreeObjectBufferATI(GLuint buffer) { brebisGL.brebisFreeObjectBufferATI(buffer); }
#define glFreeObjectBufferATI brebisFreeObjectBufferATI
BREBIS_FORCE_INLINE void  brebisFrontFace(GLenum mode) { brebisGL.brebisFrontFace(mode); }
#define glFrontFace brebisFrontFace
BREBIS_FORCE_INLINE void  brebisFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { brebisGL.brebisFrustum(left, right, bottom, top, zNear, zFar); }
#define glFrustum brebisFrustum
BREBIS_FORCE_INLINE void  brebisFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { brebisGL.brebisFrustumf(l, r, b, t, n, f); }
#define glFrustumf brebisFrustumf
BREBIS_FORCE_INLINE void  brebisFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { brebisGL.brebisFrustumfOES(l, r, b, t, n, f); }
#define glFrustumfOES brebisFrustumfOES
BREBIS_FORCE_INLINE void  brebisFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { brebisGL.brebisFrustumx(l, r, b, t, n, f); }
#define glFrustumx brebisFrustumx
BREBIS_FORCE_INLINE void  brebisFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { brebisGL.brebisFrustumxOES(l, r, b, t, n, f); }
#define glFrustumxOES brebisFrustumxOES
BREBIS_FORCE_INLINE GLuint brebisGenAsyncMarkersSGIX(GLsizei range) { return brebisGL.brebisGenAsyncMarkersSGIX(range); }
#define glGenAsyncMarkersSGIX brebisGenAsyncMarkersSGIX
BREBIS_FORCE_INLINE void  brebisGenBuffers(GLsizei n, GLuint * buffers) { brebisGL.brebisGenBuffers(n, buffers); }
#define glGenBuffers brebisGenBuffers
BREBIS_FORCE_INLINE void  brebisGenBuffersARB(GLsizei n, GLuint * buffers) { brebisGL.brebisGenBuffersARB(n, buffers); }
#define glGenBuffersARB brebisGenBuffersARB
BREBIS_FORCE_INLINE void  brebisGenFencesAPPLE(GLsizei n, GLuint * fences) { brebisGL.brebisGenFencesAPPLE(n, fences); }
#define glGenFencesAPPLE brebisGenFencesAPPLE
BREBIS_FORCE_INLINE void  brebisGenFencesNV(GLsizei n, GLuint * fences) { brebisGL.brebisGenFencesNV(n, fences); }
#define glGenFencesNV brebisGenFencesNV
BREBIS_FORCE_INLINE GLuint brebisGenFragmentShadersATI(GLuint range) { return brebisGL.brebisGenFragmentShadersATI(range); }
#define glGenFragmentShadersATI brebisGenFragmentShadersATI
BREBIS_FORCE_INLINE void  brebisGenFramebuffers(GLsizei n, GLuint * framebuffers) { brebisGL.brebisGenFramebuffers(n, framebuffers); }
#define glGenFramebuffers brebisGenFramebuffers
BREBIS_FORCE_INLINE void  brebisGenFramebuffersEXT(GLsizei n, GLuint * framebuffers) { brebisGL.brebisGenFramebuffersEXT(n, framebuffers); }
#define glGenFramebuffersEXT brebisGenFramebuffersEXT
BREBIS_FORCE_INLINE void  brebisGenFramebuffersOES(GLsizei n, GLuint * framebuffers) { brebisGL.brebisGenFramebuffersOES(n, framebuffers); }
#define glGenFramebuffersOES brebisGenFramebuffersOES
BREBIS_FORCE_INLINE GLuint brebisGenLists(GLsizei range) { return brebisGL.brebisGenLists(range); }
#define glGenLists brebisGenLists
BREBIS_FORCE_INLINE void  brebisGenNamesAMD(GLenum identifier, GLuint num, GLuint * names) { brebisGL.brebisGenNamesAMD(identifier, num, names); }
#define glGenNamesAMD brebisGenNamesAMD
BREBIS_FORCE_INLINE void  brebisGenOcclusionQueriesNV(GLsizei n, GLuint * ids) { brebisGL.brebisGenOcclusionQueriesNV(n, ids); }
#define glGenOcclusionQueriesNV brebisGenOcclusionQueriesNV
BREBIS_FORCE_INLINE GLuint brebisGenPathsNV(GLsizei range) { return brebisGL.brebisGenPathsNV(range); }
#define glGenPathsNV brebisGenPathsNV
BREBIS_FORCE_INLINE void  brebisGenPerfMonitorsAMD(GLsizei n, GLuint * monitors) { brebisGL.brebisGenPerfMonitorsAMD(n, monitors); }
#define glGenPerfMonitorsAMD brebisGenPerfMonitorsAMD
BREBIS_FORCE_INLINE void  brebisGenProgramPipelines(GLsizei n, GLuint * pipelines) { brebisGL.brebisGenProgramPipelines(n, pipelines); }
#define glGenProgramPipelines brebisGenProgramPipelines
BREBIS_FORCE_INLINE void  brebisGenProgramPipelinesEXT(GLsizei n, GLuint * pipelines) { brebisGL.brebisGenProgramPipelinesEXT(n, pipelines); }
#define glGenProgramPipelinesEXT brebisGenProgramPipelinesEXT
BREBIS_FORCE_INLINE void  brebisGenProgramsARB(GLsizei n, GLuint * programs) { brebisGL.brebisGenProgramsARB(n, programs); }
#define glGenProgramsARB brebisGenProgramsARB
BREBIS_FORCE_INLINE void  brebisGenProgramsNV(GLsizei n, GLuint * programs) { brebisGL.brebisGenProgramsNV(n, programs); }
#define glGenProgramsNV brebisGenProgramsNV
BREBIS_FORCE_INLINE void  brebisGenQueries(GLsizei n, GLuint * ids) { brebisGL.brebisGenQueries(n, ids); }
#define glGenQueries brebisGenQueries
BREBIS_FORCE_INLINE void  brebisGenQueriesARB(GLsizei n, GLuint * ids) { brebisGL.brebisGenQueriesARB(n, ids); }
#define glGenQueriesARB brebisGenQueriesARB
BREBIS_FORCE_INLINE void  brebisGenQueriesEXT(GLsizei n, GLuint * ids) { brebisGL.brebisGenQueriesEXT(n, ids); }
#define glGenQueriesEXT brebisGenQueriesEXT
BREBIS_FORCE_INLINE void  brebisGenQueryResourceTagNV(GLsizei n, GLint * tagIds) { brebisGL.brebisGenQueryResourceTagNV(n, tagIds); }
#define glGenQueryResourceTagNV brebisGenQueryResourceTagNV
BREBIS_FORCE_INLINE void  brebisGenRenderbuffers(GLsizei n, GLuint * renderbuffers) { brebisGL.brebisGenRenderbuffers(n, renderbuffers); }
#define glGenRenderbuffers brebisGenRenderbuffers
BREBIS_FORCE_INLINE void  brebisGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers) { brebisGL.brebisGenRenderbuffersEXT(n, renderbuffers); }
#define glGenRenderbuffersEXT brebisGenRenderbuffersEXT
BREBIS_FORCE_INLINE void  brebisGenRenderbuffersOES(GLsizei n, GLuint * renderbuffers) { brebisGL.brebisGenRenderbuffersOES(n, renderbuffers); }
#define glGenRenderbuffersOES brebisGenRenderbuffersOES
BREBIS_FORCE_INLINE void  brebisGenSamplers(GLsizei count, GLuint * samplers) { brebisGL.brebisGenSamplers(count, samplers); }
#define glGenSamplers brebisGenSamplers
BREBIS_FORCE_INLINE void  brebisGenSemaphoresEXT(GLsizei n, GLuint * semaphores) { brebisGL.brebisGenSemaphoresEXT(n, semaphores); }
#define glGenSemaphoresEXT brebisGenSemaphoresEXT
BREBIS_FORCE_INLINE GLuint brebisGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) { return brebisGL.brebisGenSymbolsEXT(datatype, storagetype, range, components); }
#define glGenSymbolsEXT brebisGenSymbolsEXT
BREBIS_FORCE_INLINE void  brebisGenTextures(GLsizei n, GLuint * textures) { brebisGL.brebisGenTextures(n, textures); }
#define glGenTextures brebisGenTextures
BREBIS_FORCE_INLINE void  brebisGenTexturesEXT(GLsizei n, GLuint * textures) { brebisGL.brebisGenTexturesEXT(n, textures); }
#define glGenTexturesEXT brebisGenTexturesEXT
BREBIS_FORCE_INLINE void  brebisGenTransformFeedbacks(GLsizei n, GLuint * ids) { brebisGL.brebisGenTransformFeedbacks(n, ids); }
#define glGenTransformFeedbacks brebisGenTransformFeedbacks
BREBIS_FORCE_INLINE void  brebisGenTransformFeedbacksNV(GLsizei n, GLuint * ids) { brebisGL.brebisGenTransformFeedbacksNV(n, ids); }
#define glGenTransformFeedbacksNV brebisGenTransformFeedbacksNV
BREBIS_FORCE_INLINE void  brebisGenVertexArrays(GLsizei n, GLuint * arrays) { brebisGL.brebisGenVertexArrays(n, arrays); }
#define glGenVertexArrays brebisGenVertexArrays
BREBIS_FORCE_INLINE void  brebisGenVertexArraysAPPLE(GLsizei n, GLuint * arrays) { brebisGL.brebisGenVertexArraysAPPLE(n, arrays); }
#define glGenVertexArraysAPPLE brebisGenVertexArraysAPPLE
BREBIS_FORCE_INLINE void  brebisGenVertexArraysOES(GLsizei n, GLuint * arrays) { brebisGL.brebisGenVertexArraysOES(n, arrays); }
#define glGenVertexArraysOES brebisGenVertexArraysOES
BREBIS_FORCE_INLINE GLuint brebisGenVertexShadersEXT(GLuint range) { return brebisGL.brebisGenVertexShadersEXT(range); }
#define glGenVertexShadersEXT brebisGenVertexShadersEXT
BREBIS_FORCE_INLINE void  brebisGenerateMipmap(GLenum target) { brebisGL.brebisGenerateMipmap(target); }
#define glGenerateMipmap brebisGenerateMipmap
BREBIS_FORCE_INLINE void  brebisGenerateMipmapEXT(GLenum target) { brebisGL.brebisGenerateMipmapEXT(target); }
#define glGenerateMipmapEXT brebisGenerateMipmapEXT
BREBIS_FORCE_INLINE void  brebisGenerateMipmapOES(GLenum target) { brebisGL.brebisGenerateMipmapOES(target); }
#define glGenerateMipmapOES brebisGenerateMipmapOES
BREBIS_FORCE_INLINE void  brebisGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) { brebisGL.brebisGenerateMultiTexMipmapEXT(texunit, target); }
#define glGenerateMultiTexMipmapEXT brebisGenerateMultiTexMipmapEXT
BREBIS_FORCE_INLINE void  brebisGenerateTextureMipmap(GLuint texture) { brebisGL.brebisGenerateTextureMipmap(texture); }
#define glGenerateTextureMipmap brebisGenerateTextureMipmap
BREBIS_FORCE_INLINE void  brebisGenerateTextureMipmapEXT(GLuint texture, GLenum target) { brebisGL.brebisGenerateTextureMipmapEXT(texture, target); }
#define glGenerateTextureMipmapEXT brebisGenerateTextureMipmapEXT
BREBIS_FORCE_INLINE void  brebisGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) { brebisGL.brebisGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params); }
#define glGetActiveAtomicCounterBufferiv brebisGetActiveAtomicCounterBufferiv
BREBIS_FORCE_INLINE void  brebisGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { brebisGL.brebisGetActiveAttrib(program, index, bufSize, length, size, type, name); }
#define glGetActiveAttrib brebisGetActiveAttrib
BREBIS_FORCE_INLINE void  brebisGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { brebisGL.brebisGetActiveAttribARB(programObj, index, maxLength, length, size, type, name); }
#define glGetActiveAttribARB brebisGetActiveAttribARB
BREBIS_FORCE_INLINE void  brebisGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { brebisGL.brebisGetActiveSubroutineName(program, shadertype, index, bufsize, length, name); }
#define glGetActiveSubroutineName brebisGetActiveSubroutineName
BREBIS_FORCE_INLINE void  brebisGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { brebisGL.brebisGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name); }
#define glGetActiveSubroutineUniformName brebisGetActiveSubroutineUniformName
BREBIS_FORCE_INLINE void  brebisGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) { brebisGL.brebisGetActiveSubroutineUniformiv(program, shadertype, index, pname, values); }
#define glGetActiveSubroutineUniformiv brebisGetActiveSubroutineUniformiv
BREBIS_FORCE_INLINE void  brebisGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { brebisGL.brebisGetActiveUniform(program, index, bufSize, length, size, type, name); }
#define glGetActiveUniform brebisGetActiveUniform
BREBIS_FORCE_INLINE void  brebisGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { brebisGL.brebisGetActiveUniformARB(programObj, index, maxLength, length, size, type, name); }
#define glGetActiveUniformARB brebisGetActiveUniformARB
BREBIS_FORCE_INLINE void  brebisGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) { brebisGL.brebisGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); }
#define glGetActiveUniformBlockName brebisGetActiveUniformBlockName
BREBIS_FORCE_INLINE void  brebisGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) { brebisGL.brebisGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params); }
#define glGetActiveUniformBlockiv brebisGetActiveUniformBlockiv
BREBIS_FORCE_INLINE void  brebisGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) { brebisGL.brebisGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); }
#define glGetActiveUniformName brebisGetActiveUniformName
BREBIS_FORCE_INLINE void  brebisGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) { brebisGL.brebisGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params); }
#define glGetActiveUniformsiv brebisGetActiveUniformsiv
BREBIS_FORCE_INLINE void  brebisGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { brebisGL.brebisGetActiveVaryingNV(program, index, bufSize, length, size, type, name); }
#define glGetActiveVaryingNV brebisGetActiveVaryingNV
BREBIS_FORCE_INLINE void  brebisGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat * params) { brebisGL.brebisGetArrayObjectfvATI(array, pname, params); }
#define glGetArrayObjectfvATI brebisGetArrayObjectfvATI
BREBIS_FORCE_INLINE void  brebisGetArrayObjectivATI(GLenum array, GLenum pname, GLint * params) { brebisGL.brebisGetArrayObjectivATI(array, pname, params); }
#define glGetArrayObjectivATI brebisGetArrayObjectivATI
BREBIS_FORCE_INLINE void  brebisGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj) { brebisGL.brebisGetAttachedObjectsARB(containerObj, maxCount, count, obj); }
#define glGetAttachedObjectsARB brebisGetAttachedObjectsARB
BREBIS_FORCE_INLINE void  brebisGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) { brebisGL.brebisGetAttachedShaders(program, maxCount, count, shaders); }
#define glGetAttachedShaders brebisGetAttachedShaders
BREBIS_FORCE_INLINE GLint brebisGetAttribLocation(GLuint program, const GLchar * name) { return brebisGL.brebisGetAttribLocation(program, name); }
#define glGetAttribLocation brebisGetAttribLocation
BREBIS_FORCE_INLINE GLint brebisGetAttribLocationARB(GLhandleARB programObj, const GLcharARB * name) { return brebisGL.brebisGetAttribLocationARB(programObj, name); }
#define glGetAttribLocationARB brebisGetAttribLocationARB
BREBIS_FORCE_INLINE void  brebisGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean * data) { brebisGL.brebisGetBooleanIndexedvEXT(target, index, data); }
#define glGetBooleanIndexedvEXT brebisGetBooleanIndexedvEXT
BREBIS_FORCE_INLINE void  brebisGetBooleani_v(GLenum target, GLuint index, GLboolean * data) { brebisGL.brebisGetBooleani_v(target, index, data); }
#define glGetBooleani_v brebisGetBooleani_v
BREBIS_FORCE_INLINE void  brebisGetBooleanv(GLenum pname, GLboolean * data) { brebisGL.brebisGetBooleanv(pname, data); }
#define glGetBooleanv brebisGetBooleanv
BREBIS_FORCE_INLINE void  brebisGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) { brebisGL.brebisGetBufferParameteri64v(target, pname, params); }
#define glGetBufferParameteri64v brebisGetBufferParameteri64v
BREBIS_FORCE_INLINE void  brebisGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetBufferParameteriv(target, pname, params); }
#define glGetBufferParameteriv brebisGetBufferParameteriv
BREBIS_FORCE_INLINE void  brebisGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetBufferParameterivARB(target, pname, params); }
#define glGetBufferParameterivARB brebisGetBufferParameterivARB
BREBIS_FORCE_INLINE void  brebisGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT * params) { brebisGL.brebisGetBufferParameterui64vNV(target, pname, params); }
#define glGetBufferParameterui64vNV brebisGetBufferParameterui64vNV
BREBIS_FORCE_INLINE void  brebisGetBufferPointerv(GLenum target, GLenum pname, void ** params) { brebisGL.brebisGetBufferPointerv(target, pname, params); }
#define glGetBufferPointerv brebisGetBufferPointerv
BREBIS_FORCE_INLINE void  brebisGetBufferPointervARB(GLenum target, GLenum pname, void ** params) { brebisGL.brebisGetBufferPointervARB(target, pname, params); }
#define glGetBufferPointervARB brebisGetBufferPointervARB
BREBIS_FORCE_INLINE void  brebisGetBufferPointervOES(GLenum target, GLenum pname, void ** params) { brebisGL.brebisGetBufferPointervOES(target, pname, params); }
#define glGetBufferPointervOES brebisGetBufferPointervOES
BREBIS_FORCE_INLINE void  brebisGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) { brebisGL.brebisGetBufferSubData(target, offset, size, data); }
#define glGetBufferSubData brebisGetBufferSubData
BREBIS_FORCE_INLINE void  brebisGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data) { brebisGL.brebisGetBufferSubDataARB(target, offset, size, data); }
#define glGetBufferSubDataARB brebisGetBufferSubDataARB
BREBIS_FORCE_INLINE void  brebisGetClipPlane(GLenum plane, GLdouble * equation) { brebisGL.brebisGetClipPlane(plane, equation); }
#define glGetClipPlane brebisGetClipPlane
BREBIS_FORCE_INLINE void  brebisGetClipPlanef(GLenum plane, GLfloat * equation) { brebisGL.brebisGetClipPlanef(plane, equation); }
#define glGetClipPlanef brebisGetClipPlanef
BREBIS_FORCE_INLINE void  brebisGetClipPlanefOES(GLenum plane, GLfloat * equation) { brebisGL.brebisGetClipPlanefOES(plane, equation); }
#define glGetClipPlanefOES brebisGetClipPlanefOES
BREBIS_FORCE_INLINE void  brebisGetClipPlanex(GLenum plane, GLfixed * equation) { brebisGL.brebisGetClipPlanex(plane, equation); }
#define glGetClipPlanex brebisGetClipPlanex
BREBIS_FORCE_INLINE void  brebisGetClipPlanexOES(GLenum plane, GLfixed * equation) { brebisGL.brebisGetClipPlanexOES(plane, equation); }
#define glGetClipPlanexOES brebisGetClipPlanexOES
BREBIS_FORCE_INLINE void  brebisGetColorTable(GLenum target, GLenum format, GLenum type, void * table) { brebisGL.brebisGetColorTable(target, format, type, table); }
#define glGetColorTable brebisGetColorTable
BREBIS_FORCE_INLINE void  brebisGetColorTableEXT(GLenum target, GLenum format, GLenum type, void * data) { brebisGL.brebisGetColorTableEXT(target, format, type, data); }
#define glGetColorTableEXT brebisGetColorTableEXT
BREBIS_FORCE_INLINE void  brebisGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetColorTableParameterfv(target, pname, params); }
#define glGetColorTableParameterfv brebisGetColorTableParameterfv
BREBIS_FORCE_INLINE void  brebisGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetColorTableParameterfvEXT(target, pname, params); }
#define glGetColorTableParameterfvEXT brebisGetColorTableParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetColorTableParameterfvSGI(target, pname, params); }
#define glGetColorTableParameterfvSGI brebisGetColorTableParameterfvSGI
BREBIS_FORCE_INLINE void  brebisGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetColorTableParameteriv(target, pname, params); }
#define glGetColorTableParameteriv brebisGetColorTableParameteriv
BREBIS_FORCE_INLINE void  brebisGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetColorTableParameterivEXT(target, pname, params); }
#define glGetColorTableParameterivEXT brebisGetColorTableParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetColorTableParameterivSGI(target, pname, params); }
#define glGetColorTableParameterivSGI brebisGetColorTableParameterivSGI
BREBIS_FORCE_INLINE void  brebisGetColorTableSGI(GLenum target, GLenum format, GLenum type, void * table) { brebisGL.brebisGetColorTableSGI(target, format, type, table); }
#define glGetColorTableSGI brebisGetColorTableSGI
BREBIS_FORCE_INLINE void  brebisGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params) { brebisGL.brebisGetCombinerInputParameterfvNV(stage, portion, variable, pname, params); }
#define glGetCombinerInputParameterfvNV brebisGetCombinerInputParameterfvNV
BREBIS_FORCE_INLINE void  brebisGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params) { brebisGL.brebisGetCombinerInputParameterivNV(stage, portion, variable, pname, params); }
#define glGetCombinerInputParameterivNV brebisGetCombinerInputParameterivNV
BREBIS_FORCE_INLINE void  brebisGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params) { brebisGL.brebisGetCombinerOutputParameterfvNV(stage, portion, pname, params); }
#define glGetCombinerOutputParameterfvNV brebisGetCombinerOutputParameterfvNV
BREBIS_FORCE_INLINE void  brebisGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params) { brebisGL.brebisGetCombinerOutputParameterivNV(stage, portion, pname, params); }
#define glGetCombinerOutputParameterivNV brebisGetCombinerOutputParameterivNV
BREBIS_FORCE_INLINE void  brebisGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params) { brebisGL.brebisGetCombinerStageParameterfvNV(stage, pname, params); }
#define glGetCombinerStageParameterfvNV brebisGetCombinerStageParameterfvNV
BREBIS_FORCE_INLINE GLuint brebisGetCommandHeaderNV(GLenum tokenID, GLuint size) { return brebisGL.brebisGetCommandHeaderNV(tokenID, size); }
#define glGetCommandHeaderNV brebisGetCommandHeaderNV
BREBIS_FORCE_INLINE void  brebisGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void * img) { brebisGL.brebisGetCompressedMultiTexImageEXT(texunit, target, lod, img); }
#define glGetCompressedMultiTexImageEXT brebisGetCompressedMultiTexImageEXT
BREBIS_FORCE_INLINE void  brebisGetCompressedTexImage(GLenum target, GLint level, void * img) { brebisGL.brebisGetCompressedTexImage(target, level, img); }
#define glGetCompressedTexImage brebisGetCompressedTexImage
BREBIS_FORCE_INLINE void  brebisGetCompressedTexImageARB(GLenum target, GLint level, void * img) { brebisGL.brebisGetCompressedTexImageARB(target, level, img); }
#define glGetCompressedTexImageARB brebisGetCompressedTexImageARB
BREBIS_FORCE_INLINE void  brebisGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels) { brebisGL.brebisGetCompressedTextureImage(texture, level, bufSize, pixels); }
#define glGetCompressedTextureImage brebisGetCompressedTextureImage
BREBIS_FORCE_INLINE void  brebisGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void * img) { brebisGL.brebisGetCompressedTextureImageEXT(texture, target, lod, img); }
#define glGetCompressedTextureImageEXT brebisGetCompressedTextureImageEXT
BREBIS_FORCE_INLINE void  brebisGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) { brebisGL.brebisGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); }
#define glGetCompressedTextureSubImage brebisGetCompressedTextureSubImage
BREBIS_FORCE_INLINE void  brebisGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image) { brebisGL.brebisGetConvolutionFilter(target, format, type, image); }
#define glGetConvolutionFilter brebisGetConvolutionFilter
BREBIS_FORCE_INLINE void  brebisGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void * image) { brebisGL.brebisGetConvolutionFilterEXT(target, format, type, image); }
#define glGetConvolutionFilterEXT brebisGetConvolutionFilterEXT
BREBIS_FORCE_INLINE void  brebisGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetConvolutionParameterfv(target, pname, params); }
#define glGetConvolutionParameterfv brebisGetConvolutionParameterfv
BREBIS_FORCE_INLINE void  brebisGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetConvolutionParameterfvEXT(target, pname, params); }
#define glGetConvolutionParameterfvEXT brebisGetConvolutionParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetConvolutionParameteriv(target, pname, params); }
#define glGetConvolutionParameteriv brebisGetConvolutionParameteriv
BREBIS_FORCE_INLINE void  brebisGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetConvolutionParameterivEXT(target, pname, params); }
#define glGetConvolutionParameterivEXT brebisGetConvolutionParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { brebisGL.brebisGetConvolutionParameterxvOES(target, pname, params); }
#define glGetConvolutionParameterxvOES brebisGetConvolutionParameterxvOES
BREBIS_FORCE_INLINE void  brebisGetCoverageModulationTableNV(GLsizei bufsize, GLfloat * v) { brebisGL.brebisGetCoverageModulationTableNV(bufsize, v); }
#define glGetCoverageModulationTableNV brebisGetCoverageModulationTableNV
BREBIS_FORCE_INLINE GLuint brebisGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return brebisGL.brebisGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
#define glGetDebugMessageLog brebisGetDebugMessageLog
BREBIS_FORCE_INLINE GLuint brebisGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) { return brebisGL.brebisGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message); }
#define glGetDebugMessageLogAMD brebisGetDebugMessageLogAMD
BREBIS_FORCE_INLINE GLuint brebisGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return brebisGL.brebisGetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
#define glGetDebugMessageLogARB brebisGetDebugMessageLogARB
BREBIS_FORCE_INLINE GLuint brebisGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return brebisGL.brebisGetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
#define glGetDebugMessageLogKHR brebisGetDebugMessageLogKHR
BREBIS_FORCE_INLINE void  brebisGetDetailTexFuncSGIS(GLenum target, GLfloat * points) { brebisGL.brebisGetDetailTexFuncSGIS(target, points); }
#define glGetDetailTexFuncSGIS brebisGetDetailTexFuncSGIS
BREBIS_FORCE_INLINE void  brebisGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble * data) { brebisGL.brebisGetDoubleIndexedvEXT(target, index, data); }
#define glGetDoubleIndexedvEXT brebisGetDoubleIndexedvEXT
BREBIS_FORCE_INLINE void  brebisGetDoublei_v(GLenum target, GLuint index, GLdouble * data) { brebisGL.brebisGetDoublei_v(target, index, data); }
#define glGetDoublei_v brebisGetDoublei_v
BREBIS_FORCE_INLINE void  brebisGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble * params) { brebisGL.brebisGetDoublei_vEXT(pname, index, params); }
#define glGetDoublei_vEXT brebisGetDoublei_vEXT
BREBIS_FORCE_INLINE void  brebisGetDoublev(GLenum pname, GLdouble * data) { brebisGL.brebisGetDoublev(pname, data); }
#define glGetDoublev brebisGetDoublev
BREBIS_FORCE_INLINE void  brebisGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString) { brebisGL.brebisGetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString); }
#define glGetDriverControlStringQCOM brebisGetDriverControlStringQCOM
BREBIS_FORCE_INLINE void  brebisGetDriverControlsQCOM(GLint * num, GLsizei size, GLuint * driverControls) { brebisGL.brebisGetDriverControlsQCOM(num, size, driverControls); }
#define glGetDriverControlsQCOM brebisGetDriverControlsQCOM
BREBIS_FORCE_INLINE GLenum brebisGetError(void) { return brebisGL.brebisGetError(); }
#define glGetError brebisGetError
BREBIS_FORCE_INLINE void  brebisGetFenceivNV(GLuint fence, GLenum pname, GLint * params) { brebisGL.brebisGetFenceivNV(fence, pname, params); }
#define glGetFenceivNV brebisGetFenceivNV
BREBIS_FORCE_INLINE void  brebisGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params) { brebisGL.brebisGetFinalCombinerInputParameterfvNV(variable, pname, params); }
#define glGetFinalCombinerInputParameterfvNV brebisGetFinalCombinerInputParameterfvNV
BREBIS_FORCE_INLINE void  brebisGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params) { brebisGL.brebisGetFinalCombinerInputParameterivNV(variable, pname, params); }
#define glGetFinalCombinerInputParameterivNV brebisGetFinalCombinerInputParameterivNV
BREBIS_FORCE_INLINE void  brebisGetFirstPerfQueryIdINTEL(GLuint * queryId) { brebisGL.brebisGetFirstPerfQueryIdINTEL(queryId); }
#define glGetFirstPerfQueryIdINTEL brebisGetFirstPerfQueryIdINTEL
BREBIS_FORCE_INLINE void  brebisGetFixedv(GLenum pname, GLfixed * params) { brebisGL.brebisGetFixedv(pname, params); }
#define glGetFixedv brebisGetFixedv
BREBIS_FORCE_INLINE void  brebisGetFixedvOES(GLenum pname, GLfixed * params) { brebisGL.brebisGetFixedvOES(pname, params); }
#define glGetFixedvOES brebisGetFixedvOES
BREBIS_FORCE_INLINE void  brebisGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat * data) { brebisGL.brebisGetFloatIndexedvEXT(target, index, data); }
#define glGetFloatIndexedvEXT brebisGetFloatIndexedvEXT
BREBIS_FORCE_INLINE void  brebisGetFloati_v(GLenum target, GLuint index, GLfloat * data) { brebisGL.brebisGetFloati_v(target, index, data); }
#define glGetFloati_v brebisGetFloati_v
BREBIS_FORCE_INLINE void  brebisGetFloati_vEXT(GLenum pname, GLuint index, GLfloat * params) { brebisGL.brebisGetFloati_vEXT(pname, index, params); }
#define glGetFloati_vEXT brebisGetFloati_vEXT
BREBIS_FORCE_INLINE void  brebisGetFloati_vNV(GLenum target, GLuint index, GLfloat * data) { brebisGL.brebisGetFloati_vNV(target, index, data); }
#define glGetFloati_vNV brebisGetFloati_vNV
BREBIS_FORCE_INLINE void  brebisGetFloati_vOES(GLenum target, GLuint index, GLfloat * data) { brebisGL.brebisGetFloati_vOES(target, index, data); }
#define glGetFloati_vOES brebisGetFloati_vOES
BREBIS_FORCE_INLINE void  brebisGetFloatv(GLenum pname, GLfloat * data) { brebisGL.brebisGetFloatv(pname, data); }
#define glGetFloatv brebisGetFloatv
BREBIS_FORCE_INLINE void  brebisGetFogFuncSGIS(GLfloat * points) { brebisGL.brebisGetFogFuncSGIS(points); }
#define glGetFogFuncSGIS brebisGetFogFuncSGIS
BREBIS_FORCE_INLINE GLint brebisGetFragDataIndex(GLuint program, const GLchar * name) { return brebisGL.brebisGetFragDataIndex(program, name); }
#define glGetFragDataIndex brebisGetFragDataIndex
BREBIS_FORCE_INLINE GLint brebisGetFragDataIndexEXT(GLuint program, const GLchar * name) { return brebisGL.brebisGetFragDataIndexEXT(program, name); }
#define glGetFragDataIndexEXT brebisGetFragDataIndexEXT
BREBIS_FORCE_INLINE GLint brebisGetFragDataLocation(GLuint program, const GLchar * name) { return brebisGL.brebisGetFragDataLocation(program, name); }
#define glGetFragDataLocation brebisGetFragDataLocation
BREBIS_FORCE_INLINE GLint brebisGetFragDataLocationEXT(GLuint program, const GLchar * name) { return brebisGL.brebisGetFragDataLocationEXT(program, name); }
#define glGetFragDataLocationEXT brebisGetFragDataLocationEXT
BREBIS_FORCE_INLINE void  brebisGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat * params) { brebisGL.brebisGetFragmentLightfvSGIX(light, pname, params); }
#define glGetFragmentLightfvSGIX brebisGetFragmentLightfvSGIX
BREBIS_FORCE_INLINE void  brebisGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint * params) { brebisGL.brebisGetFragmentLightivSGIX(light, pname, params); }
#define glGetFragmentLightivSGIX brebisGetFragmentLightivSGIX
BREBIS_FORCE_INLINE void  brebisGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat * params) { brebisGL.brebisGetFragmentMaterialfvSGIX(face, pname, params); }
#define glGetFragmentMaterialfvSGIX brebisGetFragmentMaterialfvSGIX
BREBIS_FORCE_INLINE void  brebisGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint * params) { brebisGL.brebisGetFragmentMaterialivSGIX(face, pname, params); }
#define glGetFragmentMaterialivSGIX brebisGetFragmentMaterialivSGIX
BREBIS_FORCE_INLINE void  brebisGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) { brebisGL.brebisGetFramebufferAttachmentParameteriv(target, attachment, pname, params); }
#define glGetFramebufferAttachmentParameteriv brebisGetFramebufferAttachmentParameteriv
BREBIS_FORCE_INLINE void  brebisGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params) { brebisGL.brebisGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params); }
#define glGetFramebufferAttachmentParameterivEXT brebisGetFramebufferAttachmentParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint * params) { brebisGL.brebisGetFramebufferAttachmentParameterivOES(target, attachment, pname, params); }
#define glGetFramebufferAttachmentParameterivOES brebisGetFramebufferAttachmentParameterivOES
BREBIS_FORCE_INLINE void  brebisGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { brebisGL.brebisGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values); }
#define glGetFramebufferParameterfvAMD brebisGetFramebufferParameterfvAMD
BREBIS_FORCE_INLINE void  brebisGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetFramebufferParameteriv(target, pname, params); }
#define glGetFramebufferParameteriv brebisGetFramebufferParameteriv
BREBIS_FORCE_INLINE void  brebisGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { brebisGL.brebisGetFramebufferParameterivEXT(framebuffer, pname, params); }
#define glGetFramebufferParameterivEXT brebisGetFramebufferParameterivEXT
BREBIS_FORCE_INLINE GLsizei brebisGetFramebufferPixelLocalStorageSizeEXT(GLuint target) { return brebisGL.brebisGetFramebufferPixelLocalStorageSizeEXT(target); }
#define glGetFramebufferPixelLocalStorageSizeEXT brebisGetFramebufferPixelLocalStorageSizeEXT
BREBIS_FORCE_INLINE GLenum brebisGetGraphicsResetStatus(void) { return brebisGL.brebisGetGraphicsResetStatus(); }
#define glGetGraphicsResetStatus brebisGetGraphicsResetStatus
BREBIS_FORCE_INLINE GLenum brebisGetGraphicsResetStatusARB(void) { return brebisGL.brebisGetGraphicsResetStatusARB(); }
#define glGetGraphicsResetStatusARB brebisGetGraphicsResetStatusARB
BREBIS_FORCE_INLINE GLenum brebisGetGraphicsResetStatusEXT(void) { return brebisGL.brebisGetGraphicsResetStatusEXT(); }
#define glGetGraphicsResetStatusEXT brebisGetGraphicsResetStatusEXT
BREBIS_FORCE_INLINE GLenum brebisGetGraphicsResetStatusKHR(void) { return brebisGL.brebisGetGraphicsResetStatusKHR(); }
#define glGetGraphicsResetStatusKHR brebisGetGraphicsResetStatusKHR
BREBIS_FORCE_INLINE GLhandleARB brebisGetHandleARB(GLenum pname) { return brebisGL.brebisGetHandleARB(pname); }
#define glGetHandleARB brebisGetHandleARB
BREBIS_FORCE_INLINE void  brebisGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { brebisGL.brebisGetHistogram(target, reset, format, type, values); }
#define glGetHistogram brebisGetHistogram
BREBIS_FORCE_INLINE void  brebisGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { brebisGL.brebisGetHistogramEXT(target, reset, format, type, values); }
#define glGetHistogramEXT brebisGetHistogramEXT
BREBIS_FORCE_INLINE void  brebisGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetHistogramParameterfv(target, pname, params); }
#define glGetHistogramParameterfv brebisGetHistogramParameterfv
BREBIS_FORCE_INLINE void  brebisGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetHistogramParameterfvEXT(target, pname, params); }
#define glGetHistogramParameterfvEXT brebisGetHistogramParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetHistogramParameteriv(target, pname, params); }
#define glGetHistogramParameteriv brebisGetHistogramParameteriv
BREBIS_FORCE_INLINE void  brebisGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetHistogramParameterivEXT(target, pname, params); }
#define glGetHistogramParameterivEXT brebisGetHistogramParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { brebisGL.brebisGetHistogramParameterxvOES(target, pname, params); }
#define glGetHistogramParameterxvOES brebisGetHistogramParameterxvOES
BREBIS_FORCE_INLINE GLuint64 brebisGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return brebisGL.brebisGetImageHandleARB(texture, level, layered, layer, format); }
#define glGetImageHandleARB brebisGetImageHandleARB
BREBIS_FORCE_INLINE GLuint64 brebisGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return brebisGL.brebisGetImageHandleNV(texture, level, layered, layer, format); }
#define glGetImageHandleNV brebisGetImageHandleNV
BREBIS_FORCE_INLINE void  brebisGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetImageTransformParameterfvHP(target, pname, params); }
#define glGetImageTransformParameterfvHP brebisGetImageTransformParameterfvHP
BREBIS_FORCE_INLINE void  brebisGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetImageTransformParameterivHP(target, pname, params); }
#define glGetImageTransformParameterivHP brebisGetImageTransformParameterivHP
BREBIS_FORCE_INLINE void  brebisGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog) { brebisGL.brebisGetInfoLogARB(obj, maxLength, length, infoLog); }
#define glGetInfoLogARB brebisGetInfoLogARB
BREBIS_FORCE_INLINE GLint brebisGetInstrumentsSGIX(void) { return brebisGL.brebisGetInstrumentsSGIX(); }
#define glGetInstrumentsSGIX brebisGetInstrumentsSGIX
BREBIS_FORCE_INLINE void  brebisGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) { brebisGL.brebisGetInteger64i_v(target, index, data); }
#define glGetInteger64i_v brebisGetInteger64i_v
BREBIS_FORCE_INLINE void  brebisGetInteger64v(GLenum pname, GLint64 * data) { brebisGL.brebisGetInteger64v(pname, data); }
#define glGetInteger64v brebisGetInteger64v
BREBIS_FORCE_INLINE void  brebisGetInteger64vAPPLE(GLenum pname, GLint64 * params) { brebisGL.brebisGetInteger64vAPPLE(pname, params); }
#define glGetInteger64vAPPLE brebisGetInteger64vAPPLE
BREBIS_FORCE_INLINE void  brebisGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint * data) { brebisGL.brebisGetIntegerIndexedvEXT(target, index, data); }
#define glGetIntegerIndexedvEXT brebisGetIntegerIndexedvEXT
BREBIS_FORCE_INLINE void  brebisGetIntegeri_v(GLenum target, GLuint index, GLint * data) { brebisGL.brebisGetIntegeri_v(target, index, data); }
#define glGetIntegeri_v brebisGetIntegeri_v
BREBIS_FORCE_INLINE void  brebisGetIntegeri_vEXT(GLenum target, GLuint index, GLint * data) { brebisGL.brebisGetIntegeri_vEXT(target, index, data); }
#define glGetIntegeri_vEXT brebisGetIntegeri_vEXT
BREBIS_FORCE_INLINE void  brebisGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT * result) { brebisGL.brebisGetIntegerui64i_vNV(value, index, result); }
#define glGetIntegerui64i_vNV brebisGetIntegerui64i_vNV
BREBIS_FORCE_INLINE void  brebisGetIntegerui64vNV(GLenum value, GLuint64EXT * result) { brebisGL.brebisGetIntegerui64vNV(value, result); }
#define glGetIntegerui64vNV brebisGetIntegerui64vNV
BREBIS_FORCE_INLINE void  brebisGetIntegerv(GLenum pname, GLint * data) { brebisGL.brebisGetIntegerv(pname, data); }
#define glGetIntegerv brebisGetIntegerv
BREBIS_FORCE_INLINE void  brebisGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params) { brebisGL.brebisGetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params); }
#define glGetInternalformatSampleivNV brebisGetInternalformatSampleivNV
BREBIS_FORCE_INLINE void  brebisGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params) { brebisGL.brebisGetInternalformati64v(target, internalformat, pname, bufSize, params); }
#define glGetInternalformati64v brebisGetInternalformati64v
BREBIS_FORCE_INLINE void  brebisGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params) { brebisGL.brebisGetInternalformativ(target, internalformat, pname, bufSize, params); }
#define glGetInternalformativ brebisGetInternalformativ
BREBIS_FORCE_INLINE void  brebisGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { brebisGL.brebisGetInvariantBooleanvEXT(id, value, data); }
#define glGetInvariantBooleanvEXT brebisGetInvariantBooleanvEXT
BREBIS_FORCE_INLINE void  brebisGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { brebisGL.brebisGetInvariantFloatvEXT(id, value, data); }
#define glGetInvariantFloatvEXT brebisGetInvariantFloatvEXT
BREBIS_FORCE_INLINE void  brebisGetInvariantIntegervEXT(GLuint id, GLenum value, GLint * data) { brebisGL.brebisGetInvariantIntegervEXT(id, value, data); }
#define glGetInvariantIntegervEXT brebisGetInvariantIntegervEXT
BREBIS_FORCE_INLINE void  brebisGetLightfv(GLenum light, GLenum pname, GLfloat * params) { brebisGL.brebisGetLightfv(light, pname, params); }
#define glGetLightfv brebisGetLightfv
BREBIS_FORCE_INLINE void  brebisGetLightiv(GLenum light, GLenum pname, GLint * params) { brebisGL.brebisGetLightiv(light, pname, params); }
#define glGetLightiv brebisGetLightiv
BREBIS_FORCE_INLINE void  brebisGetLightxOES(GLenum light, GLenum pname, GLfixed * params) { brebisGL.brebisGetLightxOES(light, pname, params); }
#define glGetLightxOES brebisGetLightxOES
BREBIS_FORCE_INLINE void  brebisGetLightxv(GLenum light, GLenum pname, GLfixed * params) { brebisGL.brebisGetLightxv(light, pname, params); }
#define glGetLightxv brebisGetLightxv
BREBIS_FORCE_INLINE void  brebisGetLightxvOES(GLenum light, GLenum pname, GLfixed * params) { brebisGL.brebisGetLightxvOES(light, pname, params); }
#define glGetLightxvOES brebisGetLightxvOES
BREBIS_FORCE_INLINE void  brebisGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat * params) { brebisGL.brebisGetListParameterfvSGIX(list, pname, params); }
#define glGetListParameterfvSGIX brebisGetListParameterfvSGIX
BREBIS_FORCE_INLINE void  brebisGetListParameterivSGIX(GLuint list, GLenum pname, GLint * params) { brebisGL.brebisGetListParameterivSGIX(list, pname, params); }
#define glGetListParameterivSGIX brebisGetListParameterivSGIX
BREBIS_FORCE_INLINE void  brebisGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { brebisGL.brebisGetLocalConstantBooleanvEXT(id, value, data); }
#define glGetLocalConstantBooleanvEXT brebisGetLocalConstantBooleanvEXT
BREBIS_FORCE_INLINE void  brebisGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { brebisGL.brebisGetLocalConstantFloatvEXT(id, value, data); }
#define glGetLocalConstantFloatvEXT brebisGetLocalConstantFloatvEXT
BREBIS_FORCE_INLINE void  brebisGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint * data) { brebisGL.brebisGetLocalConstantIntegervEXT(id, value, data); }
#define glGetLocalConstantIntegervEXT brebisGetLocalConstantIntegervEXT
BREBIS_FORCE_INLINE void  brebisGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { brebisGL.brebisGetMapAttribParameterfvNV(target, index, pname, params); }
#define glGetMapAttribParameterfvNV brebisGetMapAttribParameterfvNV
BREBIS_FORCE_INLINE void  brebisGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint * params) { brebisGL.brebisGetMapAttribParameterivNV(target, index, pname, params); }
#define glGetMapAttribParameterivNV brebisGetMapAttribParameterivNV
BREBIS_FORCE_INLINE void  brebisGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points) { brebisGL.brebisGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points); }
#define glGetMapControlPointsNV brebisGetMapControlPointsNV
BREBIS_FORCE_INLINE void  brebisGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetMapParameterfvNV(target, pname, params); }
#define glGetMapParameterfvNV brebisGetMapParameterfvNV
BREBIS_FORCE_INLINE void  brebisGetMapParameterivNV(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetMapParameterivNV(target, pname, params); }
#define glGetMapParameterivNV brebisGetMapParameterivNV
BREBIS_FORCE_INLINE void  brebisGetMapdv(GLenum target, GLenum query, GLdouble * v) { brebisGL.brebisGetMapdv(target, query, v); }
#define glGetMapdv brebisGetMapdv
BREBIS_FORCE_INLINE void  brebisGetMapfv(GLenum target, GLenum query, GLfloat * v) { brebisGL.brebisGetMapfv(target, query, v); }
#define glGetMapfv brebisGetMapfv
BREBIS_FORCE_INLINE void  brebisGetMapiv(GLenum target, GLenum query, GLint * v) { brebisGL.brebisGetMapiv(target, query, v); }
#define glGetMapiv brebisGetMapiv
BREBIS_FORCE_INLINE void  brebisGetMapxvOES(GLenum target, GLenum query, GLfixed * v) { brebisGL.brebisGetMapxvOES(target, query, v); }
#define glGetMapxvOES brebisGetMapxvOES
BREBIS_FORCE_INLINE void  brebisGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) { brebisGL.brebisGetMaterialfv(face, pname, params); }
#define glGetMaterialfv brebisGetMaterialfv
BREBIS_FORCE_INLINE void  brebisGetMaterialiv(GLenum face, GLenum pname, GLint * params) { brebisGL.brebisGetMaterialiv(face, pname, params); }
#define glGetMaterialiv brebisGetMaterialiv
BREBIS_FORCE_INLINE void  brebisGetMaterialxOES(GLenum face, GLenum pname, GLfixed param) { brebisGL.brebisGetMaterialxOES(face, pname, param); }
#define glGetMaterialxOES brebisGetMaterialxOES
BREBIS_FORCE_INLINE void  brebisGetMaterialxv(GLenum face, GLenum pname, GLfixed * params) { brebisGL.brebisGetMaterialxv(face, pname, params); }
#define glGetMaterialxv brebisGetMaterialxv
BREBIS_FORCE_INLINE void  brebisGetMaterialxvOES(GLenum face, GLenum pname, GLfixed * params) { brebisGL.brebisGetMaterialxvOES(face, pname, params); }
#define glGetMaterialxvOES brebisGetMaterialxvOES
BREBIS_FORCE_INLINE void  brebisGetMemoryObjectDetachedResourcesuivNV(GLuint memory, GLenum pname, GLint first, GLsizei count, GLuint * params) { brebisGL.brebisGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, params); }
#define glGetMemoryObjectDetachedResourcesuivNV brebisGetMemoryObjectDetachedResourcesuivNV
BREBIS_FORCE_INLINE void  brebisGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint * params) { brebisGL.brebisGetMemoryObjectParameterivEXT(memoryObject, pname, params); }
#define glGetMemoryObjectParameterivEXT brebisGetMemoryObjectParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { brebisGL.brebisGetMinmax(target, reset, format, type, values); }
#define glGetMinmax brebisGetMinmax
BREBIS_FORCE_INLINE void  brebisGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { brebisGL.brebisGetMinmaxEXT(target, reset, format, type, values); }
#define glGetMinmaxEXT brebisGetMinmaxEXT
BREBIS_FORCE_INLINE void  brebisGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetMinmaxParameterfv(target, pname, params); }
#define glGetMinmaxParameterfv brebisGetMinmaxParameterfv
BREBIS_FORCE_INLINE void  brebisGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetMinmaxParameterfvEXT(target, pname, params); }
#define glGetMinmaxParameterfvEXT brebisGetMinmaxParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetMinmaxParameteriv(target, pname, params); }
#define glGetMinmaxParameteriv brebisGetMinmaxParameteriv
BREBIS_FORCE_INLINE void  brebisGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetMinmaxParameterivEXT(target, pname, params); }
#define glGetMinmaxParameterivEXT brebisGetMinmaxParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetMultiTexEnvfvEXT(texunit, target, pname, params); }
#define glGetMultiTexEnvfvEXT brebisGetMultiTexEnvfvEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetMultiTexEnvivEXT(texunit, target, pname, params); }
#define glGetMultiTexEnvivEXT brebisGetMultiTexEnvivEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params) { brebisGL.brebisGetMultiTexGendvEXT(texunit, coord, pname, params); }
#define glGetMultiTexGendvEXT brebisGetMultiTexGendvEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params) { brebisGL.brebisGetMultiTexGenfvEXT(texunit, coord, pname, params); }
#define glGetMultiTexGenfvEXT brebisGetMultiTexGenfvEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint * params) { brebisGL.brebisGetMultiTexGenivEXT(texunit, coord, pname, params); }
#define glGetMultiTexGenivEXT brebisGetMultiTexGenivEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { brebisGL.brebisGetMultiTexImageEXT(texunit, target, level, format, type, pixels); }
#define glGetMultiTexImageEXT brebisGetMultiTexImageEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params) { brebisGL.brebisGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params); }
#define glGetMultiTexLevelParameterfvEXT brebisGetMultiTexLevelParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params) { brebisGL.brebisGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params); }
#define glGetMultiTexLevelParameterivEXT brebisGetMultiTexLevelParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetMultiTexParameterIivEXT(texunit, target, pname, params); }
#define glGetMultiTexParameterIivEXT brebisGetMultiTexParameterIivEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint * params) { brebisGL.brebisGetMultiTexParameterIuivEXT(texunit, target, pname, params); }
#define glGetMultiTexParameterIuivEXT brebisGetMultiTexParameterIuivEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetMultiTexParameterfvEXT(texunit, target, pname, params); }
#define glGetMultiTexParameterfvEXT brebisGetMultiTexParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetMultiTexParameterivEXT(texunit, target, pname, params); }
#define glGetMultiTexParameterivEXT brebisGetMultiTexParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) { brebisGL.brebisGetMultisamplefv(pname, index, val); }
#define glGetMultisamplefv brebisGetMultisamplefv
BREBIS_FORCE_INLINE void  brebisGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat * val) { brebisGL.brebisGetMultisamplefvNV(pname, index, val); }
#define glGetMultisamplefvNV brebisGetMultisamplefvNV
BREBIS_FORCE_INLINE void  brebisGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params) { brebisGL.brebisGetNamedBufferParameteri64v(buffer, pname, params); }
#define glGetNamedBufferParameteri64v brebisGetNamedBufferParameteri64v
BREBIS_FORCE_INLINE void  brebisGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params) { brebisGL.brebisGetNamedBufferParameteriv(buffer, pname, params); }
#define glGetNamedBufferParameteriv brebisGetNamedBufferParameteriv
BREBIS_FORCE_INLINE void  brebisGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint * params) { brebisGL.brebisGetNamedBufferParameterivEXT(buffer, pname, params); }
#define glGetNamedBufferParameterivEXT brebisGetNamedBufferParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT * params) { brebisGL.brebisGetNamedBufferParameterui64vNV(buffer, pname, params); }
#define glGetNamedBufferParameterui64vNV brebisGetNamedBufferParameterui64vNV
BREBIS_FORCE_INLINE void  brebisGetNamedBufferPointerv(GLuint buffer, GLenum pname, void ** params) { brebisGL.brebisGetNamedBufferPointerv(buffer, pname, params); }
#define glGetNamedBufferPointerv brebisGetNamedBufferPointerv
BREBIS_FORCE_INLINE void  brebisGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void ** params) { brebisGL.brebisGetNamedBufferPointervEXT(buffer, pname, params); }
#define glGetNamedBufferPointervEXT brebisGetNamedBufferPointervEXT
BREBIS_FORCE_INLINE void  brebisGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { brebisGL.brebisGetNamedBufferSubData(buffer, offset, size, data); }
#define glGetNamedBufferSubData brebisGetNamedBufferSubData
BREBIS_FORCE_INLINE void  brebisGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { brebisGL.brebisGetNamedBufferSubDataEXT(buffer, offset, size, data); }
#define glGetNamedBufferSubDataEXT brebisGetNamedBufferSubDataEXT
BREBIS_FORCE_INLINE void  brebisGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { brebisGL.brebisGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params); }
#define glGetNamedFramebufferAttachmentParameteriv brebisGetNamedFramebufferAttachmentParameteriv
BREBIS_FORCE_INLINE void  brebisGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { brebisGL.brebisGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params); }
#define glGetNamedFramebufferAttachmentParameterivEXT brebisGetNamedFramebufferAttachmentParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { brebisGL.brebisGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values); }
#define glGetNamedFramebufferParameterfvAMD brebisGetNamedFramebufferParameterfvAMD
BREBIS_FORCE_INLINE void  brebisGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param) { brebisGL.brebisGetNamedFramebufferParameteriv(framebuffer, pname, param); }
#define glGetNamedFramebufferParameteriv brebisGetNamedFramebufferParameteriv
BREBIS_FORCE_INLINE void  brebisGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { brebisGL.brebisGetNamedFramebufferParameterivEXT(framebuffer, pname, params); }
#define glGetNamedFramebufferParameterivEXT brebisGetNamedFramebufferParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint * params) { brebisGL.brebisGetNamedProgramLocalParameterIivEXT(program, target, index, params); }
#define glGetNamedProgramLocalParameterIivEXT brebisGetNamedProgramLocalParameterIivEXT
BREBIS_FORCE_INLINE void  brebisGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint * params) { brebisGL.brebisGetNamedProgramLocalParameterIuivEXT(program, target, index, params); }
#define glGetNamedProgramLocalParameterIuivEXT brebisGetNamedProgramLocalParameterIuivEXT
BREBIS_FORCE_INLINE void  brebisGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble * params) { brebisGL.brebisGetNamedProgramLocalParameterdvEXT(program, target, index, params); }
#define glGetNamedProgramLocalParameterdvEXT brebisGetNamedProgramLocalParameterdvEXT
BREBIS_FORCE_INLINE void  brebisGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat * params) { brebisGL.brebisGetNamedProgramLocalParameterfvEXT(program, target, index, params); }
#define glGetNamedProgramLocalParameterfvEXT brebisGetNamedProgramLocalParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void * string) { brebisGL.brebisGetNamedProgramStringEXT(program, target, pname, string); }
#define glGetNamedProgramStringEXT brebisGetNamedProgramStringEXT
BREBIS_FORCE_INLINE void  brebisGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetNamedProgramivEXT(program, target, pname, params); }
#define glGetNamedProgramivEXT brebisGetNamedProgramivEXT
BREBIS_FORCE_INLINE void  brebisGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params) { brebisGL.brebisGetNamedRenderbufferParameteriv(renderbuffer, pname, params); }
#define glGetNamedRenderbufferParameteriv brebisGetNamedRenderbufferParameteriv
BREBIS_FORCE_INLINE void  brebisGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint * params) { brebisGL.brebisGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params); }
#define glGetNamedRenderbufferParameterivEXT brebisGetNamedRenderbufferParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetNamedStringARB(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string) { brebisGL.brebisGetNamedStringARB(namelen, name, bufSize, stringlen, string); }
#define glGetNamedStringARB brebisGetNamedStringARB
BREBIS_FORCE_INLINE void  brebisGetNamedStringivARB(GLint namelen, const GLchar * name, GLenum pname, GLint * params) { brebisGL.brebisGetNamedStringivARB(namelen, name, pname, params); }
#define glGetNamedStringivARB brebisGetNamedStringivARB
BREBIS_FORCE_INLINE void  brebisGetNextPerfQueryIdINTEL(GLuint queryId, GLuint * nextQueryId) { brebisGL.brebisGetNextPerfQueryIdINTEL(queryId, nextQueryId); }
#define glGetNextPerfQueryIdINTEL brebisGetNextPerfQueryIdINTEL
BREBIS_FORCE_INLINE void  brebisGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat * params) { brebisGL.brebisGetObjectBufferfvATI(buffer, pname, params); }
#define glGetObjectBufferfvATI brebisGetObjectBufferfvATI
BREBIS_FORCE_INLINE void  brebisGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint * params) { brebisGL.brebisGetObjectBufferivATI(buffer, pname, params); }
#define glGetObjectBufferivATI brebisGetObjectBufferivATI
BREBIS_FORCE_INLINE void  brebisGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { brebisGL.brebisGetObjectLabel(identifier, name, bufSize, length, label); }
#define glGetObjectLabel brebisGetObjectLabel
BREBIS_FORCE_INLINE void  brebisGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label) { brebisGL.brebisGetObjectLabelEXT(type, object, bufSize, length, label); }
#define glGetObjectLabelEXT brebisGetObjectLabelEXT
BREBIS_FORCE_INLINE void  brebisGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { brebisGL.brebisGetObjectLabelKHR(identifier, name, bufSize, length, label); }
#define glGetObjectLabelKHR brebisGetObjectLabelKHR
BREBIS_FORCE_INLINE void  brebisGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params) { brebisGL.brebisGetObjectParameterfvARB(obj, pname, params); }
#define glGetObjectParameterfvARB brebisGetObjectParameterfvARB
BREBIS_FORCE_INLINE void  brebisGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint * params) { brebisGL.brebisGetObjectParameterivAPPLE(objectType, name, pname, params); }
#define glGetObjectParameterivAPPLE brebisGetObjectParameterivAPPLE
BREBIS_FORCE_INLINE void  brebisGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params) { brebisGL.brebisGetObjectParameterivARB(obj, pname, params); }
#define glGetObjectParameterivARB brebisGetObjectParameterivARB
BREBIS_FORCE_INLINE void  brebisGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { brebisGL.brebisGetObjectPtrLabel(ptr, bufSize, length, label); }
#define glGetObjectPtrLabel brebisGetObjectPtrLabel
BREBIS_FORCE_INLINE void  brebisGetObjectPtrLabelKHR(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { brebisGL.brebisGetObjectPtrLabelKHR(ptr, bufSize, length, label); }
#define glGetObjectPtrLabelKHR brebisGetObjectPtrLabelKHR
BREBIS_FORCE_INLINE void  brebisGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint * params) { brebisGL.brebisGetOcclusionQueryivNV(id, pname, params); }
#define glGetOcclusionQueryivNV brebisGetOcclusionQueryivNV
BREBIS_FORCE_INLINE void  brebisGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params) { brebisGL.brebisGetOcclusionQueryuivNV(id, pname, params); }
#define glGetOcclusionQueryuivNV brebisGetOcclusionQueryuivNV
BREBIS_FORCE_INLINE void  brebisGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat * value) { brebisGL.brebisGetPathColorGenfvNV(color, pname, value); }
#define glGetPathColorGenfvNV brebisGetPathColorGenfvNV
BREBIS_FORCE_INLINE void  brebisGetPathColorGenivNV(GLenum color, GLenum pname, GLint * value) { brebisGL.brebisGetPathColorGenivNV(color, pname, value); }
#define glGetPathColorGenivNV brebisGetPathColorGenivNV
BREBIS_FORCE_INLINE void  brebisGetPathCommandsNV(GLuint path, GLubyte * commands) { brebisGL.brebisGetPathCommandsNV(path, commands); }
#define glGetPathCommandsNV brebisGetPathCommandsNV
BREBIS_FORCE_INLINE void  brebisGetPathCoordsNV(GLuint path, GLfloat * coords) { brebisGL.brebisGetPathCoordsNV(path, coords); }
#define glGetPathCoordsNV brebisGetPathCoordsNV
BREBIS_FORCE_INLINE void  brebisGetPathDashArrayNV(GLuint path, GLfloat * dashArray) { brebisGL.brebisGetPathDashArrayNV(path, dashArray); }
#define glGetPathDashArrayNV brebisGetPathDashArrayNV
BREBIS_FORCE_INLINE GLfloat brebisGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) { return brebisGL.brebisGetPathLengthNV(path, startSegment, numSegments); }
#define glGetPathLengthNV brebisGetPathLengthNV
BREBIS_FORCE_INLINE void  brebisGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics) { brebisGL.brebisGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics); }
#define glGetPathMetricRangeNV brebisGetPathMetricRangeNV
BREBIS_FORCE_INLINE void  brebisGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics) { brebisGL.brebisGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics); }
#define glGetPathMetricsNV brebisGetPathMetricsNV
BREBIS_FORCE_INLINE void  brebisGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat * value) { brebisGL.brebisGetPathParameterfvNV(path, pname, value); }
#define glGetPathParameterfvNV brebisGetPathParameterfvNV
BREBIS_FORCE_INLINE void  brebisGetPathParameterivNV(GLuint path, GLenum pname, GLint * value) { brebisGL.brebisGetPathParameterivNV(path, pname, value); }
#define glGetPathParameterivNV brebisGetPathParameterivNV
BREBIS_FORCE_INLINE void  brebisGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing) { brebisGL.brebisGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing); }
#define glGetPathSpacingNV brebisGetPathSpacingNV
BREBIS_FORCE_INLINE void  brebisGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat * value) { brebisGL.brebisGetPathTexGenfvNV(texCoordSet, pname, value); }
#define glGetPathTexGenfvNV brebisGetPathTexGenfvNV
BREBIS_FORCE_INLINE void  brebisGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint * value) { brebisGL.brebisGetPathTexGenivNV(texCoordSet, pname, value); }
#define glGetPathTexGenivNV brebisGetPathTexGenivNV
BREBIS_FORCE_INLINE void  brebisGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) { brebisGL.brebisGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue); }
#define glGetPerfCounterInfoINTEL brebisGetPerfCounterInfoINTEL
BREBIS_FORCE_INLINE void  brebisGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten) { brebisGL.brebisGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten); }
#define glGetPerfMonitorCounterDataAMD brebisGetPerfMonitorCounterDataAMD
BREBIS_FORCE_INLINE void  brebisGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void * data) { brebisGL.brebisGetPerfMonitorCounterInfoAMD(group, counter, pname, data); }
#define glGetPerfMonitorCounterInfoAMD brebisGetPerfMonitorCounterInfoAMD
BREBIS_FORCE_INLINE void  brebisGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString) { brebisGL.brebisGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString); }
#define glGetPerfMonitorCounterStringAMD brebisGetPerfMonitorCounterStringAMD
BREBIS_FORCE_INLINE void  brebisGetPerfMonitorCountersAMD(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters) { brebisGL.brebisGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters); }
#define glGetPerfMonitorCountersAMD brebisGetPerfMonitorCountersAMD
BREBIS_FORCE_INLINE void  brebisGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString) { brebisGL.brebisGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString); }
#define glGetPerfMonitorGroupStringAMD brebisGetPerfMonitorGroupStringAMD
BREBIS_FORCE_INLINE void  brebisGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei groupsSize, GLuint * groups) { brebisGL.brebisGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups); }
#define glGetPerfMonitorGroupsAMD brebisGetPerfMonitorGroupsAMD
BREBIS_FORCE_INLINE void  brebisGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten) { brebisGL.brebisGetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten); }
#define glGetPerfQueryDataINTEL brebisGetPerfQueryDataINTEL
BREBIS_FORCE_INLINE void  brebisGetPerfQueryIdByNameINTEL(GLchar * queryName, GLuint * queryId) { brebisGL.brebisGetPerfQueryIdByNameINTEL(queryName, queryId); }
#define glGetPerfQueryIdByNameINTEL brebisGetPerfQueryIdByNameINTEL
BREBIS_FORCE_INLINE void  brebisGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) { brebisGL.brebisGetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask); }
#define glGetPerfQueryInfoINTEL brebisGetPerfQueryInfoINTEL
BREBIS_FORCE_INLINE void  brebisGetPixelMapfv(GLenum map, GLfloat * values) { brebisGL.brebisGetPixelMapfv(map, values); }
#define glGetPixelMapfv brebisGetPixelMapfv
BREBIS_FORCE_INLINE void  brebisGetPixelMapuiv(GLenum map, GLuint * values) { brebisGL.brebisGetPixelMapuiv(map, values); }
#define glGetPixelMapuiv brebisGetPixelMapuiv
BREBIS_FORCE_INLINE void  brebisGetPixelMapusv(GLenum map, GLushort * values) { brebisGL.brebisGetPixelMapusv(map, values); }
#define glGetPixelMapusv brebisGetPixelMapusv
BREBIS_FORCE_INLINE void  brebisGetPixelMapxv(GLenum map, GLint size, GLfixed * values) { brebisGL.brebisGetPixelMapxv(map, size, values); }
#define glGetPixelMapxv brebisGetPixelMapxv
BREBIS_FORCE_INLINE void  brebisGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params) { brebisGL.brebisGetPixelTexGenParameterfvSGIS(pname, params); }
#define glGetPixelTexGenParameterfvSGIS brebisGetPixelTexGenParameterfvSGIS
BREBIS_FORCE_INLINE void  brebisGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params) { brebisGL.brebisGetPixelTexGenParameterivSGIS(pname, params); }
#define glGetPixelTexGenParameterivSGIS brebisGetPixelTexGenParameterivSGIS
BREBIS_FORCE_INLINE void  brebisGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetPixelTransformParameterfvEXT(target, pname, params); }
#define glGetPixelTransformParameterfvEXT brebisGetPixelTransformParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetPixelTransformParameterivEXT(target, pname, params); }
#define glGetPixelTransformParameterivEXT brebisGetPixelTransformParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetPointerIndexedvEXT(GLenum target, GLuint index, void ** data) { brebisGL.brebisGetPointerIndexedvEXT(target, index, data); }
#define glGetPointerIndexedvEXT brebisGetPointerIndexedvEXT
BREBIS_FORCE_INLINE void  brebisGetPointeri_vEXT(GLenum pname, GLuint index, void ** params) { brebisGL.brebisGetPointeri_vEXT(pname, index, params); }
#define glGetPointeri_vEXT brebisGetPointeri_vEXT
BREBIS_FORCE_INLINE void  brebisGetPointerv(GLenum pname, void ** params) { brebisGL.brebisGetPointerv(pname, params); }
#define glGetPointerv brebisGetPointerv
BREBIS_FORCE_INLINE void  brebisGetPointervEXT(GLenum pname, void ** params) { brebisGL.brebisGetPointervEXT(pname, params); }
#define glGetPointervEXT brebisGetPointervEXT
BREBIS_FORCE_INLINE void  brebisGetPointervKHR(GLenum pname, void ** params) { brebisGL.brebisGetPointervKHR(pname, params); }
#define glGetPointervKHR brebisGetPointervKHR
BREBIS_FORCE_INLINE void  brebisGetPolygonStipple(GLubyte * mask) { brebisGL.brebisGetPolygonStipple(mask); }
#define glGetPolygonStipple brebisGetPolygonStipple
BREBIS_FORCE_INLINE void  brebisGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { brebisGL.brebisGetProgramBinary(program, bufSize, length, binaryFormat, binary); }
#define glGetProgramBinary brebisGetProgramBinary
BREBIS_FORCE_INLINE void  brebisGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { brebisGL.brebisGetProgramBinaryOES(program, bufSize, length, binaryFormat, binary); }
#define glGetProgramBinaryOES brebisGetProgramBinaryOES
BREBIS_FORCE_INLINE void  brebisGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint * params) { brebisGL.brebisGetProgramEnvParameterIivNV(target, index, params); }
#define glGetProgramEnvParameterIivNV brebisGetProgramEnvParameterIivNV
BREBIS_FORCE_INLINE void  brebisGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint * params) { brebisGL.brebisGetProgramEnvParameterIuivNV(target, index, params); }
#define glGetProgramEnvParameterIuivNV brebisGetProgramEnvParameterIuivNV
BREBIS_FORCE_INLINE void  brebisGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params) { brebisGL.brebisGetProgramEnvParameterdvARB(target, index, params); }
#define glGetProgramEnvParameterdvARB brebisGetProgramEnvParameterdvARB
BREBIS_FORCE_INLINE void  brebisGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params) { brebisGL.brebisGetProgramEnvParameterfvARB(target, index, params); }
#define glGetProgramEnvParameterfvARB brebisGetProgramEnvParameterfvARB
BREBIS_FORCE_INLINE void  brebisGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { brebisGL.brebisGetProgramInfoLog(program, bufSize, length, infoLog); }
#define glGetProgramInfoLog brebisGetProgramInfoLog
BREBIS_FORCE_INLINE void  brebisGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) { brebisGL.brebisGetProgramInterfaceiv(program, programInterface, pname, params); }
#define glGetProgramInterfaceiv brebisGetProgramInterfaceiv
BREBIS_FORCE_INLINE void  brebisGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint * params) { brebisGL.brebisGetProgramLocalParameterIivNV(target, index, params); }
#define glGetProgramLocalParameterIivNV brebisGetProgramLocalParameterIivNV
BREBIS_FORCE_INLINE void  brebisGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint * params) { brebisGL.brebisGetProgramLocalParameterIuivNV(target, index, params); }
#define glGetProgramLocalParameterIuivNV brebisGetProgramLocalParameterIuivNV
BREBIS_FORCE_INLINE void  brebisGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params) { brebisGL.brebisGetProgramLocalParameterdvARB(target, index, params); }
#define glGetProgramLocalParameterdvARB brebisGetProgramLocalParameterdvARB
BREBIS_FORCE_INLINE void  brebisGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params) { brebisGL.brebisGetProgramLocalParameterfvARB(target, index, params); }
#define glGetProgramLocalParameterfvARB brebisGetProgramLocalParameterfvARB
BREBIS_FORCE_INLINE void  brebisGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params) { brebisGL.brebisGetProgramNamedParameterdvNV(id, len, name, params); }
#define glGetProgramNamedParameterdvNV brebisGetProgramNamedParameterdvNV
BREBIS_FORCE_INLINE void  brebisGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params) { brebisGL.brebisGetProgramNamedParameterfvNV(id, len, name, params); }
#define glGetProgramNamedParameterfvNV brebisGetProgramNamedParameterfvNV
BREBIS_FORCE_INLINE void  brebisGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params) { brebisGL.brebisGetProgramParameterdvNV(target, index, pname, params); }
#define glGetProgramParameterdvNV brebisGetProgramParameterdvNV
BREBIS_FORCE_INLINE void  brebisGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { brebisGL.brebisGetProgramParameterfvNV(target, index, pname, params); }
#define glGetProgramParameterfvNV brebisGetProgramParameterfvNV
BREBIS_FORCE_INLINE void  brebisGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { brebisGL.brebisGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); }
#define glGetProgramPipelineInfoLog brebisGetProgramPipelineInfoLog
BREBIS_FORCE_INLINE void  brebisGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { brebisGL.brebisGetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog); }
#define glGetProgramPipelineInfoLogEXT brebisGetProgramPipelineInfoLogEXT
BREBIS_FORCE_INLINE void  brebisGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) { brebisGL.brebisGetProgramPipelineiv(pipeline, pname, params); }
#define glGetProgramPipelineiv brebisGetProgramPipelineiv
BREBIS_FORCE_INLINE void  brebisGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint * params) { if (brebisGLSupport(GL_ES_VERSION_2_0) && (pname == GL_CURRENT_PROGRAM)) { pname = GL_ACTIVE_PROGRAM; } else if (brebisGLSupport(GL_VERSION_1_0) && (pname == GL_ACTIVE_PROGRAM)) { pname = GL_CURRENT_PROGRAM; } brebisGL.brebisGetProgramPipelineivEXT(pipeline, pname, params); }
#define glGetProgramPipelineivEXT brebisGetProgramPipelineivEXT
BREBIS_FORCE_INLINE GLuint brebisGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) { return brebisGL.brebisGetProgramResourceIndex(program, programInterface, name); }
#define glGetProgramResourceIndex brebisGetProgramResourceIndex
BREBIS_FORCE_INLINE GLint brebisGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) { return brebisGL.brebisGetProgramResourceLocation(program, programInterface, name); }
#define glGetProgramResourceLocation brebisGetProgramResourceLocation
BREBIS_FORCE_INLINE GLint brebisGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name) { return brebisGL.brebisGetProgramResourceLocationIndex(program, programInterface, name); }
#define glGetProgramResourceLocationIndex brebisGetProgramResourceLocationIndex
BREBIS_FORCE_INLINE GLint brebisGetProgramResourceLocationIndexEXT(GLuint program, GLenum programInterface, const GLchar * name) { return brebisGL.brebisGetProgramResourceLocationIndexEXT(program, programInterface, name); }
#define glGetProgramResourceLocationIndexEXT brebisGetProgramResourceLocationIndexEXT
BREBIS_FORCE_INLINE void  brebisGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { brebisGL.brebisGetProgramResourceName(program, programInterface, index, bufSize, length, name); }
#define glGetProgramResourceName brebisGetProgramResourceName
BREBIS_FORCE_INLINE void  brebisGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params) { brebisGL.brebisGetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params); }
#define glGetProgramResourcefvNV brebisGetProgramResourcefvNV
BREBIS_FORCE_INLINE void  brebisGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params) { brebisGL.brebisGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params); }
#define glGetProgramResourceiv brebisGetProgramResourceiv
BREBIS_FORCE_INLINE void  brebisGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values) { brebisGL.brebisGetProgramStageiv(program, shadertype, pname, values); }
#define glGetProgramStageiv brebisGetProgramStageiv
BREBIS_FORCE_INLINE void  brebisGetProgramStringARB(GLenum target, GLenum pname, void * string) { brebisGL.brebisGetProgramStringARB(target, pname, string); }
#define glGetProgramStringARB brebisGetProgramStringARB
BREBIS_FORCE_INLINE void  brebisGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program) { brebisGL.brebisGetProgramStringNV(id, pname, program); }
#define glGetProgramStringNV brebisGetProgramStringNV
BREBIS_FORCE_INLINE void  brebisGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint * param) { brebisGL.brebisGetProgramSubroutineParameteruivNV(target, index, param); }
#define glGetProgramSubroutineParameteruivNV brebisGetProgramSubroutineParameteruivNV
BREBIS_FORCE_INLINE void  brebisGetProgramiv(GLuint program, GLenum pname, GLint * params) { brebisGL.brebisGetProgramiv(program, pname, params); }
#define glGetProgramiv brebisGetProgramiv
BREBIS_FORCE_INLINE void  brebisGetProgramivARB(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetProgramivARB(target, pname, params); }
#define glGetProgramivARB brebisGetProgramivARB
BREBIS_FORCE_INLINE void  brebisGetProgramivNV(GLuint id, GLenum pname, GLint * params) { brebisGL.brebisGetProgramivNV(id, pname, params); }
#define glGetProgramivNV brebisGetProgramivNV
BREBIS_FORCE_INLINE void  brebisGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { brebisGL.brebisGetQueryBufferObjecti64v(id, buffer, pname, offset); }
#define glGetQueryBufferObjecti64v brebisGetQueryBufferObjecti64v
BREBIS_FORCE_INLINE void  brebisGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { brebisGL.brebisGetQueryBufferObjectiv(id, buffer, pname, offset); }
#define glGetQueryBufferObjectiv brebisGetQueryBufferObjectiv
BREBIS_FORCE_INLINE void  brebisGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { brebisGL.brebisGetQueryBufferObjectui64v(id, buffer, pname, offset); }
#define glGetQueryBufferObjectui64v brebisGetQueryBufferObjectui64v
BREBIS_FORCE_INLINE void  brebisGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { brebisGL.brebisGetQueryBufferObjectuiv(id, buffer, pname, offset); }
#define glGetQueryBufferObjectuiv brebisGetQueryBufferObjectuiv
BREBIS_FORCE_INLINE void  brebisGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params) { brebisGL.brebisGetQueryIndexediv(target, index, pname, params); }
#define glGetQueryIndexediv brebisGetQueryIndexediv
BREBIS_FORCE_INLINE void  brebisGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params) { brebisGL.brebisGetQueryObjecti64v(id, pname, params); }
#define glGetQueryObjecti64v brebisGetQueryObjecti64v
BREBIS_FORCE_INLINE void  brebisGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 * params) { brebisGL.brebisGetQueryObjecti64vEXT(id, pname, params); }
#define glGetQueryObjecti64vEXT brebisGetQueryObjecti64vEXT
BREBIS_FORCE_INLINE void  brebisGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) { brebisGL.brebisGetQueryObjectiv(id, pname, params); }
#define glGetQueryObjectiv brebisGetQueryObjectiv
BREBIS_FORCE_INLINE void  brebisGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params) { brebisGL.brebisGetQueryObjectivARB(id, pname, params); }
#define glGetQueryObjectivARB brebisGetQueryObjectivARB
BREBIS_FORCE_INLINE void  brebisGetQueryObjectivEXT(GLuint id, GLenum pname, GLint * params) { brebisGL.brebisGetQueryObjectivEXT(id, pname, params); }
#define glGetQueryObjectivEXT brebisGetQueryObjectivEXT
BREBIS_FORCE_INLINE void  brebisGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params) { brebisGL.brebisGetQueryObjectui64v(id, pname, params); }
#define glGetQueryObjectui64v brebisGetQueryObjectui64v
BREBIS_FORCE_INLINE void  brebisGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 * params) { brebisGL.brebisGetQueryObjectui64vEXT(id, pname, params); }
#define glGetQueryObjectui64vEXT brebisGetQueryObjectui64vEXT
BREBIS_FORCE_INLINE void  brebisGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) { brebisGL.brebisGetQueryObjectuiv(id, pname, params); }
#define glGetQueryObjectuiv brebisGetQueryObjectuiv
BREBIS_FORCE_INLINE void  brebisGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params) { brebisGL.brebisGetQueryObjectuivARB(id, pname, params); }
#define glGetQueryObjectuivARB brebisGetQueryObjectuivARB
BREBIS_FORCE_INLINE void  brebisGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint * params) { brebisGL.brebisGetQueryObjectuivEXT(id, pname, params); }
#define glGetQueryObjectuivEXT brebisGetQueryObjectuivEXT
BREBIS_FORCE_INLINE void  brebisGetQueryiv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetQueryiv(target, pname, params); }
#define glGetQueryiv brebisGetQueryiv
BREBIS_FORCE_INLINE void  brebisGetQueryivARB(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetQueryivARB(target, pname, params); }
#define glGetQueryivARB brebisGetQueryivARB
BREBIS_FORCE_INLINE void  brebisGetQueryivEXT(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetQueryivEXT(target, pname, params); }
#define glGetQueryivEXT brebisGetQueryivEXT
BREBIS_FORCE_INLINE void  brebisGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetRenderbufferParameteriv(target, pname, params); }
#define glGetRenderbufferParameteriv brebisGetRenderbufferParameteriv
BREBIS_FORCE_INLINE void  brebisGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetRenderbufferParameterivEXT(target, pname, params); }
#define glGetRenderbufferParameterivEXT brebisGetRenderbufferParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetRenderbufferParameterivOES(target, pname, params); }
#define glGetRenderbufferParameterivOES brebisGetRenderbufferParameterivOES
BREBIS_FORCE_INLINE void  brebisGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) { brebisGL.brebisGetSamplerParameterIiv(sampler, pname, params); }
#define glGetSamplerParameterIiv brebisGetSamplerParameterIiv
BREBIS_FORCE_INLINE void  brebisGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint * params) { brebisGL.brebisGetSamplerParameterIivEXT(sampler, pname, params); }
#define glGetSamplerParameterIivEXT brebisGetSamplerParameterIivEXT
BREBIS_FORCE_INLINE void  brebisGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint * params) { brebisGL.brebisGetSamplerParameterIivOES(sampler, pname, params); }
#define glGetSamplerParameterIivOES brebisGetSamplerParameterIivOES
BREBIS_FORCE_INLINE void  brebisGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) { brebisGL.brebisGetSamplerParameterIuiv(sampler, pname, params); }
#define glGetSamplerParameterIuiv brebisGetSamplerParameterIuiv
BREBIS_FORCE_INLINE void  brebisGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint * params) { brebisGL.brebisGetSamplerParameterIuivEXT(sampler, pname, params); }
#define glGetSamplerParameterIuivEXT brebisGetSamplerParameterIuivEXT
BREBIS_FORCE_INLINE void  brebisGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint * params) { brebisGL.brebisGetSamplerParameterIuivOES(sampler, pname, params); }
#define glGetSamplerParameterIuivOES brebisGetSamplerParameterIuivOES
BREBIS_FORCE_INLINE void  brebisGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) { brebisGL.brebisGetSamplerParameterfv(sampler, pname, params); }
#define glGetSamplerParameterfv brebisGetSamplerParameterfv
BREBIS_FORCE_INLINE void  brebisGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) { brebisGL.brebisGetSamplerParameteriv(sampler, pname, params); }
#define glGetSamplerParameteriv brebisGetSamplerParameteriv
BREBIS_FORCE_INLINE void  brebisGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 * params) { brebisGL.brebisGetSemaphoreParameterui64vEXT(semaphore, pname, params); }
#define glGetSemaphoreParameterui64vEXT brebisGetSemaphoreParameterui64vEXT
BREBIS_FORCE_INLINE void  brebisGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { brebisGL.brebisGetSeparableFilter(target, format, type, row, column, span); }
#define glGetSeparableFilter brebisGetSeparableFilter
BREBIS_FORCE_INLINE void  brebisGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { brebisGL.brebisGetSeparableFilterEXT(target, format, type, row, column, span); }
#define glGetSeparableFilterEXT brebisGetSeparableFilterEXT
BREBIS_FORCE_INLINE void  brebisGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { brebisGL.brebisGetShaderInfoLog(shader, bufSize, length, infoLog); }
#define glGetShaderInfoLog brebisGetShaderInfoLog
BREBIS_FORCE_INLINE void  brebisGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) { brebisGL.brebisGetShaderPrecisionFormat(shadertype, precisiontype, range, precision); }
#define glGetShaderPrecisionFormat brebisGetShaderPrecisionFormat
BREBIS_FORCE_INLINE void  brebisGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) { brebisGL.brebisGetShaderSource(shader, bufSize, length, source); }
#define glGetShaderSource brebisGetShaderSource
BREBIS_FORCE_INLINE void  brebisGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source) { brebisGL.brebisGetShaderSourceARB(obj, maxLength, length, source); }
#define glGetShaderSourceARB brebisGetShaderSourceARB
BREBIS_FORCE_INLINE void  brebisGetShaderiv(GLuint shader, GLenum pname, GLint * params) { brebisGL.brebisGetShaderiv(shader, pname, params); }
#define glGetShaderiv brebisGetShaderiv
BREBIS_FORCE_INLINE void  brebisGetShadingRateImagePaletteNV(GLuint viewport, GLuint entry, GLenum * rate) { brebisGL.brebisGetShadingRateImagePaletteNV(viewport, entry, rate); }
#define glGetShadingRateImagePaletteNV brebisGetShadingRateImagePaletteNV
BREBIS_FORCE_INLINE void  brebisGetShadingRateSampleLocationivNV(GLenum rate, GLuint samples, GLuint index, GLint * location) { brebisGL.brebisGetShadingRateSampleLocationivNV(rate, samples, index, location); }
#define glGetShadingRateSampleLocationivNV brebisGetShadingRateSampleLocationivNV
BREBIS_FORCE_INLINE void  brebisGetSharpenTexFuncSGIS(GLenum target, GLfloat * points) { brebisGL.brebisGetSharpenTexFuncSGIS(target, points); }
#define glGetSharpenTexFuncSGIS brebisGetSharpenTexFuncSGIS
BREBIS_FORCE_INLINE GLushort brebisGetStageIndexNV(GLenum shadertype) { return brebisGL.brebisGetStageIndexNV(shadertype); }
#define glGetStageIndexNV brebisGetStageIndexNV
BREBIS_FORCE_INLINE const GLubyte * brebisGetString(GLenum name) { return brebisGL.brebisGetString(name); }
#define glGetString brebisGetString
BREBIS_FORCE_INLINE const GLubyte * brebisGetStringi(GLenum name, GLuint index) { return brebisGL.brebisGetStringi(name, index); }
#define glGetStringi brebisGetStringi
BREBIS_FORCE_INLINE GLuint brebisGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name) { return brebisGL.brebisGetSubroutineIndex(program, shadertype, name); }
#define glGetSubroutineIndex brebisGetSubroutineIndex
BREBIS_FORCE_INLINE GLint brebisGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name) { return brebisGL.brebisGetSubroutineUniformLocation(program, shadertype, name); }
#define glGetSubroutineUniformLocation brebisGetSubroutineUniformLocation
BREBIS_FORCE_INLINE void  brebisGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { brebisGL.brebisGetSynciv(sync, pname, bufSize, length, values); }
#define glGetSynciv brebisGetSynciv
BREBIS_FORCE_INLINE void  brebisGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { brebisGL.brebisGetSyncivAPPLE(sync, pname, bufSize, length, values); }
#define glGetSyncivAPPLE brebisGetSyncivAPPLE
BREBIS_FORCE_INLINE void  brebisGetTexBumpParameterfvATI(GLenum pname, GLfloat * param) { brebisGL.brebisGetTexBumpParameterfvATI(pname, param); }
#define glGetTexBumpParameterfvATI brebisGetTexBumpParameterfvATI
BREBIS_FORCE_INLINE void  brebisGetTexBumpParameterivATI(GLenum pname, GLint * param) { brebisGL.brebisGetTexBumpParameterivATI(pname, param); }
#define glGetTexBumpParameterivATI brebisGetTexBumpParameterivATI
BREBIS_FORCE_INLINE void  brebisGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetTexEnvfv(target, pname, params); }
#define glGetTexEnvfv brebisGetTexEnvfv
BREBIS_FORCE_INLINE void  brebisGetTexEnviv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetTexEnviv(target, pname, params); }
#define glGetTexEnviv brebisGetTexEnviv
BREBIS_FORCE_INLINE void  brebisGetTexEnvxv(GLenum target, GLenum pname, GLfixed * params) { brebisGL.brebisGetTexEnvxv(target, pname, params); }
#define glGetTexEnvxv brebisGetTexEnvxv
BREBIS_FORCE_INLINE void  brebisGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed * params) { brebisGL.brebisGetTexEnvxvOES(target, pname, params); }
#define glGetTexEnvxvOES brebisGetTexEnvxvOES
BREBIS_FORCE_INLINE void  brebisGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat * weights) { brebisGL.brebisGetTexFilterFuncSGIS(target, filter, weights); }
#define glGetTexFilterFuncSGIS brebisGetTexFilterFuncSGIS
BREBIS_FORCE_INLINE void  brebisGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) { brebisGL.brebisGetTexGendv(coord, pname, params); }
#define glGetTexGendv brebisGetTexGendv
BREBIS_FORCE_INLINE void  brebisGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) { brebisGL.brebisGetTexGenfv(coord, pname, params); }
#define glGetTexGenfv brebisGetTexGenfv
BREBIS_FORCE_INLINE void  brebisGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat * params) { brebisGL.brebisGetTexGenfvOES(coord, pname, params); }
#define glGetTexGenfvOES brebisGetTexGenfvOES
BREBIS_FORCE_INLINE void  brebisGetTexGeniv(GLenum coord, GLenum pname, GLint * params) { brebisGL.brebisGetTexGeniv(coord, pname, params); }
#define glGetTexGeniv brebisGetTexGeniv
BREBIS_FORCE_INLINE void  brebisGetTexGenivOES(GLenum coord, GLenum pname, GLint * params) { brebisGL.brebisGetTexGenivOES(coord, pname, params); }
#define glGetTexGenivOES brebisGetTexGenivOES
BREBIS_FORCE_INLINE void  brebisGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed * params) { brebisGL.brebisGetTexGenxvOES(coord, pname, params); }
#define glGetTexGenxvOES brebisGetTexGenxvOES
BREBIS_FORCE_INLINE void  brebisGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { brebisGL.brebisGetTexImage(target, level, format, type, pixels); }
#define glGetTexImage brebisGetTexImage
BREBIS_FORCE_INLINE void  brebisGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) { brebisGL.brebisGetTexLevelParameterfv(target, level, pname, params); }
#define glGetTexLevelParameterfv brebisGetTexLevelParameterfv
BREBIS_FORCE_INLINE void  brebisGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) { brebisGL.brebisGetTexLevelParameteriv(target, level, pname, params); }
#define glGetTexLevelParameteriv brebisGetTexLevelParameteriv
BREBIS_FORCE_INLINE void  brebisGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed * params) { brebisGL.brebisGetTexLevelParameterxvOES(target, level, pname, params); }
#define glGetTexLevelParameterxvOES brebisGetTexLevelParameterxvOES
BREBIS_FORCE_INLINE void  brebisGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetTexParameterIiv(target, pname, params); }
#define glGetTexParameterIiv brebisGetTexParameterIiv
BREBIS_FORCE_INLINE void  brebisGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetTexParameterIivEXT(target, pname, params); }
#define glGetTexParameterIivEXT brebisGetTexParameterIivEXT
BREBIS_FORCE_INLINE void  brebisGetTexParameterIivOES(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetTexParameterIivOES(target, pname, params); }
#define glGetTexParameterIivOES brebisGetTexParameterIivOES
BREBIS_FORCE_INLINE void  brebisGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) { brebisGL.brebisGetTexParameterIuiv(target, pname, params); }
#define glGetTexParameterIuiv brebisGetTexParameterIuiv
BREBIS_FORCE_INLINE void  brebisGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params) { brebisGL.brebisGetTexParameterIuivEXT(target, pname, params); }
#define glGetTexParameterIuivEXT brebisGetTexParameterIuivEXT
BREBIS_FORCE_INLINE void  brebisGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint * params) { brebisGL.brebisGetTexParameterIuivOES(target, pname, params); }
#define glGetTexParameterIuivOES brebisGetTexParameterIuivOES
BREBIS_FORCE_INLINE void  brebisGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void ** params) { brebisGL.brebisGetTexParameterPointervAPPLE(target, pname, params); }
#define glGetTexParameterPointervAPPLE brebisGetTexParameterPointervAPPLE
BREBIS_FORCE_INLINE void  brebisGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetTexParameterfv(target, pname, params); }
#define glGetTexParameterfv brebisGetTexParameterfv
BREBIS_FORCE_INLINE void  brebisGetTexParameteriv(GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetTexParameteriv(target, pname, params); }
#define glGetTexParameteriv brebisGetTexParameteriv
BREBIS_FORCE_INLINE void  brebisGetTexParameterxv(GLenum target, GLenum pname, GLfixed * params) { brebisGL.brebisGetTexParameterxv(target, pname, params); }
#define glGetTexParameterxv brebisGetTexParameterxv
BREBIS_FORCE_INLINE void  brebisGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { brebisGL.brebisGetTexParameterxvOES(target, pname, params); }
#define glGetTexParameterxvOES brebisGetTexParameterxvOES
BREBIS_FORCE_INLINE GLuint64 brebisGetTextureHandleARB(GLuint texture) { return brebisGL.brebisGetTextureHandleARB(texture); }
#define glGetTextureHandleARB brebisGetTextureHandleARB
BREBIS_FORCE_INLINE GLuint64 brebisGetTextureHandleIMG(GLuint texture) { return brebisGL.brebisGetTextureHandleIMG(texture); }
#define glGetTextureHandleIMG brebisGetTextureHandleIMG
BREBIS_FORCE_INLINE GLuint64 brebisGetTextureHandleNV(GLuint texture) { return brebisGL.brebisGetTextureHandleNV(texture); }
#define glGetTextureHandleNV brebisGetTextureHandleNV
BREBIS_FORCE_INLINE void  brebisGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { brebisGL.brebisGetTextureImage(texture, level, format, type, bufSize, pixels); }
#define glGetTextureImage brebisGetTextureImage
BREBIS_FORCE_INLINE void  brebisGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { brebisGL.brebisGetTextureImageEXT(texture, target, level, format, type, pixels); }
#define glGetTextureImageEXT brebisGetTextureImageEXT
BREBIS_FORCE_INLINE void  brebisGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params) { brebisGL.brebisGetTextureLevelParameterfv(texture, level, pname, params); }
#define glGetTextureLevelParameterfv brebisGetTextureLevelParameterfv
BREBIS_FORCE_INLINE void  brebisGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params) { brebisGL.brebisGetTextureLevelParameterfvEXT(texture, target, level, pname, params); }
#define glGetTextureLevelParameterfvEXT brebisGetTextureLevelParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params) { brebisGL.brebisGetTextureLevelParameteriv(texture, level, pname, params); }
#define glGetTextureLevelParameteriv brebisGetTextureLevelParameteriv
BREBIS_FORCE_INLINE void  brebisGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params) { brebisGL.brebisGetTextureLevelParameterivEXT(texture, target, level, pname, params); }
#define glGetTextureLevelParameterivEXT brebisGetTextureLevelParameterivEXT
BREBIS_FORCE_INLINE void  brebisGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params) { brebisGL.brebisGetTextureParameterIiv(texture, pname, params); }
#define glGetTextureParameterIiv brebisGetTextureParameterIiv
BREBIS_FORCE_INLINE void  brebisGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetTextureParameterIivEXT(texture, target, pname, params); }
#define glGetTextureParameterIivEXT brebisGetTextureParameterIivEXT
BREBIS_FORCE_INLINE void  brebisGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params) { brebisGL.brebisGetTextureParameterIuiv(texture, pname, params); }
#define glGetTextureParameterIuiv brebisGetTextureParameterIuiv
BREBIS_FORCE_INLINE void  brebisGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint * params) { brebisGL.brebisGetTextureParameterIuivEXT(texture, target, pname, params); }
#define glGetTextureParameterIuivEXT brebisGetTextureParameterIuivEXT
BREBIS_FORCE_INLINE void  brebisGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params) { brebisGL.brebisGetTextureParameterfv(texture, pname, params); }
#define glGetTextureParameterfv brebisGetTextureParameterfv
BREBIS_FORCE_INLINE void  brebisGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat * params) { brebisGL.brebisGetTextureParameterfvEXT(texture, target, pname, params); }
#define glGetTextureParameterfvEXT brebisGetTextureParameterfvEXT
BREBIS_FORCE_INLINE void  brebisGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params) { brebisGL.brebisGetTextureParameteriv(texture, pname, params); }
#define glGetTextureParameteriv brebisGetTextureParameteriv
BREBIS_FORCE_INLINE void  brebisGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { brebisGL.brebisGetTextureParameterivEXT(texture, target, pname, params); }
#define glGetTextureParameterivEXT brebisGetTextureParameterivEXT
BREBIS_FORCE_INLINE GLuint64 brebisGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) { return brebisGL.brebisGetTextureSamplerHandleARB(texture, sampler); }
#define glGetTextureSamplerHandleARB brebisGetTextureSamplerHandleARB
BREBIS_FORCE_INLINE GLuint64 brebisGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler) { return brebisGL.brebisGetTextureSamplerHandleIMG(texture, sampler); }
#define glGetTextureSamplerHandleIMG brebisGetTextureSamplerHandleIMG
BREBIS_FORCE_INLINE GLuint64 brebisGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) { return brebisGL.brebisGetTextureSamplerHandleNV(texture, sampler); }
#define glGetTextureSamplerHandleNV brebisGetTextureSamplerHandleNV
BREBIS_FORCE_INLINE void  brebisGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { brebisGL.brebisGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); }
#define glGetTextureSubImage brebisGetTextureSubImage
BREBIS_FORCE_INLINE void  brebisGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params) { brebisGL.brebisGetTrackMatrixivNV(target, address, pname, params); }
#define glGetTrackMatrixivNV brebisGetTrackMatrixivNV
BREBIS_FORCE_INLINE void  brebisGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { brebisGL.brebisGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name); }
#define glGetTransformFeedbackVarying brebisGetTransformFeedbackVarying
BREBIS_FORCE_INLINE void  brebisGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { brebisGL.brebisGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name); }
#define glGetTransformFeedbackVaryingEXT brebisGetTransformFeedbackVaryingEXT
BREBIS_FORCE_INLINE void  brebisGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint * location) { brebisGL.brebisGetTransformFeedbackVaryingNV(program, index, location); }
#define glGetTransformFeedbackVaryingNV brebisGetTransformFeedbackVaryingNV
BREBIS_FORCE_INLINE void  brebisGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param) { brebisGL.brebisGetTransformFeedbacki64_v(xfb, pname, index, param); }
#define glGetTransformFeedbacki64_v brebisGetTransformFeedbacki64_v
BREBIS_FORCE_INLINE void  brebisGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param) { brebisGL.brebisGetTransformFeedbacki_v(xfb, pname, index, param); }
#define glGetTransformFeedbacki_v brebisGetTransformFeedbacki_v
BREBIS_FORCE_INLINE void  brebisGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param) { brebisGL.brebisGetTransformFeedbackiv(xfb, pname, param); }
#define glGetTransformFeedbackiv brebisGetTransformFeedbackiv
BREBIS_FORCE_INLINE void  brebisGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source) { brebisGL.brebisGetTranslatedShaderSourceANGLE(shader, bufsize, length, source); }
#define glGetTranslatedShaderSourceANGLE brebisGetTranslatedShaderSourceANGLE
BREBIS_FORCE_INLINE GLuint brebisGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) { return brebisGL.brebisGetUniformBlockIndex(program, uniformBlockName); }
#define glGetUniformBlockIndex brebisGetUniformBlockIndex
BREBIS_FORCE_INLINE GLint brebisGetUniformBufferSizeEXT(GLuint program, GLint location) { return brebisGL.brebisGetUniformBufferSizeEXT(program, location); }
#define glGetUniformBufferSizeEXT brebisGetUniformBufferSizeEXT
BREBIS_FORCE_INLINE void  brebisGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) { brebisGL.brebisGetUniformIndices(program, uniformCount, uniformNames, uniformIndices); }
#define glGetUniformIndices brebisGetUniformIndices
BREBIS_FORCE_INLINE GLint brebisGetUniformLocation(GLuint program, const GLchar * name) { return brebisGL.brebisGetUniformLocation(program, name); }
#define glGetUniformLocation brebisGetUniformLocation
BREBIS_FORCE_INLINE GLint brebisGetUniformLocationARB(GLhandleARB programObj, const GLcharARB * name) { return brebisGL.brebisGetUniformLocationARB(programObj, name); }
#define glGetUniformLocationARB brebisGetUniformLocationARB
BREBIS_FORCE_INLINE GLintptr brebisGetUniformOffsetEXT(GLuint program, GLint location) { return brebisGL.brebisGetUniformOffsetEXT(program, location); }
#define glGetUniformOffsetEXT brebisGetUniformOffsetEXT
BREBIS_FORCE_INLINE void  brebisGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params) { brebisGL.brebisGetUniformSubroutineuiv(shadertype, location, params); }
#define glGetUniformSubroutineuiv brebisGetUniformSubroutineuiv
BREBIS_FORCE_INLINE void  brebisGetUniformdv(GLuint program, GLint location, GLdouble * params) { brebisGL.brebisGetUniformdv(program, location, params); }
#define glGetUniformdv brebisGetUniformdv
BREBIS_FORCE_INLINE void  brebisGetUniformfv(GLuint program, GLint location, GLfloat * params) { brebisGL.brebisGetUniformfv(program, location, params); }
#define glGetUniformfv brebisGetUniformfv
BREBIS_FORCE_INLINE void  brebisGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat * params) { brebisGL.brebisGetUniformfvARB(programObj, location, params); }
#define glGetUniformfvARB brebisGetUniformfvARB
BREBIS_FORCE_INLINE void  brebisGetUniformi64vARB(GLuint program, GLint location, GLint64 * params) { brebisGL.brebisGetUniformi64vARB(program, location, params); }
#define glGetUniformi64vARB brebisGetUniformi64vARB
BREBIS_FORCE_INLINE void  brebisGetUniformi64vNV(GLuint program, GLint location, GLint64EXT * params) { brebisGL.brebisGetUniformi64vNV(program, location, params); }
#define glGetUniformi64vNV brebisGetUniformi64vNV
BREBIS_FORCE_INLINE void  brebisGetUniformiv(GLuint program, GLint location, GLint * params) { brebisGL.brebisGetUniformiv(program, location, params); }
#define glGetUniformiv brebisGetUniformiv
BREBIS_FORCE_INLINE void  brebisGetUniformivARB(GLhandleARB programObj, GLint location, GLint * params) { brebisGL.brebisGetUniformivARB(programObj, location, params); }
#define glGetUniformivARB brebisGetUniformivARB
BREBIS_FORCE_INLINE void  brebisGetUniformui64vARB(GLuint program, GLint location, GLuint64 * params) { brebisGL.brebisGetUniformui64vARB(program, location, params); }
#define glGetUniformui64vARB brebisGetUniformui64vARB
BREBIS_FORCE_INLINE void  brebisGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT * params) { brebisGL.brebisGetUniformui64vNV(program, location, params); }
#define glGetUniformui64vNV brebisGetUniformui64vNV
BREBIS_FORCE_INLINE void  brebisGetUniformuiv(GLuint program, GLint location, GLuint * params) { brebisGL.brebisGetUniformuiv(program, location, params); }
#define glGetUniformuiv brebisGetUniformuiv
BREBIS_FORCE_INLINE void  brebisGetUniformuivEXT(GLuint program, GLint location, GLuint * params) { brebisGL.brebisGetUniformuivEXT(program, location, params); }
#define glGetUniformuivEXT brebisGetUniformuivEXT
BREBIS_FORCE_INLINE void  brebisGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte * data) { brebisGL.brebisGetUnsignedBytei_vEXT(target, index, data); }
#define glGetUnsignedBytei_vEXT brebisGetUnsignedBytei_vEXT
BREBIS_FORCE_INLINE void  brebisGetUnsignedBytevEXT(GLenum pname, GLubyte * data) { brebisGL.brebisGetUnsignedBytevEXT(pname, data); }
#define glGetUnsignedBytevEXT brebisGetUnsignedBytevEXT
BREBIS_FORCE_INLINE void  brebisGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat * params) { brebisGL.brebisGetVariantArrayObjectfvATI(id, pname, params); }
#define glGetVariantArrayObjectfvATI brebisGetVariantArrayObjectfvATI
BREBIS_FORCE_INLINE void  brebisGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint * params) { brebisGL.brebisGetVariantArrayObjectivATI(id, pname, params); }
#define glGetVariantArrayObjectivATI brebisGetVariantArrayObjectivATI
BREBIS_FORCE_INLINE void  brebisGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { brebisGL.brebisGetVariantBooleanvEXT(id, value, data); }
#define glGetVariantBooleanvEXT brebisGetVariantBooleanvEXT
BREBIS_FORCE_INLINE void  brebisGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { brebisGL.brebisGetVariantFloatvEXT(id, value, data); }
#define glGetVariantFloatvEXT brebisGetVariantFloatvEXT
BREBIS_FORCE_INLINE void  brebisGetVariantIntegervEXT(GLuint id, GLenum value, GLint * data) { brebisGL.brebisGetVariantIntegervEXT(id, value, data); }
#define glGetVariantIntegervEXT brebisGetVariantIntegervEXT
BREBIS_FORCE_INLINE void  brebisGetVariantPointervEXT(GLuint id, GLenum value, void ** data) { brebisGL.brebisGetVariantPointervEXT(id, value, data); }
#define glGetVariantPointervEXT brebisGetVariantPointervEXT
BREBIS_FORCE_INLINE GLint brebisGetVaryingLocationNV(GLuint program, const GLchar * name) { return brebisGL.brebisGetVaryingLocationNV(program, name); }
#define glGetVaryingLocationNV brebisGetVaryingLocationNV
BREBIS_FORCE_INLINE void  brebisGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) { brebisGL.brebisGetVertexArrayIndexed64iv(vaobj, index, pname, param); }
#define glGetVertexArrayIndexed64iv brebisGetVertexArrayIndexed64iv
BREBIS_FORCE_INLINE void  brebisGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { brebisGL.brebisGetVertexArrayIndexediv(vaobj, index, pname, param); }
#define glGetVertexArrayIndexediv brebisGetVertexArrayIndexediv
BREBIS_FORCE_INLINE void  brebisGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { brebisGL.brebisGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param); }
#define glGetVertexArrayIntegeri_vEXT brebisGetVertexArrayIntegeri_vEXT
BREBIS_FORCE_INLINE void  brebisGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint * param) { brebisGL.brebisGetVertexArrayIntegervEXT(vaobj, pname, param); }
#define glGetVertexArrayIntegervEXT brebisGetVertexArrayIntegervEXT
BREBIS_FORCE_INLINE void  brebisGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void ** param) { brebisGL.brebisGetVertexArrayPointeri_vEXT(vaobj, index, pname, param); }
#define glGetVertexArrayPointeri_vEXT brebisGetVertexArrayPointeri_vEXT
BREBIS_FORCE_INLINE void  brebisGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void ** param) { brebisGL.brebisGetVertexArrayPointervEXT(vaobj, pname, param); }
#define glGetVertexArrayPointervEXT brebisGetVertexArrayPointervEXT
BREBIS_FORCE_INLINE void  brebisGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param) { brebisGL.brebisGetVertexArrayiv(vaobj, pname, param); }
#define glGetVertexArrayiv brebisGetVertexArrayiv
BREBIS_FORCE_INLINE void  brebisGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat * params) { brebisGL.brebisGetVertexAttribArrayObjectfvATI(index, pname, params); }
#define glGetVertexAttribArrayObjectfvATI brebisGetVertexAttribArrayObjectfvATI
BREBIS_FORCE_INLINE void  brebisGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint * params) { brebisGL.brebisGetVertexAttribArrayObjectivATI(index, pname, params); }
#define glGetVertexAttribArrayObjectivATI brebisGetVertexAttribArrayObjectivATI
BREBIS_FORCE_INLINE void  brebisGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) { brebisGL.brebisGetVertexAttribIiv(index, pname, params); }
#define glGetVertexAttribIiv brebisGetVertexAttribIiv
BREBIS_FORCE_INLINE void  brebisGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint * params) { brebisGL.brebisGetVertexAttribIivEXT(index, pname, params); }
#define glGetVertexAttribIivEXT brebisGetVertexAttribIivEXT
BREBIS_FORCE_INLINE void  brebisGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) { brebisGL.brebisGetVertexAttribIuiv(index, pname, params); }
#define glGetVertexAttribIuiv brebisGetVertexAttribIuiv
BREBIS_FORCE_INLINE void  brebisGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint * params) { brebisGL.brebisGetVertexAttribIuivEXT(index, pname, params); }
#define glGetVertexAttribIuivEXT brebisGetVertexAttribIuivEXT
BREBIS_FORCE_INLINE void  brebisGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params) { brebisGL.brebisGetVertexAttribLdv(index, pname, params); }
#define glGetVertexAttribLdv brebisGetVertexAttribLdv
BREBIS_FORCE_INLINE void  brebisGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble * params) { brebisGL.brebisGetVertexAttribLdvEXT(index, pname, params); }
#define glGetVertexAttribLdvEXT brebisGetVertexAttribLdvEXT
BREBIS_FORCE_INLINE void  brebisGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT * params) { brebisGL.brebisGetVertexAttribLi64vNV(index, pname, params); }
#define glGetVertexAttribLi64vNV brebisGetVertexAttribLi64vNV
BREBIS_FORCE_INLINE void  brebisGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT * params) { brebisGL.brebisGetVertexAttribLui64vARB(index, pname, params); }
#define glGetVertexAttribLui64vARB brebisGetVertexAttribLui64vARB
BREBIS_FORCE_INLINE void  brebisGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT * params) { brebisGL.brebisGetVertexAttribLui64vNV(index, pname, params); }
#define glGetVertexAttribLui64vNV brebisGetVertexAttribLui64vNV
BREBIS_FORCE_INLINE void  brebisGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) { brebisGL.brebisGetVertexAttribPointerv(index, pname, pointer); }
#define glGetVertexAttribPointerv brebisGetVertexAttribPointerv
BREBIS_FORCE_INLINE void  brebisGetVertexAttribPointervARB(GLuint index, GLenum pname, void ** pointer) { brebisGL.brebisGetVertexAttribPointervARB(index, pname, pointer); }
#define glGetVertexAttribPointervARB brebisGetVertexAttribPointervARB
BREBIS_FORCE_INLINE void  brebisGetVertexAttribPointervNV(GLuint index, GLenum pname, void ** pointer) { brebisGL.brebisGetVertexAttribPointervNV(index, pname, pointer); }
#define glGetVertexAttribPointervNV brebisGetVertexAttribPointervNV
BREBIS_FORCE_INLINE void  brebisGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) { brebisGL.brebisGetVertexAttribdv(index, pname, params); }
#define glGetVertexAttribdv brebisGetVertexAttribdv
BREBIS_FORCE_INLINE void  brebisGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params) { brebisGL.brebisGetVertexAttribdvARB(index, pname, params); }
#define glGetVertexAttribdvARB brebisGetVertexAttribdvARB
BREBIS_FORCE_INLINE void  brebisGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params) { brebisGL.brebisGetVertexAttribdvNV(index, pname, params); }
#define glGetVertexAttribdvNV brebisGetVertexAttribdvNV
BREBIS_FORCE_INLINE void  brebisGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) { brebisGL.brebisGetVertexAttribfv(index, pname, params); }
#define glGetVertexAttribfv brebisGetVertexAttribfv
BREBIS_FORCE_INLINE void  brebisGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params) { brebisGL.brebisGetVertexAttribfvARB(index, pname, params); }
#define glGetVertexAttribfvARB brebisGetVertexAttribfvARB
BREBIS_FORCE_INLINE void  brebisGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params) { brebisGL.brebisGetVertexAttribfvNV(index, pname, params); }
#define glGetVertexAttribfvNV brebisGetVertexAttribfvNV
BREBIS_FORCE_INLINE void  brebisGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) { brebisGL.brebisGetVertexAttribiv(index, pname, params); }
#define glGetVertexAttribiv brebisGetVertexAttribiv
BREBIS_FORCE_INLINE void  brebisGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params) { brebisGL.brebisGetVertexAttribivARB(index, pname, params); }
#define glGetVertexAttribivARB brebisGetVertexAttribivARB
BREBIS_FORCE_INLINE void  brebisGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params) { brebisGL.brebisGetVertexAttribivNV(index, pname, params); }
#define glGetVertexAttribivNV brebisGetVertexAttribivNV
BREBIS_FORCE_INLINE void  brebisGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params) { brebisGL.brebisGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params); }
#define glGetVideoCaptureStreamdvNV brebisGetVideoCaptureStreamdvNV
BREBIS_FORCE_INLINE void  brebisGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params) { brebisGL.brebisGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params); }
#define glGetVideoCaptureStreamfvNV brebisGetVideoCaptureStreamfvNV
BREBIS_FORCE_INLINE void  brebisGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params) { brebisGL.brebisGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params); }
#define glGetVideoCaptureStreamivNV brebisGetVideoCaptureStreamivNV
BREBIS_FORCE_INLINE void  brebisGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint * params) { brebisGL.brebisGetVideoCaptureivNV(video_capture_slot, pname, params); }
#define glGetVideoCaptureivNV brebisGetVideoCaptureivNV
BREBIS_FORCE_INLINE void  brebisGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT * params) { brebisGL.brebisGetVideoi64vNV(video_slot, pname, params); }
#define glGetVideoi64vNV brebisGetVideoi64vNV
BREBIS_FORCE_INLINE void  brebisGetVideoivNV(GLuint video_slot, GLenum pname, GLint * params) { brebisGL.brebisGetVideoivNV(video_slot, pname, params); }
#define glGetVideoivNV brebisGetVideoivNV
BREBIS_FORCE_INLINE void  brebisGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT * params) { brebisGL.brebisGetVideoui64vNV(video_slot, pname, params); }
#define glGetVideoui64vNV brebisGetVideoui64vNV
BREBIS_FORCE_INLINE void  brebisGetVideouivNV(GLuint video_slot, GLenum pname, GLuint * params) { brebisGL.brebisGetVideouivNV(video_slot, pname, params); }
#define glGetVideouivNV brebisGetVideouivNV
BREBIS_FORCE_INLINE GLVULKANPROCNV brebisGetVkProcAddrNV(const GLchar * name) { return brebisGL.brebisGetVkProcAddrNV(name); }
#define glGetVkProcAddrNV brebisGetVkProcAddrNV
BREBIS_FORCE_INLINE void  brebisGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { brebisGL.brebisGetnColorTable(target, format, type, bufSize, table); }
#define glGetnColorTable brebisGetnColorTable
BREBIS_FORCE_INLINE void  brebisGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { brebisGL.brebisGetnColorTableARB(target, format, type, bufSize, table); }
#define glGetnColorTableARB brebisGetnColorTableARB
BREBIS_FORCE_INLINE void  brebisGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels) { brebisGL.brebisGetnCompressedTexImage(target, lod, bufSize, pixels); }
#define glGetnCompressedTexImage brebisGetnCompressedTexImage
BREBIS_FORCE_INLINE void  brebisGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void * img) { brebisGL.brebisGetnCompressedTexImageARB(target, lod, bufSize, img); }
#define glGetnCompressedTexImageARB brebisGetnCompressedTexImageARB
BREBIS_FORCE_INLINE void  brebisGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { brebisGL.brebisGetnConvolutionFilter(target, format, type, bufSize, image); }
#define glGetnConvolutionFilter brebisGetnConvolutionFilter
BREBIS_FORCE_INLINE void  brebisGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { brebisGL.brebisGetnConvolutionFilterARB(target, format, type, bufSize, image); }
#define glGetnConvolutionFilterARB brebisGetnConvolutionFilterARB
BREBIS_FORCE_INLINE void  brebisGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { brebisGL.brebisGetnHistogram(target, reset, format, type, bufSize, values); }
#define glGetnHistogram brebisGetnHistogram
BREBIS_FORCE_INLINE void  brebisGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { brebisGL.brebisGetnHistogramARB(target, reset, format, type, bufSize, values); }
#define glGetnHistogramARB brebisGetnHistogramARB
BREBIS_FORCE_INLINE void  brebisGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { brebisGL.brebisGetnMapdv(target, query, bufSize, v); }
#define glGetnMapdv brebisGetnMapdv
BREBIS_FORCE_INLINE void  brebisGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { brebisGL.brebisGetnMapdvARB(target, query, bufSize, v); }
#define glGetnMapdvARB brebisGetnMapdvARB
BREBIS_FORCE_INLINE void  brebisGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { brebisGL.brebisGetnMapfv(target, query, bufSize, v); }
#define glGetnMapfv brebisGetnMapfv
BREBIS_FORCE_INLINE void  brebisGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { brebisGL.brebisGetnMapfvARB(target, query, bufSize, v); }
#define glGetnMapfvARB brebisGetnMapfvARB
BREBIS_FORCE_INLINE void  brebisGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { brebisGL.brebisGetnMapiv(target, query, bufSize, v); }
#define glGetnMapiv brebisGetnMapiv
BREBIS_FORCE_INLINE void  brebisGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { brebisGL.brebisGetnMapivARB(target, query, bufSize, v); }
#define glGetnMapivARB brebisGetnMapivARB
BREBIS_FORCE_INLINE void  brebisGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { brebisGL.brebisGetnMinmax(target, reset, format, type, bufSize, values); }
#define glGetnMinmax brebisGetnMinmax
BREBIS_FORCE_INLINE void  brebisGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { brebisGL.brebisGetnMinmaxARB(target, reset, format, type, bufSize, values); }
#define glGetnMinmaxARB brebisGetnMinmaxARB
BREBIS_FORCE_INLINE void  brebisGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values) { brebisGL.brebisGetnPixelMapfv(map, bufSize, values); }
#define glGetnPixelMapfv brebisGetnPixelMapfv
BREBIS_FORCE_INLINE void  brebisGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat * values) { brebisGL.brebisGetnPixelMapfvARB(map, bufSize, values); }
#define glGetnPixelMapfvARB brebisGetnPixelMapfvARB
BREBIS_FORCE_INLINE void  brebisGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values) { brebisGL.brebisGetnPixelMapuiv(map, bufSize, values); }
#define glGetnPixelMapuiv brebisGetnPixelMapuiv
BREBIS_FORCE_INLINE void  brebisGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint * values) { brebisGL.brebisGetnPixelMapuivARB(map, bufSize, values); }
#define glGetnPixelMapuivARB brebisGetnPixelMapuivARB
BREBIS_FORCE_INLINE void  brebisGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values) { brebisGL.brebisGetnPixelMapusv(map, bufSize, values); }
#define glGetnPixelMapusv brebisGetnPixelMapusv
BREBIS_FORCE_INLINE void  brebisGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort * values) { brebisGL.brebisGetnPixelMapusvARB(map, bufSize, values); }
#define glGetnPixelMapusvARB brebisGetnPixelMapusvARB
BREBIS_FORCE_INLINE void  brebisGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern) { brebisGL.brebisGetnPolygonStipple(bufSize, pattern); }
#define glGetnPolygonStipple brebisGetnPolygonStipple
BREBIS_FORCE_INLINE void  brebisGetnPolygonStippleARB(GLsizei bufSize, GLubyte * pattern) { brebisGL.brebisGetnPolygonStippleARB(bufSize, pattern); }
#define glGetnPolygonStippleARB brebisGetnPolygonStippleARB
BREBIS_FORCE_INLINE void  brebisGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { brebisGL.brebisGetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span); }
#define glGetnSeparableFilter brebisGetnSeparableFilter
BREBIS_FORCE_INLINE void  brebisGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { brebisGL.brebisGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span); }
#define glGetnSeparableFilterARB brebisGetnSeparableFilterARB
BREBIS_FORCE_INLINE void  brebisGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { brebisGL.brebisGetnTexImage(target, level, format, type, bufSize, pixels); }
#define glGetnTexImage brebisGetnTexImage
BREBIS_FORCE_INLINE void  brebisGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) { brebisGL.brebisGetnTexImageARB(target, level, format, type, bufSize, img); }
#define glGetnTexImageARB brebisGetnTexImageARB
BREBIS_FORCE_INLINE void  brebisGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { brebisGL.brebisGetnUniformdv(program, location, bufSize, params); }
#define glGetnUniformdv brebisGetnUniformdv
BREBIS_FORCE_INLINE void  brebisGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { brebisGL.brebisGetnUniformdvARB(program, location, bufSize, params); }
#define glGetnUniformdvARB brebisGetnUniformdvARB
BREBIS_FORCE_INLINE void  brebisGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { brebisGL.brebisGetnUniformfv(program, location, bufSize, params); }
#define glGetnUniformfv brebisGetnUniformfv
BREBIS_FORCE_INLINE void  brebisGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { brebisGL.brebisGetnUniformfvARB(program, location, bufSize, params); }
#define glGetnUniformfvARB brebisGetnUniformfvARB
BREBIS_FORCE_INLINE void  brebisGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { brebisGL.brebisGetnUniformfvEXT(program, location, bufSize, params); }
#define glGetnUniformfvEXT brebisGetnUniformfvEXT
BREBIS_FORCE_INLINE void  brebisGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { brebisGL.brebisGetnUniformfvKHR(program, location, bufSize, params); }
#define glGetnUniformfvKHR brebisGetnUniformfvKHR
BREBIS_FORCE_INLINE void  brebisGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 * params) { brebisGL.brebisGetnUniformi64vARB(program, location, bufSize, params); }
#define glGetnUniformi64vARB brebisGetnUniformi64vARB
BREBIS_FORCE_INLINE void  brebisGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) { brebisGL.brebisGetnUniformiv(program, location, bufSize, params); }
#define glGetnUniformiv brebisGetnUniformiv
BREBIS_FORCE_INLINE void  brebisGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint * params) { brebisGL.brebisGetnUniformivARB(program, location, bufSize, params); }
#define glGetnUniformivARB brebisGetnUniformivARB
BREBIS_FORCE_INLINE void  brebisGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint * params) { brebisGL.brebisGetnUniformivEXT(program, location, bufSize, params); }
#define glGetnUniformivEXT brebisGetnUniformivEXT
BREBIS_FORCE_INLINE void  brebisGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint * params) { brebisGL.brebisGetnUniformivKHR(program, location, bufSize, params); }
#define glGetnUniformivKHR brebisGetnUniformivKHR
BREBIS_FORCE_INLINE void  brebisGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params) { brebisGL.brebisGetnUniformui64vARB(program, location, bufSize, params); }
#define glGetnUniformui64vARB brebisGetnUniformui64vARB
BREBIS_FORCE_INLINE void  brebisGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { brebisGL.brebisGetnUniformuiv(program, location, bufSize, params); }
#define glGetnUniformuiv brebisGetnUniformuiv
BREBIS_FORCE_INLINE void  brebisGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { brebisGL.brebisGetnUniformuivARB(program, location, bufSize, params); }
#define glGetnUniformuivARB brebisGetnUniformuivARB
BREBIS_FORCE_INLINE void  brebisGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { brebisGL.brebisGetnUniformuivKHR(program, location, bufSize, params); }
#define glGetnUniformuivKHR brebisGetnUniformuivKHR
BREBIS_FORCE_INLINE void  brebisGlobalAlphaFactorbSUN(GLbyte factor) { brebisGL.brebisGlobalAlphaFactorbSUN(factor); }
#define glGlobalAlphaFactorbSUN brebisGlobalAlphaFactorbSUN
BREBIS_FORCE_INLINE void  brebisGlobalAlphaFactordSUN(GLdouble factor) { brebisGL.brebisGlobalAlphaFactordSUN(factor); }
#define glGlobalAlphaFactordSUN brebisGlobalAlphaFactordSUN
BREBIS_FORCE_INLINE void  brebisGlobalAlphaFactorfSUN(GLfloat factor) { brebisGL.brebisGlobalAlphaFactorfSUN(factor); }
#define glGlobalAlphaFactorfSUN brebisGlobalAlphaFactorfSUN
BREBIS_FORCE_INLINE void  brebisGlobalAlphaFactoriSUN(GLint factor) { brebisGL.brebisGlobalAlphaFactoriSUN(factor); }
#define glGlobalAlphaFactoriSUN brebisGlobalAlphaFactoriSUN
BREBIS_FORCE_INLINE void  brebisGlobalAlphaFactorsSUN(GLshort factor) { brebisGL.brebisGlobalAlphaFactorsSUN(factor); }
#define glGlobalAlphaFactorsSUN brebisGlobalAlphaFactorsSUN
BREBIS_FORCE_INLINE void  brebisGlobalAlphaFactorubSUN(GLubyte factor) { brebisGL.brebisGlobalAlphaFactorubSUN(factor); }
#define glGlobalAlphaFactorubSUN brebisGlobalAlphaFactorubSUN
BREBIS_FORCE_INLINE void  brebisGlobalAlphaFactoruiSUN(GLuint factor) { brebisGL.brebisGlobalAlphaFactoruiSUN(factor); }
#define glGlobalAlphaFactoruiSUN brebisGlobalAlphaFactoruiSUN
BREBIS_FORCE_INLINE void  brebisGlobalAlphaFactorusSUN(GLushort factor) { brebisGL.brebisGlobalAlphaFactorusSUN(factor); }
#define glGlobalAlphaFactorusSUN brebisGlobalAlphaFactorusSUN
BREBIS_FORCE_INLINE void  brebisHint(GLenum target, GLenum mode) { brebisGL.brebisHint(target, mode); }
#define glHint brebisHint
BREBIS_FORCE_INLINE void  brebisHintPGI(GLenum target, GLint mode) { brebisGL.brebisHintPGI(target, mode); }
#define glHintPGI brebisHintPGI
BREBIS_FORCE_INLINE void  brebisHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { brebisGL.brebisHistogram(target, width, internalformat, sink); }
#define glHistogram brebisHistogram
BREBIS_FORCE_INLINE void  brebisHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { brebisGL.brebisHistogramEXT(target, width, internalformat, sink); }
#define glHistogramEXT brebisHistogramEXT
BREBIS_FORCE_INLINE void  brebisIglooInterfaceSGIX(GLenum pname, const void * params) { brebisGL.brebisIglooInterfaceSGIX(pname, params); }
#define glIglooInterfaceSGIX brebisIglooInterfaceSGIX
BREBIS_FORCE_INLINE void  brebisImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) { brebisGL.brebisImageTransformParameterfHP(target, pname, param); }
#define glImageTransformParameterfHP brebisImageTransformParameterfHP
BREBIS_FORCE_INLINE void  brebisImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisImageTransformParameterfvHP(target, pname, params); }
#define glImageTransformParameterfvHP brebisImageTransformParameterfvHP
BREBIS_FORCE_INLINE void  brebisImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) { brebisGL.brebisImageTransformParameteriHP(target, pname, param); }
#define glImageTransformParameteriHP brebisImageTransformParameteriHP
BREBIS_FORCE_INLINE void  brebisImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisImageTransformParameterivHP(target, pname, params); }
#define glImageTransformParameterivHP brebisImageTransformParameterivHP
BREBIS_FORCE_INLINE void  brebisImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) { brebisGL.brebisImportMemoryFdEXT(memory, size, handleType, fd); }
#define glImportMemoryFdEXT brebisImportMemoryFdEXT
BREBIS_FORCE_INLINE void  brebisImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void * handle) { brebisGL.brebisImportMemoryWin32HandleEXT(memory, size, handleType, handle); }
#define glImportMemoryWin32HandleEXT brebisImportMemoryWin32HandleEXT
BREBIS_FORCE_INLINE void  brebisImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void * name) { brebisGL.brebisImportMemoryWin32NameEXT(memory, size, handleType, name); }
#define glImportMemoryWin32NameEXT brebisImportMemoryWin32NameEXT
BREBIS_FORCE_INLINE void  brebisImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) { brebisGL.brebisImportSemaphoreFdEXT(semaphore, handleType, fd); }
#define glImportSemaphoreFdEXT brebisImportSemaphoreFdEXT
BREBIS_FORCE_INLINE void  brebisImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void * handle) { brebisGL.brebisImportSemaphoreWin32HandleEXT(semaphore, handleType, handle); }
#define glImportSemaphoreWin32HandleEXT brebisImportSemaphoreWin32HandleEXT
BREBIS_FORCE_INLINE void  brebisImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void * name) { brebisGL.brebisImportSemaphoreWin32NameEXT(semaphore, handleType, name); }
#define glImportSemaphoreWin32NameEXT brebisImportSemaphoreWin32NameEXT
BREBIS_FORCE_INLINE GLsync brebisImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) { return brebisGL.brebisImportSyncEXT(external_sync_type, external_sync, flags); }
#define glImportSyncEXT brebisImportSyncEXT
BREBIS_FORCE_INLINE void  brebisIndexFormatNV(GLenum type, GLsizei stride) { brebisGL.brebisIndexFormatNV(type, stride); }
#define glIndexFormatNV brebisIndexFormatNV
BREBIS_FORCE_INLINE void  brebisIndexFuncEXT(GLenum func, GLclampf ref) { brebisGL.brebisIndexFuncEXT(func, ref); }
#define glIndexFuncEXT brebisIndexFuncEXT
BREBIS_FORCE_INLINE void  brebisIndexMask(GLuint mask) { brebisGL.brebisIndexMask(mask); }
#define glIndexMask brebisIndexMask
BREBIS_FORCE_INLINE void  brebisIndexMaterialEXT(GLenum face, GLenum mode) { brebisGL.brebisIndexMaterialEXT(face, mode); }
#define glIndexMaterialEXT brebisIndexMaterialEXT
BREBIS_FORCE_INLINE void  brebisIndexPointer(GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisIndexPointer(type, stride, pointer); }
#define glIndexPointer brebisIndexPointer
BREBIS_FORCE_INLINE void  brebisIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { brebisGL.brebisIndexPointerEXT(type, stride, count, pointer); }
#define glIndexPointerEXT brebisIndexPointerEXT
BREBIS_FORCE_INLINE void  brebisIndexPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { brebisGL.brebisIndexPointerListIBM(type, stride, pointer, ptrstride); }
#define glIndexPointerListIBM brebisIndexPointerListIBM
BREBIS_FORCE_INLINE void  brebisIndexd(GLdouble c) { brebisGL.brebisIndexd(c); }
#define glIndexd brebisIndexd
BREBIS_FORCE_INLINE void  brebisIndexdv(const GLdouble * c) { brebisGL.brebisIndexdv(c); }
#define glIndexdv brebisIndexdv
BREBIS_FORCE_INLINE void  brebisIndexf(GLfloat c) { brebisGL.brebisIndexf(c); }
#define glIndexf brebisIndexf
BREBIS_FORCE_INLINE void  brebisIndexfv(const GLfloat * c) { brebisGL.brebisIndexfv(c); }
#define glIndexfv brebisIndexfv
BREBIS_FORCE_INLINE void  brebisIndexi(GLint c) { brebisGL.brebisIndexi(c); }
#define glIndexi brebisIndexi
BREBIS_FORCE_INLINE void  brebisIndexiv(const GLint * c) { brebisGL.brebisIndexiv(c); }
#define glIndexiv brebisIndexiv
BREBIS_FORCE_INLINE void  brebisIndexs(GLshort c) { brebisGL.brebisIndexs(c); }
#define glIndexs brebisIndexs
BREBIS_FORCE_INLINE void  brebisIndexsv(const GLshort * c) { brebisGL.brebisIndexsv(c); }
#define glIndexsv brebisIndexsv
BREBIS_FORCE_INLINE void  brebisIndexub(GLubyte c) { brebisGL.brebisIndexub(c); }
#define glIndexub brebisIndexub
BREBIS_FORCE_INLINE void  brebisIndexubv(const GLubyte * c) { brebisGL.brebisIndexubv(c); }
#define glIndexubv brebisIndexubv
BREBIS_FORCE_INLINE void  brebisIndexxOES(GLfixed component) { brebisGL.brebisIndexxOES(component); }
#define glIndexxOES brebisIndexxOES
BREBIS_FORCE_INLINE void  brebisIndexxvOES(const GLfixed * component) { brebisGL.brebisIndexxvOES(component); }
#define glIndexxvOES brebisIndexxvOES
BREBIS_FORCE_INLINE void  brebisInitNames(void) { brebisGL.brebisInitNames(); }
#define glInitNames brebisInitNames
BREBIS_FORCE_INLINE void  brebisInsertComponentEXT(GLuint res, GLuint src, GLuint num) { brebisGL.brebisInsertComponentEXT(res, src, num); }
#define glInsertComponentEXT brebisInsertComponentEXT
BREBIS_FORCE_INLINE void  brebisInsertEventMarkerEXT(GLsizei length, const GLchar * marker) { brebisGL.brebisInsertEventMarkerEXT(length, marker); }
#define glInsertEventMarkerEXT brebisInsertEventMarkerEXT
BREBIS_FORCE_INLINE void  brebisInstrumentsBufferSGIX(GLsizei size, GLint * buffer) { brebisGL.brebisInstrumentsBufferSGIX(size, buffer); }
#define glInstrumentsBufferSGIX brebisInstrumentsBufferSGIX
BREBIS_FORCE_INLINE void  brebisInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) { brebisGL.brebisInterleavedArrays(format, stride, pointer); }
#define glInterleavedArrays brebisInterleavedArrays
BREBIS_FORCE_INLINE void  brebisInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) { brebisGL.brebisInterpolatePathsNV(resultPath, pathA, pathB, weight); }
#define glInterpolatePathsNV brebisInterpolatePathsNV
BREBIS_FORCE_INLINE void  brebisInvalidateBufferData(GLuint buffer) { brebisGL.brebisInvalidateBufferData(buffer); }
#define glInvalidateBufferData brebisInvalidateBufferData
BREBIS_FORCE_INLINE void  brebisInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) { brebisGL.brebisInvalidateBufferSubData(buffer, offset, length); }
#define glInvalidateBufferSubData brebisInvalidateBufferSubData
BREBIS_FORCE_INLINE void  brebisInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) { brebisGL.brebisInvalidateFramebuffer(target, numAttachments, attachments); }
#define glInvalidateFramebuffer brebisInvalidateFramebuffer
BREBIS_FORCE_INLINE void  brebisInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) { brebisGL.brebisInvalidateNamedFramebufferData(framebuffer, numAttachments, attachments); }
#define glInvalidateNamedFramebufferData brebisInvalidateNamedFramebufferData
BREBIS_FORCE_INLINE void  brebisInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisInvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height); }
#define glInvalidateNamedFramebufferSubData brebisInvalidateNamedFramebufferSubData
BREBIS_FORCE_INLINE void  brebisInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height); }
#define glInvalidateSubFramebuffer brebisInvalidateSubFramebuffer
BREBIS_FORCE_INLINE void  brebisInvalidateTexImage(GLuint texture, GLint level) { brebisGL.brebisInvalidateTexImage(texture, level); }
#define glInvalidateTexImage brebisInvalidateTexImage
BREBIS_FORCE_INLINE void  brebisInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { brebisGL.brebisInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); }
#define glInvalidateTexSubImage brebisInvalidateTexSubImage
BREBIS_FORCE_INLINE GLboolean brebisIsAsyncMarkerSGIX(GLuint marker) { return brebisGL.brebisIsAsyncMarkerSGIX(marker); }
#define glIsAsyncMarkerSGIX brebisIsAsyncMarkerSGIX
BREBIS_FORCE_INLINE GLboolean brebisIsBuffer(GLuint buffer) { return brebisGL.brebisIsBuffer(buffer); }
#define glIsBuffer brebisIsBuffer
BREBIS_FORCE_INLINE GLboolean brebisIsBufferARB(GLuint buffer) { return brebisGL.brebisIsBufferARB(buffer); }
#define glIsBufferARB brebisIsBufferARB
BREBIS_FORCE_INLINE GLboolean brebisIsBufferResidentNV(GLenum target) { return brebisGL.brebisIsBufferResidentNV(target); }
#define glIsBufferResidentNV brebisIsBufferResidentNV
BREBIS_FORCE_INLINE GLboolean brebisIsCommandListNV(GLuint list) { return brebisGL.brebisIsCommandListNV(list); }
#define glIsCommandListNV brebisIsCommandListNV
BREBIS_FORCE_INLINE GLboolean brebisIsEnabled(GLenum cap) { return brebisGL.brebisIsEnabled(cap); }
#define glIsEnabled brebisIsEnabled
BREBIS_FORCE_INLINE GLboolean brebisIsEnabledIndexedEXT(GLenum target, GLuint index) { return brebisGL.brebisIsEnabledIndexedEXT(target, index); }
#define glIsEnabledIndexedEXT brebisIsEnabledIndexedEXT
BREBIS_FORCE_INLINE GLboolean brebisIsEnabledi(GLenum target, GLuint index) { return brebisGL.brebisIsEnabledi(target, index); }
#define glIsEnabledi brebisIsEnabledi
BREBIS_FORCE_INLINE GLboolean brebisIsEnablediEXT(GLenum target, GLuint index) { return brebisGL.brebisIsEnablediEXT(target, index); }
#define glIsEnablediEXT brebisIsEnablediEXT
BREBIS_FORCE_INLINE GLboolean brebisIsEnablediNV(GLenum target, GLuint index) { return brebisGL.brebisIsEnablediNV(target, index); }
#define glIsEnablediNV brebisIsEnablediNV
BREBIS_FORCE_INLINE GLboolean brebisIsEnablediOES(GLenum target, GLuint index) { return brebisGL.brebisIsEnablediOES(target, index); }
#define glIsEnablediOES brebisIsEnablediOES
BREBIS_FORCE_INLINE GLboolean brebisIsFenceAPPLE(GLuint fence) { return brebisGL.brebisIsFenceAPPLE(fence); }
#define glIsFenceAPPLE brebisIsFenceAPPLE
BREBIS_FORCE_INLINE GLboolean brebisIsFenceNV(GLuint fence) { return brebisGL.brebisIsFenceNV(fence); }
#define glIsFenceNV brebisIsFenceNV
BREBIS_FORCE_INLINE GLboolean brebisIsFramebuffer(GLuint framebuffer) { return brebisGL.brebisIsFramebuffer(framebuffer); }
#define glIsFramebuffer brebisIsFramebuffer
BREBIS_FORCE_INLINE GLboolean brebisIsFramebufferEXT(GLuint framebuffer) { return brebisGL.brebisIsFramebufferEXT(framebuffer); }
#define glIsFramebufferEXT brebisIsFramebufferEXT
BREBIS_FORCE_INLINE GLboolean brebisIsFramebufferOES(GLuint framebuffer) { return brebisGL.brebisIsFramebufferOES(framebuffer); }
#define glIsFramebufferOES brebisIsFramebufferOES
BREBIS_FORCE_INLINE GLboolean brebisIsImageHandleResidentARB(GLuint64 handle) { return brebisGL.brebisIsImageHandleResidentARB(handle); }
#define glIsImageHandleResidentARB brebisIsImageHandleResidentARB
BREBIS_FORCE_INLINE GLboolean brebisIsImageHandleResidentNV(GLuint64 handle) { return brebisGL.brebisIsImageHandleResidentNV(handle); }
#define glIsImageHandleResidentNV brebisIsImageHandleResidentNV
BREBIS_FORCE_INLINE GLboolean brebisIsList(GLuint list) { return brebisGL.brebisIsList(list); }
#define glIsList brebisIsList
BREBIS_FORCE_INLINE GLboolean brebisIsMemoryObjectEXT(GLuint memoryObject) { return brebisGL.brebisIsMemoryObjectEXT(memoryObject); }
#define glIsMemoryObjectEXT brebisIsMemoryObjectEXT
BREBIS_FORCE_INLINE GLboolean brebisIsNameAMD(GLenum identifier, GLuint name) { return brebisGL.brebisIsNameAMD(identifier, name); }
#define glIsNameAMD brebisIsNameAMD
BREBIS_FORCE_INLINE GLboolean brebisIsNamedBufferResidentNV(GLuint buffer) { return brebisGL.brebisIsNamedBufferResidentNV(buffer); }
#define glIsNamedBufferResidentNV brebisIsNamedBufferResidentNV
BREBIS_FORCE_INLINE GLboolean brebisIsNamedStringARB(GLint namelen, const GLchar * name) { return brebisGL.brebisIsNamedStringARB(namelen, name); }
#define glIsNamedStringARB brebisIsNamedStringARB
BREBIS_FORCE_INLINE GLboolean brebisIsObjectBufferATI(GLuint buffer) { return brebisGL.brebisIsObjectBufferATI(buffer); }
#define glIsObjectBufferATI brebisIsObjectBufferATI
BREBIS_FORCE_INLINE GLboolean brebisIsOcclusionQueryNV(GLuint id) { return brebisGL.brebisIsOcclusionQueryNV(id); }
#define glIsOcclusionQueryNV brebisIsOcclusionQueryNV
BREBIS_FORCE_INLINE GLboolean brebisIsPathNV(GLuint path) { return brebisGL.brebisIsPathNV(path); }
#define glIsPathNV brebisIsPathNV
BREBIS_FORCE_INLINE GLboolean brebisIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) { return brebisGL.brebisIsPointInFillPathNV(path, mask, x, y); }
#define glIsPointInFillPathNV brebisIsPointInFillPathNV
BREBIS_FORCE_INLINE GLboolean brebisIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) { return brebisGL.brebisIsPointInStrokePathNV(path, x, y); }
#define glIsPointInStrokePathNV brebisIsPointInStrokePathNV
BREBIS_FORCE_INLINE GLboolean brebisIsProgram(GLuint program) { return brebisGL.brebisIsProgram(program); }
#define glIsProgram brebisIsProgram
BREBIS_FORCE_INLINE GLboolean brebisIsProgramARB(GLuint program) { return brebisGL.brebisIsProgramARB(program); }
#define glIsProgramARB brebisIsProgramARB
BREBIS_FORCE_INLINE GLboolean brebisIsProgramNV(GLuint id) { return brebisGL.brebisIsProgramNV(id); }
#define glIsProgramNV brebisIsProgramNV
BREBIS_FORCE_INLINE GLboolean brebisIsProgramPipeline(GLuint pipeline) { return brebisGL.brebisIsProgramPipeline(pipeline); }
#define glIsProgramPipeline brebisIsProgramPipeline
BREBIS_FORCE_INLINE GLboolean brebisIsProgramPipelineEXT(GLuint pipeline) { return brebisGL.brebisIsProgramPipelineEXT(pipeline); }
#define glIsProgramPipelineEXT brebisIsProgramPipelineEXT
BREBIS_FORCE_INLINE GLboolean brebisIsQuery(GLuint id) { return brebisGL.brebisIsQuery(id); }
#define glIsQuery brebisIsQuery
BREBIS_FORCE_INLINE GLboolean brebisIsQueryARB(GLuint id) { return brebisGL.brebisIsQueryARB(id); }
#define glIsQueryARB brebisIsQueryARB
BREBIS_FORCE_INLINE GLboolean brebisIsQueryEXT(GLuint id) { return brebisGL.brebisIsQueryEXT(id); }
#define glIsQueryEXT brebisIsQueryEXT
BREBIS_FORCE_INLINE GLboolean brebisIsRenderbuffer(GLuint renderbuffer) { return brebisGL.brebisIsRenderbuffer(renderbuffer); }
#define glIsRenderbuffer brebisIsRenderbuffer
BREBIS_FORCE_INLINE GLboolean brebisIsRenderbufferEXT(GLuint renderbuffer) { return brebisGL.brebisIsRenderbufferEXT(renderbuffer); }
#define glIsRenderbufferEXT brebisIsRenderbufferEXT
BREBIS_FORCE_INLINE GLboolean brebisIsRenderbufferOES(GLuint renderbuffer) { return brebisGL.brebisIsRenderbufferOES(renderbuffer); }
#define glIsRenderbufferOES brebisIsRenderbufferOES
BREBIS_FORCE_INLINE GLboolean brebisIsSampler(GLuint sampler) { return brebisGL.brebisIsSampler(sampler); }
#define glIsSampler brebisIsSampler
BREBIS_FORCE_INLINE GLboolean brebisIsSemaphoreEXT(GLuint semaphore) { return brebisGL.brebisIsSemaphoreEXT(semaphore); }
#define glIsSemaphoreEXT brebisIsSemaphoreEXT
BREBIS_FORCE_INLINE GLboolean brebisIsShader(GLuint shader) { return brebisGL.brebisIsShader(shader); }
#define glIsShader brebisIsShader
BREBIS_FORCE_INLINE GLboolean brebisIsStateNV(GLuint state) { return brebisGL.brebisIsStateNV(state); }
#define glIsStateNV brebisIsStateNV
BREBIS_FORCE_INLINE GLboolean brebisIsSync(GLsync sync) { return brebisGL.brebisIsSync(sync); }
#define glIsSync brebisIsSync
BREBIS_FORCE_INLINE GLboolean brebisIsSyncAPPLE(GLsync sync) { return brebisGL.brebisIsSyncAPPLE(sync); }
#define glIsSyncAPPLE brebisIsSyncAPPLE
BREBIS_FORCE_INLINE GLboolean brebisIsTexture(GLuint texture) { return brebisGL.brebisIsTexture(texture); }
#define glIsTexture brebisIsTexture
BREBIS_FORCE_INLINE GLboolean brebisIsTextureEXT(GLuint texture) { return brebisGL.brebisIsTextureEXT(texture); }
#define glIsTextureEXT brebisIsTextureEXT
BREBIS_FORCE_INLINE GLboolean brebisIsTextureHandleResidentARB(GLuint64 handle) { return brebisGL.brebisIsTextureHandleResidentARB(handle); }
#define glIsTextureHandleResidentARB brebisIsTextureHandleResidentARB
BREBIS_FORCE_INLINE GLboolean brebisIsTextureHandleResidentNV(GLuint64 handle) { return brebisGL.brebisIsTextureHandleResidentNV(handle); }
#define glIsTextureHandleResidentNV brebisIsTextureHandleResidentNV
BREBIS_FORCE_INLINE GLboolean brebisIsTransformFeedback(GLuint id) { return brebisGL.brebisIsTransformFeedback(id); }
#define glIsTransformFeedback brebisIsTransformFeedback
BREBIS_FORCE_INLINE GLboolean brebisIsTransformFeedbackNV(GLuint id) { return brebisGL.brebisIsTransformFeedbackNV(id); }
#define glIsTransformFeedbackNV brebisIsTransformFeedbackNV
BREBIS_FORCE_INLINE GLboolean brebisIsVariantEnabledEXT(GLuint id, GLenum cap) { return brebisGL.brebisIsVariantEnabledEXT(id, cap); }
#define glIsVariantEnabledEXT brebisIsVariantEnabledEXT
BREBIS_FORCE_INLINE GLboolean brebisIsVertexArray(GLuint array) { return brebisGL.brebisIsVertexArray(array); }
#define glIsVertexArray brebisIsVertexArray
BREBIS_FORCE_INLINE GLboolean brebisIsVertexArrayAPPLE(GLuint array) { return brebisGL.brebisIsVertexArrayAPPLE(array); }
#define glIsVertexArrayAPPLE brebisIsVertexArrayAPPLE
BREBIS_FORCE_INLINE GLboolean brebisIsVertexArrayOES(GLuint array) { return brebisGL.brebisIsVertexArrayOES(array); }
#define glIsVertexArrayOES brebisIsVertexArrayOES
BREBIS_FORCE_INLINE GLboolean brebisIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) { return brebisGL.brebisIsVertexAttribEnabledAPPLE(index, pname); }
#define glIsVertexAttribEnabledAPPLE brebisIsVertexAttribEnabledAPPLE
BREBIS_FORCE_INLINE void  brebisLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { brebisGL.brebisLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
#define glLGPUCopyImageSubDataNVX brebisLGPUCopyImageSubDataNVX
BREBIS_FORCE_INLINE void  brebisLGPUInterlockNVX(void) { brebisGL.brebisLGPUInterlockNVX(); }
#define glLGPUInterlockNVX brebisLGPUInterlockNVX
BREBIS_FORCE_INLINE void  brebisLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { brebisGL.brebisLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data); }
#define glLGPUNamedBufferSubDataNVX brebisLGPUNamedBufferSubDataNVX
BREBIS_FORCE_INLINE void  brebisLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar * label) { brebisGL.brebisLabelObjectEXT(type, object, length, label); }
#define glLabelObjectEXT brebisLabelObjectEXT
BREBIS_FORCE_INLINE void  brebisLightEnviSGIX(GLenum pname, GLint param) { brebisGL.brebisLightEnviSGIX(pname, param); }
#define glLightEnviSGIX brebisLightEnviSGIX
BREBIS_FORCE_INLINE void  brebisLightModelf(GLenum pname, GLfloat param) { brebisGL.brebisLightModelf(pname, param); }
#define glLightModelf brebisLightModelf
BREBIS_FORCE_INLINE void  brebisLightModelfv(GLenum pname, const GLfloat * params) { brebisGL.brebisLightModelfv(pname, params); }
#define glLightModelfv brebisLightModelfv
BREBIS_FORCE_INLINE void  brebisLightModeli(GLenum pname, GLint param) { brebisGL.brebisLightModeli(pname, param); }
#define glLightModeli brebisLightModeli
BREBIS_FORCE_INLINE void  brebisLightModeliv(GLenum pname, const GLint * params) { brebisGL.brebisLightModeliv(pname, params); }
#define glLightModeliv brebisLightModeliv
BREBIS_FORCE_INLINE void  brebisLightModelx(GLenum pname, GLfixed param) { brebisGL.brebisLightModelx(pname, param); }
#define glLightModelx brebisLightModelx
BREBIS_FORCE_INLINE void  brebisLightModelxOES(GLenum pname, GLfixed param) { brebisGL.brebisLightModelxOES(pname, param); }
#define glLightModelxOES brebisLightModelxOES
BREBIS_FORCE_INLINE void  brebisLightModelxv(GLenum pname, const GLfixed * param) { brebisGL.brebisLightModelxv(pname, param); }
#define glLightModelxv brebisLightModelxv
BREBIS_FORCE_INLINE void  brebisLightModelxvOES(GLenum pname, const GLfixed * param) { brebisGL.brebisLightModelxvOES(pname, param); }
#define glLightModelxvOES brebisLightModelxvOES
BREBIS_FORCE_INLINE void  brebisLightf(GLenum light, GLenum pname, GLfloat param) { brebisGL.brebisLightf(light, pname, param); }
#define glLightf brebisLightf
BREBIS_FORCE_INLINE void  brebisLightfv(GLenum light, GLenum pname, const GLfloat * params) { brebisGL.brebisLightfv(light, pname, params); }
#define glLightfv brebisLightfv
BREBIS_FORCE_INLINE void  brebisLighti(GLenum light, GLenum pname, GLint param) { brebisGL.brebisLighti(light, pname, param); }
#define glLighti brebisLighti
BREBIS_FORCE_INLINE void  brebisLightiv(GLenum light, GLenum pname, const GLint * params) { brebisGL.brebisLightiv(light, pname, params); }
#define glLightiv brebisLightiv
BREBIS_FORCE_INLINE void  brebisLightx(GLenum light, GLenum pname, GLfixed param) { brebisGL.brebisLightx(light, pname, param); }
#define glLightx brebisLightx
BREBIS_FORCE_INLINE void  brebisLightxOES(GLenum light, GLenum pname, GLfixed param) { brebisGL.brebisLightxOES(light, pname, param); }
#define glLightxOES brebisLightxOES
BREBIS_FORCE_INLINE void  brebisLightxv(GLenum light, GLenum pname, const GLfixed * params) { brebisGL.brebisLightxv(light, pname, params); }
#define glLightxv brebisLightxv
BREBIS_FORCE_INLINE void  brebisLightxvOES(GLenum light, GLenum pname, const GLfixed * params) { brebisGL.brebisLightxvOES(light, pname, params); }
#define glLightxvOES brebisLightxvOES
BREBIS_FORCE_INLINE void  brebisLineStipple(GLint factor, GLushort pattern) { brebisGL.brebisLineStipple(factor, pattern); }
#define glLineStipple brebisLineStipple
BREBIS_FORCE_INLINE void  brebisLineWidth(GLfloat width) { brebisGL.brebisLineWidth(width); }
#define glLineWidth brebisLineWidth
BREBIS_FORCE_INLINE void  brebisLineWidthx(GLfixed width) { brebisGL.brebisLineWidthx(width); }
#define glLineWidthx brebisLineWidthx
BREBIS_FORCE_INLINE void  brebisLineWidthxOES(GLfixed width) { brebisGL.brebisLineWidthxOES(width); }
#define glLineWidthxOES brebisLineWidthxOES
BREBIS_FORCE_INLINE void  brebisLinkProgram(GLuint program) { brebisGL.brebisLinkProgram(program); }
#define glLinkProgram brebisLinkProgram
BREBIS_FORCE_INLINE void  brebisLinkProgramARB(GLhandleARB programObj) { brebisGL.brebisLinkProgramARB(programObj); }
#define glLinkProgramARB brebisLinkProgramARB
BREBIS_FORCE_INLINE void  brebisListBase(GLuint base) { brebisGL.brebisListBase(base); }
#define glListBase brebisListBase
BREBIS_FORCE_INLINE void  brebisListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { brebisGL.brebisListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count); }
#define glListDrawCommandsStatesClientNV brebisListDrawCommandsStatesClientNV
BREBIS_FORCE_INLINE void  brebisListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) { brebisGL.brebisListParameterfSGIX(list, pname, param); }
#define glListParameterfSGIX brebisListParameterfSGIX
BREBIS_FORCE_INLINE void  brebisListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat * params) { brebisGL.brebisListParameterfvSGIX(list, pname, params); }
#define glListParameterfvSGIX brebisListParameterfvSGIX
BREBIS_FORCE_INLINE void  brebisListParameteriSGIX(GLuint list, GLenum pname, GLint param) { brebisGL.brebisListParameteriSGIX(list, pname, param); }
#define glListParameteriSGIX brebisListParameteriSGIX
BREBIS_FORCE_INLINE void  brebisListParameterivSGIX(GLuint list, GLenum pname, const GLint * params) { brebisGL.brebisListParameterivSGIX(list, pname, params); }
#define glListParameterivSGIX brebisListParameterivSGIX
BREBIS_FORCE_INLINE void  brebisLoadIdentity(void) { brebisGL.brebisLoadIdentity(); }
#define glLoadIdentity brebisLoadIdentity
BREBIS_FORCE_INLINE void  brebisLoadIdentityDeformationMapSGIX(GLbitfield mask) { brebisGL.brebisLoadIdentityDeformationMapSGIX(mask); }
#define glLoadIdentityDeformationMapSGIX brebisLoadIdentityDeformationMapSGIX
BREBIS_FORCE_INLINE void  brebisLoadMatrixd(const GLdouble * m) { brebisGL.brebisLoadMatrixd(m); }
#define glLoadMatrixd brebisLoadMatrixd
BREBIS_FORCE_INLINE void  brebisLoadMatrixf(const GLfloat * m) { brebisGL.brebisLoadMatrixf(m); }
#define glLoadMatrixf brebisLoadMatrixf
BREBIS_FORCE_INLINE void  brebisLoadMatrixx(const GLfixed * m) { brebisGL.brebisLoadMatrixx(m); }
#define glLoadMatrixx brebisLoadMatrixx
BREBIS_FORCE_INLINE void  brebisLoadMatrixxOES(const GLfixed * m) { brebisGL.brebisLoadMatrixxOES(m); }
#define glLoadMatrixxOES brebisLoadMatrixxOES
BREBIS_FORCE_INLINE void  brebisLoadName(GLuint name) { brebisGL.brebisLoadName(name); }
#define glLoadName brebisLoadName
BREBIS_FORCE_INLINE void  brebisLoadPaletteFromModelViewMatrixOES(void) { brebisGL.brebisLoadPaletteFromModelViewMatrixOES(); }
#define glLoadPaletteFromModelViewMatrixOES brebisLoadPaletteFromModelViewMatrixOES
BREBIS_FORCE_INLINE void  brebisLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program) { brebisGL.brebisLoadProgramNV(target, id, len, program); }
#define glLoadProgramNV brebisLoadProgramNV
BREBIS_FORCE_INLINE void  brebisLoadTransposeMatrixd(const GLdouble * m) { brebisGL.brebisLoadTransposeMatrixd(m); }
#define glLoadTransposeMatrixd brebisLoadTransposeMatrixd
BREBIS_FORCE_INLINE void  brebisLoadTransposeMatrixdARB(const GLdouble * m) { brebisGL.brebisLoadTransposeMatrixdARB(m); }
#define glLoadTransposeMatrixdARB brebisLoadTransposeMatrixdARB
BREBIS_FORCE_INLINE void  brebisLoadTransposeMatrixf(const GLfloat * m) { brebisGL.brebisLoadTransposeMatrixf(m); }
#define glLoadTransposeMatrixf brebisLoadTransposeMatrixf
BREBIS_FORCE_INLINE void  brebisLoadTransposeMatrixfARB(const GLfloat * m) { brebisGL.brebisLoadTransposeMatrixfARB(m); }
#define glLoadTransposeMatrixfARB brebisLoadTransposeMatrixfARB
BREBIS_FORCE_INLINE void  brebisLoadTransposeMatrixxOES(const GLfixed * m) { brebisGL.brebisLoadTransposeMatrixxOES(m); }
#define glLoadTransposeMatrixxOES brebisLoadTransposeMatrixxOES
BREBIS_FORCE_INLINE void  brebisLockArraysEXT(GLint first, GLsizei count) { brebisGL.brebisLockArraysEXT(first, count); }
#define glLockArraysEXT brebisLockArraysEXT
BREBIS_FORCE_INLINE void  brebisLogicOp(GLenum opcode) { brebisGL.brebisLogicOp(opcode); }
#define glLogicOp brebisLogicOp
BREBIS_FORCE_INLINE void  brebisMakeBufferNonResidentNV(GLenum target) { brebisGL.brebisMakeBufferNonResidentNV(target); }
#define glMakeBufferNonResidentNV brebisMakeBufferNonResidentNV
BREBIS_FORCE_INLINE void  brebisMakeBufferResidentNV(GLenum target, GLenum access) { brebisGL.brebisMakeBufferResidentNV(target, access); }
#define glMakeBufferResidentNV brebisMakeBufferResidentNV
BREBIS_FORCE_INLINE void  brebisMakeImageHandleNonResidentARB(GLuint64 handle) { brebisGL.brebisMakeImageHandleNonResidentARB(handle); }
#define glMakeImageHandleNonResidentARB brebisMakeImageHandleNonResidentARB
BREBIS_FORCE_INLINE void  brebisMakeImageHandleNonResidentNV(GLuint64 handle) { brebisGL.brebisMakeImageHandleNonResidentNV(handle); }
#define glMakeImageHandleNonResidentNV brebisMakeImageHandleNonResidentNV
BREBIS_FORCE_INLINE void  brebisMakeImageHandleResidentARB(GLuint64 handle, GLenum access) { brebisGL.brebisMakeImageHandleResidentARB(handle, access); }
#define glMakeImageHandleResidentARB brebisMakeImageHandleResidentARB
BREBIS_FORCE_INLINE void  brebisMakeImageHandleResidentNV(GLuint64 handle, GLenum access) { brebisGL.brebisMakeImageHandleResidentNV(handle, access); }
#define glMakeImageHandleResidentNV brebisMakeImageHandleResidentNV
BREBIS_FORCE_INLINE void  brebisMakeNamedBufferNonResidentNV(GLuint buffer) { brebisGL.brebisMakeNamedBufferNonResidentNV(buffer); }
#define glMakeNamedBufferNonResidentNV brebisMakeNamedBufferNonResidentNV
BREBIS_FORCE_INLINE void  brebisMakeNamedBufferResidentNV(GLuint buffer, GLenum access) { brebisGL.brebisMakeNamedBufferResidentNV(buffer, access); }
#define glMakeNamedBufferResidentNV brebisMakeNamedBufferResidentNV
BREBIS_FORCE_INLINE void  brebisMakeTextureHandleNonResidentARB(GLuint64 handle) { brebisGL.brebisMakeTextureHandleNonResidentARB(handle); }
#define glMakeTextureHandleNonResidentARB brebisMakeTextureHandleNonResidentARB
BREBIS_FORCE_INLINE void  brebisMakeTextureHandleNonResidentNV(GLuint64 handle) { brebisGL.brebisMakeTextureHandleNonResidentNV(handle); }
#define glMakeTextureHandleNonResidentNV brebisMakeTextureHandleNonResidentNV
BREBIS_FORCE_INLINE void  brebisMakeTextureHandleResidentARB(GLuint64 handle) { brebisGL.brebisMakeTextureHandleResidentARB(handle); }
#define glMakeTextureHandleResidentARB brebisMakeTextureHandleResidentARB
BREBIS_FORCE_INLINE void  brebisMakeTextureHandleResidentNV(GLuint64 handle) { brebisGL.brebisMakeTextureHandleResidentNV(handle); }
#define glMakeTextureHandleResidentNV brebisMakeTextureHandleResidentNV
BREBIS_FORCE_INLINE void  brebisMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { brebisGL.brebisMap1d(target, u1, u2, stride, order, points); }
#define glMap1d brebisMap1d
BREBIS_FORCE_INLINE void  brebisMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { brebisGL.brebisMap1f(target, u1, u2, stride, order, points); }
#define glMap1f brebisMap1f
BREBIS_FORCE_INLINE void  brebisMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) { brebisGL.brebisMap1xOES(target, u1, u2, stride, order, points); }
#define glMap1xOES brebisMap1xOES
BREBIS_FORCE_INLINE void  brebisMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { brebisGL.brebisMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMap2d brebisMap2d
BREBIS_FORCE_INLINE void  brebisMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { brebisGL.brebisMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMap2f brebisMap2f
BREBIS_FORCE_INLINE void  brebisMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) { brebisGL.brebisMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMap2xOES brebisMap2xOES
BREBIS_FORCE_INLINE void * brebisMapBuffer(GLenum target, GLenum access) { return brebisGL.brebisMapBuffer(target, access); }
#define glMapBuffer brebisMapBuffer
BREBIS_FORCE_INLINE void * brebisMapBufferARB(GLenum target, GLenum access) { return brebisGL.brebisMapBufferARB(target, access); }
#define glMapBufferARB brebisMapBufferARB
BREBIS_FORCE_INLINE void * brebisMapBufferOES(GLenum target, GLenum access) { return brebisGL.brebisMapBufferOES(target, access); }
#define glMapBufferOES brebisMapBufferOES
BREBIS_FORCE_INLINE void * brebisMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return brebisGL.brebisMapBufferRange(target, offset, length, access); }
#define glMapBufferRange brebisMapBufferRange
BREBIS_FORCE_INLINE void * brebisMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return brebisGL.brebisMapBufferRangeEXT(target, offset, length, access); }
#define glMapBufferRangeEXT brebisMapBufferRangeEXT
BREBIS_FORCE_INLINE void  brebisMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points) { brebisGL.brebisMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points); }
#define glMapControlPointsNV brebisMapControlPointsNV
BREBIS_FORCE_INLINE void  brebisMapGrid1d(GLint un, GLdouble u1, GLdouble u2) { brebisGL.brebisMapGrid1d(un, u1, u2); }
#define glMapGrid1d brebisMapGrid1d
BREBIS_FORCE_INLINE void  brebisMapGrid1f(GLint un, GLfloat u1, GLfloat u2) { brebisGL.brebisMapGrid1f(un, u1, u2); }
#define glMapGrid1f brebisMapGrid1f
BREBIS_FORCE_INLINE void  brebisMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2) { brebisGL.brebisMapGrid1xOES(n, u1, u2); }
#define glMapGrid1xOES brebisMapGrid1xOES
BREBIS_FORCE_INLINE void  brebisMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) { brebisGL.brebisMapGrid2d(un, u1, u2, vn, v1, v2); }
#define glMapGrid2d brebisMapGrid2d
BREBIS_FORCE_INLINE void  brebisMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) { brebisGL.brebisMapGrid2f(un, u1, u2, vn, v1, v2); }
#define glMapGrid2f brebisMapGrid2f
BREBIS_FORCE_INLINE void  brebisMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) { brebisGL.brebisMapGrid2xOES(n, u1, u2, v1, v2); }
#define glMapGrid2xOES brebisMapGrid2xOES
BREBIS_FORCE_INLINE void * brebisMapNamedBuffer(GLuint buffer, GLenum access) { return brebisGL.brebisMapNamedBuffer(buffer, access); }
#define glMapNamedBuffer brebisMapNamedBuffer
BREBIS_FORCE_INLINE void * brebisMapNamedBufferEXT(GLuint buffer, GLenum access) { return brebisGL.brebisMapNamedBufferEXT(buffer, access); }
#define glMapNamedBufferEXT brebisMapNamedBufferEXT
BREBIS_FORCE_INLINE void * brebisMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return brebisGL.brebisMapNamedBufferRange(buffer, offset, length, access); }
#define glMapNamedBufferRange brebisMapNamedBufferRange
BREBIS_FORCE_INLINE void * brebisMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return brebisGL.brebisMapNamedBufferRangeEXT(buffer, offset, length, access); }
#define glMapNamedBufferRangeEXT brebisMapNamedBufferRangeEXT
BREBIS_FORCE_INLINE void * brebisMapObjectBufferATI(GLuint buffer) { return brebisGL.brebisMapObjectBufferATI(buffer); }
#define glMapObjectBufferATI brebisMapObjectBufferATI
BREBIS_FORCE_INLINE void  brebisMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisMapParameterfvNV(target, pname, params); }
#define glMapParameterfvNV brebisMapParameterfvNV
BREBIS_FORCE_INLINE void  brebisMapParameterivNV(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisMapParameterivNV(target, pname, params); }
#define glMapParameterivNV brebisMapParameterivNV
BREBIS_FORCE_INLINE void * brebisMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout) { return brebisGL.brebisMapTexture2DINTEL(texture, level, access, stride, layout); }
#define glMapTexture2DINTEL brebisMapTexture2DINTEL
BREBIS_FORCE_INLINE void  brebisMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { brebisGL.brebisMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points); }
#define glMapVertexAttrib1dAPPLE brebisMapVertexAttrib1dAPPLE
BREBIS_FORCE_INLINE void  brebisMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { brebisGL.brebisMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points); }
#define glMapVertexAttrib1fAPPLE brebisMapVertexAttrib1fAPPLE
BREBIS_FORCE_INLINE void  brebisMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { brebisGL.brebisMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMapVertexAttrib2dAPPLE brebisMapVertexAttrib2dAPPLE
BREBIS_FORCE_INLINE void  brebisMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { brebisGL.brebisMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
#define glMapVertexAttrib2fAPPLE brebisMapVertexAttrib2fAPPLE
BREBIS_FORCE_INLINE void  brebisMaterialf(GLenum face, GLenum pname, GLfloat param) { brebisGL.brebisMaterialf(face, pname, param); }
#define glMaterialf brebisMaterialf
BREBIS_FORCE_INLINE void  brebisMaterialfv(GLenum face, GLenum pname, const GLfloat * params) { brebisGL.brebisMaterialfv(face, pname, params); }
#define glMaterialfv brebisMaterialfv
BREBIS_FORCE_INLINE void  brebisMateriali(GLenum face, GLenum pname, GLint param) { brebisGL.brebisMateriali(face, pname, param); }
#define glMateriali brebisMateriali
BREBIS_FORCE_INLINE void  brebisMaterialiv(GLenum face, GLenum pname, const GLint * params) { brebisGL.brebisMaterialiv(face, pname, params); }
#define glMaterialiv brebisMaterialiv
BREBIS_FORCE_INLINE void  brebisMaterialx(GLenum face, GLenum pname, GLfixed param) { brebisGL.brebisMaterialx(face, pname, param); }
#define glMaterialx brebisMaterialx
BREBIS_FORCE_INLINE void  brebisMaterialxOES(GLenum face, GLenum pname, GLfixed param) { brebisGL.brebisMaterialxOES(face, pname, param); }
#define glMaterialxOES brebisMaterialxOES
BREBIS_FORCE_INLINE void  brebisMaterialxv(GLenum face, GLenum pname, const GLfixed * param) { brebisGL.brebisMaterialxv(face, pname, param); }
#define glMaterialxv brebisMaterialxv
BREBIS_FORCE_INLINE void  brebisMaterialxvOES(GLenum face, GLenum pname, const GLfixed * param) { brebisGL.brebisMaterialxvOES(face, pname, param); }
#define glMaterialxvOES brebisMaterialxvOES
BREBIS_FORCE_INLINE void  brebisMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { brebisGL.brebisMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar); }
#define glMatrixFrustumEXT brebisMatrixFrustumEXT
BREBIS_FORCE_INLINE void  brebisMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisMatrixIndexPointerARB(size, type, stride, pointer); }
#define glMatrixIndexPointerARB brebisMatrixIndexPointerARB
BREBIS_FORCE_INLINE void  brebisMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisMatrixIndexPointerOES(size, type, stride, pointer); }
#define glMatrixIndexPointerOES brebisMatrixIndexPointerOES
BREBIS_FORCE_INLINE void  brebisMatrixIndexubvARB(GLint size, const GLubyte * indices) { brebisGL.brebisMatrixIndexubvARB(size, indices); }
#define glMatrixIndexubvARB brebisMatrixIndexubvARB
BREBIS_FORCE_INLINE void  brebisMatrixIndexuivARB(GLint size, const GLuint * indices) { brebisGL.brebisMatrixIndexuivARB(size, indices); }
#define glMatrixIndexuivARB brebisMatrixIndexuivARB
BREBIS_FORCE_INLINE void  brebisMatrixIndexusvARB(GLint size, const GLushort * indices) { brebisGL.brebisMatrixIndexusvARB(size, indices); }
#define glMatrixIndexusvARB brebisMatrixIndexusvARB
BREBIS_FORCE_INLINE void  brebisMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat * m) { brebisGL.brebisMatrixLoad3x2fNV(matrixMode, m); }
#define glMatrixLoad3x2fNV brebisMatrixLoad3x2fNV
BREBIS_FORCE_INLINE void  brebisMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat * m) { brebisGL.brebisMatrixLoad3x3fNV(matrixMode, m); }
#define glMatrixLoad3x3fNV brebisMatrixLoad3x3fNV
BREBIS_FORCE_INLINE void  brebisMatrixLoadIdentityEXT(GLenum mode) { brebisGL.brebisMatrixLoadIdentityEXT(mode); }
#define glMatrixLoadIdentityEXT brebisMatrixLoadIdentityEXT
BREBIS_FORCE_INLINE void  brebisMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { brebisGL.brebisMatrixLoadTranspose3x3fNV(matrixMode, m); }
#define glMatrixLoadTranspose3x3fNV brebisMatrixLoadTranspose3x3fNV
BREBIS_FORCE_INLINE void  brebisMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m) { brebisGL.brebisMatrixLoadTransposedEXT(mode, m); }
#define glMatrixLoadTransposedEXT brebisMatrixLoadTransposedEXT
BREBIS_FORCE_INLINE void  brebisMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m) { brebisGL.brebisMatrixLoadTransposefEXT(mode, m); }
#define glMatrixLoadTransposefEXT brebisMatrixLoadTransposefEXT
BREBIS_FORCE_INLINE void  brebisMatrixLoaddEXT(GLenum mode, const GLdouble * m) { brebisGL.brebisMatrixLoaddEXT(mode, m); }
#define glMatrixLoaddEXT brebisMatrixLoaddEXT
BREBIS_FORCE_INLINE void  brebisMatrixLoadfEXT(GLenum mode, const GLfloat * m) { brebisGL.brebisMatrixLoadfEXT(mode, m); }
#define glMatrixLoadfEXT brebisMatrixLoadfEXT
BREBIS_FORCE_INLINE void  brebisMatrixMode(GLenum mode) { brebisGL.brebisMatrixMode(mode); }
#define glMatrixMode brebisMatrixMode
BREBIS_FORCE_INLINE void  brebisMatrixMult3x2fNV(GLenum matrixMode, const GLfloat * m) { brebisGL.brebisMatrixMult3x2fNV(matrixMode, m); }
#define glMatrixMult3x2fNV brebisMatrixMult3x2fNV
BREBIS_FORCE_INLINE void  brebisMatrixMult3x3fNV(GLenum matrixMode, const GLfloat * m) { brebisGL.brebisMatrixMult3x3fNV(matrixMode, m); }
#define glMatrixMult3x3fNV brebisMatrixMult3x3fNV
BREBIS_FORCE_INLINE void  brebisMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { brebisGL.brebisMatrixMultTranspose3x3fNV(matrixMode, m); }
#define glMatrixMultTranspose3x3fNV brebisMatrixMultTranspose3x3fNV
BREBIS_FORCE_INLINE void  brebisMatrixMultTransposedEXT(GLenum mode, const GLdouble * m) { brebisGL.brebisMatrixMultTransposedEXT(mode, m); }
#define glMatrixMultTransposedEXT brebisMatrixMultTransposedEXT
BREBIS_FORCE_INLINE void  brebisMatrixMultTransposefEXT(GLenum mode, const GLfloat * m) { brebisGL.brebisMatrixMultTransposefEXT(mode, m); }
#define glMatrixMultTransposefEXT brebisMatrixMultTransposefEXT
BREBIS_FORCE_INLINE void  brebisMatrixMultdEXT(GLenum mode, const GLdouble * m) { brebisGL.brebisMatrixMultdEXT(mode, m); }
#define glMatrixMultdEXT brebisMatrixMultdEXT
BREBIS_FORCE_INLINE void  brebisMatrixMultfEXT(GLenum mode, const GLfloat * m) { brebisGL.brebisMatrixMultfEXT(mode, m); }
#define glMatrixMultfEXT brebisMatrixMultfEXT
BREBIS_FORCE_INLINE void  brebisMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { brebisGL.brebisMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar); }
#define glMatrixOrthoEXT brebisMatrixOrthoEXT
BREBIS_FORCE_INLINE void  brebisMatrixPopEXT(GLenum mode) { brebisGL.brebisMatrixPopEXT(mode); }
#define glMatrixPopEXT brebisMatrixPopEXT
BREBIS_FORCE_INLINE void  brebisMatrixPushEXT(GLenum mode) { brebisGL.brebisMatrixPushEXT(mode); }
#define glMatrixPushEXT brebisMatrixPushEXT
BREBIS_FORCE_INLINE void  brebisMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisMatrixRotatedEXT(mode, angle, x, y, z); }
#define glMatrixRotatedEXT brebisMatrixRotatedEXT
BREBIS_FORCE_INLINE void  brebisMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisMatrixRotatefEXT(mode, angle, x, y, z); }
#define glMatrixRotatefEXT brebisMatrixRotatefEXT
BREBIS_FORCE_INLINE void  brebisMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisMatrixScaledEXT(mode, x, y, z); }
#define glMatrixScaledEXT brebisMatrixScaledEXT
BREBIS_FORCE_INLINE void  brebisMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisMatrixScalefEXT(mode, x, y, z); }
#define glMatrixScalefEXT brebisMatrixScalefEXT
BREBIS_FORCE_INLINE void  brebisMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisMatrixTranslatedEXT(mode, x, y, z); }
#define glMatrixTranslatedEXT brebisMatrixTranslatedEXT
BREBIS_FORCE_INLINE void  brebisMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisMatrixTranslatefEXT(mode, x, y, z); }
#define glMatrixTranslatefEXT brebisMatrixTranslatefEXT
BREBIS_FORCE_INLINE void  brebisMaxShaderCompilerThreadsARB(GLuint count) { brebisGL.brebisMaxShaderCompilerThreadsARB(count); }
#define glMaxShaderCompilerThreadsARB brebisMaxShaderCompilerThreadsARB
BREBIS_FORCE_INLINE void  brebisMaxShaderCompilerThreadsKHR(GLuint count) { brebisGL.brebisMaxShaderCompilerThreadsKHR(count); }
#define glMaxShaderCompilerThreadsKHR brebisMaxShaderCompilerThreadsKHR
BREBIS_FORCE_INLINE void  brebisMemoryBarrier(GLbitfield barriers) { brebisGL.brebisMemoryBarrier(barriers); }
#define glMemoryBarrier brebisMemoryBarrier
BREBIS_FORCE_INLINE void  brebisMemoryBarrierByRegion(GLbitfield barriers) { brebisGL.brebisMemoryBarrierByRegion(barriers); }
#define glMemoryBarrierByRegion brebisMemoryBarrierByRegion
BREBIS_FORCE_INLINE void  brebisMemoryBarrierEXT(GLbitfield barriers) { brebisGL.brebisMemoryBarrierEXT(barriers); }
#define glMemoryBarrierEXT brebisMemoryBarrierEXT
BREBIS_FORCE_INLINE void  brebisMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint * params) { brebisGL.brebisMemoryObjectParameterivEXT(memoryObject, pname, params); }
#define glMemoryObjectParameterivEXT brebisMemoryObjectParameterivEXT
BREBIS_FORCE_INLINE void  brebisMinSampleShading(GLfloat value) { brebisGL.brebisMinSampleShading(value); }
#define glMinSampleShading brebisMinSampleShading
BREBIS_FORCE_INLINE void  brebisMinSampleShadingARB(GLfloat value) { brebisGL.brebisMinSampleShadingARB(value); }
#define glMinSampleShadingARB brebisMinSampleShadingARB
BREBIS_FORCE_INLINE void  brebisMinSampleShadingOES(GLfloat value) { brebisGL.brebisMinSampleShadingOES(value); }
#define glMinSampleShadingOES brebisMinSampleShadingOES
BREBIS_FORCE_INLINE void  brebisMinmax(GLenum target, GLenum internalformat, GLboolean sink) { brebisGL.brebisMinmax(target, internalformat, sink); }
#define glMinmax brebisMinmax
BREBIS_FORCE_INLINE void  brebisMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) { brebisGL.brebisMinmaxEXT(target, internalformat, sink); }
#define glMinmaxEXT brebisMinmaxEXT
BREBIS_FORCE_INLINE void  brebisMultMatrixd(const GLdouble * m) { brebisGL.brebisMultMatrixd(m); }
#define glMultMatrixd brebisMultMatrixd
BREBIS_FORCE_INLINE void  brebisMultMatrixf(const GLfloat * m) { brebisGL.brebisMultMatrixf(m); }
#define glMultMatrixf brebisMultMatrixf
BREBIS_FORCE_INLINE void  brebisMultMatrixx(const GLfixed * m) { brebisGL.brebisMultMatrixx(m); }
#define glMultMatrixx brebisMultMatrixx
BREBIS_FORCE_INLINE void  brebisMultMatrixxOES(const GLfixed * m) { brebisGL.brebisMultMatrixxOES(m); }
#define glMultMatrixxOES brebisMultMatrixxOES
BREBIS_FORCE_INLINE void  brebisMultTransposeMatrixd(const GLdouble * m) { brebisGL.brebisMultTransposeMatrixd(m); }
#define glMultTransposeMatrixd brebisMultTransposeMatrixd
BREBIS_FORCE_INLINE void  brebisMultTransposeMatrixdARB(const GLdouble * m) { brebisGL.brebisMultTransposeMatrixdARB(m); }
#define glMultTransposeMatrixdARB brebisMultTransposeMatrixdARB
BREBIS_FORCE_INLINE void  brebisMultTransposeMatrixf(const GLfloat * m) { brebisGL.brebisMultTransposeMatrixf(m); }
#define glMultTransposeMatrixf brebisMultTransposeMatrixf
BREBIS_FORCE_INLINE void  brebisMultTransposeMatrixfARB(const GLfloat * m) { brebisGL.brebisMultTransposeMatrixfARB(m); }
#define glMultTransposeMatrixfARB brebisMultTransposeMatrixfARB
BREBIS_FORCE_INLINE void  brebisMultTransposeMatrixxOES(const GLfixed * m) { brebisGL.brebisMultTransposeMatrixxOES(m); }
#define glMultTransposeMatrixxOES brebisMultTransposeMatrixxOES
BREBIS_FORCE_INLINE void  brebisMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) { brebisGL.brebisMultiDrawArrays(mode, first, count, drawcount); }
#define glMultiDrawArrays brebisMultiDrawArrays
BREBIS_FORCE_INLINE void  brebisMultiDrawArraysEXT(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { brebisGL.brebisMultiDrawArraysEXT(mode, first, count, primcount); }
#define glMultiDrawArraysEXT brebisMultiDrawArraysEXT
BREBIS_FORCE_INLINE void  brebisMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { brebisGL.brebisMultiDrawArraysIndirect(mode, indirect, drawcount, stride); }
#define glMultiDrawArraysIndirect brebisMultiDrawArraysIndirect
BREBIS_FORCE_INLINE void  brebisMultiDrawArraysIndirectAMD(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride) { brebisGL.brebisMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride); }
#define glMultiDrawArraysIndirectAMD brebisMultiDrawArraysIndirectAMD
BREBIS_FORCE_INLINE void  brebisMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { brebisGL.brebisMultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
#define glMultiDrawArraysIndirectBindlessCountNV brebisMultiDrawArraysIndirectBindlessCountNV
BREBIS_FORCE_INLINE void  brebisMultiDrawArraysIndirectBindlessNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { brebisGL.brebisMultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount); }
#define glMultiDrawArraysIndirectBindlessNV brebisMultiDrawArraysIndirectBindlessNV
BREBIS_FORCE_INLINE void  brebisMultiDrawArraysIndirectCount(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { brebisGL.brebisMultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawArraysIndirectCount brebisMultiDrawArraysIndirectCount
BREBIS_FORCE_INLINE void  brebisMultiDrawArraysIndirectCountARB(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { brebisGL.brebisMultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawArraysIndirectCountARB brebisMultiDrawArraysIndirectCountARB
BREBIS_FORCE_INLINE void  brebisMultiDrawArraysIndirectEXT(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { brebisGL.brebisMultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride); }
#define glMultiDrawArraysIndirectEXT brebisMultiDrawArraysIndirectEXT
BREBIS_FORCE_INLINE void  brebisMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { brebisGL.brebisMultiDrawElementArrayAPPLE(mode, first, count, primcount); }
#define glMultiDrawElementArrayAPPLE brebisMultiDrawElementArrayAPPLE
BREBIS_FORCE_INLINE void  brebisMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) { brebisGL.brebisMultiDrawElements(mode, count, type, indices, drawcount); }
#define glMultiDrawElements brebisMultiDrawElements
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) { brebisGL.brebisMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex); }
#define glMultiDrawElementsBaseVertex brebisMultiDrawElementsBaseVertex
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex) { brebisGL.brebisMultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex); }
#define glMultiDrawElementsBaseVertexEXT brebisMultiDrawElementsBaseVertexEXT
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount) { brebisGL.brebisMultiDrawElementsEXT(mode, count, type, indices, primcount); }
#define glMultiDrawElementsEXT brebisMultiDrawElementsEXT
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { brebisGL.brebisMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride); }
#define glMultiDrawElementsIndirect brebisMultiDrawElementsIndirect
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride) { brebisGL.brebisMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride); }
#define glMultiDrawElementsIndirectAMD brebisMultiDrawElementsIndirectAMD
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { brebisGL.brebisMultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
#define glMultiDrawElementsIndirectBindlessCountNV brebisMultiDrawElementsIndirectBindlessCountNV
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { brebisGL.brebisMultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount); }
#define glMultiDrawElementsIndirectBindlessNV brebisMultiDrawElementsIndirectBindlessNV
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { brebisGL.brebisMultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawElementsIndirectCount brebisMultiDrawElementsIndirectCount
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { brebisGL.brebisMultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawElementsIndirectCountARB brebisMultiDrawElementsIndirectCountARB
BREBIS_FORCE_INLINE void  brebisMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { brebisGL.brebisMultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride); }
#define glMultiDrawElementsIndirectEXT brebisMultiDrawElementsIndirectEXT
BREBIS_FORCE_INLINE void  brebisMultiDrawMeshTasksIndirectCountNV(GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { brebisGL.brebisMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride); }
#define glMultiDrawMeshTasksIndirectCountNV brebisMultiDrawMeshTasksIndirectCountNV
BREBIS_FORCE_INLINE void  brebisMultiDrawMeshTasksIndirectNV(GLintptr indirect, GLsizei drawcount, GLsizei stride) { brebisGL.brebisMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride); }
#define glMultiDrawMeshTasksIndirectNV brebisMultiDrawMeshTasksIndirectNV
BREBIS_FORCE_INLINE void  brebisMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount) { brebisGL.brebisMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount); }
#define glMultiDrawRangeElementArrayAPPLE brebisMultiDrawRangeElementArrayAPPLE
BREBIS_FORCE_INLINE void  brebisMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride) { brebisGL.brebisMultiModeDrawArraysIBM(mode, first, count, primcount, modestride); }
#define glMultiModeDrawArraysIBM brebisMultiModeDrawArraysIBM
BREBIS_FORCE_INLINE void  brebisMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride) { brebisGL.brebisMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride); }
#define glMultiModeDrawElementsIBM brebisMultiModeDrawElementsIBM
BREBIS_FORCE_INLINE void  brebisMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) { brebisGL.brebisMultiTexBufferEXT(texunit, target, internalformat, buffer); }
#define glMultiTexBufferEXT brebisMultiTexBufferEXT
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1bOES(GLenum texture, GLbyte s) { brebisGL.brebisMultiTexCoord1bOES(texture, s); }
#define glMultiTexCoord1bOES brebisMultiTexCoord1bOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1bvOES(GLenum texture, const GLbyte * coords) { brebisGL.brebisMultiTexCoord1bvOES(texture, coords); }
#define glMultiTexCoord1bvOES brebisMultiTexCoord1bvOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1d(GLenum target, GLdouble s) { brebisGL.brebisMultiTexCoord1d(target, s); }
#define glMultiTexCoord1d brebisMultiTexCoord1d
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1dARB(GLenum target, GLdouble s) { brebisGL.brebisMultiTexCoord1dARB(target, s); }
#define glMultiTexCoord1dARB brebisMultiTexCoord1dARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1dv(GLenum target, const GLdouble * v) { brebisGL.brebisMultiTexCoord1dv(target, v); }
#define glMultiTexCoord1dv brebisMultiTexCoord1dv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1dvARB(GLenum target, const GLdouble * v) { brebisGL.brebisMultiTexCoord1dvARB(target, v); }
#define glMultiTexCoord1dvARB brebisMultiTexCoord1dvARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1f(GLenum target, GLfloat s) { brebisGL.brebisMultiTexCoord1f(target, s); }
#define glMultiTexCoord1f brebisMultiTexCoord1f
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1fARB(GLenum target, GLfloat s) { brebisGL.brebisMultiTexCoord1fARB(target, s); }
#define glMultiTexCoord1fARB brebisMultiTexCoord1fARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1fv(GLenum target, const GLfloat * v) { brebisGL.brebisMultiTexCoord1fv(target, v); }
#define glMultiTexCoord1fv brebisMultiTexCoord1fv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1fvARB(GLenum target, const GLfloat * v) { brebisGL.brebisMultiTexCoord1fvARB(target, v); }
#define glMultiTexCoord1fvARB brebisMultiTexCoord1fvARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1hNV(GLenum target, GLhalfNV s) { brebisGL.brebisMultiTexCoord1hNV(target, s); }
#define glMultiTexCoord1hNV brebisMultiTexCoord1hNV
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1hvNV(GLenum target, const GLhalfNV * v) { brebisGL.brebisMultiTexCoord1hvNV(target, v); }
#define glMultiTexCoord1hvNV brebisMultiTexCoord1hvNV
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1i(GLenum target, GLint s) { brebisGL.brebisMultiTexCoord1i(target, s); }
#define glMultiTexCoord1i brebisMultiTexCoord1i
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1iARB(GLenum target, GLint s) { brebisGL.brebisMultiTexCoord1iARB(target, s); }
#define glMultiTexCoord1iARB brebisMultiTexCoord1iARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1iv(GLenum target, const GLint * v) { brebisGL.brebisMultiTexCoord1iv(target, v); }
#define glMultiTexCoord1iv brebisMultiTexCoord1iv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1ivARB(GLenum target, const GLint * v) { brebisGL.brebisMultiTexCoord1ivARB(target, v); }
#define glMultiTexCoord1ivARB brebisMultiTexCoord1ivARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1s(GLenum target, GLshort s) { brebisGL.brebisMultiTexCoord1s(target, s); }
#define glMultiTexCoord1s brebisMultiTexCoord1s
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1sARB(GLenum target, GLshort s) { brebisGL.brebisMultiTexCoord1sARB(target, s); }
#define glMultiTexCoord1sARB brebisMultiTexCoord1sARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1sv(GLenum target, const GLshort * v) { brebisGL.brebisMultiTexCoord1sv(target, v); }
#define glMultiTexCoord1sv brebisMultiTexCoord1sv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1svARB(GLenum target, const GLshort * v) { brebisGL.brebisMultiTexCoord1svARB(target, v); }
#define glMultiTexCoord1svARB brebisMultiTexCoord1svARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1xOES(GLenum texture, GLfixed s) { brebisGL.brebisMultiTexCoord1xOES(texture, s); }
#define glMultiTexCoord1xOES brebisMultiTexCoord1xOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord1xvOES(GLenum texture, const GLfixed * coords) { brebisGL.brebisMultiTexCoord1xvOES(texture, coords); }
#define glMultiTexCoord1xvOES brebisMultiTexCoord1xvOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t) { brebisGL.brebisMultiTexCoord2bOES(texture, s, t); }
#define glMultiTexCoord2bOES brebisMultiTexCoord2bOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2bvOES(GLenum texture, const GLbyte * coords) { brebisGL.brebisMultiTexCoord2bvOES(texture, coords); }
#define glMultiTexCoord2bvOES brebisMultiTexCoord2bvOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) { brebisGL.brebisMultiTexCoord2d(target, s, t); }
#define glMultiTexCoord2d brebisMultiTexCoord2d
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) { brebisGL.brebisMultiTexCoord2dARB(target, s, t); }
#define glMultiTexCoord2dARB brebisMultiTexCoord2dARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2dv(GLenum target, const GLdouble * v) { brebisGL.brebisMultiTexCoord2dv(target, v); }
#define glMultiTexCoord2dv brebisMultiTexCoord2dv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2dvARB(GLenum target, const GLdouble * v) { brebisGL.brebisMultiTexCoord2dvARB(target, v); }
#define glMultiTexCoord2dvARB brebisMultiTexCoord2dvARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) { brebisGL.brebisMultiTexCoord2f(target, s, t); }
#define glMultiTexCoord2f brebisMultiTexCoord2f
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) { brebisGL.brebisMultiTexCoord2fARB(target, s, t); }
#define glMultiTexCoord2fARB brebisMultiTexCoord2fARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2fv(GLenum target, const GLfloat * v) { brebisGL.brebisMultiTexCoord2fv(target, v); }
#define glMultiTexCoord2fv brebisMultiTexCoord2fv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2fvARB(GLenum target, const GLfloat * v) { brebisGL.brebisMultiTexCoord2fvARB(target, v); }
#define glMultiTexCoord2fvARB brebisMultiTexCoord2fvARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) { brebisGL.brebisMultiTexCoord2hNV(target, s, t); }
#define glMultiTexCoord2hNV brebisMultiTexCoord2hNV
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2hvNV(GLenum target, const GLhalfNV * v) { brebisGL.brebisMultiTexCoord2hvNV(target, v); }
#define glMultiTexCoord2hvNV brebisMultiTexCoord2hvNV
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2i(GLenum target, GLint s, GLint t) { brebisGL.brebisMultiTexCoord2i(target, s, t); }
#define glMultiTexCoord2i brebisMultiTexCoord2i
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2iARB(GLenum target, GLint s, GLint t) { brebisGL.brebisMultiTexCoord2iARB(target, s, t); }
#define glMultiTexCoord2iARB brebisMultiTexCoord2iARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2iv(GLenum target, const GLint * v) { brebisGL.brebisMultiTexCoord2iv(target, v); }
#define glMultiTexCoord2iv brebisMultiTexCoord2iv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2ivARB(GLenum target, const GLint * v) { brebisGL.brebisMultiTexCoord2ivARB(target, v); }
#define glMultiTexCoord2ivARB brebisMultiTexCoord2ivARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2s(GLenum target, GLshort s, GLshort t) { brebisGL.brebisMultiTexCoord2s(target, s, t); }
#define glMultiTexCoord2s brebisMultiTexCoord2s
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) { brebisGL.brebisMultiTexCoord2sARB(target, s, t); }
#define glMultiTexCoord2sARB brebisMultiTexCoord2sARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2sv(GLenum target, const GLshort * v) { brebisGL.brebisMultiTexCoord2sv(target, v); }
#define glMultiTexCoord2sv brebisMultiTexCoord2sv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2svARB(GLenum target, const GLshort * v) { brebisGL.brebisMultiTexCoord2svARB(target, v); }
#define glMultiTexCoord2svARB brebisMultiTexCoord2svARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t) { brebisGL.brebisMultiTexCoord2xOES(texture, s, t); }
#define glMultiTexCoord2xOES brebisMultiTexCoord2xOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord2xvOES(GLenum texture, const GLfixed * coords) { brebisGL.brebisMultiTexCoord2xvOES(texture, coords); }
#define glMultiTexCoord2xvOES brebisMultiTexCoord2xvOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r) { brebisGL.brebisMultiTexCoord3bOES(texture, s, t, r); }
#define glMultiTexCoord3bOES brebisMultiTexCoord3bOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3bvOES(GLenum texture, const GLbyte * coords) { brebisGL.brebisMultiTexCoord3bvOES(texture, coords); }
#define glMultiTexCoord3bvOES brebisMultiTexCoord3bvOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) { brebisGL.brebisMultiTexCoord3d(target, s, t, r); }
#define glMultiTexCoord3d brebisMultiTexCoord3d
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) { brebisGL.brebisMultiTexCoord3dARB(target, s, t, r); }
#define glMultiTexCoord3dARB brebisMultiTexCoord3dARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3dv(GLenum target, const GLdouble * v) { brebisGL.brebisMultiTexCoord3dv(target, v); }
#define glMultiTexCoord3dv brebisMultiTexCoord3dv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3dvARB(GLenum target, const GLdouble * v) { brebisGL.brebisMultiTexCoord3dvARB(target, v); }
#define glMultiTexCoord3dvARB brebisMultiTexCoord3dvARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) { brebisGL.brebisMultiTexCoord3f(target, s, t, r); }
#define glMultiTexCoord3f brebisMultiTexCoord3f
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) { brebisGL.brebisMultiTexCoord3fARB(target, s, t, r); }
#define glMultiTexCoord3fARB brebisMultiTexCoord3fARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3fv(GLenum target, const GLfloat * v) { brebisGL.brebisMultiTexCoord3fv(target, v); }
#define glMultiTexCoord3fv brebisMultiTexCoord3fv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3fvARB(GLenum target, const GLfloat * v) { brebisGL.brebisMultiTexCoord3fvARB(target, v); }
#define glMultiTexCoord3fvARB brebisMultiTexCoord3fvARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) { brebisGL.brebisMultiTexCoord3hNV(target, s, t, r); }
#define glMultiTexCoord3hNV brebisMultiTexCoord3hNV
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3hvNV(GLenum target, const GLhalfNV * v) { brebisGL.brebisMultiTexCoord3hvNV(target, v); }
#define glMultiTexCoord3hvNV brebisMultiTexCoord3hvNV
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) { brebisGL.brebisMultiTexCoord3i(target, s, t, r); }
#define glMultiTexCoord3i brebisMultiTexCoord3i
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) { brebisGL.brebisMultiTexCoord3iARB(target, s, t, r); }
#define glMultiTexCoord3iARB brebisMultiTexCoord3iARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3iv(GLenum target, const GLint * v) { brebisGL.brebisMultiTexCoord3iv(target, v); }
#define glMultiTexCoord3iv brebisMultiTexCoord3iv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3ivARB(GLenum target, const GLint * v) { brebisGL.brebisMultiTexCoord3ivARB(target, v); }
#define glMultiTexCoord3ivARB brebisMultiTexCoord3ivARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) { brebisGL.brebisMultiTexCoord3s(target, s, t, r); }
#define glMultiTexCoord3s brebisMultiTexCoord3s
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) { brebisGL.brebisMultiTexCoord3sARB(target, s, t, r); }
#define glMultiTexCoord3sARB brebisMultiTexCoord3sARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3sv(GLenum target, const GLshort * v) { brebisGL.brebisMultiTexCoord3sv(target, v); }
#define glMultiTexCoord3sv brebisMultiTexCoord3sv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3svARB(GLenum target, const GLshort * v) { brebisGL.brebisMultiTexCoord3svARB(target, v); }
#define glMultiTexCoord3svARB brebisMultiTexCoord3svARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r) { brebisGL.brebisMultiTexCoord3xOES(texture, s, t, r); }
#define glMultiTexCoord3xOES brebisMultiTexCoord3xOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord3xvOES(GLenum texture, const GLfixed * coords) { brebisGL.brebisMultiTexCoord3xvOES(texture, coords); }
#define glMultiTexCoord3xvOES brebisMultiTexCoord3xvOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) { brebisGL.brebisMultiTexCoord4bOES(texture, s, t, r, q); }
#define glMultiTexCoord4bOES brebisMultiTexCoord4bOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4bvOES(GLenum texture, const GLbyte * coords) { brebisGL.brebisMultiTexCoord4bvOES(texture, coords); }
#define glMultiTexCoord4bvOES brebisMultiTexCoord4bvOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { brebisGL.brebisMultiTexCoord4d(target, s, t, r, q); }
#define glMultiTexCoord4d brebisMultiTexCoord4d
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { brebisGL.brebisMultiTexCoord4dARB(target, s, t, r, q); }
#define glMultiTexCoord4dARB brebisMultiTexCoord4dARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4dv(GLenum target, const GLdouble * v) { brebisGL.brebisMultiTexCoord4dv(target, v); }
#define glMultiTexCoord4dv brebisMultiTexCoord4dv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4dvARB(GLenum target, const GLdouble * v) { brebisGL.brebisMultiTexCoord4dvARB(target, v); }
#define glMultiTexCoord4dvARB brebisMultiTexCoord4dvARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { brebisGL.brebisMultiTexCoord4f(target, s, t, r, q); }
#define glMultiTexCoord4f brebisMultiTexCoord4f
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { brebisGL.brebisMultiTexCoord4fARB(target, s, t, r, q); }
#define glMultiTexCoord4fARB brebisMultiTexCoord4fARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4fv(GLenum target, const GLfloat * v) { brebisGL.brebisMultiTexCoord4fv(target, v); }
#define glMultiTexCoord4fv brebisMultiTexCoord4fv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4fvARB(GLenum target, const GLfloat * v) { brebisGL.brebisMultiTexCoord4fvARB(target, v); }
#define glMultiTexCoord4fvARB brebisMultiTexCoord4fvARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { brebisGL.brebisMultiTexCoord4hNV(target, s, t, r, q); }
#define glMultiTexCoord4hNV brebisMultiTexCoord4hNV
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4hvNV(GLenum target, const GLhalfNV * v) { brebisGL.brebisMultiTexCoord4hvNV(target, v); }
#define glMultiTexCoord4hvNV brebisMultiTexCoord4hvNV
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) { brebisGL.brebisMultiTexCoord4i(target, s, t, r, q); }
#define glMultiTexCoord4i brebisMultiTexCoord4i
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) { brebisGL.brebisMultiTexCoord4iARB(target, s, t, r, q); }
#define glMultiTexCoord4iARB brebisMultiTexCoord4iARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4iv(GLenum target, const GLint * v) { brebisGL.brebisMultiTexCoord4iv(target, v); }
#define glMultiTexCoord4iv brebisMultiTexCoord4iv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4ivARB(GLenum target, const GLint * v) { brebisGL.brebisMultiTexCoord4ivARB(target, v); }
#define glMultiTexCoord4ivARB brebisMultiTexCoord4ivARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { brebisGL.brebisMultiTexCoord4s(target, s, t, r, q); }
#define glMultiTexCoord4s brebisMultiTexCoord4s
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { brebisGL.brebisMultiTexCoord4sARB(target, s, t, r, q); }
#define glMultiTexCoord4sARB brebisMultiTexCoord4sARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4sv(GLenum target, const GLshort * v) { brebisGL.brebisMultiTexCoord4sv(target, v); }
#define glMultiTexCoord4sv brebisMultiTexCoord4sv
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4svARB(GLenum target, const GLshort * v) { brebisGL.brebisMultiTexCoord4svARB(target, v); }
#define glMultiTexCoord4svARB brebisMultiTexCoord4svARB
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { brebisGL.brebisMultiTexCoord4x(texture, s, t, r, q); }
#define glMultiTexCoord4x brebisMultiTexCoord4x
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { brebisGL.brebisMultiTexCoord4xOES(texture, s, t, r, q); }
#define glMultiTexCoord4xOES brebisMultiTexCoord4xOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoord4xvOES(GLenum texture, const GLfixed * coords) { brebisGL.brebisMultiTexCoord4xvOES(texture, coords); }
#define glMultiTexCoord4xvOES brebisMultiTexCoord4xvOES
BREBIS_FORCE_INLINE void  brebisMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) { brebisGL.brebisMultiTexCoordP1ui(texture, type, coords); }
#define glMultiTexCoordP1ui brebisMultiTexCoordP1ui
BREBIS_FORCE_INLINE void  brebisMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords) { brebisGL.brebisMultiTexCoordP1uiv(texture, type, coords); }
#define glMultiTexCoordP1uiv brebisMultiTexCoordP1uiv
BREBIS_FORCE_INLINE void  brebisMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) { brebisGL.brebisMultiTexCoordP2ui(texture, type, coords); }
#define glMultiTexCoordP2ui brebisMultiTexCoordP2ui
BREBIS_FORCE_INLINE void  brebisMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords) { brebisGL.brebisMultiTexCoordP2uiv(texture, type, coords); }
#define glMultiTexCoordP2uiv brebisMultiTexCoordP2uiv
BREBIS_FORCE_INLINE void  brebisMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) { brebisGL.brebisMultiTexCoordP3ui(texture, type, coords); }
#define glMultiTexCoordP3ui brebisMultiTexCoordP3ui
BREBIS_FORCE_INLINE void  brebisMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords) { brebisGL.brebisMultiTexCoordP3uiv(texture, type, coords); }
#define glMultiTexCoordP3uiv brebisMultiTexCoordP3uiv
BREBIS_FORCE_INLINE void  brebisMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) { brebisGL.brebisMultiTexCoordP4ui(texture, type, coords); }
#define glMultiTexCoordP4ui brebisMultiTexCoordP4ui
BREBIS_FORCE_INLINE void  brebisMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords) { brebisGL.brebisMultiTexCoordP4uiv(texture, type, coords); }
#define glMultiTexCoordP4uiv brebisMultiTexCoordP4uiv
BREBIS_FORCE_INLINE void  brebisMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisMultiTexCoordPointerEXT(texunit, size, type, stride, pointer); }
#define glMultiTexCoordPointerEXT brebisMultiTexCoordPointerEXT
BREBIS_FORCE_INLINE void  brebisMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { brebisGL.brebisMultiTexEnvfEXT(texunit, target, pname, param); }
#define glMultiTexEnvfEXT brebisMultiTexEnvfEXT
BREBIS_FORCE_INLINE void  brebisMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisMultiTexEnvfvEXT(texunit, target, pname, params); }
#define glMultiTexEnvfvEXT brebisMultiTexEnvfvEXT
BREBIS_FORCE_INLINE void  brebisMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { brebisGL.brebisMultiTexEnviEXT(texunit, target, pname, param); }
#define glMultiTexEnviEXT brebisMultiTexEnviEXT
BREBIS_FORCE_INLINE void  brebisMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisMultiTexEnvivEXT(texunit, target, pname, params); }
#define glMultiTexEnvivEXT brebisMultiTexEnvivEXT
BREBIS_FORCE_INLINE void  brebisMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) { brebisGL.brebisMultiTexGendEXT(texunit, coord, pname, param); }
#define glMultiTexGendEXT brebisMultiTexGendEXT
BREBIS_FORCE_INLINE void  brebisMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params) { brebisGL.brebisMultiTexGendvEXT(texunit, coord, pname, params); }
#define glMultiTexGendvEXT brebisMultiTexGendvEXT
BREBIS_FORCE_INLINE void  brebisMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) { brebisGL.brebisMultiTexGenfEXT(texunit, coord, pname, param); }
#define glMultiTexGenfEXT brebisMultiTexGenfEXT
BREBIS_FORCE_INLINE void  brebisMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params) { brebisGL.brebisMultiTexGenfvEXT(texunit, coord, pname, params); }
#define glMultiTexGenfvEXT brebisMultiTexGenfvEXT
BREBIS_FORCE_INLINE void  brebisMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) { brebisGL.brebisMultiTexGeniEXT(texunit, coord, pname, param); }
#define glMultiTexGeniEXT brebisMultiTexGeniEXT
BREBIS_FORCE_INLINE void  brebisMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint * params) { brebisGL.brebisMultiTexGenivEXT(texunit, coord, pname, params); }
#define glMultiTexGenivEXT brebisMultiTexGenivEXT
BREBIS_FORCE_INLINE void  brebisMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels); }
#define glMultiTexImage1DEXT brebisMultiTexImage1DEXT
BREBIS_FORCE_INLINE void  brebisMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels); }
#define glMultiTexImage2DEXT brebisMultiTexImage2DEXT
BREBIS_FORCE_INLINE void  brebisMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glMultiTexImage3DEXT brebisMultiTexImage3DEXT
BREBIS_FORCE_INLINE void  brebisMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisMultiTexParameterIivEXT(texunit, target, pname, params); }
#define glMultiTexParameterIivEXT brebisMultiTexParameterIivEXT
BREBIS_FORCE_INLINE void  brebisMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint * params) { brebisGL.brebisMultiTexParameterIuivEXT(texunit, target, pname, params); }
#define glMultiTexParameterIuivEXT brebisMultiTexParameterIuivEXT
BREBIS_FORCE_INLINE void  brebisMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { brebisGL.brebisMultiTexParameterfEXT(texunit, target, pname, param); }
#define glMultiTexParameterfEXT brebisMultiTexParameterfEXT
BREBIS_FORCE_INLINE void  brebisMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisMultiTexParameterfvEXT(texunit, target, pname, params); }
#define glMultiTexParameterfvEXT brebisMultiTexParameterfvEXT
BREBIS_FORCE_INLINE void  brebisMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { brebisGL.brebisMultiTexParameteriEXT(texunit, target, pname, param); }
#define glMultiTexParameteriEXT brebisMultiTexParameteriEXT
BREBIS_FORCE_INLINE void  brebisMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisMultiTexParameterivEXT(texunit, target, pname, params); }
#define glMultiTexParameterivEXT brebisMultiTexParameterivEXT
BREBIS_FORCE_INLINE void  brebisMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) { brebisGL.brebisMultiTexRenderbufferEXT(texunit, target, renderbuffer); }
#define glMultiTexRenderbufferEXT brebisMultiTexRenderbufferEXT
BREBIS_FORCE_INLINE void  brebisMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels); }
#define glMultiTexSubImage1DEXT brebisMultiTexSubImage1DEXT
BREBIS_FORCE_INLINE void  brebisMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glMultiTexSubImage2DEXT brebisMultiTexSubImage2DEXT
BREBIS_FORCE_INLINE void  brebisMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glMultiTexSubImage3DEXT brebisMultiTexSubImage3DEXT
BREBIS_FORCE_INLINE void  brebisMulticastBarrierNV(void) { brebisGL.brebisMulticastBarrierNV(); }
#define glMulticastBarrierNV brebisMulticastBarrierNV
BREBIS_FORCE_INLINE void  brebisMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { brebisGL.brebisMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
#define glMulticastBlitFramebufferNV brebisMulticastBlitFramebufferNV
BREBIS_FORCE_INLINE void  brebisMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { brebisGL.brebisMulticastBufferSubDataNV(gpuMask, buffer, offset, size, data); }
#define glMulticastBufferSubDataNV brebisMulticastBufferSubDataNV
BREBIS_FORCE_INLINE void  brebisMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { brebisGL.brebisMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size); }
#define glMulticastCopyBufferSubDataNV brebisMulticastCopyBufferSubDataNV
BREBIS_FORCE_INLINE void  brebisMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { brebisGL.brebisMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
#define glMulticastCopyImageSubDataNV brebisMulticastCopyImageSubDataNV
BREBIS_FORCE_INLINE void  brebisMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { brebisGL.brebisMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v); }
#define glMulticastFramebufferSampleLocationsfvNV brebisMulticastFramebufferSampleLocationsfvNV
BREBIS_FORCE_INLINE void  brebisMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 * params) { brebisGL.brebisMulticastGetQueryObjecti64vNV(gpu, id, pname, params); }
#define glMulticastGetQueryObjecti64vNV brebisMulticastGetQueryObjecti64vNV
BREBIS_FORCE_INLINE void  brebisMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint * params) { brebisGL.brebisMulticastGetQueryObjectivNV(gpu, id, pname, params); }
#define glMulticastGetQueryObjectivNV brebisMulticastGetQueryObjectivNV
BREBIS_FORCE_INLINE void  brebisMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 * params) { brebisGL.brebisMulticastGetQueryObjectui64vNV(gpu, id, pname, params); }
#define glMulticastGetQueryObjectui64vNV brebisMulticastGetQueryObjectui64vNV
BREBIS_FORCE_INLINE void  brebisMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint * params) { brebisGL.brebisMulticastGetQueryObjectuivNV(gpu, id, pname, params); }
#define glMulticastGetQueryObjectuivNV brebisMulticastGetQueryObjectuivNV
BREBIS_FORCE_INLINE void  brebisMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) { brebisGL.brebisMulticastWaitSyncNV(signalGpu, waitGpuMask); }
#define glMulticastWaitSyncNV brebisMulticastWaitSyncNV
BREBIS_FORCE_INLINE void  brebisNamedBufferAttachMemoryNV(GLuint buffer, GLuint memory, GLuint64 offset) { brebisGL.brebisNamedBufferAttachMemoryNV(buffer, memory, offset); }
#define glNamedBufferAttachMemoryNV brebisNamedBufferAttachMemoryNV
BREBIS_FORCE_INLINE void  brebisNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { brebisGL.brebisNamedBufferData(buffer, size, data, usage); }
#define glNamedBufferData brebisNamedBufferData
BREBIS_FORCE_INLINE void  brebisNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { brebisGL.brebisNamedBufferDataEXT(buffer, size, data, usage); }
#define glNamedBufferDataEXT brebisNamedBufferDataEXT
BREBIS_FORCE_INLINE void  brebisNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { brebisGL.brebisNamedBufferPageCommitmentARB(buffer, offset, size, commit); }
#define glNamedBufferPageCommitmentARB brebisNamedBufferPageCommitmentARB
BREBIS_FORCE_INLINE void  brebisNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { brebisGL.brebisNamedBufferPageCommitmentEXT(buffer, offset, size, commit); }
#define glNamedBufferPageCommitmentEXT brebisNamedBufferPageCommitmentEXT
BREBIS_FORCE_INLINE void  brebisNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { brebisGL.brebisNamedBufferStorage(buffer, size, data, flags); }
#define glNamedBufferStorage brebisNamedBufferStorage
BREBIS_FORCE_INLINE void  brebisNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { brebisGL.brebisNamedBufferStorageEXT(buffer, size, data, flags); }
#define glNamedBufferStorageEXT brebisNamedBufferStorageEXT
BREBIS_FORCE_INLINE void  brebisNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { brebisGL.brebisNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags); }
#define glNamedBufferStorageExternalEXT brebisNamedBufferStorageExternalEXT
BREBIS_FORCE_INLINE void  brebisNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) { brebisGL.brebisNamedBufferStorageMemEXT(buffer, size, memory, offset); }
#define glNamedBufferStorageMemEXT brebisNamedBufferStorageMemEXT
BREBIS_FORCE_INLINE void  brebisNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { brebisGL.brebisNamedBufferSubData(buffer, offset, size, data); }
#define glNamedBufferSubData brebisNamedBufferSubData
BREBIS_FORCE_INLINE void  brebisNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { brebisGL.brebisNamedBufferSubDataEXT(buffer, offset, size, data); }
#define glNamedBufferSubDataEXT brebisNamedBufferSubDataEXT
BREBIS_FORCE_INLINE void  brebisNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { brebisGL.brebisNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size); }
#define glNamedCopyBufferSubDataEXT brebisNamedCopyBufferSubDataEXT
BREBIS_FORCE_INLINE void  brebisNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) { brebisGL.brebisNamedFramebufferDrawBuffer(framebuffer, buf); }
#define glNamedFramebufferDrawBuffer brebisNamedFramebufferDrawBuffer
BREBIS_FORCE_INLINE void  brebisNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs) { brebisGL.brebisNamedFramebufferDrawBuffers(framebuffer, n, bufs); }
#define glNamedFramebufferDrawBuffers brebisNamedFramebufferDrawBuffers
BREBIS_FORCE_INLINE void  brebisNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) { brebisGL.brebisNamedFramebufferParameteri(framebuffer, pname, param); }
#define glNamedFramebufferParameteri brebisNamedFramebufferParameteri
BREBIS_FORCE_INLINE void  brebisNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) { brebisGL.brebisNamedFramebufferParameteriEXT(framebuffer, pname, param); }
#define glNamedFramebufferParameteriEXT brebisNamedFramebufferParameteriEXT
BREBIS_FORCE_INLINE void  brebisNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) { brebisGL.brebisNamedFramebufferReadBuffer(framebuffer, src); }
#define glNamedFramebufferReadBuffer brebisNamedFramebufferReadBuffer
BREBIS_FORCE_INLINE void  brebisNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { brebisGL.brebisNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer); }
#define glNamedFramebufferRenderbuffer brebisNamedFramebufferRenderbuffer
BREBIS_FORCE_INLINE void  brebisNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { brebisGL.brebisNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer); }
#define glNamedFramebufferRenderbufferEXT brebisNamedFramebufferRenderbufferEXT
BREBIS_FORCE_INLINE void  brebisNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { brebisGL.brebisNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v); }
#define glNamedFramebufferSampleLocationsfvARB brebisNamedFramebufferSampleLocationsfvARB
BREBIS_FORCE_INLINE void  brebisNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { brebisGL.brebisNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v); }
#define glNamedFramebufferSampleLocationsfvNV brebisNamedFramebufferSampleLocationsfvNV
BREBIS_FORCE_INLINE void  brebisNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { brebisGL.brebisNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values); }
#define glNamedFramebufferSamplePositionsfvAMD brebisNamedFramebufferSamplePositionsfvAMD
BREBIS_FORCE_INLINE void  brebisNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { brebisGL.brebisNamedFramebufferTexture(framebuffer, attachment, texture, level); }
#define glNamedFramebufferTexture brebisNamedFramebufferTexture
BREBIS_FORCE_INLINE void  brebisNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { brebisGL.brebisNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level); }
#define glNamedFramebufferTexture1DEXT brebisNamedFramebufferTexture1DEXT
BREBIS_FORCE_INLINE void  brebisNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { brebisGL.brebisNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level); }
#define glNamedFramebufferTexture2DEXT brebisNamedFramebufferTexture2DEXT
BREBIS_FORCE_INLINE void  brebisNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { brebisGL.brebisNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset); }
#define glNamedFramebufferTexture3DEXT brebisNamedFramebufferTexture3DEXT
BREBIS_FORCE_INLINE void  brebisNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { brebisGL.brebisNamedFramebufferTextureEXT(framebuffer, attachment, texture, level); }
#define glNamedFramebufferTextureEXT brebisNamedFramebufferTextureEXT
BREBIS_FORCE_INLINE void  brebisNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) { brebisGL.brebisNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face); }
#define glNamedFramebufferTextureFaceEXT brebisNamedFramebufferTextureFaceEXT
BREBIS_FORCE_INLINE void  brebisNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { brebisGL.brebisNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer); }
#define glNamedFramebufferTextureLayer brebisNamedFramebufferTextureLayer
BREBIS_FORCE_INLINE void  brebisNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { brebisGL.brebisNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer); }
#define glNamedFramebufferTextureLayerEXT brebisNamedFramebufferTextureLayerEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w); }
#define glNamedProgramLocalParameter4dEXT brebisNamedProgramLocalParameter4dEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble * params) { brebisGL.brebisNamedProgramLocalParameter4dvEXT(program, target, index, params); }
#define glNamedProgramLocalParameter4dvEXT brebisNamedProgramLocalParameter4dvEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w); }
#define glNamedProgramLocalParameter4fEXT brebisNamedProgramLocalParameter4fEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat * params) { brebisGL.brebisNamedProgramLocalParameter4fvEXT(program, target, index, params); }
#define glNamedProgramLocalParameter4fvEXT brebisNamedProgramLocalParameter4fvEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { brebisGL.brebisNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w); }
#define glNamedProgramLocalParameterI4iEXT brebisNamedProgramLocalParameterI4iEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint * params) { brebisGL.brebisNamedProgramLocalParameterI4ivEXT(program, target, index, params); }
#define glNamedProgramLocalParameterI4ivEXT brebisNamedProgramLocalParameterI4ivEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { brebisGL.brebisNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w); }
#define glNamedProgramLocalParameterI4uiEXT brebisNamedProgramLocalParameterI4uiEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint * params) { brebisGL.brebisNamedProgramLocalParameterI4uivEXT(program, target, index, params); }
#define glNamedProgramLocalParameterI4uivEXT brebisNamedProgramLocalParameterI4uivEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params) { brebisGL.brebisNamedProgramLocalParameters4fvEXT(program, target, index, count, params); }
#define glNamedProgramLocalParameters4fvEXT brebisNamedProgramLocalParameters4fvEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params) { brebisGL.brebisNamedProgramLocalParametersI4ivEXT(program, target, index, count, params); }
#define glNamedProgramLocalParametersI4ivEXT brebisNamedProgramLocalParametersI4ivEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params) { brebisGL.brebisNamedProgramLocalParametersI4uivEXT(program, target, index, count, params); }
#define glNamedProgramLocalParametersI4uivEXT brebisNamedProgramLocalParametersI4uivEXT
BREBIS_FORCE_INLINE void  brebisNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string) { brebisGL.brebisNamedProgramStringEXT(program, target, format, len, string); }
#define glNamedProgramStringEXT brebisNamedProgramStringEXT
BREBIS_FORCE_INLINE void  brebisNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisNamedRenderbufferStorage(renderbuffer, internalformat, width, height); }
#define glNamedRenderbufferStorage brebisNamedRenderbufferStorage
BREBIS_FORCE_INLINE void  brebisNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height); }
#define glNamedRenderbufferStorageEXT brebisNamedRenderbufferStorageEXT
BREBIS_FORCE_INLINE void  brebisNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height); }
#define glNamedRenderbufferStorageMultisample brebisNamedRenderbufferStorageMultisample
BREBIS_FORCE_INLINE void  brebisNamedRenderbufferStorageMultisampleAdvancedAMD(GLuint renderbuffer, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height); }
#define glNamedRenderbufferStorageMultisampleAdvancedAMD brebisNamedRenderbufferStorageMultisampleAdvancedAMD
BREBIS_FORCE_INLINE void  brebisNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height); }
#define glNamedRenderbufferStorageMultisampleCoverageEXT brebisNamedRenderbufferStorageMultisampleCoverageEXT
BREBIS_FORCE_INLINE void  brebisNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height); }
#define glNamedRenderbufferStorageMultisampleEXT brebisNamedRenderbufferStorageMultisampleEXT
BREBIS_FORCE_INLINE void  brebisNamedStringARB(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string) { brebisGL.brebisNamedStringARB(type, namelen, name, stringlen, string); }
#define glNamedStringARB brebisNamedStringARB
BREBIS_FORCE_INLINE GLuint brebisNewBufferRegion(GLenum region) { return brebisGL.brebisNewBufferRegion(region); }
#define glNewBufferRegion brebisNewBufferRegion
BREBIS_FORCE_INLINE void  brebisNewList(GLuint list, GLenum mode) { brebisGL.brebisNewList(list, mode); }
#define glNewList brebisNewList
BREBIS_FORCE_INLINE GLuint brebisNewObjectBufferATI(GLsizei size, const void * pointer, GLenum usage) { return brebisGL.brebisNewObjectBufferATI(size, pointer, usage); }
#define glNewObjectBufferATI brebisNewObjectBufferATI
BREBIS_FORCE_INLINE void  brebisNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) { brebisGL.brebisNormal3b(nx, ny, nz); }
#define glNormal3b brebisNormal3b
BREBIS_FORCE_INLINE void  brebisNormal3bv(const GLbyte * v) { brebisGL.brebisNormal3bv(v); }
#define glNormal3bv brebisNormal3bv
BREBIS_FORCE_INLINE void  brebisNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) { brebisGL.brebisNormal3d(nx, ny, nz); }
#define glNormal3d brebisNormal3d
BREBIS_FORCE_INLINE void  brebisNormal3dv(const GLdouble * v) { brebisGL.brebisNormal3dv(v); }
#define glNormal3dv brebisNormal3dv
BREBIS_FORCE_INLINE void  brebisNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) { brebisGL.brebisNormal3f(nx, ny, nz); }
#define glNormal3f brebisNormal3f
BREBIS_FORCE_INLINE void  brebisNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisNormal3fVertex3fSUN(nx, ny, nz, x, y, z); }
#define glNormal3fVertex3fSUN brebisNormal3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisNormal3fVertex3fvSUN(const GLfloat * n, const GLfloat * v) { brebisGL.brebisNormal3fVertex3fvSUN(n, v); }
#define glNormal3fVertex3fvSUN brebisNormal3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisNormal3fv(const GLfloat * v) { brebisGL.brebisNormal3fv(v); }
#define glNormal3fv brebisNormal3fv
BREBIS_FORCE_INLINE void  brebisNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) { brebisGL.brebisNormal3hNV(nx, ny, nz); }
#define glNormal3hNV brebisNormal3hNV
BREBIS_FORCE_INLINE void  brebisNormal3hvNV(const GLhalfNV * v) { brebisGL.brebisNormal3hvNV(v); }
#define glNormal3hvNV brebisNormal3hvNV
BREBIS_FORCE_INLINE void  brebisNormal3i(GLint nx, GLint ny, GLint nz) { brebisGL.brebisNormal3i(nx, ny, nz); }
#define glNormal3i brebisNormal3i
BREBIS_FORCE_INLINE void  brebisNormal3iv(const GLint * v) { brebisGL.brebisNormal3iv(v); }
#define glNormal3iv brebisNormal3iv
BREBIS_FORCE_INLINE void  brebisNormal3s(GLshort nx, GLshort ny, GLshort nz) { brebisGL.brebisNormal3s(nx, ny, nz); }
#define glNormal3s brebisNormal3s
BREBIS_FORCE_INLINE void  brebisNormal3sv(const GLshort * v) { brebisGL.brebisNormal3sv(v); }
#define glNormal3sv brebisNormal3sv
BREBIS_FORCE_INLINE void  brebisNormal3x(GLfixed nx, GLfixed ny, GLfixed nz) { brebisGL.brebisNormal3x(nx, ny, nz); }
#define glNormal3x brebisNormal3x
BREBIS_FORCE_INLINE void  brebisNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz) { brebisGL.brebisNormal3xOES(nx, ny, nz); }
#define glNormal3xOES brebisNormal3xOES
BREBIS_FORCE_INLINE void  brebisNormal3xvOES(const GLfixed * coords) { brebisGL.brebisNormal3xvOES(coords); }
#define glNormal3xvOES brebisNormal3xvOES
BREBIS_FORCE_INLINE void  brebisNormalFormatNV(GLenum type, GLsizei stride) { brebisGL.brebisNormalFormatNV(type, stride); }
#define glNormalFormatNV brebisNormalFormatNV
BREBIS_FORCE_INLINE void  brebisNormalP3ui(GLenum type, GLuint coords) { brebisGL.brebisNormalP3ui(type, coords); }
#define glNormalP3ui brebisNormalP3ui
BREBIS_FORCE_INLINE void  brebisNormalP3uiv(GLenum type, const GLuint * coords) { brebisGL.brebisNormalP3uiv(type, coords); }
#define glNormalP3uiv brebisNormalP3uiv
BREBIS_FORCE_INLINE void  brebisNormalPointer(GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisNormalPointer(type, stride, pointer); }
#define glNormalPointer brebisNormalPointer
BREBIS_FORCE_INLINE void  brebisNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { brebisGL.brebisNormalPointerEXT(type, stride, count, pointer); }
#define glNormalPointerEXT brebisNormalPointerEXT
BREBIS_FORCE_INLINE void  brebisNormalPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { brebisGL.brebisNormalPointerListIBM(type, stride, pointer, ptrstride); }
#define glNormalPointerListIBM brebisNormalPointerListIBM
BREBIS_FORCE_INLINE void  brebisNormalPointervINTEL(GLenum type, const void ** pointer) { brebisGL.brebisNormalPointervINTEL(type, pointer); }
#define glNormalPointervINTEL brebisNormalPointervINTEL
BREBIS_FORCE_INLINE void  brebisNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) { brebisGL.brebisNormalStream3bATI(stream, nx, ny, nz); }
#define glNormalStream3bATI brebisNormalStream3bATI
BREBIS_FORCE_INLINE void  brebisNormalStream3bvATI(GLenum stream, const GLbyte * coords) { brebisGL.brebisNormalStream3bvATI(stream, coords); }
#define glNormalStream3bvATI brebisNormalStream3bvATI
BREBIS_FORCE_INLINE void  brebisNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) { brebisGL.brebisNormalStream3dATI(stream, nx, ny, nz); }
#define glNormalStream3dATI brebisNormalStream3dATI
BREBIS_FORCE_INLINE void  brebisNormalStream3dvATI(GLenum stream, const GLdouble * coords) { brebisGL.brebisNormalStream3dvATI(stream, coords); }
#define glNormalStream3dvATI brebisNormalStream3dvATI
BREBIS_FORCE_INLINE void  brebisNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) { brebisGL.brebisNormalStream3fATI(stream, nx, ny, nz); }
#define glNormalStream3fATI brebisNormalStream3fATI
BREBIS_FORCE_INLINE void  brebisNormalStream3fvATI(GLenum stream, const GLfloat * coords) { brebisGL.brebisNormalStream3fvATI(stream, coords); }
#define glNormalStream3fvATI brebisNormalStream3fvATI
BREBIS_FORCE_INLINE void  brebisNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) { brebisGL.brebisNormalStream3iATI(stream, nx, ny, nz); }
#define glNormalStream3iATI brebisNormalStream3iATI
BREBIS_FORCE_INLINE void  brebisNormalStream3ivATI(GLenum stream, const GLint * coords) { brebisGL.brebisNormalStream3ivATI(stream, coords); }
#define glNormalStream3ivATI brebisNormalStream3ivATI
BREBIS_FORCE_INLINE void  brebisNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) { brebisGL.brebisNormalStream3sATI(stream, nx, ny, nz); }
#define glNormalStream3sATI brebisNormalStream3sATI
BREBIS_FORCE_INLINE void  brebisNormalStream3svATI(GLenum stream, const GLshort * coords) { brebisGL.brebisNormalStream3svATI(stream, coords); }
#define glNormalStream3svATI brebisNormalStream3svATI
BREBIS_FORCE_INLINE void  brebisObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { brebisGL.brebisObjectLabel(identifier, name, length, label); }
#define glObjectLabel brebisObjectLabel
BREBIS_FORCE_INLINE void  brebisObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { brebisGL.brebisObjectLabelKHR(identifier, name, length, label); }
#define glObjectLabelKHR brebisObjectLabelKHR
BREBIS_FORCE_INLINE void  brebisObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) { brebisGL.brebisObjectPtrLabel(ptr, length, label); }
#define glObjectPtrLabel brebisObjectPtrLabel
BREBIS_FORCE_INLINE void  brebisObjectPtrLabelKHR(const void * ptr, GLsizei length, const GLchar * label) { brebisGL.brebisObjectPtrLabelKHR(ptr, length, label); }
#define glObjectPtrLabelKHR brebisObjectPtrLabelKHR
BREBIS_FORCE_INLINE GLenum brebisObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return brebisGL.brebisObjectPurgeableAPPLE(objectType, name, option); }
#define glObjectPurgeableAPPLE brebisObjectPurgeableAPPLE
BREBIS_FORCE_INLINE GLenum brebisObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return brebisGL.brebisObjectUnpurgeableAPPLE(objectType, name, option); }
#define glObjectUnpurgeableAPPLE brebisObjectUnpurgeableAPPLE
BREBIS_FORCE_INLINE void  brebisOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { brebisGL.brebisOrtho(left, right, bottom, top, zNear, zFar); }
#define glOrtho brebisOrtho
BREBIS_FORCE_INLINE void  brebisOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { brebisGL.brebisOrthof(l, r, b, t, n, f); }
#define glOrthof brebisOrthof
BREBIS_FORCE_INLINE void  brebisOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { brebisGL.brebisOrthofOES(l, r, b, t, n, f); }
#define glOrthofOES brebisOrthofOES
BREBIS_FORCE_INLINE void  brebisOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { brebisGL.brebisOrthox(l, r, b, t, n, f); }
#define glOrthox brebisOrthox
BREBIS_FORCE_INLINE void  brebisOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { brebisGL.brebisOrthoxOES(l, r, b, t, n, f); }
#define glOrthoxOES brebisOrthoxOES
BREBIS_FORCE_INLINE void  brebisPNTrianglesfATI(GLenum pname, GLfloat param) { brebisGL.brebisPNTrianglesfATI(pname, param); }
#define glPNTrianglesfATI brebisPNTrianglesfATI
BREBIS_FORCE_INLINE void  brebisPNTrianglesiATI(GLenum pname, GLint param) { brebisGL.brebisPNTrianglesiATI(pname, param); }
#define glPNTrianglesiATI brebisPNTrianglesiATI
BREBIS_FORCE_INLINE void  brebisPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) { brebisGL.brebisPassTexCoordATI(dst, coord, swizzle); }
#define glPassTexCoordATI brebisPassTexCoordATI
BREBIS_FORCE_INLINE void  brebisPassThrough(GLfloat token) { brebisGL.brebisPassThrough(token); }
#define glPassThrough brebisPassThrough
BREBIS_FORCE_INLINE void  brebisPassThroughxOES(GLfixed token) { brebisGL.brebisPassThroughxOES(token); }
#define glPassThroughxOES brebisPassThroughxOES
BREBIS_FORCE_INLINE void  brebisPatchParameterfv(GLenum pname, const GLfloat * values) { brebisGL.brebisPatchParameterfv(pname, values); }
#define glPatchParameterfv brebisPatchParameterfv
BREBIS_FORCE_INLINE void  brebisPatchParameteri(GLenum pname, GLint value) { brebisGL.brebisPatchParameteri(pname, value); }
#define glPatchParameteri brebisPatchParameteri
BREBIS_FORCE_INLINE void  brebisPatchParameteriEXT(GLenum pname, GLint value) { brebisGL.brebisPatchParameteriEXT(pname, value); }
#define glPatchParameteriEXT brebisPatchParameteriEXT
BREBIS_FORCE_INLINE void  brebisPatchParameteriOES(GLenum pname, GLint value) { brebisGL.brebisPatchParameteriOES(pname, value); }
#define glPatchParameteriOES brebisPatchParameteriOES
BREBIS_FORCE_INLINE void  brebisPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs) { brebisGL.brebisPathColorGenNV(color, genMode, colorFormat, coeffs); }
#define glPathColorGenNV brebisPathColorGenNV
BREBIS_FORCE_INLINE void  brebisPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { brebisGL.brebisPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords); }
#define glPathCommandsNV brebisPathCommandsNV
BREBIS_FORCE_INLINE void  brebisPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords) { brebisGL.brebisPathCoordsNV(path, numCoords, coordType, coords); }
#define glPathCoordsNV brebisPathCoordsNV
BREBIS_FORCE_INLINE void  brebisPathCoverDepthFuncNV(GLenum func) { brebisGL.brebisPathCoverDepthFuncNV(func); }
#define glPathCoverDepthFuncNV brebisPathCoverDepthFuncNV
BREBIS_FORCE_INLINE void  brebisPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat * dashArray) { brebisGL.brebisPathDashArrayNV(path, dashCount, dashArray); }
#define glPathDashArrayNV brebisPathDashArrayNV
BREBIS_FORCE_INLINE void  brebisPathFogGenNV(GLenum genMode) { brebisGL.brebisPathFogGenNV(genMode); }
#define glPathFogGenNV brebisPathFogGenNV
BREBIS_FORCE_INLINE GLenum brebisPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return brebisGL.brebisPathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
#define glPathGlyphIndexArrayNV brebisPathGlyphIndexArrayNV
BREBIS_FORCE_INLINE GLenum brebisPathGlyphIndexRangeNV(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) { return brebisGL.brebisPathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount); }
#define glPathGlyphIndexRangeNV brebisPathGlyphIndexRangeNV
BREBIS_FORCE_INLINE void  brebisPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { brebisGL.brebisPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale); }
#define glPathGlyphRangeNV brebisPathGlyphRangeNV
BREBIS_FORCE_INLINE void  brebisPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { brebisGL.brebisPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale); }
#define glPathGlyphsNV brebisPathGlyphsNV
BREBIS_FORCE_INLINE GLenum brebisPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return brebisGL.brebisPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
#define glPathMemoryGlyphIndexArrayNV brebisPathMemoryGlyphIndexArrayNV
BREBIS_FORCE_INLINE void  brebisPathParameterfNV(GLuint path, GLenum pname, GLfloat value) { brebisGL.brebisPathParameterfNV(path, pname, value); }
#define glPathParameterfNV brebisPathParameterfNV
BREBIS_FORCE_INLINE void  brebisPathParameterfvNV(GLuint path, GLenum pname, const GLfloat * value) { brebisGL.brebisPathParameterfvNV(path, pname, value); }
#define glPathParameterfvNV brebisPathParameterfvNV
BREBIS_FORCE_INLINE void  brebisPathParameteriNV(GLuint path, GLenum pname, GLint value) { brebisGL.brebisPathParameteriNV(path, pname, value); }
#define glPathParameteriNV brebisPathParameteriNV
BREBIS_FORCE_INLINE void  brebisPathParameterivNV(GLuint path, GLenum pname, const GLint * value) { brebisGL.brebisPathParameterivNV(path, pname, value); }
#define glPathParameterivNV brebisPathParameterivNV
BREBIS_FORCE_INLINE void  brebisPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) { brebisGL.brebisPathStencilDepthOffsetNV(factor, units); }
#define glPathStencilDepthOffsetNV brebisPathStencilDepthOffsetNV
BREBIS_FORCE_INLINE void  brebisPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) { brebisGL.brebisPathStencilFuncNV(func, ref, mask); }
#define glPathStencilFuncNV brebisPathStencilFuncNV
BREBIS_FORCE_INLINE void  brebisPathStringNV(GLuint path, GLenum format, GLsizei length, const void * pathString) { brebisGL.brebisPathStringNV(path, format, length, pathString); }
#define glPathStringNV brebisPathStringNV
BREBIS_FORCE_INLINE void  brebisPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { brebisGL.brebisPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords); }
#define glPathSubCommandsNV brebisPathSubCommandsNV
BREBIS_FORCE_INLINE void  brebisPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords) { brebisGL.brebisPathSubCoordsNV(path, coordStart, numCoords, coordType, coords); }
#define glPathSubCoordsNV brebisPathSubCoordsNV
BREBIS_FORCE_INLINE void  brebisPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs) { brebisGL.brebisPathTexGenNV(texCoordSet, genMode, components, coeffs); }
#define glPathTexGenNV brebisPathTexGenNV
BREBIS_FORCE_INLINE void  brebisPauseTransformFeedback(void) { brebisGL.brebisPauseTransformFeedback(); }
#define glPauseTransformFeedback brebisPauseTransformFeedback
BREBIS_FORCE_INLINE void  brebisPauseTransformFeedbackNV(void) { brebisGL.brebisPauseTransformFeedbackNV(); }
#define glPauseTransformFeedbackNV brebisPauseTransformFeedbackNV
BREBIS_FORCE_INLINE void  brebisPixelDataRangeNV(GLenum target, GLsizei length, const void * pointer) { brebisGL.brebisPixelDataRangeNV(target, length, pointer); }
#define glPixelDataRangeNV brebisPixelDataRangeNV
BREBIS_FORCE_INLINE void  brebisPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) { brebisGL.brebisPixelMapfv(map, mapsize, values); }
#define glPixelMapfv brebisPixelMapfv
BREBIS_FORCE_INLINE void  brebisPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) { brebisGL.brebisPixelMapuiv(map, mapsize, values); }
#define glPixelMapuiv brebisPixelMapuiv
BREBIS_FORCE_INLINE void  brebisPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) { brebisGL.brebisPixelMapusv(map, mapsize, values); }
#define glPixelMapusv brebisPixelMapusv
BREBIS_FORCE_INLINE void  brebisPixelMapx(GLenum map, GLint size, const GLfixed * values) { brebisGL.brebisPixelMapx(map, size, values); }
#define glPixelMapx brebisPixelMapx
BREBIS_FORCE_INLINE void  brebisPixelStoref(GLenum pname, GLfloat param) { brebisGL.brebisPixelStoref(pname, param); }
#define glPixelStoref brebisPixelStoref
BREBIS_FORCE_INLINE void  brebisPixelStorei(GLenum pname, GLint param) { brebisGL.brebisPixelStorei(pname, param); }
#define glPixelStorei brebisPixelStorei
BREBIS_FORCE_INLINE void  brebisPixelStorex(GLenum pname, GLfixed param) { brebisGL.brebisPixelStorex(pname, param); }
#define glPixelStorex brebisPixelStorex
BREBIS_FORCE_INLINE void  brebisPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) { brebisGL.brebisPixelTexGenParameterfSGIS(pname, param); }
#define glPixelTexGenParameterfSGIS brebisPixelTexGenParameterfSGIS
BREBIS_FORCE_INLINE void  brebisPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat * params) { brebisGL.brebisPixelTexGenParameterfvSGIS(pname, params); }
#define glPixelTexGenParameterfvSGIS brebisPixelTexGenParameterfvSGIS
BREBIS_FORCE_INLINE void  brebisPixelTexGenParameteriSGIS(GLenum pname, GLint param) { brebisGL.brebisPixelTexGenParameteriSGIS(pname, param); }
#define glPixelTexGenParameteriSGIS brebisPixelTexGenParameteriSGIS
BREBIS_FORCE_INLINE void  brebisPixelTexGenParameterivSGIS(GLenum pname, const GLint * params) { brebisGL.brebisPixelTexGenParameterivSGIS(pname, params); }
#define glPixelTexGenParameterivSGIS brebisPixelTexGenParameterivSGIS
BREBIS_FORCE_INLINE void  brebisPixelTexGenSGIX(GLenum mode) { brebisGL.brebisPixelTexGenSGIX(mode); }
#define glPixelTexGenSGIX brebisPixelTexGenSGIX
BREBIS_FORCE_INLINE void  brebisPixelTransferf(GLenum pname, GLfloat param) { brebisGL.brebisPixelTransferf(pname, param); }
#define glPixelTransferf brebisPixelTransferf
BREBIS_FORCE_INLINE void  brebisPixelTransferi(GLenum pname, GLint param) { brebisGL.brebisPixelTransferi(pname, param); }
#define glPixelTransferi brebisPixelTransferi
BREBIS_FORCE_INLINE void  brebisPixelTransferxOES(GLenum pname, GLfixed param) { brebisGL.brebisPixelTransferxOES(pname, param); }
#define glPixelTransferxOES brebisPixelTransferxOES
BREBIS_FORCE_INLINE void  brebisPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) { brebisGL.brebisPixelTransformParameterfEXT(target, pname, param); }
#define glPixelTransformParameterfEXT brebisPixelTransformParameterfEXT
BREBIS_FORCE_INLINE void  brebisPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisPixelTransformParameterfvEXT(target, pname, params); }
#define glPixelTransformParameterfvEXT brebisPixelTransformParameterfvEXT
BREBIS_FORCE_INLINE void  brebisPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) { brebisGL.brebisPixelTransformParameteriEXT(target, pname, param); }
#define glPixelTransformParameteriEXT brebisPixelTransformParameteriEXT
BREBIS_FORCE_INLINE void  brebisPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisPixelTransformParameterivEXT(target, pname, params); }
#define glPixelTransformParameterivEXT brebisPixelTransformParameterivEXT
BREBIS_FORCE_INLINE void  brebisPixelZoom(GLfloat xfactor, GLfloat yfactor) { brebisGL.brebisPixelZoom(xfactor, yfactor); }
#define glPixelZoom brebisPixelZoom
BREBIS_FORCE_INLINE void  brebisPixelZoomxOES(GLfixed xfactor, GLfixed yfactor) { brebisGL.brebisPixelZoomxOES(xfactor, yfactor); }
#define glPixelZoomxOES brebisPixelZoomxOES
BREBIS_FORCE_INLINE GLboolean brebisPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) { return brebisGL.brebisPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY); }
#define glPointAlongPathNV brebisPointAlongPathNV
BREBIS_FORCE_INLINE void  brebisPointParameterf(GLenum pname, GLfloat param) { brebisGL.brebisPointParameterf(pname, param); }
#define glPointParameterf brebisPointParameterf
BREBIS_FORCE_INLINE void  brebisPointParameterfARB(GLenum pname, GLfloat param) { brebisGL.brebisPointParameterfARB(pname, param); }
#define glPointParameterfARB brebisPointParameterfARB
BREBIS_FORCE_INLINE void  brebisPointParameterfEXT(GLenum pname, GLfloat param) { brebisGL.brebisPointParameterfEXT(pname, param); }
#define glPointParameterfEXT brebisPointParameterfEXT
BREBIS_FORCE_INLINE void  brebisPointParameterfSGIS(GLenum pname, GLfloat param) { brebisGL.brebisPointParameterfSGIS(pname, param); }
#define glPointParameterfSGIS brebisPointParameterfSGIS
BREBIS_FORCE_INLINE void  brebisPointParameterfv(GLenum pname, const GLfloat * params) { brebisGL.brebisPointParameterfv(pname, params); }
#define glPointParameterfv brebisPointParameterfv
BREBIS_FORCE_INLINE void  brebisPointParameterfvARB(GLenum pname, const GLfloat * params) { brebisGL.brebisPointParameterfvARB(pname, params); }
#define glPointParameterfvARB brebisPointParameterfvARB
BREBIS_FORCE_INLINE void  brebisPointParameterfvEXT(GLenum pname, const GLfloat * params) { brebisGL.brebisPointParameterfvEXT(pname, params); }
#define glPointParameterfvEXT brebisPointParameterfvEXT
BREBIS_FORCE_INLINE void  brebisPointParameterfvSGIS(GLenum pname, const GLfloat * params) { brebisGL.brebisPointParameterfvSGIS(pname, params); }
#define glPointParameterfvSGIS brebisPointParameterfvSGIS
BREBIS_FORCE_INLINE void  brebisPointParameteri(GLenum pname, GLint param) { brebisGL.brebisPointParameteri(pname, param); }
#define glPointParameteri brebisPointParameteri
BREBIS_FORCE_INLINE void  brebisPointParameteriNV(GLenum pname, GLint param) { brebisGL.brebisPointParameteriNV(pname, param); }
#define glPointParameteriNV brebisPointParameteriNV
BREBIS_FORCE_INLINE void  brebisPointParameteriv(GLenum pname, const GLint * params) { brebisGL.brebisPointParameteriv(pname, params); }
#define glPointParameteriv brebisPointParameteriv
BREBIS_FORCE_INLINE void  brebisPointParameterivNV(GLenum pname, const GLint * params) { brebisGL.brebisPointParameterivNV(pname, params); }
#define glPointParameterivNV brebisPointParameterivNV
BREBIS_FORCE_INLINE void  brebisPointParameterx(GLenum pname, GLfixed param) { brebisGL.brebisPointParameterx(pname, param); }
#define glPointParameterx brebisPointParameterx
BREBIS_FORCE_INLINE void  brebisPointParameterxOES(GLenum pname, GLfixed param) { brebisGL.brebisPointParameterxOES(pname, param); }
#define glPointParameterxOES brebisPointParameterxOES
BREBIS_FORCE_INLINE void  brebisPointParameterxv(GLenum pname, const GLfixed * params) { brebisGL.brebisPointParameterxv(pname, params); }
#define glPointParameterxv brebisPointParameterxv
BREBIS_FORCE_INLINE void  brebisPointParameterxvOES(GLenum pname, const GLfixed * params) { brebisGL.brebisPointParameterxvOES(pname, params); }
#define glPointParameterxvOES brebisPointParameterxvOES
BREBIS_FORCE_INLINE void  brebisPointSize(GLfloat size) { brebisGL.brebisPointSize(size); }
#define glPointSize brebisPointSize
BREBIS_FORCE_INLINE void  brebisPointSizePointerOES(GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisPointSizePointerOES(type, stride, pointer); }
#define glPointSizePointerOES brebisPointSizePointerOES
BREBIS_FORCE_INLINE void  brebisPointSizex(GLfixed size) { brebisGL.brebisPointSizex(size); }
#define glPointSizex brebisPointSizex
BREBIS_FORCE_INLINE void  brebisPointSizexOES(GLfixed size) { brebisGL.brebisPointSizexOES(size); }
#define glPointSizexOES brebisPointSizexOES
BREBIS_FORCE_INLINE GLint brebisPollAsyncSGIX(GLuint * markerp) { return brebisGL.brebisPollAsyncSGIX(markerp); }
#define glPollAsyncSGIX brebisPollAsyncSGIX
BREBIS_FORCE_INLINE GLint brebisPollInstrumentsSGIX(GLint * marker_p) { return brebisGL.brebisPollInstrumentsSGIX(marker_p); }
#define glPollInstrumentsSGIX brebisPollInstrumentsSGIX
BREBIS_FORCE_INLINE void  brebisPolygonMode(GLenum face, GLenum mode) { brebisGL.brebisPolygonMode(face, mode); }
#define glPolygonMode brebisPolygonMode
BREBIS_FORCE_INLINE void  brebisPolygonModeNV(GLenum face, GLenum mode) { brebisGL.brebisPolygonModeNV(face, mode); }
#define glPolygonModeNV brebisPolygonModeNV
BREBIS_FORCE_INLINE void  brebisPolygonOffset(GLfloat factor, GLfloat units) { brebisGL.brebisPolygonOffset(factor, units); }
#define glPolygonOffset brebisPolygonOffset
BREBIS_FORCE_INLINE void  brebisPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) { brebisGL.brebisPolygonOffsetClamp(factor, units, clamp); }
#define glPolygonOffsetClamp brebisPolygonOffsetClamp
BREBIS_FORCE_INLINE void  brebisPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) { brebisGL.brebisPolygonOffsetClampEXT(factor, units, clamp); }
#define glPolygonOffsetClampEXT brebisPolygonOffsetClampEXT
BREBIS_FORCE_INLINE void  brebisPolygonOffsetEXT(GLfloat factor, GLfloat bias) { brebisGL.brebisPolygonOffsetEXT(factor, bias); }
#define glPolygonOffsetEXT brebisPolygonOffsetEXT
BREBIS_FORCE_INLINE void  brebisPolygonOffsetx(GLfixed factor, GLfixed units) { brebisGL.brebisPolygonOffsetx(factor, units); }
#define glPolygonOffsetx brebisPolygonOffsetx
BREBIS_FORCE_INLINE void  brebisPolygonOffsetxOES(GLfixed factor, GLfixed units) { brebisGL.brebisPolygonOffsetxOES(factor, units); }
#define glPolygonOffsetxOES brebisPolygonOffsetxOES
BREBIS_FORCE_INLINE void  brebisPolygonStipple(const GLubyte * mask) { brebisGL.brebisPolygonStipple(mask); }
#define glPolygonStipple brebisPolygonStipple
BREBIS_FORCE_INLINE void  brebisPopAttrib(void) { brebisGL.brebisPopAttrib(); }
#define glPopAttrib brebisPopAttrib
BREBIS_FORCE_INLINE void  brebisPopClientAttrib(void) { brebisGL.brebisPopClientAttrib(); }
#define glPopClientAttrib brebisPopClientAttrib
BREBIS_FORCE_INLINE void  brebisPopDebugGroup(void) { brebisGL.brebisPopDebugGroup(); }
#define glPopDebugGroup brebisPopDebugGroup
BREBIS_FORCE_INLINE void  brebisPopDebugGroupKHR(void) { brebisGL.brebisPopDebugGroupKHR(); }
#define glPopDebugGroupKHR brebisPopDebugGroupKHR
BREBIS_FORCE_INLINE void  brebisPopGroupMarkerEXT(void) { brebisGL.brebisPopGroupMarkerEXT(); }
#define glPopGroupMarkerEXT brebisPopGroupMarkerEXT
BREBIS_FORCE_INLINE void  brebisPopMatrix(void) { brebisGL.brebisPopMatrix(); }
#define glPopMatrix brebisPopMatrix
BREBIS_FORCE_INLINE void  brebisPopName(void) { brebisGL.brebisPopName(); }
#define glPopName brebisPopName
BREBIS_FORCE_INLINE void  brebisPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) { brebisGL.brebisPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3); }
#define glPresentFrameDualFillNV brebisPresentFrameDualFillNV
BREBIS_FORCE_INLINE void  brebisPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) { brebisGL.brebisPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1); }
#define glPresentFrameKeyedNV brebisPresentFrameKeyedNV
BREBIS_FORCE_INLINE void  brebisPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { brebisGL.brebisPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#define glPrimitiveBoundingBox brebisPrimitiveBoundingBox
BREBIS_FORCE_INLINE void  brebisPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { brebisGL.brebisPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#define glPrimitiveBoundingBoxARB brebisPrimitiveBoundingBoxARB
BREBIS_FORCE_INLINE void  brebisPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { brebisGL.brebisPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#define glPrimitiveBoundingBoxEXT brebisPrimitiveBoundingBoxEXT
BREBIS_FORCE_INLINE void  brebisPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { brebisGL.brebisPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
#define glPrimitiveBoundingBoxOES brebisPrimitiveBoundingBoxOES
BREBIS_FORCE_INLINE void  brebisPrimitiveRestartIndex(GLuint index) { brebisGL.brebisPrimitiveRestartIndex(index); }
#define glPrimitiveRestartIndex brebisPrimitiveRestartIndex
BREBIS_FORCE_INLINE void  brebisPrimitiveRestartIndexNV(GLuint index) { brebisGL.brebisPrimitiveRestartIndexNV(index); }
#define glPrimitiveRestartIndexNV brebisPrimitiveRestartIndexNV
BREBIS_FORCE_INLINE void  brebisPrimitiveRestartNV(void) { brebisGL.brebisPrimitiveRestartNV(); }
#define glPrimitiveRestartNV brebisPrimitiveRestartNV
BREBIS_FORCE_INLINE void  brebisPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) { brebisGL.brebisPrioritizeTextures(n, textures, priorities); }
#define glPrioritizeTextures brebisPrioritizeTextures
BREBIS_FORCE_INLINE void  brebisPrioritizeTexturesEXT(GLsizei n, const GLuint * textures, const GLclampf * priorities) { brebisGL.brebisPrioritizeTexturesEXT(n, textures, priorities); }
#define glPrioritizeTexturesEXT brebisPrioritizeTexturesEXT
BREBIS_FORCE_INLINE void  brebisPrioritizeTexturesxOES(GLsizei n, const GLuint * textures, const GLfixed * priorities) { brebisGL.brebisPrioritizeTexturesxOES(n, textures, priorities); }
#define glPrioritizeTexturesxOES brebisPrioritizeTexturesxOES
BREBIS_FORCE_INLINE void  brebisProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) { brebisGL.brebisProgramBinary(program, binaryFormat, binary, length); }
#define glProgramBinary brebisProgramBinary
BREBIS_FORCE_INLINE void  brebisProgramBinaryOES(GLuint program, GLenum binaryFormat, const void * binary, GLint length) { brebisGL.brebisProgramBinaryOES(program, binaryFormat, binary, length); }
#define glProgramBinaryOES brebisProgramBinaryOES
BREBIS_FORCE_INLINE void  brebisProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params) { brebisGL.brebisProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params); }
#define glProgramBufferParametersIivNV brebisProgramBufferParametersIivNV
BREBIS_FORCE_INLINE void  brebisProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params) { brebisGL.brebisProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params); }
#define glProgramBufferParametersIuivNV brebisProgramBufferParametersIuivNV
BREBIS_FORCE_INLINE void  brebisProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params) { brebisGL.brebisProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params); }
#define glProgramBufferParametersfvNV brebisProgramBufferParametersfvNV
BREBIS_FORCE_INLINE void  brebisProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisProgramEnvParameter4dARB(target, index, x, y, z, w); }
#define glProgramEnvParameter4dARB brebisProgramEnvParameter4dARB
BREBIS_FORCE_INLINE void  brebisProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { brebisGL.brebisProgramEnvParameter4dvARB(target, index, params); }
#define glProgramEnvParameter4dvARB brebisProgramEnvParameter4dvARB
BREBIS_FORCE_INLINE void  brebisProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisProgramEnvParameter4fARB(target, index, x, y, z, w); }
#define glProgramEnvParameter4fARB brebisProgramEnvParameter4fARB
BREBIS_FORCE_INLINE void  brebisProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { brebisGL.brebisProgramEnvParameter4fvARB(target, index, params); }
#define glProgramEnvParameter4fvARB brebisProgramEnvParameter4fvARB
BREBIS_FORCE_INLINE void  brebisProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { brebisGL.brebisProgramEnvParameterI4iNV(target, index, x, y, z, w); }
#define glProgramEnvParameterI4iNV brebisProgramEnvParameterI4iNV
BREBIS_FORCE_INLINE void  brebisProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { brebisGL.brebisProgramEnvParameterI4ivNV(target, index, params); }
#define glProgramEnvParameterI4ivNV brebisProgramEnvParameterI4ivNV
BREBIS_FORCE_INLINE void  brebisProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { brebisGL.brebisProgramEnvParameterI4uiNV(target, index, x, y, z, w); }
#define glProgramEnvParameterI4uiNV brebisProgramEnvParameterI4uiNV
BREBIS_FORCE_INLINE void  brebisProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { brebisGL.brebisProgramEnvParameterI4uivNV(target, index, params); }
#define glProgramEnvParameterI4uivNV brebisProgramEnvParameterI4uivNV
BREBIS_FORCE_INLINE void  brebisProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { brebisGL.brebisProgramEnvParameters4fvEXT(target, index, count, params); }
#define glProgramEnvParameters4fvEXT brebisProgramEnvParameters4fvEXT
BREBIS_FORCE_INLINE void  brebisProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { brebisGL.brebisProgramEnvParametersI4ivNV(target, index, count, params); }
#define glProgramEnvParametersI4ivNV brebisProgramEnvParametersI4ivNV
BREBIS_FORCE_INLINE void  brebisProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { brebisGL.brebisProgramEnvParametersI4uivNV(target, index, count, params); }
#define glProgramEnvParametersI4uivNV brebisProgramEnvParametersI4uivNV
BREBIS_FORCE_INLINE void  brebisProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisProgramLocalParameter4dARB(target, index, x, y, z, w); }
#define glProgramLocalParameter4dARB brebisProgramLocalParameter4dARB
BREBIS_FORCE_INLINE void  brebisProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { brebisGL.brebisProgramLocalParameter4dvARB(target, index, params); }
#define glProgramLocalParameter4dvARB brebisProgramLocalParameter4dvARB
BREBIS_FORCE_INLINE void  brebisProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisProgramLocalParameter4fARB(target, index, x, y, z, w); }
#define glProgramLocalParameter4fARB brebisProgramLocalParameter4fARB
BREBIS_FORCE_INLINE void  brebisProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { brebisGL.brebisProgramLocalParameter4fvARB(target, index, params); }
#define glProgramLocalParameter4fvARB brebisProgramLocalParameter4fvARB
BREBIS_FORCE_INLINE void  brebisProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { brebisGL.brebisProgramLocalParameterI4iNV(target, index, x, y, z, w); }
#define glProgramLocalParameterI4iNV brebisProgramLocalParameterI4iNV
BREBIS_FORCE_INLINE void  brebisProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { brebisGL.brebisProgramLocalParameterI4ivNV(target, index, params); }
#define glProgramLocalParameterI4ivNV brebisProgramLocalParameterI4ivNV
BREBIS_FORCE_INLINE void  brebisProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { brebisGL.brebisProgramLocalParameterI4uiNV(target, index, x, y, z, w); }
#define glProgramLocalParameterI4uiNV brebisProgramLocalParameterI4uiNV
BREBIS_FORCE_INLINE void  brebisProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { brebisGL.brebisProgramLocalParameterI4uivNV(target, index, params); }
#define glProgramLocalParameterI4uivNV brebisProgramLocalParameterI4uivNV
BREBIS_FORCE_INLINE void  brebisProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { brebisGL.brebisProgramLocalParameters4fvEXT(target, index, count, params); }
#define glProgramLocalParameters4fvEXT brebisProgramLocalParameters4fvEXT
BREBIS_FORCE_INLINE void  brebisProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { brebisGL.brebisProgramLocalParametersI4ivNV(target, index, count, params); }
#define glProgramLocalParametersI4ivNV brebisProgramLocalParametersI4ivNV
BREBIS_FORCE_INLINE void  brebisProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { brebisGL.brebisProgramLocalParametersI4uivNV(target, index, count, params); }
#define glProgramLocalParametersI4uivNV brebisProgramLocalParametersI4uivNV
BREBIS_FORCE_INLINE void  brebisProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisProgramNamedParameter4dNV(id, len, name, x, y, z, w); }
#define glProgramNamedParameter4dNV brebisProgramNamedParameter4dNV
BREBIS_FORCE_INLINE void  brebisProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v) { brebisGL.brebisProgramNamedParameter4dvNV(id, len, name, v); }
#define glProgramNamedParameter4dvNV brebisProgramNamedParameter4dvNV
BREBIS_FORCE_INLINE void  brebisProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisProgramNamedParameter4fNV(id, len, name, x, y, z, w); }
#define glProgramNamedParameter4fNV brebisProgramNamedParameter4fNV
BREBIS_FORCE_INLINE void  brebisProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v) { brebisGL.brebisProgramNamedParameter4fvNV(id, len, name, v); }
#define glProgramNamedParameter4fvNV brebisProgramNamedParameter4fvNV
BREBIS_FORCE_INLINE void  brebisProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisProgramParameter4dNV(target, index, x, y, z, w); }
#define glProgramParameter4dNV brebisProgramParameter4dNV
BREBIS_FORCE_INLINE void  brebisProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * v) { brebisGL.brebisProgramParameter4dvNV(target, index, v); }
#define glProgramParameter4dvNV brebisProgramParameter4dvNV
BREBIS_FORCE_INLINE void  brebisProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisProgramParameter4fNV(target, index, x, y, z, w); }
#define glProgramParameter4fNV brebisProgramParameter4fNV
BREBIS_FORCE_INLINE void  brebisProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * v) { brebisGL.brebisProgramParameter4fvNV(target, index, v); }
#define glProgramParameter4fvNV brebisProgramParameter4fvNV
BREBIS_FORCE_INLINE void  brebisProgramParameteri(GLuint program, GLenum pname, GLint value) { brebisGL.brebisProgramParameteri(program, pname, value); }
#define glProgramParameteri brebisProgramParameteri
BREBIS_FORCE_INLINE void  brebisProgramParameteriARB(GLuint program, GLenum pname, GLint value) { brebisGL.brebisProgramParameteriARB(program, pname, value); }
#define glProgramParameteriARB brebisProgramParameteriARB
BREBIS_FORCE_INLINE void  brebisProgramParameteriEXT(GLuint program, GLenum pname, GLint value) { brebisGL.brebisProgramParameteriEXT(program, pname, value); }
#define glProgramParameteriEXT brebisProgramParameteriEXT
BREBIS_FORCE_INLINE void  brebisProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble * v) { brebisGL.brebisProgramParameters4dvNV(target, index, count, v); }
#define glProgramParameters4dvNV brebisProgramParameters4dvNV
BREBIS_FORCE_INLINE void  brebisProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat * v) { brebisGL.brebisProgramParameters4fvNV(target, index, count, v); }
#define glProgramParameters4fvNV brebisProgramParameters4fvNV
BREBIS_FORCE_INLINE void  brebisProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs) { brebisGL.brebisProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs); }
#define glProgramPathFragmentInputGenNV brebisProgramPathFragmentInputGenNV
BREBIS_FORCE_INLINE void  brebisProgramStringARB(GLenum target, GLenum format, GLsizei len, const void * string) { brebisGL.brebisProgramStringARB(target, format, len, string); }
#define glProgramStringARB brebisProgramStringARB
BREBIS_FORCE_INLINE void  brebisProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint * params) { brebisGL.brebisProgramSubroutineParametersuivNV(target, count, params); }
#define glProgramSubroutineParametersuivNV brebisProgramSubroutineParametersuivNV
BREBIS_FORCE_INLINE void  brebisProgramUniform1d(GLuint program, GLint location, GLdouble v0) { brebisGL.brebisProgramUniform1d(program, location, v0); }
#define glProgramUniform1d brebisProgramUniform1d
BREBIS_FORCE_INLINE void  brebisProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) { brebisGL.brebisProgramUniform1dEXT(program, location, x); }
#define glProgramUniform1dEXT brebisProgramUniform1dEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisProgramUniform1dv(program, location, count, value); }
#define glProgramUniform1dv brebisProgramUniform1dv
BREBIS_FORCE_INLINE void  brebisProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisProgramUniform1dvEXT(program, location, count, value); }
#define glProgramUniform1dvEXT brebisProgramUniform1dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform1f(GLuint program, GLint location, GLfloat v0) { brebisGL.brebisProgramUniform1f(program, location, v0); }
#define glProgramUniform1f brebisProgramUniform1f
BREBIS_FORCE_INLINE void  brebisProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) { brebisGL.brebisProgramUniform1fEXT(program, location, v0); }
#define glProgramUniform1fEXT brebisProgramUniform1fEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisProgramUniform1fv(program, location, count, value); }
#define glProgramUniform1fv brebisProgramUniform1fv
BREBIS_FORCE_INLINE void  brebisProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisProgramUniform1fvEXT(program, location, count, value); }
#define glProgramUniform1fvEXT brebisProgramUniform1fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform1i(GLuint program, GLint location, GLint v0) { brebisGL.brebisProgramUniform1i(program, location, v0); }
#define glProgramUniform1i brebisProgramUniform1i
BREBIS_FORCE_INLINE void  brebisProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) { brebisGL.brebisProgramUniform1i64ARB(program, location, x); }
#define glProgramUniform1i64ARB brebisProgramUniform1i64ARB
BREBIS_FORCE_INLINE void  brebisProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) { brebisGL.brebisProgramUniform1i64NV(program, location, x); }
#define glProgramUniform1i64NV brebisProgramUniform1i64NV
BREBIS_FORCE_INLINE void  brebisProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { brebisGL.brebisProgramUniform1i64vARB(program, location, count, value); }
#define glProgramUniform1i64vARB brebisProgramUniform1i64vARB
BREBIS_FORCE_INLINE void  brebisProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { brebisGL.brebisProgramUniform1i64vNV(program, location, count, value); }
#define glProgramUniform1i64vNV brebisProgramUniform1i64vNV
BREBIS_FORCE_INLINE void  brebisProgramUniform1iEXT(GLuint program, GLint location, GLint v0) { brebisGL.brebisProgramUniform1iEXT(program, location, v0); }
#define glProgramUniform1iEXT brebisProgramUniform1iEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) { brebisGL.brebisProgramUniform1iv(program, location, count, value); }
#define glProgramUniform1iv brebisProgramUniform1iv
BREBIS_FORCE_INLINE void  brebisProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { brebisGL.brebisProgramUniform1ivEXT(program, location, count, value); }
#define glProgramUniform1ivEXT brebisProgramUniform1ivEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform1ui(GLuint program, GLint location, GLuint v0) { brebisGL.brebisProgramUniform1ui(program, location, v0); }
#define glProgramUniform1ui brebisProgramUniform1ui
BREBIS_FORCE_INLINE void  brebisProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) { brebisGL.brebisProgramUniform1ui64ARB(program, location, x); }
#define glProgramUniform1ui64ARB brebisProgramUniform1ui64ARB
BREBIS_FORCE_INLINE void  brebisProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) { brebisGL.brebisProgramUniform1ui64NV(program, location, x); }
#define glProgramUniform1ui64NV brebisProgramUniform1ui64NV
BREBIS_FORCE_INLINE void  brebisProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisProgramUniform1ui64vARB(program, location, count, value); }
#define glProgramUniform1ui64vARB brebisProgramUniform1ui64vARB
BREBIS_FORCE_INLINE void  brebisProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisProgramUniform1ui64vNV(program, location, count, value); }
#define glProgramUniform1ui64vNV brebisProgramUniform1ui64vNV
BREBIS_FORCE_INLINE void  brebisProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) { brebisGL.brebisProgramUniform1uiEXT(program, location, v0); }
#define glProgramUniform1uiEXT brebisProgramUniform1uiEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisProgramUniform1uiv(program, location, count, value); }
#define glProgramUniform1uiv brebisProgramUniform1uiv
BREBIS_FORCE_INLINE void  brebisProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisProgramUniform1uivEXT(program, location, count, value); }
#define glProgramUniform1uivEXT brebisProgramUniform1uivEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) { brebisGL.brebisProgramUniform2d(program, location, v0, v1); }
#define glProgramUniform2d brebisProgramUniform2d
BREBIS_FORCE_INLINE void  brebisProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) { brebisGL.brebisProgramUniform2dEXT(program, location, x, y); }
#define glProgramUniform2dEXT brebisProgramUniform2dEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisProgramUniform2dv(program, location, count, value); }
#define glProgramUniform2dv brebisProgramUniform2dv
BREBIS_FORCE_INLINE void  brebisProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisProgramUniform2dvEXT(program, location, count, value); }
#define glProgramUniform2dvEXT brebisProgramUniform2dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) { brebisGL.brebisProgramUniform2f(program, location, v0, v1); }
#define glProgramUniform2f brebisProgramUniform2f
BREBIS_FORCE_INLINE void  brebisProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) { brebisGL.brebisProgramUniform2fEXT(program, location, v0, v1); }
#define glProgramUniform2fEXT brebisProgramUniform2fEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisProgramUniform2fv(program, location, count, value); }
#define glProgramUniform2fv brebisProgramUniform2fv
BREBIS_FORCE_INLINE void  brebisProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisProgramUniform2fvEXT(program, location, count, value); }
#define glProgramUniform2fvEXT brebisProgramUniform2fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) { brebisGL.brebisProgramUniform2i(program, location, v0, v1); }
#define glProgramUniform2i brebisProgramUniform2i
BREBIS_FORCE_INLINE void  brebisProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) { brebisGL.brebisProgramUniform2i64ARB(program, location, x, y); }
#define glProgramUniform2i64ARB brebisProgramUniform2i64ARB
BREBIS_FORCE_INLINE void  brebisProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) { brebisGL.brebisProgramUniform2i64NV(program, location, x, y); }
#define glProgramUniform2i64NV brebisProgramUniform2i64NV
BREBIS_FORCE_INLINE void  brebisProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { brebisGL.brebisProgramUniform2i64vARB(program, location, count, value); }
#define glProgramUniform2i64vARB brebisProgramUniform2i64vARB
BREBIS_FORCE_INLINE void  brebisProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { brebisGL.brebisProgramUniform2i64vNV(program, location, count, value); }
#define glProgramUniform2i64vNV brebisProgramUniform2i64vNV
BREBIS_FORCE_INLINE void  brebisProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) { brebisGL.brebisProgramUniform2iEXT(program, location, v0, v1); }
#define glProgramUniform2iEXT brebisProgramUniform2iEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) { brebisGL.brebisProgramUniform2iv(program, location, count, value); }
#define glProgramUniform2iv brebisProgramUniform2iv
BREBIS_FORCE_INLINE void  brebisProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { brebisGL.brebisProgramUniform2ivEXT(program, location, count, value); }
#define glProgramUniform2ivEXT brebisProgramUniform2ivEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) { brebisGL.brebisProgramUniform2ui(program, location, v0, v1); }
#define glProgramUniform2ui brebisProgramUniform2ui
BREBIS_FORCE_INLINE void  brebisProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) { brebisGL.brebisProgramUniform2ui64ARB(program, location, x, y); }
#define glProgramUniform2ui64ARB brebisProgramUniform2ui64ARB
BREBIS_FORCE_INLINE void  brebisProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) { brebisGL.brebisProgramUniform2ui64NV(program, location, x, y); }
#define glProgramUniform2ui64NV brebisProgramUniform2ui64NV
BREBIS_FORCE_INLINE void  brebisProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisProgramUniform2ui64vARB(program, location, count, value); }
#define glProgramUniform2ui64vARB brebisProgramUniform2ui64vARB
BREBIS_FORCE_INLINE void  brebisProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisProgramUniform2ui64vNV(program, location, count, value); }
#define glProgramUniform2ui64vNV brebisProgramUniform2ui64vNV
BREBIS_FORCE_INLINE void  brebisProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) { brebisGL.brebisProgramUniform2uiEXT(program, location, v0, v1); }
#define glProgramUniform2uiEXT brebisProgramUniform2uiEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisProgramUniform2uiv(program, location, count, value); }
#define glProgramUniform2uiv brebisProgramUniform2uiv
BREBIS_FORCE_INLINE void  brebisProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisProgramUniform2uivEXT(program, location, count, value); }
#define glProgramUniform2uivEXT brebisProgramUniform2uivEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { brebisGL.brebisProgramUniform3d(program, location, v0, v1, v2); }
#define glProgramUniform3d brebisProgramUniform3d
BREBIS_FORCE_INLINE void  brebisProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisProgramUniform3dEXT(program, location, x, y, z); }
#define glProgramUniform3dEXT brebisProgramUniform3dEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisProgramUniform3dv(program, location, count, value); }
#define glProgramUniform3dv brebisProgramUniform3dv
BREBIS_FORCE_INLINE void  brebisProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisProgramUniform3dvEXT(program, location, count, value); }
#define glProgramUniform3dvEXT brebisProgramUniform3dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { brebisGL.brebisProgramUniform3f(program, location, v0, v1, v2); }
#define glProgramUniform3f brebisProgramUniform3f
BREBIS_FORCE_INLINE void  brebisProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { brebisGL.brebisProgramUniform3fEXT(program, location, v0, v1, v2); }
#define glProgramUniform3fEXT brebisProgramUniform3fEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisProgramUniform3fv(program, location, count, value); }
#define glProgramUniform3fv brebisProgramUniform3fv
BREBIS_FORCE_INLINE void  brebisProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisProgramUniform3fvEXT(program, location, count, value); }
#define glProgramUniform3fvEXT brebisProgramUniform3fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { brebisGL.brebisProgramUniform3i(program, location, v0, v1, v2); }
#define glProgramUniform3i brebisProgramUniform3i
BREBIS_FORCE_INLINE void  brebisProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) { brebisGL.brebisProgramUniform3i64ARB(program, location, x, y, z); }
#define glProgramUniform3i64ARB brebisProgramUniform3i64ARB
BREBIS_FORCE_INLINE void  brebisProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { brebisGL.brebisProgramUniform3i64NV(program, location, x, y, z); }
#define glProgramUniform3i64NV brebisProgramUniform3i64NV
BREBIS_FORCE_INLINE void  brebisProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { brebisGL.brebisProgramUniform3i64vARB(program, location, count, value); }
#define glProgramUniform3i64vARB brebisProgramUniform3i64vARB
BREBIS_FORCE_INLINE void  brebisProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { brebisGL.brebisProgramUniform3i64vNV(program, location, count, value); }
#define glProgramUniform3i64vNV brebisProgramUniform3i64vNV
BREBIS_FORCE_INLINE void  brebisProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { brebisGL.brebisProgramUniform3iEXT(program, location, v0, v1, v2); }
#define glProgramUniform3iEXT brebisProgramUniform3iEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) { brebisGL.brebisProgramUniform3iv(program, location, count, value); }
#define glProgramUniform3iv brebisProgramUniform3iv
BREBIS_FORCE_INLINE void  brebisProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { brebisGL.brebisProgramUniform3ivEXT(program, location, count, value); }
#define glProgramUniform3ivEXT brebisProgramUniform3ivEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { brebisGL.brebisProgramUniform3ui(program, location, v0, v1, v2); }
#define glProgramUniform3ui brebisProgramUniform3ui
BREBIS_FORCE_INLINE void  brebisProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { brebisGL.brebisProgramUniform3ui64ARB(program, location, x, y, z); }
#define glProgramUniform3ui64ARB brebisProgramUniform3ui64ARB
BREBIS_FORCE_INLINE void  brebisProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { brebisGL.brebisProgramUniform3ui64NV(program, location, x, y, z); }
#define glProgramUniform3ui64NV brebisProgramUniform3ui64NV
BREBIS_FORCE_INLINE void  brebisProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisProgramUniform3ui64vARB(program, location, count, value); }
#define glProgramUniform3ui64vARB brebisProgramUniform3ui64vARB
BREBIS_FORCE_INLINE void  brebisProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisProgramUniform3ui64vNV(program, location, count, value); }
#define glProgramUniform3ui64vNV brebisProgramUniform3ui64vNV
BREBIS_FORCE_INLINE void  brebisProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { brebisGL.brebisProgramUniform3uiEXT(program, location, v0, v1, v2); }
#define glProgramUniform3uiEXT brebisProgramUniform3uiEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisProgramUniform3uiv(program, location, count, value); }
#define glProgramUniform3uiv brebisProgramUniform3uiv
BREBIS_FORCE_INLINE void  brebisProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisProgramUniform3uivEXT(program, location, count, value); }
#define glProgramUniform3uivEXT brebisProgramUniform3uivEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { brebisGL.brebisProgramUniform4d(program, location, v0, v1, v2, v3); }
#define glProgramUniform4d brebisProgramUniform4d
BREBIS_FORCE_INLINE void  brebisProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisProgramUniform4dEXT(program, location, x, y, z, w); }
#define glProgramUniform4dEXT brebisProgramUniform4dEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisProgramUniform4dv(program, location, count, value); }
#define glProgramUniform4dv brebisProgramUniform4dv
BREBIS_FORCE_INLINE void  brebisProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisProgramUniform4dvEXT(program, location, count, value); }
#define glProgramUniform4dvEXT brebisProgramUniform4dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { brebisGL.brebisProgramUniform4f(program, location, v0, v1, v2, v3); }
#define glProgramUniform4f brebisProgramUniform4f
BREBIS_FORCE_INLINE void  brebisProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { brebisGL.brebisProgramUniform4fEXT(program, location, v0, v1, v2, v3); }
#define glProgramUniform4fEXT brebisProgramUniform4fEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisProgramUniform4fv(program, location, count, value); }
#define glProgramUniform4fv brebisProgramUniform4fv
BREBIS_FORCE_INLINE void  brebisProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisProgramUniform4fvEXT(program, location, count, value); }
#define glProgramUniform4fvEXT brebisProgramUniform4fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { brebisGL.brebisProgramUniform4i(program, location, v0, v1, v2, v3); }
#define glProgramUniform4i brebisProgramUniform4i
BREBIS_FORCE_INLINE void  brebisProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { brebisGL.brebisProgramUniform4i64ARB(program, location, x, y, z, w); }
#define glProgramUniform4i64ARB brebisProgramUniform4i64ARB
BREBIS_FORCE_INLINE void  brebisProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { brebisGL.brebisProgramUniform4i64NV(program, location, x, y, z, w); }
#define glProgramUniform4i64NV brebisProgramUniform4i64NV
BREBIS_FORCE_INLINE void  brebisProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { brebisGL.brebisProgramUniform4i64vARB(program, location, count, value); }
#define glProgramUniform4i64vARB brebisProgramUniform4i64vARB
BREBIS_FORCE_INLINE void  brebisProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { brebisGL.brebisProgramUniform4i64vNV(program, location, count, value); }
#define glProgramUniform4i64vNV brebisProgramUniform4i64vNV
BREBIS_FORCE_INLINE void  brebisProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { brebisGL.brebisProgramUniform4iEXT(program, location, v0, v1, v2, v3); }
#define glProgramUniform4iEXT brebisProgramUniform4iEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) { brebisGL.brebisProgramUniform4iv(program, location, count, value); }
#define glProgramUniform4iv brebisProgramUniform4iv
BREBIS_FORCE_INLINE void  brebisProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { brebisGL.brebisProgramUniform4ivEXT(program, location, count, value); }
#define glProgramUniform4ivEXT brebisProgramUniform4ivEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { brebisGL.brebisProgramUniform4ui(program, location, v0, v1, v2, v3); }
#define glProgramUniform4ui brebisProgramUniform4ui
BREBIS_FORCE_INLINE void  brebisProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { brebisGL.brebisProgramUniform4ui64ARB(program, location, x, y, z, w); }
#define glProgramUniform4ui64ARB brebisProgramUniform4ui64ARB
BREBIS_FORCE_INLINE void  brebisProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { brebisGL.brebisProgramUniform4ui64NV(program, location, x, y, z, w); }
#define glProgramUniform4ui64NV brebisProgramUniform4ui64NV
BREBIS_FORCE_INLINE void  brebisProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisProgramUniform4ui64vARB(program, location, count, value); }
#define glProgramUniform4ui64vARB brebisProgramUniform4ui64vARB
BREBIS_FORCE_INLINE void  brebisProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisProgramUniform4ui64vNV(program, location, count, value); }
#define glProgramUniform4ui64vNV brebisProgramUniform4ui64vNV
BREBIS_FORCE_INLINE void  brebisProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { brebisGL.brebisProgramUniform4uiEXT(program, location, v0, v1, v2, v3); }
#define glProgramUniform4uiEXT brebisProgramUniform4uiEXT
BREBIS_FORCE_INLINE void  brebisProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisProgramUniform4uiv(program, location, count, value); }
#define glProgramUniform4uiv brebisProgramUniform4uiv
BREBIS_FORCE_INLINE void  brebisProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisProgramUniform4uivEXT(program, location, count, value); }
#define glProgramUniform4uivEXT brebisProgramUniform4uivEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) { brebisGL.brebisProgramUniformHandleui64ARB(program, location, value); }
#define glProgramUniformHandleui64ARB brebisProgramUniformHandleui64ARB
BREBIS_FORCE_INLINE void  brebisProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value) { brebisGL.brebisProgramUniformHandleui64IMG(program, location, value); }
#define glProgramUniformHandleui64IMG brebisProgramUniformHandleui64IMG
BREBIS_FORCE_INLINE void  brebisProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) { brebisGL.brebisProgramUniformHandleui64NV(program, location, value); }
#define glProgramUniformHandleui64NV brebisProgramUniformHandleui64NV
BREBIS_FORCE_INLINE void  brebisProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { brebisGL.brebisProgramUniformHandleui64vARB(program, location, count, values); }
#define glProgramUniformHandleui64vARB brebisProgramUniformHandleui64vARB
BREBIS_FORCE_INLINE void  brebisProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { brebisGL.brebisProgramUniformHandleui64vIMG(program, location, count, values); }
#define glProgramUniformHandleui64vIMG brebisProgramUniformHandleui64vIMG
BREBIS_FORCE_INLINE void  brebisProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { brebisGL.brebisProgramUniformHandleui64vNV(program, location, count, values); }
#define glProgramUniformHandleui64vNV brebisProgramUniformHandleui64vNV
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix2dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2dv brebisProgramUniformMatrix2dv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix2dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2dvEXT brebisProgramUniformMatrix2dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix2fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2fv brebisProgramUniformMatrix2fv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix2fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2fvEXT brebisProgramUniformMatrix2fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix2x3dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x3dv brebisProgramUniformMatrix2x3dv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x3dvEXT brebisProgramUniformMatrix2x3dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix2x3fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x3fv brebisProgramUniformMatrix2x3fv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x3fvEXT brebisProgramUniformMatrix2x3fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix2x4dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x4dv brebisProgramUniformMatrix2x4dv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x4dvEXT brebisProgramUniformMatrix2x4dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix2x4fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x4fv brebisProgramUniformMatrix2x4fv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix2x4fvEXT brebisProgramUniformMatrix2x4fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix3dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3dv brebisProgramUniformMatrix3dv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix3dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3dvEXT brebisProgramUniformMatrix3dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix3fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3fv brebisProgramUniformMatrix3fv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix3fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3fvEXT brebisProgramUniformMatrix3fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix3x2dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x2dv brebisProgramUniformMatrix3x2dv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x2dvEXT brebisProgramUniformMatrix3x2dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix3x2fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x2fv brebisProgramUniformMatrix3x2fv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x2fvEXT brebisProgramUniformMatrix3x2fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix3x4dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x4dv brebisProgramUniformMatrix3x4dv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x4dvEXT brebisProgramUniformMatrix3x4dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix3x4fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x4fv brebisProgramUniformMatrix3x4fv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix3x4fvEXT brebisProgramUniformMatrix3x4fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix4dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4dv brebisProgramUniformMatrix4dv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix4dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4dvEXT brebisProgramUniformMatrix4dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix4fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4fv brebisProgramUniformMatrix4fv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix4fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4fvEXT brebisProgramUniformMatrix4fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix4x2dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x2dv brebisProgramUniformMatrix4x2dv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x2dvEXT brebisProgramUniformMatrix4x2dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix4x2fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x2fv brebisProgramUniformMatrix4x2fv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x2fvEXT brebisProgramUniformMatrix4x2fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix4x3dv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x3dv brebisProgramUniformMatrix4x3dv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x3dvEXT brebisProgramUniformMatrix4x3dvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix4x3fv(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x3fv brebisProgramUniformMatrix4x3fv
BREBIS_FORCE_INLINE void  brebisProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value); }
#define glProgramUniformMatrix4x3fvEXT brebisProgramUniformMatrix4x3fvEXT
BREBIS_FORCE_INLINE void  brebisProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) { brebisGL.brebisProgramUniformui64NV(program, location, value); }
#define glProgramUniformui64NV brebisProgramUniformui64NV
BREBIS_FORCE_INLINE void  brebisProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisProgramUniformui64vNV(program, location, count, value); }
#define glProgramUniformui64vNV brebisProgramUniformui64vNV
BREBIS_FORCE_INLINE void  brebisProgramVertexLimitNV(GLenum target, GLint limit) { brebisGL.brebisProgramVertexLimitNV(target, limit); }
#define glProgramVertexLimitNV brebisProgramVertexLimitNV
BREBIS_FORCE_INLINE void  brebisProvokingVertex(GLenum mode) { brebisGL.brebisProvokingVertex(mode); }
#define glProvokingVertex brebisProvokingVertex
BREBIS_FORCE_INLINE void  brebisProvokingVertexEXT(GLenum mode) { brebisGL.brebisProvokingVertexEXT(mode); }
#define glProvokingVertexEXT brebisProvokingVertexEXT
BREBIS_FORCE_INLINE void  brebisPushAttrib(GLbitfield mask) { brebisGL.brebisPushAttrib(mask); }
#define glPushAttrib brebisPushAttrib
BREBIS_FORCE_INLINE void  brebisPushClientAttrib(GLbitfield mask) { brebisGL.brebisPushClientAttrib(mask); }
#define glPushClientAttrib brebisPushClientAttrib
BREBIS_FORCE_INLINE void  brebisPushClientAttribDefaultEXT(GLbitfield mask) { brebisGL.brebisPushClientAttribDefaultEXT(mask); }
#define glPushClientAttribDefaultEXT brebisPushClientAttribDefaultEXT
BREBIS_FORCE_INLINE void  brebisPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) { brebisGL.brebisPushDebugGroup(source, id, length, message); }
#define glPushDebugGroup brebisPushDebugGroup
BREBIS_FORCE_INLINE void  brebisPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar * message) { brebisGL.brebisPushDebugGroupKHR(source, id, length, message); }
#define glPushDebugGroupKHR brebisPushDebugGroupKHR
BREBIS_FORCE_INLINE void  brebisPushGroupMarkerEXT(GLsizei length, const GLchar * marker) { brebisGL.brebisPushGroupMarkerEXT(length, marker); }
#define glPushGroupMarkerEXT brebisPushGroupMarkerEXT
BREBIS_FORCE_INLINE void  brebisPushMatrix(void) { brebisGL.brebisPushMatrix(); }
#define glPushMatrix brebisPushMatrix
BREBIS_FORCE_INLINE void  brebisPushName(GLuint name) { brebisGL.brebisPushName(name); }
#define glPushName brebisPushName
BREBIS_FORCE_INLINE void  brebisQueryCounter(GLuint id, GLenum target) { brebisGL.brebisQueryCounter(id, target); }
#define glQueryCounter brebisQueryCounter
BREBIS_FORCE_INLINE void  brebisQueryCounterEXT(GLuint id, GLenum target) { brebisGL.brebisQueryCounterEXT(id, target); }
#define glQueryCounterEXT brebisQueryCounterEXT
BREBIS_FORCE_INLINE GLbitfield brebisQueryMatrixxOES(GLfixed * mantissa, GLint * exponent) { return brebisGL.brebisQueryMatrixxOES(mantissa, exponent); }
#define glQueryMatrixxOES brebisQueryMatrixxOES
BREBIS_FORCE_INLINE void  brebisQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) { brebisGL.brebisQueryObjectParameteruiAMD(target, id, pname, param); }
#define glQueryObjectParameteruiAMD brebisQueryObjectParameteruiAMD
BREBIS_FORCE_INLINE GLint brebisQueryResourceNV(GLenum queryType, GLint tagId, GLuint bufSize, GLint * buffer) { return brebisGL.brebisQueryResourceNV(queryType, tagId, bufSize, buffer); }
#define glQueryResourceNV brebisQueryResourceNV
BREBIS_FORCE_INLINE void  brebisQueryResourceTagNV(GLint tagId, const GLchar * tagString) { brebisGL.brebisQueryResourceTagNV(tagId, tagString); }
#define glQueryResourceTagNV brebisQueryResourceTagNV
BREBIS_FORCE_INLINE void  brebisRasterPos2d(GLdouble x, GLdouble y) { brebisGL.brebisRasterPos2d(x, y); }
#define glRasterPos2d brebisRasterPos2d
BREBIS_FORCE_INLINE void  brebisRasterPos2dv(const GLdouble * v) { brebisGL.brebisRasterPos2dv(v); }
#define glRasterPos2dv brebisRasterPos2dv
BREBIS_FORCE_INLINE void  brebisRasterPos2f(GLfloat x, GLfloat y) { brebisGL.brebisRasterPos2f(x, y); }
#define glRasterPos2f brebisRasterPos2f
BREBIS_FORCE_INLINE void  brebisRasterPos2fv(const GLfloat * v) { brebisGL.brebisRasterPos2fv(v); }
#define glRasterPos2fv brebisRasterPos2fv
BREBIS_FORCE_INLINE void  brebisRasterPos2i(GLint x, GLint y) { brebisGL.brebisRasterPos2i(x, y); }
#define glRasterPos2i brebisRasterPos2i
BREBIS_FORCE_INLINE void  brebisRasterPos2iv(const GLint * v) { brebisGL.brebisRasterPos2iv(v); }
#define glRasterPos2iv brebisRasterPos2iv
BREBIS_FORCE_INLINE void  brebisRasterPos2s(GLshort x, GLshort y) { brebisGL.brebisRasterPos2s(x, y); }
#define glRasterPos2s brebisRasterPos2s
BREBIS_FORCE_INLINE void  brebisRasterPos2sv(const GLshort * v) { brebisGL.brebisRasterPos2sv(v); }
#define glRasterPos2sv brebisRasterPos2sv
BREBIS_FORCE_INLINE void  brebisRasterPos2xOES(GLfixed x, GLfixed y) { brebisGL.brebisRasterPos2xOES(x, y); }
#define glRasterPos2xOES brebisRasterPos2xOES
BREBIS_FORCE_INLINE void  brebisRasterPos2xvOES(const GLfixed * coords) { brebisGL.brebisRasterPos2xvOES(coords); }
#define glRasterPos2xvOES brebisRasterPos2xvOES
BREBIS_FORCE_INLINE void  brebisRasterPos3d(GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisRasterPos3d(x, y, z); }
#define glRasterPos3d brebisRasterPos3d
BREBIS_FORCE_INLINE void  brebisRasterPos3dv(const GLdouble * v) { brebisGL.brebisRasterPos3dv(v); }
#define glRasterPos3dv brebisRasterPos3dv
BREBIS_FORCE_INLINE void  brebisRasterPos3f(GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisRasterPos3f(x, y, z); }
#define glRasterPos3f brebisRasterPos3f
BREBIS_FORCE_INLINE void  brebisRasterPos3fv(const GLfloat * v) { brebisGL.brebisRasterPos3fv(v); }
#define glRasterPos3fv brebisRasterPos3fv
BREBIS_FORCE_INLINE void  brebisRasterPos3i(GLint x, GLint y, GLint z) { brebisGL.brebisRasterPos3i(x, y, z); }
#define glRasterPos3i brebisRasterPos3i
BREBIS_FORCE_INLINE void  brebisRasterPos3iv(const GLint * v) { brebisGL.brebisRasterPos3iv(v); }
#define glRasterPos3iv brebisRasterPos3iv
BREBIS_FORCE_INLINE void  brebisRasterPos3s(GLshort x, GLshort y, GLshort z) { brebisGL.brebisRasterPos3s(x, y, z); }
#define glRasterPos3s brebisRasterPos3s
BREBIS_FORCE_INLINE void  brebisRasterPos3sv(const GLshort * v) { brebisGL.brebisRasterPos3sv(v); }
#define glRasterPos3sv brebisRasterPos3sv
BREBIS_FORCE_INLINE void  brebisRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z) { brebisGL.brebisRasterPos3xOES(x, y, z); }
#define glRasterPos3xOES brebisRasterPos3xOES
BREBIS_FORCE_INLINE void  brebisRasterPos3xvOES(const GLfixed * coords) { brebisGL.brebisRasterPos3xvOES(coords); }
#define glRasterPos3xvOES brebisRasterPos3xvOES
BREBIS_FORCE_INLINE void  brebisRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisRasterPos4d(x, y, z, w); }
#define glRasterPos4d brebisRasterPos4d
BREBIS_FORCE_INLINE void  brebisRasterPos4dv(const GLdouble * v) { brebisGL.brebisRasterPos4dv(v); }
#define glRasterPos4dv brebisRasterPos4dv
BREBIS_FORCE_INLINE void  brebisRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisRasterPos4f(x, y, z, w); }
#define glRasterPos4f brebisRasterPos4f
BREBIS_FORCE_INLINE void  brebisRasterPos4fv(const GLfloat * v) { brebisGL.brebisRasterPos4fv(v); }
#define glRasterPos4fv brebisRasterPos4fv
BREBIS_FORCE_INLINE void  brebisRasterPos4i(GLint x, GLint y, GLint z, GLint w) { brebisGL.brebisRasterPos4i(x, y, z, w); }
#define glRasterPos4i brebisRasterPos4i
BREBIS_FORCE_INLINE void  brebisRasterPos4iv(const GLint * v) { brebisGL.brebisRasterPos4iv(v); }
#define glRasterPos4iv brebisRasterPos4iv
BREBIS_FORCE_INLINE void  brebisRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) { brebisGL.brebisRasterPos4s(x, y, z, w); }
#define glRasterPos4s brebisRasterPos4s
BREBIS_FORCE_INLINE void  brebisRasterPos4sv(const GLshort * v) { brebisGL.brebisRasterPos4sv(v); }
#define glRasterPos4sv brebisRasterPos4sv
BREBIS_FORCE_INLINE void  brebisRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w) { brebisGL.brebisRasterPos4xOES(x, y, z, w); }
#define glRasterPos4xOES brebisRasterPos4xOES
BREBIS_FORCE_INLINE void  brebisRasterPos4xvOES(const GLfixed * coords) { brebisGL.brebisRasterPos4xvOES(coords); }
#define glRasterPos4xvOES brebisRasterPos4xvOES
BREBIS_FORCE_INLINE void  brebisRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) { brebisGL.brebisRasterSamplesEXT(samples, fixedsamplelocations); }
#define glRasterSamplesEXT brebisRasterSamplesEXT
BREBIS_FORCE_INLINE void  brebisReadBuffer(GLenum src) { brebisGL.brebisReadBuffer(src); }
#define glReadBuffer brebisReadBuffer
BREBIS_FORCE_INLINE void  brebisReadBufferIndexedEXT(GLenum src, GLint index) { brebisGL.brebisReadBufferIndexedEXT(src, index); }
#define glReadBufferIndexedEXT brebisReadBufferIndexedEXT
BREBIS_FORCE_INLINE void  brebisReadBufferNV(GLenum mode) { brebisGL.brebisReadBufferNV(mode); }
#define glReadBufferNV brebisReadBufferNV
BREBIS_FORCE_INLINE void  brebisReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisReadBufferRegion(region, x, y, width, height); }
#define glReadBufferRegion brebisReadBufferRegion
BREBIS_FORCE_INLINE void  brebisReadInstrumentsSGIX(GLint marker) { brebisGL.brebisReadInstrumentsSGIX(marker); }
#define glReadInstrumentsSGIX brebisReadInstrumentsSGIX
BREBIS_FORCE_INLINE void  brebisReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) { brebisGL.brebisReadPixels(x, y, width, height, format, type, pixels); }
#define glReadPixels brebisReadPixels
BREBIS_FORCE_INLINE void  brebisReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { brebisGL.brebisReadnPixels(x, y, width, height, format, type, bufSize, data); }
#define glReadnPixels brebisReadnPixels
BREBIS_FORCE_INLINE void  brebisReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { brebisGL.brebisReadnPixelsARB(x, y, width, height, format, type, bufSize, data); }
#define glReadnPixelsARB brebisReadnPixelsARB
BREBIS_FORCE_INLINE void  brebisReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { brebisGL.brebisReadnPixelsEXT(x, y, width, height, format, type, bufSize, data); }
#define glReadnPixelsEXT brebisReadnPixelsEXT
BREBIS_FORCE_INLINE void  brebisReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { brebisGL.brebisReadnPixelsKHR(x, y, width, height, format, type, bufSize, data); }
#define glReadnPixelsKHR brebisReadnPixelsKHR
BREBIS_FORCE_INLINE void  brebisRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) { brebisGL.brebisRectd(x1, y1, x2, y2); }
#define glRectd brebisRectd
BREBIS_FORCE_INLINE void  brebisRectdv(const GLdouble * v1, const GLdouble * v2) { brebisGL.brebisRectdv(v1, v2); }
#define glRectdv brebisRectdv
BREBIS_FORCE_INLINE void  brebisRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) { brebisGL.brebisRectf(x1, y1, x2, y2); }
#define glRectf brebisRectf
BREBIS_FORCE_INLINE void  brebisRectfv(const GLfloat * v1, const GLfloat * v2) { brebisGL.brebisRectfv(v1, v2); }
#define glRectfv brebisRectfv
BREBIS_FORCE_INLINE void  brebisRecti(GLint x1, GLint y1, GLint x2, GLint y2) { brebisGL.brebisRecti(x1, y1, x2, y2); }
#define glRecti brebisRecti
BREBIS_FORCE_INLINE void  brebisRectiv(const GLint * v1, const GLint * v2) { brebisGL.brebisRectiv(v1, v2); }
#define glRectiv brebisRectiv
BREBIS_FORCE_INLINE void  brebisRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) { brebisGL.brebisRects(x1, y1, x2, y2); }
#define glRects brebisRects
BREBIS_FORCE_INLINE void  brebisRectsv(const GLshort * v1, const GLshort * v2) { brebisGL.brebisRectsv(v1, v2); }
#define glRectsv brebisRectsv
BREBIS_FORCE_INLINE void  brebisRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) { brebisGL.brebisRectxOES(x1, y1, x2, y2); }
#define glRectxOES brebisRectxOES
BREBIS_FORCE_INLINE void  brebisRectxvOES(const GLfixed * v1, const GLfixed * v2) { brebisGL.brebisRectxvOES(v1, v2); }
#define glRectxvOES brebisRectxvOES
BREBIS_FORCE_INLINE void  brebisReferencePlaneSGIX(const GLdouble * equation) { brebisGL.brebisReferencePlaneSGIX(equation); }
#define glReferencePlaneSGIX brebisReferencePlaneSGIX
BREBIS_FORCE_INLINE GLboolean brebisReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) { return brebisGL.brebisReleaseKeyedMutexWin32EXT(memory, key); }
#define glReleaseKeyedMutexWin32EXT brebisReleaseKeyedMutexWin32EXT
BREBIS_FORCE_INLINE void  brebisReleaseShaderCompiler(void) { brebisGL.brebisReleaseShaderCompiler(); }
#define glReleaseShaderCompiler brebisReleaseShaderCompiler
BREBIS_FORCE_INLINE void  brebisRenderGpuMaskNV(GLbitfield mask) { brebisGL.brebisRenderGpuMaskNV(mask); }
#define glRenderGpuMaskNV brebisRenderGpuMaskNV
BREBIS_FORCE_INLINE GLint brebisRenderMode(GLenum mode) { return brebisGL.brebisRenderMode(mode); }
#define glRenderMode brebisRenderMode
BREBIS_FORCE_INLINE void  brebisRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorage(target, internalformat, width, height); }
#define glRenderbufferStorage brebisRenderbufferStorage
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageEXT(target, internalformat, width, height); }
#define glRenderbufferStorageEXT brebisRenderbufferStorageEXT
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageMultisample(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisample brebisRenderbufferStorageMultisample
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleANGLE brebisRenderbufferStorageMultisampleANGLE
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleAPPLE brebisRenderbufferStorageMultisampleAPPLE
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageMultisampleAdvancedAMD(GLenum target, GLsizei samples, GLsizei storageSamples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleAdvancedAMD brebisRenderbufferStorageMultisampleAdvancedAMD
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleCoverageNV brebisRenderbufferStorageMultisampleCoverageNV
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleEXT brebisRenderbufferStorageMultisampleEXT
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleIMG brebisRenderbufferStorageMultisampleIMG
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height); }
#define glRenderbufferStorageMultisampleNV brebisRenderbufferStorageMultisampleNV
BREBIS_FORCE_INLINE void  brebisRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisRenderbufferStorageOES(target, internalformat, width, height); }
#define glRenderbufferStorageOES brebisRenderbufferStorageOES
BREBIS_FORCE_INLINE void  brebisReplacementCodePointerSUN(GLenum type, GLsizei stride, const void ** pointer) { brebisGL.brebisReplacementCodePointerSUN(type, stride, pointer); }
#define glReplacementCodePointerSUN brebisReplacementCodePointerSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeubSUN(GLubyte code) { brebisGL.brebisReplacementCodeubSUN(code); }
#define glReplacementCodeubSUN brebisReplacementCodeubSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeubvSUN(const GLubyte * code) { brebisGL.brebisReplacementCodeubvSUN(code); }
#define glReplacementCodeubvSUN brebisReplacementCodeubvSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z); }
#define glReplacementCodeuiColor3fVertex3fSUN brebisReplacementCodeuiColor3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v) { brebisGL.brebisReplacementCodeuiColor3fVertex3fvSUN(rc, c, v); }
#define glReplacementCodeuiColor3fVertex3fvSUN brebisReplacementCodeuiColor3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z); }
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN brebisReplacementCodeuiColor4fNormal3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { brebisGL.brebisReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v); }
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN brebisReplacementCodeuiColor4fNormal3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z); }
#define glReplacementCodeuiColor4ubVertex3fSUN brebisReplacementCodeuiColor4ubVertex3fSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v) { brebisGL.brebisReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v); }
#define glReplacementCodeuiColor4ubVertex3fvSUN brebisReplacementCodeuiColor4ubVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z); }
#define glReplacementCodeuiNormal3fVertex3fSUN brebisReplacementCodeuiNormal3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * n, const GLfloat * v) { brebisGL.brebisReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v); }
#define glReplacementCodeuiNormal3fVertex3fvSUN brebisReplacementCodeuiNormal3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiSUN(GLuint code) { brebisGL.brebisReplacementCodeuiSUN(code); }
#define glReplacementCodeuiSUN brebisReplacementCodeuiSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z); }
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { brebisGL.brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v); }
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z); }
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN brebisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) { brebisGL.brebisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v); }
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN brebisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z); }
#define glReplacementCodeuiTexCoord2fVertex3fSUN brebisReplacementCodeuiTexCoord2fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * v) { brebisGL.brebisReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v); }
#define glReplacementCodeuiTexCoord2fVertex3fvSUN brebisReplacementCodeuiTexCoord2fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisReplacementCodeuiVertex3fSUN(rc, x, y, z); }
#define glReplacementCodeuiVertex3fSUN brebisReplacementCodeuiVertex3fSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v) { brebisGL.brebisReplacementCodeuiVertex3fvSUN(rc, v); }
#define glReplacementCodeuiVertex3fvSUN brebisReplacementCodeuiVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeuivSUN(const GLuint * code) { brebisGL.brebisReplacementCodeuivSUN(code); }
#define glReplacementCodeuivSUN brebisReplacementCodeuivSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeusSUN(GLushort code) { brebisGL.brebisReplacementCodeusSUN(code); }
#define glReplacementCodeusSUN brebisReplacementCodeusSUN
BREBIS_FORCE_INLINE void  brebisReplacementCodeusvSUN(const GLushort * code) { brebisGL.brebisReplacementCodeusvSUN(code); }
#define glReplacementCodeusvSUN brebisReplacementCodeusvSUN
BREBIS_FORCE_INLINE void  brebisRequestResidentProgramsNV(GLsizei n, const GLuint * programs) { brebisGL.brebisRequestResidentProgramsNV(n, programs); }
#define glRequestResidentProgramsNV brebisRequestResidentProgramsNV
BREBIS_FORCE_INLINE void  brebisResetHistogram(GLenum target) { brebisGL.brebisResetHistogram(target); }
#define glResetHistogram brebisResetHistogram
BREBIS_FORCE_INLINE void  brebisResetHistogramEXT(GLenum target) { brebisGL.brebisResetHistogramEXT(target); }
#define glResetHistogramEXT brebisResetHistogramEXT
BREBIS_FORCE_INLINE void  brebisResetMemoryObjectParameterNV(GLuint memory, GLenum pname) { brebisGL.brebisResetMemoryObjectParameterNV(memory, pname); }
#define glResetMemoryObjectParameterNV brebisResetMemoryObjectParameterNV
BREBIS_FORCE_INLINE void  brebisResetMinmax(GLenum target) { brebisGL.brebisResetMinmax(target); }
#define glResetMinmax brebisResetMinmax
BREBIS_FORCE_INLINE void  brebisResetMinmaxEXT(GLenum target) { brebisGL.brebisResetMinmaxEXT(target); }
#define glResetMinmaxEXT brebisResetMinmaxEXT
BREBIS_FORCE_INLINE void  brebisResizeBuffersMESA(void) { brebisGL.brebisResizeBuffersMESA(); }
#define glResizeBuffersMESA brebisResizeBuffersMESA
BREBIS_FORCE_INLINE void  brebisResolveDepthValuesNV(void) { brebisGL.brebisResolveDepthValuesNV(); }
#define glResolveDepthValuesNV brebisResolveDepthValuesNV
BREBIS_FORCE_INLINE void  brebisResolveMultisampleFramebufferAPPLE(void) { brebisGL.brebisResolveMultisampleFramebufferAPPLE(); }
#define glResolveMultisampleFramebufferAPPLE brebisResolveMultisampleFramebufferAPPLE
BREBIS_FORCE_INLINE void  brebisResumeTransformFeedback(void) { brebisGL.brebisResumeTransformFeedback(); }
#define glResumeTransformFeedback brebisResumeTransformFeedback
BREBIS_FORCE_INLINE void  brebisResumeTransformFeedbackNV(void) { brebisGL.brebisResumeTransformFeedbackNV(); }
#define glResumeTransformFeedbackNV brebisResumeTransformFeedbackNV
BREBIS_FORCE_INLINE void  brebisRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisRotated(angle, x, y, z); }
#define glRotated brebisRotated
BREBIS_FORCE_INLINE void  brebisRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisRotatef(angle, x, y, z); }
#define glRotatef brebisRotatef
BREBIS_FORCE_INLINE void  brebisRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { brebisGL.brebisRotatex(angle, x, y, z); }
#define glRotatex brebisRotatex
BREBIS_FORCE_INLINE void  brebisRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { brebisGL.brebisRotatexOES(angle, x, y, z); }
#define glRotatexOES brebisRotatexOES
BREBIS_FORCE_INLINE void  brebisSampleCoverage(GLfloat value, GLboolean invert) { brebisGL.brebisSampleCoverage(value, invert); }
#define glSampleCoverage brebisSampleCoverage
BREBIS_FORCE_INLINE void  brebisSampleCoverageARB(GLfloat value, GLboolean invert) { brebisGL.brebisSampleCoverageARB(value, invert); }
#define glSampleCoverageARB brebisSampleCoverageARB
BREBIS_FORCE_INLINE void  brebisSampleCoveragex(GLclampx value, GLboolean invert) { brebisGL.brebisSampleCoveragex(value, invert); }
#define glSampleCoveragex brebisSampleCoveragex
BREBIS_FORCE_INLINE void  brebisSampleCoveragexOES(GLclampx value, GLboolean invert) { brebisGL.brebisSampleCoveragexOES(value, invert); }
#define glSampleCoveragexOES brebisSampleCoveragexOES
BREBIS_FORCE_INLINE void  brebisSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) { brebisGL.brebisSampleMapATI(dst, interp, swizzle); }
#define glSampleMapATI brebisSampleMapATI
BREBIS_FORCE_INLINE void  brebisSampleMaskEXT(GLclampf value, GLboolean invert) { brebisGL.brebisSampleMaskEXT(value, invert); }
#define glSampleMaskEXT brebisSampleMaskEXT
BREBIS_FORCE_INLINE void  brebisSampleMaskIndexedNV(GLuint index, GLbitfield mask) { brebisGL.brebisSampleMaskIndexedNV(index, mask); }
#define glSampleMaskIndexedNV brebisSampleMaskIndexedNV
BREBIS_FORCE_INLINE void  brebisSampleMaskSGIS(GLclampf value, GLboolean invert) { brebisGL.brebisSampleMaskSGIS(value, invert); }
#define glSampleMaskSGIS brebisSampleMaskSGIS
BREBIS_FORCE_INLINE void  brebisSampleMaski(GLuint maskNumber, GLbitfield mask) { brebisGL.brebisSampleMaski(maskNumber, mask); }
#define glSampleMaski brebisSampleMaski
BREBIS_FORCE_INLINE void  brebisSamplePatternEXT(GLenum pattern) { brebisGL.brebisSamplePatternEXT(pattern); }
#define glSamplePatternEXT brebisSamplePatternEXT
BREBIS_FORCE_INLINE void  brebisSamplePatternSGIS(GLenum pattern) { brebisGL.brebisSamplePatternSGIS(pattern); }
#define glSamplePatternSGIS brebisSamplePatternSGIS
BREBIS_FORCE_INLINE void  brebisSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) { brebisGL.brebisSamplerParameterIiv(sampler, pname, param); }
#define glSamplerParameterIiv brebisSamplerParameterIiv
BREBIS_FORCE_INLINE void  brebisSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint * param) { brebisGL.brebisSamplerParameterIivEXT(sampler, pname, param); }
#define glSamplerParameterIivEXT brebisSamplerParameterIivEXT
BREBIS_FORCE_INLINE void  brebisSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint * param) { brebisGL.brebisSamplerParameterIivOES(sampler, pname, param); }
#define glSamplerParameterIivOES brebisSamplerParameterIivOES
BREBIS_FORCE_INLINE void  brebisSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) { brebisGL.brebisSamplerParameterIuiv(sampler, pname, param); }
#define glSamplerParameterIuiv brebisSamplerParameterIuiv
BREBIS_FORCE_INLINE void  brebisSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint * param) { brebisGL.brebisSamplerParameterIuivEXT(sampler, pname, param); }
#define glSamplerParameterIuivEXT brebisSamplerParameterIuivEXT
BREBIS_FORCE_INLINE void  brebisSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint * param) { brebisGL.brebisSamplerParameterIuivOES(sampler, pname, param); }
#define glSamplerParameterIuivOES brebisSamplerParameterIuivOES
BREBIS_FORCE_INLINE void  brebisSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) { brebisGL.brebisSamplerParameterf(sampler, pname, param); }
#define glSamplerParameterf brebisSamplerParameterf
BREBIS_FORCE_INLINE void  brebisSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) { brebisGL.brebisSamplerParameterfv(sampler, pname, param); }
#define glSamplerParameterfv brebisSamplerParameterfv
BREBIS_FORCE_INLINE void  brebisSamplerParameteri(GLuint sampler, GLenum pname, GLint param) { brebisGL.brebisSamplerParameteri(sampler, pname, param); }
#define glSamplerParameteri brebisSamplerParameteri
BREBIS_FORCE_INLINE void  brebisSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) { brebisGL.brebisSamplerParameteriv(sampler, pname, param); }
#define glSamplerParameteriv brebisSamplerParameteriv
BREBIS_FORCE_INLINE void  brebisScaled(GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisScaled(x, y, z); }
#define glScaled brebisScaled
BREBIS_FORCE_INLINE void  brebisScalef(GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisScalef(x, y, z); }
#define glScalef brebisScalef
BREBIS_FORCE_INLINE void  brebisScalex(GLfixed x, GLfixed y, GLfixed z) { brebisGL.brebisScalex(x, y, z); }
#define glScalex brebisScalex
BREBIS_FORCE_INLINE void  brebisScalexOES(GLfixed x, GLfixed y, GLfixed z) { brebisGL.brebisScalexOES(x, y, z); }
#define glScalexOES brebisScalexOES
BREBIS_FORCE_INLINE void  brebisScissor(GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisScissor(x, y, width, height); }
#define glScissor brebisScissor
BREBIS_FORCE_INLINE void  brebisScissorArrayv(GLuint first, GLsizei count, const GLint * v) { brebisGL.brebisScissorArrayv(first, count, v); }
#define glScissorArrayv brebisScissorArrayv
BREBIS_FORCE_INLINE void  brebisScissorArrayvNV(GLuint first, GLsizei count, const GLint * v) { brebisGL.brebisScissorArrayvNV(first, count, v); }
#define glScissorArrayvNV brebisScissorArrayvNV
BREBIS_FORCE_INLINE void  brebisScissorArrayvOES(GLuint first, GLsizei count, const GLint * v) { brebisGL.brebisScissorArrayvOES(first, count, v); }
#define glScissorArrayvOES brebisScissorArrayvOES
BREBIS_FORCE_INLINE void  brebisScissorExclusiveArrayvNV(GLuint first, GLsizei count, const GLint * v) { brebisGL.brebisScissorExclusiveArrayvNV(first, count, v); }
#define glScissorExclusiveArrayvNV brebisScissorExclusiveArrayvNV
BREBIS_FORCE_INLINE void  brebisScissorExclusiveNV(GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisScissorExclusiveNV(x, y, width, height); }
#define glScissorExclusiveNV brebisScissorExclusiveNV
BREBIS_FORCE_INLINE void  brebisScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { brebisGL.brebisScissorIndexed(index, left, bottom, width, height); }
#define glScissorIndexed brebisScissorIndexed
BREBIS_FORCE_INLINE void  brebisScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { brebisGL.brebisScissorIndexedNV(index, left, bottom, width, height); }
#define glScissorIndexedNV brebisScissorIndexedNV
BREBIS_FORCE_INLINE void  brebisScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { brebisGL.brebisScissorIndexedOES(index, left, bottom, width, height); }
#define glScissorIndexedOES brebisScissorIndexedOES
BREBIS_FORCE_INLINE void  brebisScissorIndexedv(GLuint index, const GLint * v) { brebisGL.brebisScissorIndexedv(index, v); }
#define glScissorIndexedv brebisScissorIndexedv
BREBIS_FORCE_INLINE void  brebisScissorIndexedvNV(GLuint index, const GLint * v) { brebisGL.brebisScissorIndexedvNV(index, v); }
#define glScissorIndexedvNV brebisScissorIndexedvNV
BREBIS_FORCE_INLINE void  brebisScissorIndexedvOES(GLuint index, const GLint * v) { brebisGL.brebisScissorIndexedvOES(index, v); }
#define glScissorIndexedvOES brebisScissorIndexedvOES
BREBIS_FORCE_INLINE void  brebisSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) { brebisGL.brebisSecondaryColor3b(red, green, blue); }
#define glSecondaryColor3b brebisSecondaryColor3b
BREBIS_FORCE_INLINE void  brebisSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) { brebisGL.brebisSecondaryColor3bEXT(red, green, blue); }
#define glSecondaryColor3bEXT brebisSecondaryColor3bEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3bv(const GLbyte * v) { brebisGL.brebisSecondaryColor3bv(v); }
#define glSecondaryColor3bv brebisSecondaryColor3bv
BREBIS_FORCE_INLINE void  brebisSecondaryColor3bvEXT(const GLbyte * v) { brebisGL.brebisSecondaryColor3bvEXT(v); }
#define glSecondaryColor3bvEXT brebisSecondaryColor3bvEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) { brebisGL.brebisSecondaryColor3d(red, green, blue); }
#define glSecondaryColor3d brebisSecondaryColor3d
BREBIS_FORCE_INLINE void  brebisSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) { brebisGL.brebisSecondaryColor3dEXT(red, green, blue); }
#define glSecondaryColor3dEXT brebisSecondaryColor3dEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3dv(const GLdouble * v) { brebisGL.brebisSecondaryColor3dv(v); }
#define glSecondaryColor3dv brebisSecondaryColor3dv
BREBIS_FORCE_INLINE void  brebisSecondaryColor3dvEXT(const GLdouble * v) { brebisGL.brebisSecondaryColor3dvEXT(v); }
#define glSecondaryColor3dvEXT brebisSecondaryColor3dvEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) { brebisGL.brebisSecondaryColor3f(red, green, blue); }
#define glSecondaryColor3f brebisSecondaryColor3f
BREBIS_FORCE_INLINE void  brebisSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) { brebisGL.brebisSecondaryColor3fEXT(red, green, blue); }
#define glSecondaryColor3fEXT brebisSecondaryColor3fEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3fv(const GLfloat * v) { brebisGL.brebisSecondaryColor3fv(v); }
#define glSecondaryColor3fv brebisSecondaryColor3fv
BREBIS_FORCE_INLINE void  brebisSecondaryColor3fvEXT(const GLfloat * v) { brebisGL.brebisSecondaryColor3fvEXT(v); }
#define glSecondaryColor3fvEXT brebisSecondaryColor3fvEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { brebisGL.brebisSecondaryColor3hNV(red, green, blue); }
#define glSecondaryColor3hNV brebisSecondaryColor3hNV
BREBIS_FORCE_INLINE void  brebisSecondaryColor3hvNV(const GLhalfNV * v) { brebisGL.brebisSecondaryColor3hvNV(v); }
#define glSecondaryColor3hvNV brebisSecondaryColor3hvNV
BREBIS_FORCE_INLINE void  brebisSecondaryColor3i(GLint red, GLint green, GLint blue) { brebisGL.brebisSecondaryColor3i(red, green, blue); }
#define glSecondaryColor3i brebisSecondaryColor3i
BREBIS_FORCE_INLINE void  brebisSecondaryColor3iEXT(GLint red, GLint green, GLint blue) { brebisGL.brebisSecondaryColor3iEXT(red, green, blue); }
#define glSecondaryColor3iEXT brebisSecondaryColor3iEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3iv(const GLint * v) { brebisGL.brebisSecondaryColor3iv(v); }
#define glSecondaryColor3iv brebisSecondaryColor3iv
BREBIS_FORCE_INLINE void  brebisSecondaryColor3ivEXT(const GLint * v) { brebisGL.brebisSecondaryColor3ivEXT(v); }
#define glSecondaryColor3ivEXT brebisSecondaryColor3ivEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3s(GLshort red, GLshort green, GLshort blue) { brebisGL.brebisSecondaryColor3s(red, green, blue); }
#define glSecondaryColor3s brebisSecondaryColor3s
BREBIS_FORCE_INLINE void  brebisSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) { brebisGL.brebisSecondaryColor3sEXT(red, green, blue); }
#define glSecondaryColor3sEXT brebisSecondaryColor3sEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3sv(const GLshort * v) { brebisGL.brebisSecondaryColor3sv(v); }
#define glSecondaryColor3sv brebisSecondaryColor3sv
BREBIS_FORCE_INLINE void  brebisSecondaryColor3svEXT(const GLshort * v) { brebisGL.brebisSecondaryColor3svEXT(v); }
#define glSecondaryColor3svEXT brebisSecondaryColor3svEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) { brebisGL.brebisSecondaryColor3ub(red, green, blue); }
#define glSecondaryColor3ub brebisSecondaryColor3ub
BREBIS_FORCE_INLINE void  brebisSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) { brebisGL.brebisSecondaryColor3ubEXT(red, green, blue); }
#define glSecondaryColor3ubEXT brebisSecondaryColor3ubEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3ubv(const GLubyte * v) { brebisGL.brebisSecondaryColor3ubv(v); }
#define glSecondaryColor3ubv brebisSecondaryColor3ubv
BREBIS_FORCE_INLINE void  brebisSecondaryColor3ubvEXT(const GLubyte * v) { brebisGL.brebisSecondaryColor3ubvEXT(v); }
#define glSecondaryColor3ubvEXT brebisSecondaryColor3ubvEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) { brebisGL.brebisSecondaryColor3ui(red, green, blue); }
#define glSecondaryColor3ui brebisSecondaryColor3ui
BREBIS_FORCE_INLINE void  brebisSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) { brebisGL.brebisSecondaryColor3uiEXT(red, green, blue); }
#define glSecondaryColor3uiEXT brebisSecondaryColor3uiEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3uiv(const GLuint * v) { brebisGL.brebisSecondaryColor3uiv(v); }
#define glSecondaryColor3uiv brebisSecondaryColor3uiv
BREBIS_FORCE_INLINE void  brebisSecondaryColor3uivEXT(const GLuint * v) { brebisGL.brebisSecondaryColor3uivEXT(v); }
#define glSecondaryColor3uivEXT brebisSecondaryColor3uivEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3us(GLushort red, GLushort green, GLushort blue) { brebisGL.brebisSecondaryColor3us(red, green, blue); }
#define glSecondaryColor3us brebisSecondaryColor3us
BREBIS_FORCE_INLINE void  brebisSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) { brebisGL.brebisSecondaryColor3usEXT(red, green, blue); }
#define glSecondaryColor3usEXT brebisSecondaryColor3usEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColor3usv(const GLushort * v) { brebisGL.brebisSecondaryColor3usv(v); }
#define glSecondaryColor3usv brebisSecondaryColor3usv
BREBIS_FORCE_INLINE void  brebisSecondaryColor3usvEXT(const GLushort * v) { brebisGL.brebisSecondaryColor3usvEXT(v); }
#define glSecondaryColor3usvEXT brebisSecondaryColor3usvEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) { brebisGL.brebisSecondaryColorFormatNV(size, type, stride); }
#define glSecondaryColorFormatNV brebisSecondaryColorFormatNV
BREBIS_FORCE_INLINE void  brebisSecondaryColorP3ui(GLenum type, GLuint color) { brebisGL.brebisSecondaryColorP3ui(type, color); }
#define glSecondaryColorP3ui brebisSecondaryColorP3ui
BREBIS_FORCE_INLINE void  brebisSecondaryColorP3uiv(GLenum type, const GLuint * color) { brebisGL.brebisSecondaryColorP3uiv(type, color); }
#define glSecondaryColorP3uiv brebisSecondaryColorP3uiv
BREBIS_FORCE_INLINE void  brebisSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisSecondaryColorPointer(size, type, stride, pointer); }
#define glSecondaryColorPointer brebisSecondaryColorPointer
BREBIS_FORCE_INLINE void  brebisSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisSecondaryColorPointerEXT(size, type, stride, pointer); }
#define glSecondaryColorPointerEXT brebisSecondaryColorPointerEXT
BREBIS_FORCE_INLINE void  brebisSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { brebisGL.brebisSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride); }
#define glSecondaryColorPointerListIBM brebisSecondaryColorPointerListIBM
BREBIS_FORCE_INLINE void  brebisSelectBuffer(GLsizei size, GLuint * buffer) { brebisGL.brebisSelectBuffer(size, buffer); }
#define glSelectBuffer brebisSelectBuffer
BREBIS_FORCE_INLINE void  brebisSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList) { brebisGL.brebisSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList); }
#define glSelectPerfMonitorCountersAMD brebisSelectPerfMonitorCountersAMD
BREBIS_FORCE_INLINE void  brebisSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 * params) { brebisGL.brebisSemaphoreParameterui64vEXT(semaphore, pname, params); }
#define glSemaphoreParameterui64vEXT brebisSemaphoreParameterui64vEXT
BREBIS_FORCE_INLINE void  brebisSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { brebisGL.brebisSeparableFilter2D(target, internalformat, width, height, format, type, row, column); }
#define glSeparableFilter2D brebisSeparableFilter2D
BREBIS_FORCE_INLINE void  brebisSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { brebisGL.brebisSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column); }
#define glSeparableFilter2DEXT brebisSeparableFilter2DEXT
BREBIS_FORCE_INLINE void  brebisSetFenceAPPLE(GLuint fence) { brebisGL.brebisSetFenceAPPLE(fence); }
#define glSetFenceAPPLE brebisSetFenceAPPLE
BREBIS_FORCE_INLINE void  brebisSetFenceNV(GLuint fence, GLenum condition) { brebisGL.brebisSetFenceNV(fence, condition); }
#define glSetFenceNV brebisSetFenceNV
BREBIS_FORCE_INLINE void  brebisSetFragmentShaderConstantATI(GLuint dst, const GLfloat * value) { brebisGL.brebisSetFragmentShaderConstantATI(dst, value); }
#define glSetFragmentShaderConstantATI brebisSetFragmentShaderConstantATI
BREBIS_FORCE_INLINE void  brebisSetInvariantEXT(GLuint id, GLenum type, const void * addr) { brebisGL.brebisSetInvariantEXT(id, type, addr); }
#define glSetInvariantEXT brebisSetInvariantEXT
BREBIS_FORCE_INLINE void  brebisSetLocalConstantEXT(GLuint id, GLenum type, const void * addr) { brebisGL.brebisSetLocalConstantEXT(id, type, addr); }
#define glSetLocalConstantEXT brebisSetLocalConstantEXT
BREBIS_FORCE_INLINE void  brebisSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat * val) { brebisGL.brebisSetMultisamplefvAMD(pname, index, val); }
#define glSetMultisamplefvAMD brebisSetMultisamplefvAMD
BREBIS_FORCE_INLINE void  brebisShadeModel(GLenum mode) { brebisGL.brebisShadeModel(mode); }
#define glShadeModel brebisShadeModel
BREBIS_FORCE_INLINE void  brebisShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length) { brebisGL.brebisShaderBinary(count, shaders, binaryformat, binary, length); }
#define glShaderBinary brebisShaderBinary
BREBIS_FORCE_INLINE void  brebisShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) { brebisGL.brebisShaderOp1EXT(op, res, arg1); }
#define glShaderOp1EXT brebisShaderOp1EXT
BREBIS_FORCE_INLINE void  brebisShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) { brebisGL.brebisShaderOp2EXT(op, res, arg1, arg2); }
#define glShaderOp2EXT brebisShaderOp2EXT
BREBIS_FORCE_INLINE void  brebisShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) { brebisGL.brebisShaderOp3EXT(op, res, arg1, arg2, arg3); }
#define glShaderOp3EXT brebisShaderOp3EXT
BREBIS_FORCE_INLINE void  brebisShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) { brebisGL.brebisShaderSource(shader, count, string, length); }
#define glShaderSource brebisShaderSource
BREBIS_FORCE_INLINE void  brebisShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length) { brebisGL.brebisShaderSourceARB(shaderObj, count, string, length); }
#define glShaderSourceARB brebisShaderSourceARB
BREBIS_FORCE_INLINE void  brebisShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { brebisGL.brebisShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); }
#define glShaderStorageBlockBinding brebisShaderStorageBlockBinding
BREBIS_FORCE_INLINE void  brebisShadingRateImageBarrierNV(GLboolean synchronize) { brebisGL.brebisShadingRateImageBarrierNV(synchronize); }
#define glShadingRateImageBarrierNV brebisShadingRateImageBarrierNV
BREBIS_FORCE_INLINE void  brebisShadingRateImagePaletteNV(GLuint viewport, GLuint first, GLsizei count, const GLenum * rates) { brebisGL.brebisShadingRateImagePaletteNV(viewport, first, count, rates); }
#define glShadingRateImagePaletteNV brebisShadingRateImagePaletteNV
BREBIS_FORCE_INLINE void  brebisShadingRateSampleOrderCustomNV(GLenum rate, GLuint samples, const GLint * locations) { brebisGL.brebisShadingRateSampleOrderCustomNV(rate, samples, locations); }
#define glShadingRateSampleOrderCustomNV brebisShadingRateSampleOrderCustomNV
BREBIS_FORCE_INLINE void  brebisShadingRateSampleOrderNV(GLenum order) { brebisGL.brebisShadingRateSampleOrderNV(order); }
#define glShadingRateSampleOrderNV brebisShadingRateSampleOrderNV
BREBIS_FORCE_INLINE void  brebisSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { brebisGL.brebisSharpenTexFuncSGIS(target, n, points); }
#define glSharpenTexFuncSGIS brebisSharpenTexFuncSGIS
BREBIS_FORCE_INLINE void  brebisSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts) { brebisGL.brebisSignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts); }
#define glSignalSemaphoreEXT brebisSignalSemaphoreEXT
BREBIS_FORCE_INLINE void  brebisSignalVkFenceNV(GLuint64 vkFence) { brebisGL.brebisSignalVkFenceNV(vkFence); }
#define glSignalVkFenceNV brebisSignalVkFenceNV
BREBIS_FORCE_INLINE void  brebisSignalVkSemaphoreNV(GLuint64 vkSemaphore) { brebisGL.brebisSignalVkSemaphoreNV(vkSemaphore); }
#define glSignalVkSemaphoreNV brebisSignalVkSemaphoreNV
BREBIS_FORCE_INLINE void  brebisSpecializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { brebisGL.brebisSpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
#define glSpecializeShader brebisSpecializeShader
BREBIS_FORCE_INLINE void  brebisSpecializeShaderARB(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { brebisGL.brebisSpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
#define glSpecializeShaderARB brebisSpecializeShaderARB
BREBIS_FORCE_INLINE void  brebisSpriteParameterfSGIX(GLenum pname, GLfloat param) { brebisGL.brebisSpriteParameterfSGIX(pname, param); }
#define glSpriteParameterfSGIX brebisSpriteParameterfSGIX
BREBIS_FORCE_INLINE void  brebisSpriteParameterfvSGIX(GLenum pname, const GLfloat * params) { brebisGL.brebisSpriteParameterfvSGIX(pname, params); }
#define glSpriteParameterfvSGIX brebisSpriteParameterfvSGIX
BREBIS_FORCE_INLINE void  brebisSpriteParameteriSGIX(GLenum pname, GLint param) { brebisGL.brebisSpriteParameteriSGIX(pname, param); }
#define glSpriteParameteriSGIX brebisSpriteParameteriSGIX
BREBIS_FORCE_INLINE void  brebisSpriteParameterivSGIX(GLenum pname, const GLint * params) { brebisGL.brebisSpriteParameterivSGIX(pname, params); }
#define glSpriteParameterivSGIX brebisSpriteParameterivSGIX
BREBIS_FORCE_INLINE void  brebisStartInstrumentsSGIX(void) { brebisGL.brebisStartInstrumentsSGIX(); }
#define glStartInstrumentsSGIX brebisStartInstrumentsSGIX
BREBIS_FORCE_INLINE void  brebisStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) { brebisGL.brebisStartTilingQCOM(x, y, width, height, preserveMask); }
#define glStartTilingQCOM brebisStartTilingQCOM
BREBIS_FORCE_INLINE void  brebisStateCaptureNV(GLuint state, GLenum mode) { brebisGL.brebisStateCaptureNV(state, mode); }
#define glStateCaptureNV brebisStateCaptureNV
BREBIS_FORCE_INLINE void  brebisStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) { brebisGL.brebisStencilClearTagEXT(stencilTagBits, stencilClearTag); }
#define glStencilClearTagEXT brebisStencilClearTagEXT
BREBIS_FORCE_INLINE void  brebisStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues) { brebisGL.brebisStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues); }
#define glStencilFillPathInstancedNV brebisStencilFillPathInstancedNV
BREBIS_FORCE_INLINE void  brebisStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) { brebisGL.brebisStencilFillPathNV(path, fillMode, mask); }
#define glStencilFillPathNV brebisStencilFillPathNV
BREBIS_FORCE_INLINE void  brebisStencilFunc(GLenum func, GLint ref, GLuint mask) { brebisGL.brebisStencilFunc(func, ref, mask); }
#define glStencilFunc brebisStencilFunc
BREBIS_FORCE_INLINE void  brebisStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) { brebisGL.brebisStencilFuncSeparate(face, func, ref, mask); }
#define glStencilFuncSeparate brebisStencilFuncSeparate
BREBIS_FORCE_INLINE void  brebisStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) { brebisGL.brebisStencilFuncSeparateATI(frontfunc, backfunc, ref, mask); }
#define glStencilFuncSeparateATI brebisStencilFuncSeparateATI
BREBIS_FORCE_INLINE void  brebisStencilMask(GLuint mask) { brebisGL.brebisStencilMask(mask); }
#define glStencilMask brebisStencilMask
BREBIS_FORCE_INLINE void  brebisStencilMaskSeparate(GLenum face, GLuint mask) { brebisGL.brebisStencilMaskSeparate(face, mask); }
#define glStencilMaskSeparate brebisStencilMaskSeparate
BREBIS_FORCE_INLINE void  brebisStencilOp(GLenum fail, GLenum zfail, GLenum zpass) { brebisGL.brebisStencilOp(fail, zfail, zpass); }
#define glStencilOp brebisStencilOp
BREBIS_FORCE_INLINE void  brebisStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { brebisGL.brebisStencilOpSeparate(face, sfail, dpfail, dppass); }
#define glStencilOpSeparate brebisStencilOpSeparate
BREBIS_FORCE_INLINE void  brebisStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { brebisGL.brebisStencilOpSeparateATI(face, sfail, dpfail, dppass); }
#define glStencilOpSeparateATI brebisStencilOpSeparateATI
BREBIS_FORCE_INLINE void  brebisStencilOpValueAMD(GLenum face, GLuint value) { brebisGL.brebisStencilOpValueAMD(face, value); }
#define glStencilOpValueAMD brebisStencilOpValueAMD
BREBIS_FORCE_INLINE void  brebisStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues) { brebisGL.brebisStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues); }
#define glStencilStrokePathInstancedNV brebisStencilStrokePathInstancedNV
BREBIS_FORCE_INLINE void  brebisStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) { brebisGL.brebisStencilStrokePathNV(path, reference, mask); }
#define glStencilStrokePathNV brebisStencilStrokePathNV
BREBIS_FORCE_INLINE void  brebisStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { brebisGL.brebisStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues); }
#define glStencilThenCoverFillPathInstancedNV brebisStencilThenCoverFillPathInstancedNV
BREBIS_FORCE_INLINE void  brebisStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) { brebisGL.brebisStencilThenCoverFillPathNV(path, fillMode, mask, coverMode); }
#define glStencilThenCoverFillPathNV brebisStencilThenCoverFillPathNV
BREBIS_FORCE_INLINE void  brebisStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { brebisGL.brebisStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues); }
#define glStencilThenCoverStrokePathInstancedNV brebisStencilThenCoverStrokePathInstancedNV
BREBIS_FORCE_INLINE void  brebisStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) { brebisGL.brebisStencilThenCoverStrokePathNV(path, reference, mask, coverMode); }
#define glStencilThenCoverStrokePathNV brebisStencilThenCoverStrokePathNV
BREBIS_FORCE_INLINE void  brebisStopInstrumentsSGIX(GLint marker) { brebisGL.brebisStopInstrumentsSGIX(marker); }
#define glStopInstrumentsSGIX brebisStopInstrumentsSGIX
BREBIS_FORCE_INLINE void  brebisStringMarkerGREMEDY(GLsizei len, const void * string) { brebisGL.brebisStringMarkerGREMEDY(len, string); }
#define glStringMarkerGREMEDY brebisStringMarkerGREMEDY
BREBIS_FORCE_INLINE void  brebisSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) { brebisGL.brebisSubpixelPrecisionBiasNV(xbits, ybits); }
#define glSubpixelPrecisionBiasNV brebisSubpixelPrecisionBiasNV
BREBIS_FORCE_INLINE void  brebisSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { brebisGL.brebisSwizzleEXT(res, in, outX, outY, outZ, outW); }
#define glSwizzleEXT brebisSwizzleEXT
BREBIS_FORCE_INLINE void  brebisSyncTextureINTEL(GLuint texture) { brebisGL.brebisSyncTextureINTEL(texture); }
#define glSyncTextureINTEL brebisSyncTextureINTEL
BREBIS_FORCE_INLINE void  brebisTagSampleBufferSGIX(void) { brebisGL.brebisTagSampleBufferSGIX(); }
#define glTagSampleBufferSGIX brebisTagSampleBufferSGIX
BREBIS_FORCE_INLINE void  brebisTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) { brebisGL.brebisTangent3bEXT(tx, ty, tz); }
#define glTangent3bEXT brebisTangent3bEXT
BREBIS_FORCE_INLINE void  brebisTangent3bvEXT(const GLbyte * v) { brebisGL.brebisTangent3bvEXT(v); }
#define glTangent3bvEXT brebisTangent3bvEXT
BREBIS_FORCE_INLINE void  brebisTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) { brebisGL.brebisTangent3dEXT(tx, ty, tz); }
#define glTangent3dEXT brebisTangent3dEXT
BREBIS_FORCE_INLINE void  brebisTangent3dvEXT(const GLdouble * v) { brebisGL.brebisTangent3dvEXT(v); }
#define glTangent3dvEXT brebisTangent3dvEXT
BREBIS_FORCE_INLINE void  brebisTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) { brebisGL.brebisTangent3fEXT(tx, ty, tz); }
#define glTangent3fEXT brebisTangent3fEXT
BREBIS_FORCE_INLINE void  brebisTangent3fvEXT(const GLfloat * v) { brebisGL.brebisTangent3fvEXT(v); }
#define glTangent3fvEXT brebisTangent3fvEXT
BREBIS_FORCE_INLINE void  brebisTangent3iEXT(GLint tx, GLint ty, GLint tz) { brebisGL.brebisTangent3iEXT(tx, ty, tz); }
#define glTangent3iEXT brebisTangent3iEXT
BREBIS_FORCE_INLINE void  brebisTangent3ivEXT(const GLint * v) { brebisGL.brebisTangent3ivEXT(v); }
#define glTangent3ivEXT brebisTangent3ivEXT
BREBIS_FORCE_INLINE void  brebisTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) { brebisGL.brebisTangent3sEXT(tx, ty, tz); }
#define glTangent3sEXT brebisTangent3sEXT
BREBIS_FORCE_INLINE void  brebisTangent3svEXT(const GLshort * v) { brebisGL.brebisTangent3svEXT(v); }
#define glTangent3svEXT brebisTangent3svEXT
BREBIS_FORCE_INLINE void  brebisTangentPointerEXT(GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisTangentPointerEXT(type, stride, pointer); }
#define glTangentPointerEXT brebisTangentPointerEXT
BREBIS_FORCE_INLINE void  brebisTbufferMask3DFX(GLuint mask) { brebisGL.brebisTbufferMask3DFX(mask); }
#define glTbufferMask3DFX brebisTbufferMask3DFX
BREBIS_FORCE_INLINE void  brebisTessellationFactorAMD(GLfloat factor) { brebisGL.brebisTessellationFactorAMD(factor); }
#define glTessellationFactorAMD brebisTessellationFactorAMD
BREBIS_FORCE_INLINE void  brebisTessellationModeAMD(GLenum mode) { brebisGL.brebisTessellationModeAMD(mode); }
#define glTessellationModeAMD brebisTessellationModeAMD
BREBIS_FORCE_INLINE GLboolean brebisTestFenceAPPLE(GLuint fence) { return brebisGL.brebisTestFenceAPPLE(fence); }
#define glTestFenceAPPLE brebisTestFenceAPPLE
BREBIS_FORCE_INLINE GLboolean brebisTestFenceNV(GLuint fence) { return brebisGL.brebisTestFenceNV(fence); }
#define glTestFenceNV brebisTestFenceNV
BREBIS_FORCE_INLINE GLboolean brebisTestObjectAPPLE(GLenum object, GLuint name) { return brebisGL.brebisTestObjectAPPLE(object, name); }
#define glTestObjectAPPLE brebisTestObjectAPPLE
BREBIS_FORCE_INLINE void  brebisTexAttachMemoryNV(GLenum target, GLuint memory, GLuint64 offset) { brebisGL.brebisTexAttachMemoryNV(target, memory, offset); }
#define glTexAttachMemoryNV brebisTexAttachMemoryNV
BREBIS_FORCE_INLINE void  brebisTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) { brebisGL.brebisTexBuffer(target, internalformat, buffer); }
#define glTexBuffer brebisTexBuffer
BREBIS_FORCE_INLINE void  brebisTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) { brebisGL.brebisTexBufferARB(target, internalformat, buffer); }
#define glTexBufferARB brebisTexBufferARB
BREBIS_FORCE_INLINE void  brebisTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) { brebisGL.brebisTexBufferEXT(target, internalformat, buffer); }
#define glTexBufferEXT brebisTexBufferEXT
BREBIS_FORCE_INLINE void  brebisTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer) { brebisGL.brebisTexBufferOES(target, internalformat, buffer); }
#define glTexBufferOES brebisTexBufferOES
BREBIS_FORCE_INLINE void  brebisTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { brebisGL.brebisTexBufferRange(target, internalformat, buffer, offset, size); }
#define glTexBufferRange brebisTexBufferRange
BREBIS_FORCE_INLINE void  brebisTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { brebisGL.brebisTexBufferRangeEXT(target, internalformat, buffer, offset, size); }
#define glTexBufferRangeEXT brebisTexBufferRangeEXT
BREBIS_FORCE_INLINE void  brebisTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { brebisGL.brebisTexBufferRangeOES(target, internalformat, buffer, offset, size); }
#define glTexBufferRangeOES brebisTexBufferRangeOES
BREBIS_FORCE_INLINE void  brebisTexBumpParameterfvATI(GLenum pname, const GLfloat * param) { brebisGL.brebisTexBumpParameterfvATI(pname, param); }
#define glTexBumpParameterfvATI brebisTexBumpParameterfvATI
BREBIS_FORCE_INLINE void  brebisTexBumpParameterivATI(GLenum pname, const GLint * param) { brebisGL.brebisTexBumpParameterivATI(pname, param); }
#define glTexBumpParameterivATI brebisTexBumpParameterivATI
BREBIS_FORCE_INLINE void  brebisTexCoord1bOES(GLbyte s) { brebisGL.brebisTexCoord1bOES(s); }
#define glTexCoord1bOES brebisTexCoord1bOES
BREBIS_FORCE_INLINE void  brebisTexCoord1bvOES(const GLbyte * coords) { brebisGL.brebisTexCoord1bvOES(coords); }
#define glTexCoord1bvOES brebisTexCoord1bvOES
BREBIS_FORCE_INLINE void  brebisTexCoord1d(GLdouble s) { brebisGL.brebisTexCoord1d(s); }
#define glTexCoord1d brebisTexCoord1d
BREBIS_FORCE_INLINE void  brebisTexCoord1dv(const GLdouble * v) { brebisGL.brebisTexCoord1dv(v); }
#define glTexCoord1dv brebisTexCoord1dv
BREBIS_FORCE_INLINE void  brebisTexCoord1f(GLfloat s) { brebisGL.brebisTexCoord1f(s); }
#define glTexCoord1f brebisTexCoord1f
BREBIS_FORCE_INLINE void  brebisTexCoord1fv(const GLfloat * v) { brebisGL.brebisTexCoord1fv(v); }
#define glTexCoord1fv brebisTexCoord1fv
BREBIS_FORCE_INLINE void  brebisTexCoord1hNV(GLhalfNV s) { brebisGL.brebisTexCoord1hNV(s); }
#define glTexCoord1hNV brebisTexCoord1hNV
BREBIS_FORCE_INLINE void  brebisTexCoord1hvNV(const GLhalfNV * v) { brebisGL.brebisTexCoord1hvNV(v); }
#define glTexCoord1hvNV brebisTexCoord1hvNV
BREBIS_FORCE_INLINE void  brebisTexCoord1i(GLint s) { brebisGL.brebisTexCoord1i(s); }
#define glTexCoord1i brebisTexCoord1i
BREBIS_FORCE_INLINE void  brebisTexCoord1iv(const GLint * v) { brebisGL.brebisTexCoord1iv(v); }
#define glTexCoord1iv brebisTexCoord1iv
BREBIS_FORCE_INLINE void  brebisTexCoord1s(GLshort s) { brebisGL.brebisTexCoord1s(s); }
#define glTexCoord1s brebisTexCoord1s
BREBIS_FORCE_INLINE void  brebisTexCoord1sv(const GLshort * v) { brebisGL.brebisTexCoord1sv(v); }
#define glTexCoord1sv brebisTexCoord1sv
BREBIS_FORCE_INLINE void  brebisTexCoord1xOES(GLfixed s) { brebisGL.brebisTexCoord1xOES(s); }
#define glTexCoord1xOES brebisTexCoord1xOES
BREBIS_FORCE_INLINE void  brebisTexCoord1xvOES(const GLfixed * coords) { brebisGL.brebisTexCoord1xvOES(coords); }
#define glTexCoord1xvOES brebisTexCoord1xvOES
BREBIS_FORCE_INLINE void  brebisTexCoord2bOES(GLbyte s, GLbyte t) { brebisGL.brebisTexCoord2bOES(s, t); }
#define glTexCoord2bOES brebisTexCoord2bOES
BREBIS_FORCE_INLINE void  brebisTexCoord2bvOES(const GLbyte * coords) { brebisGL.brebisTexCoord2bvOES(coords); }
#define glTexCoord2bvOES brebisTexCoord2bvOES
BREBIS_FORCE_INLINE void  brebisTexCoord2d(GLdouble s, GLdouble t) { brebisGL.brebisTexCoord2d(s, t); }
#define glTexCoord2d brebisTexCoord2d
BREBIS_FORCE_INLINE void  brebisTexCoord2dv(const GLdouble * v) { brebisGL.brebisTexCoord2dv(v); }
#define glTexCoord2dv brebisTexCoord2dv
BREBIS_FORCE_INLINE void  brebisTexCoord2f(GLfloat s, GLfloat t) { brebisGL.brebisTexCoord2f(s, t); }
#define glTexCoord2f brebisTexCoord2f
BREBIS_FORCE_INLINE void  brebisTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z); }
#define glTexCoord2fColor3fVertex3fSUN brebisTexCoord2fColor3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * v) { brebisGL.brebisTexCoord2fColor3fVertex3fvSUN(tc, c, v); }
#define glTexCoord2fColor3fVertex3fvSUN brebisTexCoord2fColor3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z); }
#define glTexCoord2fColor4fNormal3fVertex3fSUN brebisTexCoord2fColor4fNormal3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { brebisGL.brebisTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v); }
#define glTexCoord2fColor4fNormal3fVertex3fvSUN brebisTexCoord2fColor4fNormal3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z); }
#define glTexCoord2fColor4ubVertex3fSUN brebisTexCoord2fColor4ubVertex3fSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v) { brebisGL.brebisTexCoord2fColor4ubVertex3fvSUN(tc, c, v); }
#define glTexCoord2fColor4ubVertex3fvSUN brebisTexCoord2fColor4ubVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z); }
#define glTexCoord2fNormal3fVertex3fSUN brebisTexCoord2fNormal3fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * n, const GLfloat * v) { brebisGL.brebisTexCoord2fNormal3fVertex3fvSUN(tc, n, v); }
#define glTexCoord2fNormal3fVertex3fvSUN brebisTexCoord2fNormal3fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisTexCoord2fVertex3fSUN(s, t, x, y, z); }
#define glTexCoord2fVertex3fSUN brebisTexCoord2fVertex3fSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fVertex3fvSUN(const GLfloat * tc, const GLfloat * v) { brebisGL.brebisTexCoord2fVertex3fvSUN(tc, v); }
#define glTexCoord2fVertex3fvSUN brebisTexCoord2fVertex3fvSUN
BREBIS_FORCE_INLINE void  brebisTexCoord2fv(const GLfloat * v) { brebisGL.brebisTexCoord2fv(v); }
#define glTexCoord2fv brebisTexCoord2fv
BREBIS_FORCE_INLINE void  brebisTexCoord2hNV(GLhalfNV s, GLhalfNV t) { brebisGL.brebisTexCoord2hNV(s, t); }
#define glTexCoord2hNV brebisTexCoord2hNV
BREBIS_FORCE_INLINE void  brebisTexCoord2hvNV(const GLhalfNV * v) { brebisGL.brebisTexCoord2hvNV(v); }
#define glTexCoord2hvNV brebisTexCoord2hvNV
BREBIS_FORCE_INLINE void  brebisTexCoord2i(GLint s, GLint t) { brebisGL.brebisTexCoord2i(s, t); }
#define glTexCoord2i brebisTexCoord2i
BREBIS_FORCE_INLINE void  brebisTexCoord2iv(const GLint * v) { brebisGL.brebisTexCoord2iv(v); }
#define glTexCoord2iv brebisTexCoord2iv
BREBIS_FORCE_INLINE void  brebisTexCoord2s(GLshort s, GLshort t) { brebisGL.brebisTexCoord2s(s, t); }
#define glTexCoord2s brebisTexCoord2s
BREBIS_FORCE_INLINE void  brebisTexCoord2sv(const GLshort * v) { brebisGL.brebisTexCoord2sv(v); }
#define glTexCoord2sv brebisTexCoord2sv
BREBIS_FORCE_INLINE void  brebisTexCoord2xOES(GLfixed s, GLfixed t) { brebisGL.brebisTexCoord2xOES(s, t); }
#define glTexCoord2xOES brebisTexCoord2xOES
BREBIS_FORCE_INLINE void  brebisTexCoord2xvOES(const GLfixed * coords) { brebisGL.brebisTexCoord2xvOES(coords); }
#define glTexCoord2xvOES brebisTexCoord2xvOES
BREBIS_FORCE_INLINE void  brebisTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r) { brebisGL.brebisTexCoord3bOES(s, t, r); }
#define glTexCoord3bOES brebisTexCoord3bOES
BREBIS_FORCE_INLINE void  brebisTexCoord3bvOES(const GLbyte * coords) { brebisGL.brebisTexCoord3bvOES(coords); }
#define glTexCoord3bvOES brebisTexCoord3bvOES
BREBIS_FORCE_INLINE void  brebisTexCoord3d(GLdouble s, GLdouble t, GLdouble r) { brebisGL.brebisTexCoord3d(s, t, r); }
#define glTexCoord3d brebisTexCoord3d
BREBIS_FORCE_INLINE void  brebisTexCoord3dv(const GLdouble * v) { brebisGL.brebisTexCoord3dv(v); }
#define glTexCoord3dv brebisTexCoord3dv
BREBIS_FORCE_INLINE void  brebisTexCoord3f(GLfloat s, GLfloat t, GLfloat r) { brebisGL.brebisTexCoord3f(s, t, r); }
#define glTexCoord3f brebisTexCoord3f
BREBIS_FORCE_INLINE void  brebisTexCoord3fv(const GLfloat * v) { brebisGL.brebisTexCoord3fv(v); }
#define glTexCoord3fv brebisTexCoord3fv
BREBIS_FORCE_INLINE void  brebisTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) { brebisGL.brebisTexCoord3hNV(s, t, r); }
#define glTexCoord3hNV brebisTexCoord3hNV
BREBIS_FORCE_INLINE void  brebisTexCoord3hvNV(const GLhalfNV * v) { brebisGL.brebisTexCoord3hvNV(v); }
#define glTexCoord3hvNV brebisTexCoord3hvNV
BREBIS_FORCE_INLINE void  brebisTexCoord3i(GLint s, GLint t, GLint r) { brebisGL.brebisTexCoord3i(s, t, r); }
#define glTexCoord3i brebisTexCoord3i
BREBIS_FORCE_INLINE void  brebisTexCoord3iv(const GLint * v) { brebisGL.brebisTexCoord3iv(v); }
#define glTexCoord3iv brebisTexCoord3iv
BREBIS_FORCE_INLINE void  brebisTexCoord3s(GLshort s, GLshort t, GLshort r) { brebisGL.brebisTexCoord3s(s, t, r); }
#define glTexCoord3s brebisTexCoord3s
BREBIS_FORCE_INLINE void  brebisTexCoord3sv(const GLshort * v) { brebisGL.brebisTexCoord3sv(v); }
#define glTexCoord3sv brebisTexCoord3sv
BREBIS_FORCE_INLINE void  brebisTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r) { brebisGL.brebisTexCoord3xOES(s, t, r); }
#define glTexCoord3xOES brebisTexCoord3xOES
BREBIS_FORCE_INLINE void  brebisTexCoord3xvOES(const GLfixed * coords) { brebisGL.brebisTexCoord3xvOES(coords); }
#define glTexCoord3xvOES brebisTexCoord3xvOES
BREBIS_FORCE_INLINE void  brebisTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q) { brebisGL.brebisTexCoord4bOES(s, t, r, q); }
#define glTexCoord4bOES brebisTexCoord4bOES
BREBIS_FORCE_INLINE void  brebisTexCoord4bvOES(const GLbyte * coords) { brebisGL.brebisTexCoord4bvOES(coords); }
#define glTexCoord4bvOES brebisTexCoord4bvOES
BREBIS_FORCE_INLINE void  brebisTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) { brebisGL.brebisTexCoord4d(s, t, r, q); }
#define glTexCoord4d brebisTexCoord4d
BREBIS_FORCE_INLINE void  brebisTexCoord4dv(const GLdouble * v) { brebisGL.brebisTexCoord4dv(v); }
#define glTexCoord4dv brebisTexCoord4dv
BREBIS_FORCE_INLINE void  brebisTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) { brebisGL.brebisTexCoord4f(s, t, r, q); }
#define glTexCoord4f brebisTexCoord4f
BREBIS_FORCE_INLINE void  brebisTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w); }
#define glTexCoord4fColor4fNormal3fVertex4fSUN brebisTexCoord4fColor4fNormal3fVertex4fSUN
BREBIS_FORCE_INLINE void  brebisTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { brebisGL.brebisTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v); }
#define glTexCoord4fColor4fNormal3fVertex4fvSUN brebisTexCoord4fColor4fNormal3fVertex4fvSUN
BREBIS_FORCE_INLINE void  brebisTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w); }
#define glTexCoord4fVertex4fSUN brebisTexCoord4fVertex4fSUN
BREBIS_FORCE_INLINE void  brebisTexCoord4fVertex4fvSUN(const GLfloat * tc, const GLfloat * v) { brebisGL.brebisTexCoord4fVertex4fvSUN(tc, v); }
#define glTexCoord4fVertex4fvSUN brebisTexCoord4fVertex4fvSUN
BREBIS_FORCE_INLINE void  brebisTexCoord4fv(const GLfloat * v) { brebisGL.brebisTexCoord4fv(v); }
#define glTexCoord4fv brebisTexCoord4fv
BREBIS_FORCE_INLINE void  brebisTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { brebisGL.brebisTexCoord4hNV(s, t, r, q); }
#define glTexCoord4hNV brebisTexCoord4hNV
BREBIS_FORCE_INLINE void  brebisTexCoord4hvNV(const GLhalfNV * v) { brebisGL.brebisTexCoord4hvNV(v); }
#define glTexCoord4hvNV brebisTexCoord4hvNV
BREBIS_FORCE_INLINE void  brebisTexCoord4i(GLint s, GLint t, GLint r, GLint q) { brebisGL.brebisTexCoord4i(s, t, r, q); }
#define glTexCoord4i brebisTexCoord4i
BREBIS_FORCE_INLINE void  brebisTexCoord4iv(const GLint * v) { brebisGL.brebisTexCoord4iv(v); }
#define glTexCoord4iv brebisTexCoord4iv
BREBIS_FORCE_INLINE void  brebisTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) { brebisGL.brebisTexCoord4s(s, t, r, q); }
#define glTexCoord4s brebisTexCoord4s
BREBIS_FORCE_INLINE void  brebisTexCoord4sv(const GLshort * v) { brebisGL.brebisTexCoord4sv(v); }
#define glTexCoord4sv brebisTexCoord4sv
BREBIS_FORCE_INLINE void  brebisTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q) { brebisGL.brebisTexCoord4xOES(s, t, r, q); }
#define glTexCoord4xOES brebisTexCoord4xOES
BREBIS_FORCE_INLINE void  brebisTexCoord4xvOES(const GLfixed * coords) { brebisGL.brebisTexCoord4xvOES(coords); }
#define glTexCoord4xvOES brebisTexCoord4xvOES
BREBIS_FORCE_INLINE void  brebisTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) { brebisGL.brebisTexCoordFormatNV(size, type, stride); }
#define glTexCoordFormatNV brebisTexCoordFormatNV
BREBIS_FORCE_INLINE void  brebisTexCoordP1ui(GLenum type, GLuint coords) { brebisGL.brebisTexCoordP1ui(type, coords); }
#define glTexCoordP1ui brebisTexCoordP1ui
BREBIS_FORCE_INLINE void  brebisTexCoordP1uiv(GLenum type, const GLuint * coords) { brebisGL.brebisTexCoordP1uiv(type, coords); }
#define glTexCoordP1uiv brebisTexCoordP1uiv
BREBIS_FORCE_INLINE void  brebisTexCoordP2ui(GLenum type, GLuint coords) { brebisGL.brebisTexCoordP2ui(type, coords); }
#define glTexCoordP2ui brebisTexCoordP2ui
BREBIS_FORCE_INLINE void  brebisTexCoordP2uiv(GLenum type, const GLuint * coords) { brebisGL.brebisTexCoordP2uiv(type, coords); }
#define glTexCoordP2uiv brebisTexCoordP2uiv
BREBIS_FORCE_INLINE void  brebisTexCoordP3ui(GLenum type, GLuint coords) { brebisGL.brebisTexCoordP3ui(type, coords); }
#define glTexCoordP3ui brebisTexCoordP3ui
BREBIS_FORCE_INLINE void  brebisTexCoordP3uiv(GLenum type, const GLuint * coords) { brebisGL.brebisTexCoordP3uiv(type, coords); }
#define glTexCoordP3uiv brebisTexCoordP3uiv
BREBIS_FORCE_INLINE void  brebisTexCoordP4ui(GLenum type, GLuint coords) { brebisGL.brebisTexCoordP4ui(type, coords); }
#define glTexCoordP4ui brebisTexCoordP4ui
BREBIS_FORCE_INLINE void  brebisTexCoordP4uiv(GLenum type, const GLuint * coords) { brebisGL.brebisTexCoordP4uiv(type, coords); }
#define glTexCoordP4uiv brebisTexCoordP4uiv
BREBIS_FORCE_INLINE void  brebisTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisTexCoordPointer(size, type, stride, pointer); }
#define glTexCoordPointer brebisTexCoordPointer
BREBIS_FORCE_INLINE void  brebisTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { brebisGL.brebisTexCoordPointerEXT(size, type, stride, count, pointer); }
#define glTexCoordPointerEXT brebisTexCoordPointerEXT
BREBIS_FORCE_INLINE void  brebisTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { brebisGL.brebisTexCoordPointerListIBM(size, type, stride, pointer, ptrstride); }
#define glTexCoordPointerListIBM brebisTexCoordPointerListIBM
BREBIS_FORCE_INLINE void  brebisTexCoordPointervINTEL(GLint size, GLenum type, const void ** pointer) { brebisGL.brebisTexCoordPointervINTEL(size, type, pointer); }
#define glTexCoordPointervINTEL brebisTexCoordPointervINTEL
BREBIS_FORCE_INLINE void  brebisTexEnvf(GLenum target, GLenum pname, GLfloat param) { brebisGL.brebisTexEnvf(target, pname, param); }
#define glTexEnvf brebisTexEnvf
BREBIS_FORCE_INLINE void  brebisTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisTexEnvfv(target, pname, params); }
#define glTexEnvfv brebisTexEnvfv
BREBIS_FORCE_INLINE void  brebisTexEnvi(GLenum target, GLenum pname, GLint param) { brebisGL.brebisTexEnvi(target, pname, param); }
#define glTexEnvi brebisTexEnvi
BREBIS_FORCE_INLINE void  brebisTexEnviv(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisTexEnviv(target, pname, params); }
#define glTexEnviv brebisTexEnviv
BREBIS_FORCE_INLINE void  brebisTexEnvx(GLenum target, GLenum pname, GLfixed param) { brebisGL.brebisTexEnvx(target, pname, param); }
#define glTexEnvx brebisTexEnvx
BREBIS_FORCE_INLINE void  brebisTexEnvxOES(GLenum target, GLenum pname, GLfixed param) { brebisGL.brebisTexEnvxOES(target, pname, param); }
#define glTexEnvxOES brebisTexEnvxOES
BREBIS_FORCE_INLINE void  brebisTexEnvxv(GLenum target, GLenum pname, const GLfixed * params) { brebisGL.brebisTexEnvxv(target, pname, params); }
#define glTexEnvxv brebisTexEnvxv
BREBIS_FORCE_INLINE void  brebisTexEnvxvOES(GLenum target, GLenum pname, const GLfixed * params) { brebisGL.brebisTexEnvxvOES(target, pname, params); }
#define glTexEnvxvOES brebisTexEnvxvOES
BREBIS_FORCE_INLINE void  brebisTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights) { brebisGL.brebisTexFilterFuncSGIS(target, filter, n, weights); }
#define glTexFilterFuncSGIS brebisTexFilterFuncSGIS
BREBIS_FORCE_INLINE void  brebisTexGend(GLenum coord, GLenum pname, GLdouble param) { brebisGL.brebisTexGend(coord, pname, param); }
#define glTexGend brebisTexGend
BREBIS_FORCE_INLINE void  brebisTexGendv(GLenum coord, GLenum pname, const GLdouble * params) { brebisGL.brebisTexGendv(coord, pname, params); }
#define glTexGendv brebisTexGendv
BREBIS_FORCE_INLINE void  brebisTexGenf(GLenum coord, GLenum pname, GLfloat param) { brebisGL.brebisTexGenf(coord, pname, param); }
#define glTexGenf brebisTexGenf
BREBIS_FORCE_INLINE void  brebisTexGenfOES(GLenum coord, GLenum pname, GLfloat param) { brebisGL.brebisTexGenfOES(coord, pname, param); }
#define glTexGenfOES brebisTexGenfOES
BREBIS_FORCE_INLINE void  brebisTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) { brebisGL.brebisTexGenfv(coord, pname, params); }
#define glTexGenfv brebisTexGenfv
BREBIS_FORCE_INLINE void  brebisTexGenfvOES(GLenum coord, GLenum pname, const GLfloat * params) { brebisGL.brebisTexGenfvOES(coord, pname, params); }
#define glTexGenfvOES brebisTexGenfvOES
BREBIS_FORCE_INLINE void  brebisTexGeni(GLenum coord, GLenum pname, GLint param) { brebisGL.brebisTexGeni(coord, pname, param); }
#define glTexGeni brebisTexGeni
BREBIS_FORCE_INLINE void  brebisTexGeniOES(GLenum coord, GLenum pname, GLint param) { brebisGL.brebisTexGeniOES(coord, pname, param); }
#define glTexGeniOES brebisTexGeniOES
BREBIS_FORCE_INLINE void  brebisTexGeniv(GLenum coord, GLenum pname, const GLint * params) { brebisGL.brebisTexGeniv(coord, pname, params); }
#define glTexGeniv brebisTexGeniv
BREBIS_FORCE_INLINE void  brebisTexGenivOES(GLenum coord, GLenum pname, const GLint * params) { brebisGL.brebisTexGenivOES(coord, pname, params); }
#define glTexGenivOES brebisTexGenivOES
BREBIS_FORCE_INLINE void  brebisTexGenxOES(GLenum coord, GLenum pname, GLfixed param) { brebisGL.brebisTexGenxOES(coord, pname, param); }
#define glTexGenxOES brebisTexGenxOES
BREBIS_FORCE_INLINE void  brebisTexGenxvOES(GLenum coord, GLenum pname, const GLfixed * params) { brebisGL.brebisTexGenxvOES(coord, pname, params); }
#define glTexGenxvOES brebisTexGenxvOES
BREBIS_FORCE_INLINE void  brebisTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexImage1D(target, level, internalformat, width, border, format, type, pixels); }
#define glTexImage1D brebisTexImage1D
BREBIS_FORCE_INLINE void  brebisTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
#define glTexImage2D brebisTexImage2D
BREBIS_FORCE_INLINE void  brebisTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { brebisGL.brebisTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
#define glTexImage2DMultisample brebisTexImage2DMultisample
BREBIS_FORCE_INLINE void  brebisTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { brebisGL.brebisTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
#define glTexImage2DMultisampleCoverageNV brebisTexImage2DMultisampleCoverageNV
BREBIS_FORCE_INLINE void  brebisTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glTexImage3D brebisTexImage3D
BREBIS_FORCE_INLINE void  brebisTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glTexImage3DEXT brebisTexImage3DEXT
BREBIS_FORCE_INLINE void  brebisTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { brebisGL.brebisTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTexImage3DMultisample brebisTexImage3DMultisample
BREBIS_FORCE_INLINE void  brebisTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { brebisGL.brebisTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
#define glTexImage3DMultisampleCoverageNV brebisTexImage3DMultisampleCoverageNV
BREBIS_FORCE_INLINE void  brebisTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glTexImage3DOES brebisTexImage3DOES
BREBIS_FORCE_INLINE void  brebisTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels); }
#define glTexImage4DSGIS brebisTexImage4DSGIS
BREBIS_FORCE_INLINE void  brebisTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { brebisGL.brebisTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
#define glTexPageCommitmentARB brebisTexPageCommitmentARB
BREBIS_FORCE_INLINE void  brebisTexPageCommitmentEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { brebisGL.brebisTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
#define glTexPageCommitmentEXT brebisTexPageCommitmentEXT
BREBIS_FORCE_INLINE void  brebisTexParameterIiv(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisTexParameterIiv(target, pname, params); }
#define glTexParameterIiv brebisTexParameterIiv
BREBIS_FORCE_INLINE void  brebisTexParameterIivEXT(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisTexParameterIivEXT(target, pname, params); }
#define glTexParameterIivEXT brebisTexParameterIivEXT
BREBIS_FORCE_INLINE void  brebisTexParameterIivOES(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisTexParameterIivOES(target, pname, params); }
#define glTexParameterIivOES brebisTexParameterIivOES
BREBIS_FORCE_INLINE void  brebisTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) { brebisGL.brebisTexParameterIuiv(target, pname, params); }
#define glTexParameterIuiv brebisTexParameterIuiv
BREBIS_FORCE_INLINE void  brebisTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint * params) { brebisGL.brebisTexParameterIuivEXT(target, pname, params); }
#define glTexParameterIuivEXT brebisTexParameterIuivEXT
BREBIS_FORCE_INLINE void  brebisTexParameterIuivOES(GLenum target, GLenum pname, const GLuint * params) { brebisGL.brebisTexParameterIuivOES(target, pname, params); }
#define glTexParameterIuivOES brebisTexParameterIuivOES
BREBIS_FORCE_INLINE void  brebisTexParameterf(GLenum target, GLenum pname, GLfloat param) { brebisGL.brebisTexParameterf(target, pname, param); }
#define glTexParameterf brebisTexParameterf
BREBIS_FORCE_INLINE void  brebisTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisTexParameterfv(target, pname, params); }
#define glTexParameterfv brebisTexParameterfv
BREBIS_FORCE_INLINE void  brebisTexParameteri(GLenum target, GLenum pname, GLint param) { brebisGL.brebisTexParameteri(target, pname, param); }
#define glTexParameteri brebisTexParameteri
BREBIS_FORCE_INLINE void  brebisTexParameteriv(GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisTexParameteriv(target, pname, params); }
#define glTexParameteriv brebisTexParameteriv
BREBIS_FORCE_INLINE void  brebisTexParameterx(GLenum target, GLenum pname, GLfixed param) { brebisGL.brebisTexParameterx(target, pname, param); }
#define glTexParameterx brebisTexParameterx
BREBIS_FORCE_INLINE void  brebisTexParameterxOES(GLenum target, GLenum pname, GLfixed param) { brebisGL.brebisTexParameterxOES(target, pname, param); }
#define glTexParameterxOES brebisTexParameterxOES
BREBIS_FORCE_INLINE void  brebisTexParameterxv(GLenum target, GLenum pname, const GLfixed * params) { brebisGL.brebisTexParameterxv(target, pname, params); }
#define glTexParameterxv brebisTexParameterxv
BREBIS_FORCE_INLINE void  brebisTexParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { brebisGL.brebisTexParameterxvOES(target, pname, params); }
#define glTexParameterxvOES brebisTexParameterxvOES
BREBIS_FORCE_INLINE void  brebisTexRenderbufferNV(GLenum target, GLuint renderbuffer) { brebisGL.brebisTexRenderbufferNV(target, renderbuffer); }
#define glTexRenderbufferNV brebisTexRenderbufferNV
BREBIS_FORCE_INLINE void  brebisTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { brebisGL.brebisTexStorage1D(target, levels, internalformat, width); }
#define glTexStorage1D brebisTexStorage1D
BREBIS_FORCE_INLINE void  brebisTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { brebisGL.brebisTexStorage1DEXT(target, levels, internalformat, width); }
#define glTexStorage1DEXT brebisTexStorage1DEXT
BREBIS_FORCE_INLINE void  brebisTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisTexStorage2D(target, levels, internalformat, width, height); }
#define glTexStorage2D brebisTexStorage2D
BREBIS_FORCE_INLINE void  brebisTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisTexStorage2DEXT(target, levels, internalformat, width, height); }
#define glTexStorage2DEXT brebisTexStorage2DEXT
BREBIS_FORCE_INLINE void  brebisTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { brebisGL.brebisTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
#define glTexStorage2DMultisample brebisTexStorage2DMultisample
BREBIS_FORCE_INLINE void  brebisTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { brebisGL.brebisTexStorage3D(target, levels, internalformat, width, height, depth); }
#define glTexStorage3D brebisTexStorage3D
BREBIS_FORCE_INLINE void  brebisTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { brebisGL.brebisTexStorage3DEXT(target, levels, internalformat, width, height, depth); }
#define glTexStorage3DEXT brebisTexStorage3DEXT
BREBIS_FORCE_INLINE void  brebisTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { brebisGL.brebisTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTexStorage3DMultisample brebisTexStorage3DMultisample
BREBIS_FORCE_INLINE void  brebisTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { brebisGL.brebisTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTexStorage3DMultisampleOES brebisTexStorage3DMultisampleOES
BREBIS_FORCE_INLINE void  brebisTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { brebisGL.brebisTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset); }
#define glTexStorageMem1DEXT brebisTexStorageMem1DEXT
BREBIS_FORCE_INLINE void  brebisTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { brebisGL.brebisTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset); }
#define glTexStorageMem2DEXT brebisTexStorageMem2DEXT
BREBIS_FORCE_INLINE void  brebisTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { brebisGL.brebisTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
#define glTexStorageMem2DMultisampleEXT brebisTexStorageMem2DMultisampleEXT
BREBIS_FORCE_INLINE void  brebisTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { brebisGL.brebisTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset); }
#define glTexStorageMem3DEXT brebisTexStorageMem3DEXT
BREBIS_FORCE_INLINE void  brebisTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { brebisGL.brebisTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
#define glTexStorageMem3DMultisampleEXT brebisTexStorageMem3DMultisampleEXT
BREBIS_FORCE_INLINE void  brebisTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { brebisGL.brebisTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags); }
#define glTexStorageSparseAMD brebisTexStorageSparseAMD
BREBIS_FORCE_INLINE void  brebisTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexSubImage1D(target, level, xoffset, width, format, type, pixels); }
#define glTexSubImage1D brebisTexSubImage1D
BREBIS_FORCE_INLINE void  brebisTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels); }
#define glTexSubImage1DEXT brebisTexSubImage1DEXT
BREBIS_FORCE_INLINE void  brebisTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glTexSubImage2D brebisTexSubImage2D
BREBIS_FORCE_INLINE void  brebisTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glTexSubImage2DEXT brebisTexSubImage2DEXT
BREBIS_FORCE_INLINE void  brebisTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTexSubImage3D brebisTexSubImage3D
BREBIS_FORCE_INLINE void  brebisTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTexSubImage3DEXT brebisTexSubImage3DEXT
BREBIS_FORCE_INLINE void  brebisTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTexSubImage3DOES brebisTexSubImage3DOES
BREBIS_FORCE_INLINE void  brebisTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels); }
#define glTexSubImage4DSGIS brebisTexSubImage4DSGIS
BREBIS_FORCE_INLINE void  brebisTextureAttachMemoryNV(GLuint texture, GLuint memory, GLuint64 offset) { brebisGL.brebisTextureAttachMemoryNV(texture, memory, offset); }
#define glTextureAttachMemoryNV brebisTextureAttachMemoryNV
BREBIS_FORCE_INLINE void  brebisTextureBarrier(void) { brebisGL.brebisTextureBarrier(); }
#define glTextureBarrier brebisTextureBarrier
BREBIS_FORCE_INLINE void  brebisTextureBarrierNV(void) { brebisGL.brebisTextureBarrierNV(); }
#define glTextureBarrierNV brebisTextureBarrierNV
BREBIS_FORCE_INLINE void  brebisTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) { brebisGL.brebisTextureBuffer(texture, internalformat, buffer); }
#define glTextureBuffer brebisTextureBuffer
BREBIS_FORCE_INLINE void  brebisTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) { brebisGL.brebisTextureBufferEXT(texture, target, internalformat, buffer); }
#define glTextureBufferEXT brebisTextureBufferEXT
BREBIS_FORCE_INLINE void  brebisTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { brebisGL.brebisTextureBufferRange(texture, internalformat, buffer, offset, size); }
#define glTextureBufferRange brebisTextureBufferRange
BREBIS_FORCE_INLINE void  brebisTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { brebisGL.brebisTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size); }
#define glTextureBufferRangeEXT brebisTextureBufferRangeEXT
BREBIS_FORCE_INLINE void  brebisTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { brebisGL.brebisTextureColorMaskSGIS(red, green, blue, alpha); }
#define glTextureColorMaskSGIS brebisTextureColorMaskSGIS
BREBIS_FORCE_INLINE void  brebisTextureFoveationParametersQCOM(GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { brebisGL.brebisTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
#define glTextureFoveationParametersQCOM brebisTextureFoveationParametersQCOM
BREBIS_FORCE_INLINE void  brebisTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels); }
#define glTextureImage1DEXT brebisTextureImage1DEXT
BREBIS_FORCE_INLINE void  brebisTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels); }
#define glTextureImage2DEXT brebisTextureImage2DEXT
BREBIS_FORCE_INLINE void  brebisTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { brebisGL.brebisTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
#define glTextureImage2DMultisampleCoverageNV brebisTextureImage2DMultisampleCoverageNV
BREBIS_FORCE_INLINE void  brebisTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { brebisGL.brebisTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations); }
#define glTextureImage2DMultisampleNV brebisTextureImage2DMultisampleNV
BREBIS_FORCE_INLINE void  brebisTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels); }
#define glTextureImage3DEXT brebisTextureImage3DEXT
BREBIS_FORCE_INLINE void  brebisTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { brebisGL.brebisTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
#define glTextureImage3DMultisampleCoverageNV brebisTextureImage3DMultisampleCoverageNV
BREBIS_FORCE_INLINE void  brebisTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { brebisGL.brebisTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations); }
#define glTextureImage3DMultisampleNV brebisTextureImage3DMultisampleNV
BREBIS_FORCE_INLINE void  brebisTextureLightEXT(GLenum pname) { brebisGL.brebisTextureLightEXT(pname); }
#define glTextureLightEXT brebisTextureLightEXT
BREBIS_FORCE_INLINE void  brebisTextureMaterialEXT(GLenum face, GLenum mode) { brebisGL.brebisTextureMaterialEXT(face, mode); }
#define glTextureMaterialEXT brebisTextureMaterialEXT
BREBIS_FORCE_INLINE void  brebisTextureNormalEXT(GLenum mode) { brebisGL.brebisTextureNormalEXT(mode); }
#define glTextureNormalEXT brebisTextureNormalEXT
BREBIS_FORCE_INLINE void  brebisTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { brebisGL.brebisTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
#define glTexturePageCommitmentEXT brebisTexturePageCommitmentEXT
BREBIS_FORCE_INLINE void  brebisTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params) { brebisGL.brebisTextureParameterIiv(texture, pname, params); }
#define glTextureParameterIiv brebisTextureParameterIiv
BREBIS_FORCE_INLINE void  brebisTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisTextureParameterIivEXT(texture, target, pname, params); }
#define glTextureParameterIivEXT brebisTextureParameterIivEXT
BREBIS_FORCE_INLINE void  brebisTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params) { brebisGL.brebisTextureParameterIuiv(texture, pname, params); }
#define glTextureParameterIuiv brebisTextureParameterIuiv
BREBIS_FORCE_INLINE void  brebisTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint * params) { brebisGL.brebisTextureParameterIuivEXT(texture, target, pname, params); }
#define glTextureParameterIuivEXT brebisTextureParameterIuivEXT
BREBIS_FORCE_INLINE void  brebisTextureParameterf(GLuint texture, GLenum pname, GLfloat param) { brebisGL.brebisTextureParameterf(texture, pname, param); }
#define glTextureParameterf brebisTextureParameterf
BREBIS_FORCE_INLINE void  brebisTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) { brebisGL.brebisTextureParameterfEXT(texture, target, pname, param); }
#define glTextureParameterfEXT brebisTextureParameterfEXT
BREBIS_FORCE_INLINE void  brebisTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param) { brebisGL.brebisTextureParameterfv(texture, pname, param); }
#define glTextureParameterfv brebisTextureParameterfv
BREBIS_FORCE_INLINE void  brebisTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat * params) { brebisGL.brebisTextureParameterfvEXT(texture, target, pname, params); }
#define glTextureParameterfvEXT brebisTextureParameterfvEXT
BREBIS_FORCE_INLINE void  brebisTextureParameteri(GLuint texture, GLenum pname, GLint param) { brebisGL.brebisTextureParameteri(texture, pname, param); }
#define glTextureParameteri brebisTextureParameteri
BREBIS_FORCE_INLINE void  brebisTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) { brebisGL.brebisTextureParameteriEXT(texture, target, pname, param); }
#define glTextureParameteriEXT brebisTextureParameteriEXT
BREBIS_FORCE_INLINE void  brebisTextureParameteriv(GLuint texture, GLenum pname, const GLint * param) { brebisGL.brebisTextureParameteriv(texture, pname, param); }
#define glTextureParameteriv brebisTextureParameteriv
BREBIS_FORCE_INLINE void  brebisTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { brebisGL.brebisTextureParameterivEXT(texture, target, pname, params); }
#define glTextureParameterivEXT brebisTextureParameterivEXT
BREBIS_FORCE_INLINE void  brebisTextureRangeAPPLE(GLenum target, GLsizei length, const void * pointer) { brebisGL.brebisTextureRangeAPPLE(target, length, pointer); }
#define glTextureRangeAPPLE brebisTextureRangeAPPLE
BREBIS_FORCE_INLINE void  brebisTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) { brebisGL.brebisTextureRenderbufferEXT(texture, target, renderbuffer); }
#define glTextureRenderbufferEXT brebisTextureRenderbufferEXT
BREBIS_FORCE_INLINE void  brebisTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { brebisGL.brebisTextureStorage1D(texture, levels, internalformat, width); }
#define glTextureStorage1D brebisTextureStorage1D
BREBIS_FORCE_INLINE void  brebisTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { brebisGL.brebisTextureStorage1DEXT(texture, target, levels, internalformat, width); }
#define glTextureStorage1DEXT brebisTextureStorage1DEXT
BREBIS_FORCE_INLINE void  brebisTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisTextureStorage2D(texture, levels, internalformat, width, height); }
#define glTextureStorage2D brebisTextureStorage2D
BREBIS_FORCE_INLINE void  brebisTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { brebisGL.brebisTextureStorage2DEXT(texture, target, levels, internalformat, width, height); }
#define glTextureStorage2DEXT brebisTextureStorage2DEXT
BREBIS_FORCE_INLINE void  brebisTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { brebisGL.brebisTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations); }
#define glTextureStorage2DMultisample brebisTextureStorage2DMultisample
BREBIS_FORCE_INLINE void  brebisTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { brebisGL.brebisTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations); }
#define glTextureStorage2DMultisampleEXT brebisTextureStorage2DMultisampleEXT
BREBIS_FORCE_INLINE void  brebisTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { brebisGL.brebisTextureStorage3D(texture, levels, internalformat, width, height, depth); }
#define glTextureStorage3D brebisTextureStorage3D
BREBIS_FORCE_INLINE void  brebisTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { brebisGL.brebisTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth); }
#define glTextureStorage3DEXT brebisTextureStorage3DEXT
BREBIS_FORCE_INLINE void  brebisTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { brebisGL.brebisTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTextureStorage3DMultisample brebisTextureStorage3DMultisample
BREBIS_FORCE_INLINE void  brebisTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { brebisGL.brebisTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations); }
#define glTextureStorage3DMultisampleEXT brebisTextureStorage3DMultisampleEXT
BREBIS_FORCE_INLINE void  brebisTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { brebisGL.brebisTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset); }
#define glTextureStorageMem1DEXT brebisTextureStorageMem1DEXT
BREBIS_FORCE_INLINE void  brebisTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { brebisGL.brebisTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset); }
#define glTextureStorageMem2DEXT brebisTextureStorageMem2DEXT
BREBIS_FORCE_INLINE void  brebisTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { brebisGL.brebisTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
#define glTextureStorageMem2DMultisampleEXT brebisTextureStorageMem2DMultisampleEXT
BREBIS_FORCE_INLINE void  brebisTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { brebisGL.brebisTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset); }
#define glTextureStorageMem3DEXT brebisTextureStorageMem3DEXT
BREBIS_FORCE_INLINE void  brebisTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { brebisGL.brebisTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
#define glTextureStorageMem3DMultisampleEXT brebisTextureStorageMem3DMultisampleEXT
BREBIS_FORCE_INLINE void  brebisTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { brebisGL.brebisTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags); }
#define glTextureStorageSparseAMD brebisTextureStorageSparseAMD
BREBIS_FORCE_INLINE void  brebisTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTextureSubImage1D(texture, level, xoffset, width, format, type, pixels); }
#define glTextureSubImage1D brebisTextureSubImage1D
BREBIS_FORCE_INLINE void  brebisTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels); }
#define glTextureSubImage1DEXT brebisTextureSubImage1DEXT
BREBIS_FORCE_INLINE void  brebisTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glTextureSubImage2D brebisTextureSubImage2D
BREBIS_FORCE_INLINE void  brebisTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels); }
#define glTextureSubImage2DEXT brebisTextureSubImage2DEXT
BREBIS_FORCE_INLINE void  brebisTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTextureSubImage3D brebisTextureSubImage3D
BREBIS_FORCE_INLINE void  brebisTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { brebisGL.brebisTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
#define glTextureSubImage3DEXT brebisTextureSubImage3DEXT
BREBIS_FORCE_INLINE void  brebisTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { brebisGL.brebisTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
#define glTextureView brebisTextureView
BREBIS_FORCE_INLINE void  brebisTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { brebisGL.brebisTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
#define glTextureViewEXT brebisTextureViewEXT
BREBIS_FORCE_INLINE void  brebisTextureViewOES(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { brebisGL.brebisTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
#define glTextureViewOES brebisTextureViewOES
BREBIS_FORCE_INLINE void  brebisTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) { brebisGL.brebisTrackMatrixNV(target, address, matrix, transform); }
#define glTrackMatrixNV brebisTrackMatrixNV
BREBIS_FORCE_INLINE void  brebisTransformFeedbackAttribsNV(GLsizei count, const GLint * attribs, GLenum bufferMode) { brebisGL.brebisTransformFeedbackAttribsNV(count, attribs, bufferMode); }
#define glTransformFeedbackAttribsNV brebisTransformFeedbackAttribsNV
BREBIS_FORCE_INLINE void  brebisTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) { brebisGL.brebisTransformFeedbackBufferBase(xfb, index, buffer); }
#define glTransformFeedbackBufferBase brebisTransformFeedbackBufferBase
BREBIS_FORCE_INLINE void  brebisTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { brebisGL.brebisTransformFeedbackBufferRange(xfb, index, buffer, offset, size); }
#define glTransformFeedbackBufferRange brebisTransformFeedbackBufferRange
BREBIS_FORCE_INLINE void  brebisTransformFeedbackStreamAttribsNV(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode) { brebisGL.brebisTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode); }
#define glTransformFeedbackStreamAttribsNV brebisTransformFeedbackStreamAttribsNV
BREBIS_FORCE_INLINE void  brebisTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { brebisGL.brebisTransformFeedbackVaryings(program, count, varyings, bufferMode); }
#define glTransformFeedbackVaryings brebisTransformFeedbackVaryings
BREBIS_FORCE_INLINE void  brebisTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { brebisGL.brebisTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode); }
#define glTransformFeedbackVaryingsEXT brebisTransformFeedbackVaryingsEXT
BREBIS_FORCE_INLINE void  brebisTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode) { brebisGL.brebisTransformFeedbackVaryingsNV(program, count, locations, bufferMode); }
#define glTransformFeedbackVaryingsNV brebisTransformFeedbackVaryingsNV
BREBIS_FORCE_INLINE void  brebisTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues) { brebisGL.brebisTransformPathNV(resultPath, srcPath, transformType, transformValues); }
#define glTransformPathNV brebisTransformPathNV
BREBIS_FORCE_INLINE void  brebisTranslated(GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisTranslated(x, y, z); }
#define glTranslated brebisTranslated
BREBIS_FORCE_INLINE void  brebisTranslatef(GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisTranslatef(x, y, z); }
#define glTranslatef brebisTranslatef
BREBIS_FORCE_INLINE void  brebisTranslatex(GLfixed x, GLfixed y, GLfixed z) { brebisGL.brebisTranslatex(x, y, z); }
#define glTranslatex brebisTranslatex
BREBIS_FORCE_INLINE void  brebisTranslatexOES(GLfixed x, GLfixed y, GLfixed z) { brebisGL.brebisTranslatexOES(x, y, z); }
#define glTranslatexOES brebisTranslatexOES
BREBIS_FORCE_INLINE void  brebisUniform1d(GLint location, GLdouble x) { brebisGL.brebisUniform1d(location, x); }
#define glUniform1d brebisUniform1d
BREBIS_FORCE_INLINE void  brebisUniform1dv(GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisUniform1dv(location, count, value); }
#define glUniform1dv brebisUniform1dv
BREBIS_FORCE_INLINE void  brebisUniform1f(GLint location, GLfloat v0) { brebisGL.brebisUniform1f(location, v0); }
#define glUniform1f brebisUniform1f
BREBIS_FORCE_INLINE void  brebisUniform1fARB(GLint location, GLfloat v0) { brebisGL.brebisUniform1fARB(location, v0); }
#define glUniform1fARB brebisUniform1fARB
BREBIS_FORCE_INLINE void  brebisUniform1fv(GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisUniform1fv(location, count, value); }
#define glUniform1fv brebisUniform1fv
BREBIS_FORCE_INLINE void  brebisUniform1fvARB(GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisUniform1fvARB(location, count, value); }
#define glUniform1fvARB brebisUniform1fvARB
BREBIS_FORCE_INLINE void  brebisUniform1i(GLint location, GLint v0) { brebisGL.brebisUniform1i(location, v0); }
#define glUniform1i brebisUniform1i
BREBIS_FORCE_INLINE void  brebisUniform1i64ARB(GLint location, GLint64 x) { brebisGL.brebisUniform1i64ARB(location, x); }
#define glUniform1i64ARB brebisUniform1i64ARB
BREBIS_FORCE_INLINE void  brebisUniform1i64NV(GLint location, GLint64EXT x) { brebisGL.brebisUniform1i64NV(location, x); }
#define glUniform1i64NV brebisUniform1i64NV
BREBIS_FORCE_INLINE void  brebisUniform1i64vARB(GLint location, GLsizei count, const GLint64 * value) { brebisGL.brebisUniform1i64vARB(location, count, value); }
#define glUniform1i64vARB brebisUniform1i64vARB
BREBIS_FORCE_INLINE void  brebisUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { brebisGL.brebisUniform1i64vNV(location, count, value); }
#define glUniform1i64vNV brebisUniform1i64vNV
BREBIS_FORCE_INLINE void  brebisUniform1iARB(GLint location, GLint v0) { brebisGL.brebisUniform1iARB(location, v0); }
#define glUniform1iARB brebisUniform1iARB
BREBIS_FORCE_INLINE void  brebisUniform1iv(GLint location, GLsizei count, const GLint * value) { brebisGL.brebisUniform1iv(location, count, value); }
#define glUniform1iv brebisUniform1iv
BREBIS_FORCE_INLINE void  brebisUniform1ivARB(GLint location, GLsizei count, const GLint * value) { brebisGL.brebisUniform1ivARB(location, count, value); }
#define glUniform1ivARB brebisUniform1ivARB
BREBIS_FORCE_INLINE void  brebisUniform1ui(GLint location, GLuint v0) { brebisGL.brebisUniform1ui(location, v0); }
#define glUniform1ui brebisUniform1ui
BREBIS_FORCE_INLINE void  brebisUniform1ui64ARB(GLint location, GLuint64 x) { brebisGL.brebisUniform1ui64ARB(location, x); }
#define glUniform1ui64ARB brebisUniform1ui64ARB
BREBIS_FORCE_INLINE void  brebisUniform1ui64NV(GLint location, GLuint64EXT x) { brebisGL.brebisUniform1ui64NV(location, x); }
#define glUniform1ui64NV brebisUniform1ui64NV
BREBIS_FORCE_INLINE void  brebisUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisUniform1ui64vARB(location, count, value); }
#define glUniform1ui64vARB brebisUniform1ui64vARB
BREBIS_FORCE_INLINE void  brebisUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisUniform1ui64vNV(location, count, value); }
#define glUniform1ui64vNV brebisUniform1ui64vNV
BREBIS_FORCE_INLINE void  brebisUniform1uiEXT(GLint location, GLuint v0) { brebisGL.brebisUniform1uiEXT(location, v0); }
#define glUniform1uiEXT brebisUniform1uiEXT
BREBIS_FORCE_INLINE void  brebisUniform1uiv(GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisUniform1uiv(location, count, value); }
#define glUniform1uiv brebisUniform1uiv
BREBIS_FORCE_INLINE void  brebisUniform1uivEXT(GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisUniform1uivEXT(location, count, value); }
#define glUniform1uivEXT brebisUniform1uivEXT
BREBIS_FORCE_INLINE void  brebisUniform2d(GLint location, GLdouble x, GLdouble y) { brebisGL.brebisUniform2d(location, x, y); }
#define glUniform2d brebisUniform2d
BREBIS_FORCE_INLINE void  brebisUniform2dv(GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisUniform2dv(location, count, value); }
#define glUniform2dv brebisUniform2dv
BREBIS_FORCE_INLINE void  brebisUniform2f(GLint location, GLfloat v0, GLfloat v1) { brebisGL.brebisUniform2f(location, v0, v1); }
#define glUniform2f brebisUniform2f
BREBIS_FORCE_INLINE void  brebisUniform2fARB(GLint location, GLfloat v0, GLfloat v1) { brebisGL.brebisUniform2fARB(location, v0, v1); }
#define glUniform2fARB brebisUniform2fARB
BREBIS_FORCE_INLINE void  brebisUniform2fv(GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisUniform2fv(location, count, value); }
#define glUniform2fv brebisUniform2fv
BREBIS_FORCE_INLINE void  brebisUniform2fvARB(GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisUniform2fvARB(location, count, value); }
#define glUniform2fvARB brebisUniform2fvARB
BREBIS_FORCE_INLINE void  brebisUniform2i(GLint location, GLint v0, GLint v1) { brebisGL.brebisUniform2i(location, v0, v1); }
#define glUniform2i brebisUniform2i
BREBIS_FORCE_INLINE void  brebisUniform2i64ARB(GLint location, GLint64 x, GLint64 y) { brebisGL.brebisUniform2i64ARB(location, x, y); }
#define glUniform2i64ARB brebisUniform2i64ARB
BREBIS_FORCE_INLINE void  brebisUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) { brebisGL.brebisUniform2i64NV(location, x, y); }
#define glUniform2i64NV brebisUniform2i64NV
BREBIS_FORCE_INLINE void  brebisUniform2i64vARB(GLint location, GLsizei count, const GLint64 * value) { brebisGL.brebisUniform2i64vARB(location, count, value); }
#define glUniform2i64vARB brebisUniform2i64vARB
BREBIS_FORCE_INLINE void  brebisUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { brebisGL.brebisUniform2i64vNV(location, count, value); }
#define glUniform2i64vNV brebisUniform2i64vNV
BREBIS_FORCE_INLINE void  brebisUniform2iARB(GLint location, GLint v0, GLint v1) { brebisGL.brebisUniform2iARB(location, v0, v1); }
#define glUniform2iARB brebisUniform2iARB
BREBIS_FORCE_INLINE void  brebisUniform2iv(GLint location, GLsizei count, const GLint * value) { brebisGL.brebisUniform2iv(location, count, value); }
#define glUniform2iv brebisUniform2iv
BREBIS_FORCE_INLINE void  brebisUniform2ivARB(GLint location, GLsizei count, const GLint * value) { brebisGL.brebisUniform2ivARB(location, count, value); }
#define glUniform2ivARB brebisUniform2ivARB
BREBIS_FORCE_INLINE void  brebisUniform2ui(GLint location, GLuint v0, GLuint v1) { brebisGL.brebisUniform2ui(location, v0, v1); }
#define glUniform2ui brebisUniform2ui
BREBIS_FORCE_INLINE void  brebisUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) { brebisGL.brebisUniform2ui64ARB(location, x, y); }
#define glUniform2ui64ARB brebisUniform2ui64ARB
BREBIS_FORCE_INLINE void  brebisUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) { brebisGL.brebisUniform2ui64NV(location, x, y); }
#define glUniform2ui64NV brebisUniform2ui64NV
BREBIS_FORCE_INLINE void  brebisUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisUniform2ui64vARB(location, count, value); }
#define glUniform2ui64vARB brebisUniform2ui64vARB
BREBIS_FORCE_INLINE void  brebisUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisUniform2ui64vNV(location, count, value); }
#define glUniform2ui64vNV brebisUniform2ui64vNV
BREBIS_FORCE_INLINE void  brebisUniform2uiEXT(GLint location, GLuint v0, GLuint v1) { brebisGL.brebisUniform2uiEXT(location, v0, v1); }
#define glUniform2uiEXT brebisUniform2uiEXT
BREBIS_FORCE_INLINE void  brebisUniform2uiv(GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisUniform2uiv(location, count, value); }
#define glUniform2uiv brebisUniform2uiv
BREBIS_FORCE_INLINE void  brebisUniform2uivEXT(GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisUniform2uivEXT(location, count, value); }
#define glUniform2uivEXT brebisUniform2uivEXT
BREBIS_FORCE_INLINE void  brebisUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisUniform3d(location, x, y, z); }
#define glUniform3d brebisUniform3d
BREBIS_FORCE_INLINE void  brebisUniform3dv(GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisUniform3dv(location, count, value); }
#define glUniform3dv brebisUniform3dv
BREBIS_FORCE_INLINE void  brebisUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { brebisGL.brebisUniform3f(location, v0, v1, v2); }
#define glUniform3f brebisUniform3f
BREBIS_FORCE_INLINE void  brebisUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { brebisGL.brebisUniform3fARB(location, v0, v1, v2); }
#define glUniform3fARB brebisUniform3fARB
BREBIS_FORCE_INLINE void  brebisUniform3fv(GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisUniform3fv(location, count, value); }
#define glUniform3fv brebisUniform3fv
BREBIS_FORCE_INLINE void  brebisUniform3fvARB(GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisUniform3fvARB(location, count, value); }
#define glUniform3fvARB brebisUniform3fvARB
BREBIS_FORCE_INLINE void  brebisUniform3i(GLint location, GLint v0, GLint v1, GLint v2) { brebisGL.brebisUniform3i(location, v0, v1, v2); }
#define glUniform3i brebisUniform3i
BREBIS_FORCE_INLINE void  brebisUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) { brebisGL.brebisUniform3i64ARB(location, x, y, z); }
#define glUniform3i64ARB brebisUniform3i64ARB
BREBIS_FORCE_INLINE void  brebisUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { brebisGL.brebisUniform3i64NV(location, x, y, z); }
#define glUniform3i64NV brebisUniform3i64NV
BREBIS_FORCE_INLINE void  brebisUniform3i64vARB(GLint location, GLsizei count, const GLint64 * value) { brebisGL.brebisUniform3i64vARB(location, count, value); }
#define glUniform3i64vARB brebisUniform3i64vARB
BREBIS_FORCE_INLINE void  brebisUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { brebisGL.brebisUniform3i64vNV(location, count, value); }
#define glUniform3i64vNV brebisUniform3i64vNV
BREBIS_FORCE_INLINE void  brebisUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) { brebisGL.brebisUniform3iARB(location, v0, v1, v2); }
#define glUniform3iARB brebisUniform3iARB
BREBIS_FORCE_INLINE void  brebisUniform3iv(GLint location, GLsizei count, const GLint * value) { brebisGL.brebisUniform3iv(location, count, value); }
#define glUniform3iv brebisUniform3iv
BREBIS_FORCE_INLINE void  brebisUniform3ivARB(GLint location, GLsizei count, const GLint * value) { brebisGL.brebisUniform3ivARB(location, count, value); }
#define glUniform3ivARB brebisUniform3ivARB
BREBIS_FORCE_INLINE void  brebisUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) { brebisGL.brebisUniform3ui(location, v0, v1, v2); }
#define glUniform3ui brebisUniform3ui
BREBIS_FORCE_INLINE void  brebisUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { brebisGL.brebisUniform3ui64ARB(location, x, y, z); }
#define glUniform3ui64ARB brebisUniform3ui64ARB
BREBIS_FORCE_INLINE void  brebisUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { brebisGL.brebisUniform3ui64NV(location, x, y, z); }
#define glUniform3ui64NV brebisUniform3ui64NV
BREBIS_FORCE_INLINE void  brebisUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisUniform3ui64vARB(location, count, value); }
#define glUniform3ui64vARB brebisUniform3ui64vARB
BREBIS_FORCE_INLINE void  brebisUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisUniform3ui64vNV(location, count, value); }
#define glUniform3ui64vNV brebisUniform3ui64vNV
BREBIS_FORCE_INLINE void  brebisUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) { brebisGL.brebisUniform3uiEXT(location, v0, v1, v2); }
#define glUniform3uiEXT brebisUniform3uiEXT
BREBIS_FORCE_INLINE void  brebisUniform3uiv(GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisUniform3uiv(location, count, value); }
#define glUniform3uiv brebisUniform3uiv
BREBIS_FORCE_INLINE void  brebisUniform3uivEXT(GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisUniform3uivEXT(location, count, value); }
#define glUniform3uivEXT brebisUniform3uivEXT
BREBIS_FORCE_INLINE void  brebisUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisUniform4d(location, x, y, z, w); }
#define glUniform4d brebisUniform4d
BREBIS_FORCE_INLINE void  brebisUniform4dv(GLint location, GLsizei count, const GLdouble * value) { brebisGL.brebisUniform4dv(location, count, value); }
#define glUniform4dv brebisUniform4dv
BREBIS_FORCE_INLINE void  brebisUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { brebisGL.brebisUniform4f(location, v0, v1, v2, v3); }
#define glUniform4f brebisUniform4f
BREBIS_FORCE_INLINE void  brebisUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { brebisGL.brebisUniform4fARB(location, v0, v1, v2, v3); }
#define glUniform4fARB brebisUniform4fARB
BREBIS_FORCE_INLINE void  brebisUniform4fv(GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisUniform4fv(location, count, value); }
#define glUniform4fv brebisUniform4fv
BREBIS_FORCE_INLINE void  brebisUniform4fvARB(GLint location, GLsizei count, const GLfloat * value) { brebisGL.brebisUniform4fvARB(location, count, value); }
#define glUniform4fvARB brebisUniform4fvARB
BREBIS_FORCE_INLINE void  brebisUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { brebisGL.brebisUniform4i(location, v0, v1, v2, v3); }
#define glUniform4i brebisUniform4i
BREBIS_FORCE_INLINE void  brebisUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { brebisGL.brebisUniform4i64ARB(location, x, y, z, w); }
#define glUniform4i64ARB brebisUniform4i64ARB
BREBIS_FORCE_INLINE void  brebisUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { brebisGL.brebisUniform4i64NV(location, x, y, z, w); }
#define glUniform4i64NV brebisUniform4i64NV
BREBIS_FORCE_INLINE void  brebisUniform4i64vARB(GLint location, GLsizei count, const GLint64 * value) { brebisGL.brebisUniform4i64vARB(location, count, value); }
#define glUniform4i64vARB brebisUniform4i64vARB
BREBIS_FORCE_INLINE void  brebisUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { brebisGL.brebisUniform4i64vNV(location, count, value); }
#define glUniform4i64vNV brebisUniform4i64vNV
BREBIS_FORCE_INLINE void  brebisUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { brebisGL.brebisUniform4iARB(location, v0, v1, v2, v3); }
#define glUniform4iARB brebisUniform4iARB
BREBIS_FORCE_INLINE void  brebisUniform4iv(GLint location, GLsizei count, const GLint * value) { brebisGL.brebisUniform4iv(location, count, value); }
#define glUniform4iv brebisUniform4iv
BREBIS_FORCE_INLINE void  brebisUniform4ivARB(GLint location, GLsizei count, const GLint * value) { brebisGL.brebisUniform4ivARB(location, count, value); }
#define glUniform4ivARB brebisUniform4ivARB
BREBIS_FORCE_INLINE void  brebisUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { brebisGL.brebisUniform4ui(location, v0, v1, v2, v3); }
#define glUniform4ui brebisUniform4ui
BREBIS_FORCE_INLINE void  brebisUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { brebisGL.brebisUniform4ui64ARB(location, x, y, z, w); }
#define glUniform4ui64ARB brebisUniform4ui64ARB
BREBIS_FORCE_INLINE void  brebisUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { brebisGL.brebisUniform4ui64NV(location, x, y, z, w); }
#define glUniform4ui64NV brebisUniform4ui64NV
BREBIS_FORCE_INLINE void  brebisUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisUniform4ui64vARB(location, count, value); }
#define glUniform4ui64vARB brebisUniform4ui64vARB
BREBIS_FORCE_INLINE void  brebisUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisUniform4ui64vNV(location, count, value); }
#define glUniform4ui64vNV brebisUniform4ui64vNV
BREBIS_FORCE_INLINE void  brebisUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { brebisGL.brebisUniform4uiEXT(location, v0, v1, v2, v3); }
#define glUniform4uiEXT brebisUniform4uiEXT
BREBIS_FORCE_INLINE void  brebisUniform4uiv(GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisUniform4uiv(location, count, value); }
#define glUniform4uiv brebisUniform4uiv
BREBIS_FORCE_INLINE void  brebisUniform4uivEXT(GLint location, GLsizei count, const GLuint * value) { brebisGL.brebisUniform4uivEXT(location, count, value); }
#define glUniform4uivEXT brebisUniform4uivEXT
BREBIS_FORCE_INLINE void  brebisUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { brebisGL.brebisUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); }
#define glUniformBlockBinding brebisUniformBlockBinding
BREBIS_FORCE_INLINE void  brebisUniformBufferEXT(GLuint program, GLint location, GLuint buffer) { brebisGL.brebisUniformBufferEXT(program, location, buffer); }
#define glUniformBufferEXT brebisUniformBufferEXT
BREBIS_FORCE_INLINE void  brebisUniformHandleui64ARB(GLint location, GLuint64 value) { brebisGL.brebisUniformHandleui64ARB(location, value); }
#define glUniformHandleui64ARB brebisUniformHandleui64ARB
BREBIS_FORCE_INLINE void  brebisUniformHandleui64IMG(GLint location, GLuint64 value) { brebisGL.brebisUniformHandleui64IMG(location, value); }
#define glUniformHandleui64IMG brebisUniformHandleui64IMG
BREBIS_FORCE_INLINE void  brebisUniformHandleui64NV(GLint location, GLuint64 value) { brebisGL.brebisUniformHandleui64NV(location, value); }
#define glUniformHandleui64NV brebisUniformHandleui64NV
BREBIS_FORCE_INLINE void  brebisUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisUniformHandleui64vARB(location, count, value); }
#define glUniformHandleui64vARB brebisUniformHandleui64vARB
BREBIS_FORCE_INLINE void  brebisUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisUniformHandleui64vIMG(location, count, value); }
#define glUniformHandleui64vIMG brebisUniformHandleui64vIMG
BREBIS_FORCE_INLINE void  brebisUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 * value) { brebisGL.brebisUniformHandleui64vNV(location, count, value); }
#define glUniformHandleui64vNV brebisUniformHandleui64vNV
BREBIS_FORCE_INLINE void  brebisUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisUniformMatrix2dv(location, count, transpose, value); }
#define glUniformMatrix2dv brebisUniformMatrix2dv
BREBIS_FORCE_INLINE void  brebisUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix2fv(location, count, transpose, value); }
#define glUniformMatrix2fv brebisUniformMatrix2fv
BREBIS_FORCE_INLINE void  brebisUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix2fvARB(location, count, transpose, value); }
#define glUniformMatrix2fvARB brebisUniformMatrix2fvARB
BREBIS_FORCE_INLINE void  brebisUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisUniformMatrix2x3dv(location, count, transpose, value); }
#define glUniformMatrix2x3dv brebisUniformMatrix2x3dv
BREBIS_FORCE_INLINE void  brebisUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix2x3fv(location, count, transpose, value); }
#define glUniformMatrix2x3fv brebisUniformMatrix2x3fv
BREBIS_FORCE_INLINE void  brebisUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix2x3fvNV(location, count, transpose, value); }
#define glUniformMatrix2x3fvNV brebisUniformMatrix2x3fvNV
BREBIS_FORCE_INLINE void  brebisUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisUniformMatrix2x4dv(location, count, transpose, value); }
#define glUniformMatrix2x4dv brebisUniformMatrix2x4dv
BREBIS_FORCE_INLINE void  brebisUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix2x4fv(location, count, transpose, value); }
#define glUniformMatrix2x4fv brebisUniformMatrix2x4fv
BREBIS_FORCE_INLINE void  brebisUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix2x4fvNV(location, count, transpose, value); }
#define glUniformMatrix2x4fvNV brebisUniformMatrix2x4fvNV
BREBIS_FORCE_INLINE void  brebisUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisUniformMatrix3dv(location, count, transpose, value); }
#define glUniformMatrix3dv brebisUniformMatrix3dv
BREBIS_FORCE_INLINE void  brebisUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix3fv(location, count, transpose, value); }
#define glUniformMatrix3fv brebisUniformMatrix3fv
BREBIS_FORCE_INLINE void  brebisUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix3fvARB(location, count, transpose, value); }
#define glUniformMatrix3fvARB brebisUniformMatrix3fvARB
BREBIS_FORCE_INLINE void  brebisUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisUniformMatrix3x2dv(location, count, transpose, value); }
#define glUniformMatrix3x2dv brebisUniformMatrix3x2dv
BREBIS_FORCE_INLINE void  brebisUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix3x2fv(location, count, transpose, value); }
#define glUniformMatrix3x2fv brebisUniformMatrix3x2fv
BREBIS_FORCE_INLINE void  brebisUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix3x2fvNV(location, count, transpose, value); }
#define glUniformMatrix3x2fvNV brebisUniformMatrix3x2fvNV
BREBIS_FORCE_INLINE void  brebisUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisUniformMatrix3x4dv(location, count, transpose, value); }
#define glUniformMatrix3x4dv brebisUniformMatrix3x4dv
BREBIS_FORCE_INLINE void  brebisUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix3x4fv(location, count, transpose, value); }
#define glUniformMatrix3x4fv brebisUniformMatrix3x4fv
BREBIS_FORCE_INLINE void  brebisUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix3x4fvNV(location, count, transpose, value); }
#define glUniformMatrix3x4fvNV brebisUniformMatrix3x4fvNV
BREBIS_FORCE_INLINE void  brebisUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisUniformMatrix4dv(location, count, transpose, value); }
#define glUniformMatrix4dv brebisUniformMatrix4dv
BREBIS_FORCE_INLINE void  brebisUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix4fv(location, count, transpose, value); }
#define glUniformMatrix4fv brebisUniformMatrix4fv
BREBIS_FORCE_INLINE void  brebisUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix4fvARB(location, count, transpose, value); }
#define glUniformMatrix4fvARB brebisUniformMatrix4fvARB
BREBIS_FORCE_INLINE void  brebisUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisUniformMatrix4x2dv(location, count, transpose, value); }
#define glUniformMatrix4x2dv brebisUniformMatrix4x2dv
BREBIS_FORCE_INLINE void  brebisUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix4x2fv(location, count, transpose, value); }
#define glUniformMatrix4x2fv brebisUniformMatrix4x2fv
BREBIS_FORCE_INLINE void  brebisUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix4x2fvNV(location, count, transpose, value); }
#define glUniformMatrix4x2fvNV brebisUniformMatrix4x2fvNV
BREBIS_FORCE_INLINE void  brebisUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { brebisGL.brebisUniformMatrix4x3dv(location, count, transpose, value); }
#define glUniformMatrix4x3dv brebisUniformMatrix4x3dv
BREBIS_FORCE_INLINE void  brebisUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix4x3fv(location, count, transpose, value); }
#define glUniformMatrix4x3fv brebisUniformMatrix4x3fv
BREBIS_FORCE_INLINE void  brebisUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { brebisGL.brebisUniformMatrix4x3fvNV(location, count, transpose, value); }
#define glUniformMatrix4x3fvNV brebisUniformMatrix4x3fvNV
BREBIS_FORCE_INLINE void  brebisUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices) { brebisGL.brebisUniformSubroutinesuiv(shadertype, count, indices); }
#define glUniformSubroutinesuiv brebisUniformSubroutinesuiv
BREBIS_FORCE_INLINE void  brebisUniformui64NV(GLint location, GLuint64EXT value) { brebisGL.brebisUniformui64NV(location, value); }
#define glUniformui64NV brebisUniformui64NV
BREBIS_FORCE_INLINE void  brebisUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { brebisGL.brebisUniformui64vNV(location, count, value); }
#define glUniformui64vNV brebisUniformui64vNV
BREBIS_FORCE_INLINE void  brebisUnlockArraysEXT(void) { brebisGL.brebisUnlockArraysEXT(); }
#define glUnlockArraysEXT brebisUnlockArraysEXT
BREBIS_FORCE_INLINE GLboolean brebisUnmapBuffer(GLenum target) { return brebisGL.brebisUnmapBuffer(target); }
#define glUnmapBuffer brebisUnmapBuffer
BREBIS_FORCE_INLINE GLboolean brebisUnmapBufferARB(GLenum target) { return brebisGL.brebisUnmapBufferARB(target); }
#define glUnmapBufferARB brebisUnmapBufferARB
BREBIS_FORCE_INLINE GLboolean brebisUnmapBufferOES(GLenum target) { return brebisGL.brebisUnmapBufferOES(target); }
#define glUnmapBufferOES brebisUnmapBufferOES
BREBIS_FORCE_INLINE GLboolean brebisUnmapNamedBuffer(GLuint buffer) { return brebisGL.brebisUnmapNamedBuffer(buffer); }
#define glUnmapNamedBuffer brebisUnmapNamedBuffer
BREBIS_FORCE_INLINE GLboolean brebisUnmapNamedBufferEXT(GLuint buffer) { return brebisGL.brebisUnmapNamedBufferEXT(buffer); }
#define glUnmapNamedBufferEXT brebisUnmapNamedBufferEXT
BREBIS_FORCE_INLINE void  brebisUnmapObjectBufferATI(GLuint buffer) { brebisGL.brebisUnmapObjectBufferATI(buffer); }
#define glUnmapObjectBufferATI brebisUnmapObjectBufferATI
BREBIS_FORCE_INLINE void  brebisUnmapTexture2DINTEL(GLuint texture, GLint level) { brebisGL.brebisUnmapTexture2DINTEL(texture, level); }
#define glUnmapTexture2DINTEL brebisUnmapTexture2DINTEL
BREBIS_FORCE_INLINE void  brebisUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve) { brebisGL.brebisUpdateObjectBufferATI(buffer, offset, size, pointer, preserve); }
#define glUpdateObjectBufferATI brebisUpdateObjectBufferATI
BREBIS_FORCE_INLINE void  brebisUseProgram(GLuint program) { brebisGL.brebisUseProgram(program); }
#define glUseProgram brebisUseProgram
BREBIS_FORCE_INLINE void  brebisUseProgramObjectARB(GLhandleARB programObj) { brebisGL.brebisUseProgramObjectARB(programObj); }
#define glUseProgramObjectARB brebisUseProgramObjectARB
BREBIS_FORCE_INLINE void  brebisUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) { brebisGL.brebisUseProgramStages(pipeline, stages, program); }
#define glUseProgramStages brebisUseProgramStages
BREBIS_FORCE_INLINE void  brebisUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program) { brebisGL.brebisUseProgramStagesEXT(pipeline, stages, program); }
#define glUseProgramStagesEXT brebisUseProgramStagesEXT
BREBIS_FORCE_INLINE void  brebisUseShaderProgramEXT(GLenum type, GLuint program) { brebisGL.brebisUseShaderProgramEXT(type, program); }
#define glUseShaderProgramEXT brebisUseShaderProgramEXT
BREBIS_FORCE_INLINE void  brebisVDPAUFiniNV(void) { brebisGL.brebisVDPAUFiniNV(); }
#define glVDPAUFiniNV brebisVDPAUFiniNV
BREBIS_FORCE_INLINE void  brebisVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { brebisGL.brebisVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values); }
#define glVDPAUGetSurfaceivNV brebisVDPAUGetSurfaceivNV
BREBIS_FORCE_INLINE void  brebisVDPAUInitNV(const void * vdpDevice, const void * getProcAddress) { brebisGL.brebisVDPAUInitNV(vdpDevice, getProcAddress); }
#define glVDPAUInitNV brebisVDPAUInitNV
BREBIS_FORCE_INLINE GLboolean brebisVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) { return brebisGL.brebisVDPAUIsSurfaceNV(surface); }
#define glVDPAUIsSurfaceNV brebisVDPAUIsSurfaceNV
BREBIS_FORCE_INLINE void  brebisVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces) { brebisGL.brebisVDPAUMapSurfacesNV(numSurfaces, surfaces); }
#define glVDPAUMapSurfacesNV brebisVDPAUMapSurfacesNV
BREBIS_FORCE_INLINE GLvdpauSurfaceNV brebisVDPAURegisterOutputSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return brebisGL.brebisVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
#define glVDPAURegisterOutputSurfaceNV brebisVDPAURegisterOutputSurfaceNV
BREBIS_FORCE_INLINE GLvdpauSurfaceNV brebisVDPAURegisterVideoSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return brebisGL.brebisVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
#define glVDPAURegisterVideoSurfaceNV brebisVDPAURegisterVideoSurfaceNV
BREBIS_FORCE_INLINE void  brebisVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) { brebisGL.brebisVDPAUSurfaceAccessNV(surface, access); }
#define glVDPAUSurfaceAccessNV brebisVDPAUSurfaceAccessNV
BREBIS_FORCE_INLINE void  brebisVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV * surfaces) { brebisGL.brebisVDPAUUnmapSurfacesNV(numSurface, surfaces); }
#define glVDPAUUnmapSurfacesNV brebisVDPAUUnmapSurfacesNV
BREBIS_FORCE_INLINE void  brebisVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) { brebisGL.brebisVDPAUUnregisterSurfaceNV(surface); }
#define glVDPAUUnregisterSurfaceNV brebisVDPAUUnregisterSurfaceNV
BREBIS_FORCE_INLINE void  brebisValidateProgram(GLuint program) { brebisGL.brebisValidateProgram(program); }
#define glValidateProgram brebisValidateProgram
BREBIS_FORCE_INLINE void  brebisValidateProgramARB(GLhandleARB programObj) { brebisGL.brebisValidateProgramARB(programObj); }
#define glValidateProgramARB brebisValidateProgramARB
BREBIS_FORCE_INLINE void  brebisValidateProgramPipeline(GLuint pipeline) { brebisGL.brebisValidateProgramPipeline(pipeline); }
#define glValidateProgramPipeline brebisValidateProgramPipeline
BREBIS_FORCE_INLINE void  brebisValidateProgramPipelineEXT(GLuint pipeline) { brebisGL.brebisValidateProgramPipelineEXT(pipeline); }
#define glValidateProgramPipelineEXT brebisValidateProgramPipelineEXT
BREBIS_FORCE_INLINE void  brebisVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { brebisGL.brebisVariantArrayObjectATI(id, type, stride, buffer, offset); }
#define glVariantArrayObjectATI brebisVariantArrayObjectATI
BREBIS_FORCE_INLINE void  brebisVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void * addr) { brebisGL.brebisVariantPointerEXT(id, type, stride, addr); }
#define glVariantPointerEXT brebisVariantPointerEXT
BREBIS_FORCE_INLINE void  brebisVariantbvEXT(GLuint id, const GLbyte * addr) { brebisGL.brebisVariantbvEXT(id, addr); }
#define glVariantbvEXT brebisVariantbvEXT
BREBIS_FORCE_INLINE void  brebisVariantdvEXT(GLuint id, const GLdouble * addr) { brebisGL.brebisVariantdvEXT(id, addr); }
#define glVariantdvEXT brebisVariantdvEXT
BREBIS_FORCE_INLINE void  brebisVariantfvEXT(GLuint id, const GLfloat * addr) { brebisGL.brebisVariantfvEXT(id, addr); }
#define glVariantfvEXT brebisVariantfvEXT
BREBIS_FORCE_INLINE void  brebisVariantivEXT(GLuint id, const GLint * addr) { brebisGL.brebisVariantivEXT(id, addr); }
#define glVariantivEXT brebisVariantivEXT
BREBIS_FORCE_INLINE void  brebisVariantsvEXT(GLuint id, const GLshort * addr) { brebisGL.brebisVariantsvEXT(id, addr); }
#define glVariantsvEXT brebisVariantsvEXT
BREBIS_FORCE_INLINE void  brebisVariantubvEXT(GLuint id, const GLubyte * addr) { brebisGL.brebisVariantubvEXT(id, addr); }
#define glVariantubvEXT brebisVariantubvEXT
BREBIS_FORCE_INLINE void  brebisVariantuivEXT(GLuint id, const GLuint * addr) { brebisGL.brebisVariantuivEXT(id, addr); }
#define glVariantuivEXT brebisVariantuivEXT
BREBIS_FORCE_INLINE void  brebisVariantusvEXT(GLuint id, const GLushort * addr) { brebisGL.brebisVariantusvEXT(id, addr); }
#define glVariantusvEXT brebisVariantusvEXT
BREBIS_FORCE_INLINE void  brebisVertex2bOES(GLbyte x, GLbyte y) { brebisGL.brebisVertex2bOES(x, y); }
#define glVertex2bOES brebisVertex2bOES
BREBIS_FORCE_INLINE void  brebisVertex2bvOES(const GLbyte * coords) { brebisGL.brebisVertex2bvOES(coords); }
#define glVertex2bvOES brebisVertex2bvOES
BREBIS_FORCE_INLINE void  brebisVertex2d(GLdouble x, GLdouble y) { brebisGL.brebisVertex2d(x, y); }
#define glVertex2d brebisVertex2d
BREBIS_FORCE_INLINE void  brebisVertex2dv(const GLdouble * v) { brebisGL.brebisVertex2dv(v); }
#define glVertex2dv brebisVertex2dv
BREBIS_FORCE_INLINE void  brebisVertex2f(GLfloat x, GLfloat y) { brebisGL.brebisVertex2f(x, y); }
#define glVertex2f brebisVertex2f
BREBIS_FORCE_INLINE void  brebisVertex2fv(const GLfloat * v) { brebisGL.brebisVertex2fv(v); }
#define glVertex2fv brebisVertex2fv
BREBIS_FORCE_INLINE void  brebisVertex2hNV(GLhalfNV x, GLhalfNV y) { brebisGL.brebisVertex2hNV(x, y); }
#define glVertex2hNV brebisVertex2hNV
BREBIS_FORCE_INLINE void  brebisVertex2hvNV(const GLhalfNV * v) { brebisGL.brebisVertex2hvNV(v); }
#define glVertex2hvNV brebisVertex2hvNV
BREBIS_FORCE_INLINE void  brebisVertex2i(GLint x, GLint y) { brebisGL.brebisVertex2i(x, y); }
#define glVertex2i brebisVertex2i
BREBIS_FORCE_INLINE void  brebisVertex2iv(const GLint * v) { brebisGL.brebisVertex2iv(v); }
#define glVertex2iv brebisVertex2iv
BREBIS_FORCE_INLINE void  brebisVertex2s(GLshort x, GLshort y) { brebisGL.brebisVertex2s(x, y); }
#define glVertex2s brebisVertex2s
BREBIS_FORCE_INLINE void  brebisVertex2sv(const GLshort * v) { brebisGL.brebisVertex2sv(v); }
#define glVertex2sv brebisVertex2sv
BREBIS_FORCE_INLINE void  brebisVertex2xOES(GLfixed x) { brebisGL.brebisVertex2xOES(x); }
#define glVertex2xOES brebisVertex2xOES
BREBIS_FORCE_INLINE void  brebisVertex2xvOES(const GLfixed * coords) { brebisGL.brebisVertex2xvOES(coords); }
#define glVertex2xvOES brebisVertex2xvOES
BREBIS_FORCE_INLINE void  brebisVertex3bOES(GLbyte x, GLbyte y, GLbyte z) { brebisGL.brebisVertex3bOES(x, y, z); }
#define glVertex3bOES brebisVertex3bOES
BREBIS_FORCE_INLINE void  brebisVertex3bvOES(const GLbyte * coords) { brebisGL.brebisVertex3bvOES(coords); }
#define glVertex3bvOES brebisVertex3bvOES
BREBIS_FORCE_INLINE void  brebisVertex3d(GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisVertex3d(x, y, z); }
#define glVertex3d brebisVertex3d
BREBIS_FORCE_INLINE void  brebisVertex3dv(const GLdouble * v) { brebisGL.brebisVertex3dv(v); }
#define glVertex3dv brebisVertex3dv
BREBIS_FORCE_INLINE void  brebisVertex3f(GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisVertex3f(x, y, z); }
#define glVertex3f brebisVertex3f
BREBIS_FORCE_INLINE void  brebisVertex3fv(const GLfloat * v) { brebisGL.brebisVertex3fv(v); }
#define glVertex3fv brebisVertex3fv
BREBIS_FORCE_INLINE void  brebisVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) { brebisGL.brebisVertex3hNV(x, y, z); }
#define glVertex3hNV brebisVertex3hNV
BREBIS_FORCE_INLINE void  brebisVertex3hvNV(const GLhalfNV * v) { brebisGL.brebisVertex3hvNV(v); }
#define glVertex3hvNV brebisVertex3hvNV
BREBIS_FORCE_INLINE void  brebisVertex3i(GLint x, GLint y, GLint z) { brebisGL.brebisVertex3i(x, y, z); }
#define glVertex3i brebisVertex3i
BREBIS_FORCE_INLINE void  brebisVertex3iv(const GLint * v) { brebisGL.brebisVertex3iv(v); }
#define glVertex3iv brebisVertex3iv
BREBIS_FORCE_INLINE void  brebisVertex3s(GLshort x, GLshort y, GLshort z) { brebisGL.brebisVertex3s(x, y, z); }
#define glVertex3s brebisVertex3s
BREBIS_FORCE_INLINE void  brebisVertex3sv(const GLshort * v) { brebisGL.brebisVertex3sv(v); }
#define glVertex3sv brebisVertex3sv
BREBIS_FORCE_INLINE void  brebisVertex3xOES(GLfixed x, GLfixed y) { brebisGL.brebisVertex3xOES(x, y); }
#define glVertex3xOES brebisVertex3xOES
BREBIS_FORCE_INLINE void  brebisVertex3xvOES(const GLfixed * coords) { brebisGL.brebisVertex3xvOES(coords); }
#define glVertex3xvOES brebisVertex3xvOES
BREBIS_FORCE_INLINE void  brebisVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w) { brebisGL.brebisVertex4bOES(x, y, z, w); }
#define glVertex4bOES brebisVertex4bOES
BREBIS_FORCE_INLINE void  brebisVertex4bvOES(const GLbyte * coords) { brebisGL.brebisVertex4bvOES(coords); }
#define glVertex4bvOES brebisVertex4bvOES
BREBIS_FORCE_INLINE void  brebisVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisVertex4d(x, y, z, w); }
#define glVertex4d brebisVertex4d
BREBIS_FORCE_INLINE void  brebisVertex4dv(const GLdouble * v) { brebisGL.brebisVertex4dv(v); }
#define glVertex4dv brebisVertex4dv
BREBIS_FORCE_INLINE void  brebisVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisVertex4f(x, y, z, w); }
#define glVertex4f brebisVertex4f
BREBIS_FORCE_INLINE void  brebisVertex4fv(const GLfloat * v) { brebisGL.brebisVertex4fv(v); }
#define glVertex4fv brebisVertex4fv
BREBIS_FORCE_INLINE void  brebisVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { brebisGL.brebisVertex4hNV(x, y, z, w); }
#define glVertex4hNV brebisVertex4hNV
BREBIS_FORCE_INLINE void  brebisVertex4hvNV(const GLhalfNV * v) { brebisGL.brebisVertex4hvNV(v); }
#define glVertex4hvNV brebisVertex4hvNV
BREBIS_FORCE_INLINE void  brebisVertex4i(GLint x, GLint y, GLint z, GLint w) { brebisGL.brebisVertex4i(x, y, z, w); }
#define glVertex4i brebisVertex4i
BREBIS_FORCE_INLINE void  brebisVertex4iv(const GLint * v) { brebisGL.brebisVertex4iv(v); }
#define glVertex4iv brebisVertex4iv
BREBIS_FORCE_INLINE void  brebisVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) { brebisGL.brebisVertex4s(x, y, z, w); }
#define glVertex4s brebisVertex4s
BREBIS_FORCE_INLINE void  brebisVertex4sv(const GLshort * v) { brebisGL.brebisVertex4sv(v); }
#define glVertex4sv brebisVertex4sv
BREBIS_FORCE_INLINE void  brebisVertex4xOES(GLfixed x, GLfixed y, GLfixed z) { brebisGL.brebisVertex4xOES(x, y, z); }
#define glVertex4xOES brebisVertex4xOES
BREBIS_FORCE_INLINE void  brebisVertex4xvOES(const GLfixed * coords) { brebisGL.brebisVertex4xvOES(coords); }
#define glVertex4xvOES brebisVertex4xvOES
BREBIS_FORCE_INLINE void  brebisVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { brebisGL.brebisVertexArrayAttribBinding(vaobj, attribindex, bindingindex); }
#define glVertexArrayAttribBinding brebisVertexArrayAttribBinding
BREBIS_FORCE_INLINE void  brebisVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { brebisGL.brebisVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset); }
#define glVertexArrayAttribFormat brebisVertexArrayAttribFormat
BREBIS_FORCE_INLINE void  brebisVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { brebisGL.brebisVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset); }
#define glVertexArrayAttribIFormat brebisVertexArrayAttribIFormat
BREBIS_FORCE_INLINE void  brebisVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { brebisGL.brebisVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset); }
#define glVertexArrayAttribLFormat brebisVertexArrayAttribLFormat
BREBIS_FORCE_INLINE void  brebisVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { brebisGL.brebisVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride); }
#define glVertexArrayBindVertexBufferEXT brebisVertexArrayBindVertexBufferEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) { brebisGL.brebisVertexArrayBindingDivisor(vaobj, bindingindex, divisor); }
#define glVertexArrayBindingDivisor brebisVertexArrayBindingDivisor
BREBIS_FORCE_INLINE void  brebisVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
#define glVertexArrayColorOffsetEXT brebisVertexArrayColorOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset); }
#define glVertexArrayEdgeFlagOffsetEXT brebisVertexArrayEdgeFlagOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) { brebisGL.brebisVertexArrayElementBuffer(vaobj, buffer); }
#define glVertexArrayElementBuffer brebisVertexArrayElementBuffer
BREBIS_FORCE_INLINE void  brebisVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset); }
#define glVertexArrayFogCoordOffsetEXT brebisVertexArrayFogCoordOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset); }
#define glVertexArrayIndexOffsetEXT brebisVertexArrayIndexOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset); }
#define glVertexArrayMultiTexCoordOffsetEXT brebisVertexArrayMultiTexCoordOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset); }
#define glVertexArrayNormalOffsetEXT brebisVertexArrayNormalOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayParameteriAPPLE(GLenum pname, GLint param) { brebisGL.brebisVertexArrayParameteriAPPLE(pname, param); }
#define glVertexArrayParameteriAPPLE brebisVertexArrayParameteriAPPLE
BREBIS_FORCE_INLINE void  brebisVertexArrayRangeAPPLE(GLsizei length, void * pointer) { brebisGL.brebisVertexArrayRangeAPPLE(length, pointer); }
#define glVertexArrayRangeAPPLE brebisVertexArrayRangeAPPLE
BREBIS_FORCE_INLINE void  brebisVertexArrayRangeNV(GLsizei length, const void * pointer) { brebisGL.brebisVertexArrayRangeNV(length, pointer); }
#define glVertexArrayRangeNV brebisVertexArrayRangeNV
BREBIS_FORCE_INLINE void  brebisVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
#define glVertexArraySecondaryColorOffsetEXT brebisVertexArraySecondaryColorOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset); }
#define glVertexArrayTexCoordOffsetEXT brebisVertexArrayTexCoordOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { brebisGL.brebisVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex); }
#define glVertexArrayVertexAttribBindingEXT brebisVertexArrayVertexAttribBindingEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) { brebisGL.brebisVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor); }
#define glVertexArrayVertexAttribDivisorEXT brebisVertexArrayVertexAttribDivisorEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { brebisGL.brebisVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset); }
#define glVertexArrayVertexAttribFormatEXT brebisVertexArrayVertexAttribFormatEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { brebisGL.brebisVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
#define glVertexArrayVertexAttribIFormatEXT brebisVertexArrayVertexAttribIFormatEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
#define glVertexArrayVertexAttribIOffsetEXT brebisVertexArrayVertexAttribIOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { brebisGL.brebisVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
#define glVertexArrayVertexAttribLFormatEXT brebisVertexArrayVertexAttribLFormatEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
#define glVertexArrayVertexAttribLOffsetEXT brebisVertexArrayVertexAttribLOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset); }
#define glVertexArrayVertexAttribOffsetEXT brebisVertexArrayVertexAttribOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) { brebisGL.brebisVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor); }
#define glVertexArrayVertexBindingDivisorEXT brebisVertexArrayVertexBindingDivisorEXT
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { brebisGL.brebisVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); }
#define glVertexArrayVertexBuffer brebisVertexArrayVertexBuffer
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { brebisGL.brebisVertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); }
#define glVertexArrayVertexBuffers brebisVertexArrayVertexBuffers
BREBIS_FORCE_INLINE void  brebisVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { brebisGL.brebisVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset); }
#define glVertexArrayVertexOffsetEXT brebisVertexArrayVertexOffsetEXT
BREBIS_FORCE_INLINE void  brebisVertexAttrib1d(GLuint index, GLdouble x) { brebisGL.brebisVertexAttrib1d(index, x); }
#define glVertexAttrib1d brebisVertexAttrib1d
BREBIS_FORCE_INLINE void  brebisVertexAttrib1dARB(GLuint index, GLdouble x) { brebisGL.brebisVertexAttrib1dARB(index, x); }
#define glVertexAttrib1dARB brebisVertexAttrib1dARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib1dNV(GLuint index, GLdouble x) { brebisGL.brebisVertexAttrib1dNV(index, x); }
#define glVertexAttrib1dNV brebisVertexAttrib1dNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib1dv(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib1dv(index, v); }
#define glVertexAttrib1dv brebisVertexAttrib1dv
BREBIS_FORCE_INLINE void  brebisVertexAttrib1dvARB(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib1dvARB(index, v); }
#define glVertexAttrib1dvARB brebisVertexAttrib1dvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib1dvNV(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib1dvNV(index, v); }
#define glVertexAttrib1dvNV brebisVertexAttrib1dvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib1f(GLuint index, GLfloat x) { brebisGL.brebisVertexAttrib1f(index, x); }
#define glVertexAttrib1f brebisVertexAttrib1f
BREBIS_FORCE_INLINE void  brebisVertexAttrib1fARB(GLuint index, GLfloat x) { brebisGL.brebisVertexAttrib1fARB(index, x); }
#define glVertexAttrib1fARB brebisVertexAttrib1fARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib1fNV(GLuint index, GLfloat x) { brebisGL.brebisVertexAttrib1fNV(index, x); }
#define glVertexAttrib1fNV brebisVertexAttrib1fNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib1fv(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib1fv(index, v); }
#define glVertexAttrib1fv brebisVertexAttrib1fv
BREBIS_FORCE_INLINE void  brebisVertexAttrib1fvARB(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib1fvARB(index, v); }
#define glVertexAttrib1fvARB brebisVertexAttrib1fvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib1fvNV(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib1fvNV(index, v); }
#define glVertexAttrib1fvNV brebisVertexAttrib1fvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib1hNV(GLuint index, GLhalfNV x) { brebisGL.brebisVertexAttrib1hNV(index, x); }
#define glVertexAttrib1hNV brebisVertexAttrib1hNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib1hvNV(GLuint index, const GLhalfNV * v) { brebisGL.brebisVertexAttrib1hvNV(index, v); }
#define glVertexAttrib1hvNV brebisVertexAttrib1hvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib1s(GLuint index, GLshort x) { brebisGL.brebisVertexAttrib1s(index, x); }
#define glVertexAttrib1s brebisVertexAttrib1s
BREBIS_FORCE_INLINE void  brebisVertexAttrib1sARB(GLuint index, GLshort x) { brebisGL.brebisVertexAttrib1sARB(index, x); }
#define glVertexAttrib1sARB brebisVertexAttrib1sARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib1sNV(GLuint index, GLshort x) { brebisGL.brebisVertexAttrib1sNV(index, x); }
#define glVertexAttrib1sNV brebisVertexAttrib1sNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib1sv(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib1sv(index, v); }
#define glVertexAttrib1sv brebisVertexAttrib1sv
BREBIS_FORCE_INLINE void  brebisVertexAttrib1svARB(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib1svARB(index, v); }
#define glVertexAttrib1svARB brebisVertexAttrib1svARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib1svNV(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib1svNV(index, v); }
#define glVertexAttrib1svNV brebisVertexAttrib1svNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) { brebisGL.brebisVertexAttrib2d(index, x, y); }
#define glVertexAttrib2d brebisVertexAttrib2d
BREBIS_FORCE_INLINE void  brebisVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) { brebisGL.brebisVertexAttrib2dARB(index, x, y); }
#define glVertexAttrib2dARB brebisVertexAttrib2dARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) { brebisGL.brebisVertexAttrib2dNV(index, x, y); }
#define glVertexAttrib2dNV brebisVertexAttrib2dNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib2dv(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib2dv(index, v); }
#define glVertexAttrib2dv brebisVertexAttrib2dv
BREBIS_FORCE_INLINE void  brebisVertexAttrib2dvARB(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib2dvARB(index, v); }
#define glVertexAttrib2dvARB brebisVertexAttrib2dvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib2dvNV(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib2dvNV(index, v); }
#define glVertexAttrib2dvNV brebisVertexAttrib2dvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) { brebisGL.brebisVertexAttrib2f(index, x, y); }
#define glVertexAttrib2f brebisVertexAttrib2f
BREBIS_FORCE_INLINE void  brebisVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) { brebisGL.brebisVertexAttrib2fARB(index, x, y); }
#define glVertexAttrib2fARB brebisVertexAttrib2fARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) { brebisGL.brebisVertexAttrib2fNV(index, x, y); }
#define glVertexAttrib2fNV brebisVertexAttrib2fNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib2fv(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib2fv(index, v); }
#define glVertexAttrib2fv brebisVertexAttrib2fv
BREBIS_FORCE_INLINE void  brebisVertexAttrib2fvARB(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib2fvARB(index, v); }
#define glVertexAttrib2fvARB brebisVertexAttrib2fvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib2fvNV(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib2fvNV(index, v); }
#define glVertexAttrib2fvNV brebisVertexAttrib2fvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) { brebisGL.brebisVertexAttrib2hNV(index, x, y); }
#define glVertexAttrib2hNV brebisVertexAttrib2hNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib2hvNV(GLuint index, const GLhalfNV * v) { brebisGL.brebisVertexAttrib2hvNV(index, v); }
#define glVertexAttrib2hvNV brebisVertexAttrib2hvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib2s(GLuint index, GLshort x, GLshort y) { brebisGL.brebisVertexAttrib2s(index, x, y); }
#define glVertexAttrib2s brebisVertexAttrib2s
BREBIS_FORCE_INLINE void  brebisVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) { brebisGL.brebisVertexAttrib2sARB(index, x, y); }
#define glVertexAttrib2sARB brebisVertexAttrib2sARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) { brebisGL.brebisVertexAttrib2sNV(index, x, y); }
#define glVertexAttrib2sNV brebisVertexAttrib2sNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib2sv(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib2sv(index, v); }
#define glVertexAttrib2sv brebisVertexAttrib2sv
BREBIS_FORCE_INLINE void  brebisVertexAttrib2svARB(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib2svARB(index, v); }
#define glVertexAttrib2svARB brebisVertexAttrib2svARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib2svNV(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib2svNV(index, v); }
#define glVertexAttrib2svNV brebisVertexAttrib2svNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisVertexAttrib3d(index, x, y, z); }
#define glVertexAttrib3d brebisVertexAttrib3d
BREBIS_FORCE_INLINE void  brebisVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisVertexAttrib3dARB(index, x, y, z); }
#define glVertexAttrib3dARB brebisVertexAttrib3dARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisVertexAttrib3dNV(index, x, y, z); }
#define glVertexAttrib3dNV brebisVertexAttrib3dNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib3dv(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib3dv(index, v); }
#define glVertexAttrib3dv brebisVertexAttrib3dv
BREBIS_FORCE_INLINE void  brebisVertexAttrib3dvARB(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib3dvARB(index, v); }
#define glVertexAttrib3dvARB brebisVertexAttrib3dvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib3dvNV(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib3dvNV(index, v); }
#define glVertexAttrib3dvNV brebisVertexAttrib3dvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisVertexAttrib3f(index, x, y, z); }
#define glVertexAttrib3f brebisVertexAttrib3f
BREBIS_FORCE_INLINE void  brebisVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisVertexAttrib3fARB(index, x, y, z); }
#define glVertexAttrib3fARB brebisVertexAttrib3fARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisVertexAttrib3fNV(index, x, y, z); }
#define glVertexAttrib3fNV brebisVertexAttrib3fNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib3fv(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib3fv(index, v); }
#define glVertexAttrib3fv brebisVertexAttrib3fv
BREBIS_FORCE_INLINE void  brebisVertexAttrib3fvARB(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib3fvARB(index, v); }
#define glVertexAttrib3fvARB brebisVertexAttrib3fvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib3fvNV(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib3fvNV(index, v); }
#define glVertexAttrib3fvNV brebisVertexAttrib3fvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) { brebisGL.brebisVertexAttrib3hNV(index, x, y, z); }
#define glVertexAttrib3hNV brebisVertexAttrib3hNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib3hvNV(GLuint index, const GLhalfNV * v) { brebisGL.brebisVertexAttrib3hvNV(index, v); }
#define glVertexAttrib3hvNV brebisVertexAttrib3hvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) { brebisGL.brebisVertexAttrib3s(index, x, y, z); }
#define glVertexAttrib3s brebisVertexAttrib3s
BREBIS_FORCE_INLINE void  brebisVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) { brebisGL.brebisVertexAttrib3sARB(index, x, y, z); }
#define glVertexAttrib3sARB brebisVertexAttrib3sARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) { brebisGL.brebisVertexAttrib3sNV(index, x, y, z); }
#define glVertexAttrib3sNV brebisVertexAttrib3sNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib3sv(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib3sv(index, v); }
#define glVertexAttrib3sv brebisVertexAttrib3sv
BREBIS_FORCE_INLINE void  brebisVertexAttrib3svARB(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib3svARB(index, v); }
#define glVertexAttrib3svARB brebisVertexAttrib3svARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib3svNV(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib3svNV(index, v); }
#define glVertexAttrib3svNV brebisVertexAttrib3svNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4Nbv(GLuint index, const GLbyte * v) { brebisGL.brebisVertexAttrib4Nbv(index, v); }
#define glVertexAttrib4Nbv brebisVertexAttrib4Nbv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4NbvARB(GLuint index, const GLbyte * v) { brebisGL.brebisVertexAttrib4NbvARB(index, v); }
#define glVertexAttrib4NbvARB brebisVertexAttrib4NbvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4Niv(GLuint index, const GLint * v) { brebisGL.brebisVertexAttrib4Niv(index, v); }
#define glVertexAttrib4Niv brebisVertexAttrib4Niv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4NivARB(GLuint index, const GLint * v) { brebisGL.brebisVertexAttrib4NivARB(index, v); }
#define glVertexAttrib4NivARB brebisVertexAttrib4NivARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4Nsv(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib4Nsv(index, v); }
#define glVertexAttrib4Nsv brebisVertexAttrib4Nsv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4NsvARB(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib4NsvARB(index, v); }
#define glVertexAttrib4NsvARB brebisVertexAttrib4NsvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { brebisGL.brebisVertexAttrib4Nub(index, x, y, z, w); }
#define glVertexAttrib4Nub brebisVertexAttrib4Nub
BREBIS_FORCE_INLINE void  brebisVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { brebisGL.brebisVertexAttrib4NubARB(index, x, y, z, w); }
#define glVertexAttrib4NubARB brebisVertexAttrib4NubARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4Nubv(GLuint index, const GLubyte * v) { brebisGL.brebisVertexAttrib4Nubv(index, v); }
#define glVertexAttrib4Nubv brebisVertexAttrib4Nubv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4NubvARB(GLuint index, const GLubyte * v) { brebisGL.brebisVertexAttrib4NubvARB(index, v); }
#define glVertexAttrib4NubvARB brebisVertexAttrib4NubvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4Nuiv(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttrib4Nuiv(index, v); }
#define glVertexAttrib4Nuiv brebisVertexAttrib4Nuiv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4NuivARB(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttrib4NuivARB(index, v); }
#define glVertexAttrib4NuivARB brebisVertexAttrib4NuivARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4Nusv(GLuint index, const GLushort * v) { brebisGL.brebisVertexAttrib4Nusv(index, v); }
#define glVertexAttrib4Nusv brebisVertexAttrib4Nusv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4NusvARB(GLuint index, const GLushort * v) { brebisGL.brebisVertexAttrib4NusvARB(index, v); }
#define glVertexAttrib4NusvARB brebisVertexAttrib4NusvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4bv(GLuint index, const GLbyte * v) { brebisGL.brebisVertexAttrib4bv(index, v); }
#define glVertexAttrib4bv brebisVertexAttrib4bv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4bvARB(GLuint index, const GLbyte * v) { brebisGL.brebisVertexAttrib4bvARB(index, v); }
#define glVertexAttrib4bvARB brebisVertexAttrib4bvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisVertexAttrib4d(index, x, y, z, w); }
#define glVertexAttrib4d brebisVertexAttrib4d
BREBIS_FORCE_INLINE void  brebisVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisVertexAttrib4dARB(index, x, y, z, w); }
#define glVertexAttrib4dARB brebisVertexAttrib4dARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisVertexAttrib4dNV(index, x, y, z, w); }
#define glVertexAttrib4dNV brebisVertexAttrib4dNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4dv(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib4dv(index, v); }
#define glVertexAttrib4dv brebisVertexAttrib4dv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4dvARB(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib4dvARB(index, v); }
#define glVertexAttrib4dvARB brebisVertexAttrib4dvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4dvNV(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttrib4dvNV(index, v); }
#define glVertexAttrib4dvNV brebisVertexAttrib4dvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisVertexAttrib4f(index, x, y, z, w); }
#define glVertexAttrib4f brebisVertexAttrib4f
BREBIS_FORCE_INLINE void  brebisVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisVertexAttrib4fARB(index, x, y, z, w); }
#define glVertexAttrib4fARB brebisVertexAttrib4fARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisVertexAttrib4fNV(index, x, y, z, w); }
#define glVertexAttrib4fNV brebisVertexAttrib4fNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4fv(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib4fv(index, v); }
#define glVertexAttrib4fv brebisVertexAttrib4fv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4fvARB(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib4fvARB(index, v); }
#define glVertexAttrib4fvARB brebisVertexAttrib4fvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4fvNV(GLuint index, const GLfloat * v) { brebisGL.brebisVertexAttrib4fvNV(index, v); }
#define glVertexAttrib4fvNV brebisVertexAttrib4fvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { brebisGL.brebisVertexAttrib4hNV(index, x, y, z, w); }
#define glVertexAttrib4hNV brebisVertexAttrib4hNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4hvNV(GLuint index, const GLhalfNV * v) { brebisGL.brebisVertexAttrib4hvNV(index, v); }
#define glVertexAttrib4hvNV brebisVertexAttrib4hvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4iv(GLuint index, const GLint * v) { brebisGL.brebisVertexAttrib4iv(index, v); }
#define glVertexAttrib4iv brebisVertexAttrib4iv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4ivARB(GLuint index, const GLint * v) { brebisGL.brebisVertexAttrib4ivARB(index, v); }
#define glVertexAttrib4ivARB brebisVertexAttrib4ivARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { brebisGL.brebisVertexAttrib4s(index, x, y, z, w); }
#define glVertexAttrib4s brebisVertexAttrib4s
BREBIS_FORCE_INLINE void  brebisVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { brebisGL.brebisVertexAttrib4sARB(index, x, y, z, w); }
#define glVertexAttrib4sARB brebisVertexAttrib4sARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { brebisGL.brebisVertexAttrib4sNV(index, x, y, z, w); }
#define glVertexAttrib4sNV brebisVertexAttrib4sNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4sv(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib4sv(index, v); }
#define glVertexAttrib4sv brebisVertexAttrib4sv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4svARB(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib4svARB(index, v); }
#define glVertexAttrib4svARB brebisVertexAttrib4svARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4svNV(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttrib4svNV(index, v); }
#define glVertexAttrib4svNV brebisVertexAttrib4svNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { brebisGL.brebisVertexAttrib4ubNV(index, x, y, z, w); }
#define glVertexAttrib4ubNV brebisVertexAttrib4ubNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4ubv(GLuint index, const GLubyte * v) { brebisGL.brebisVertexAttrib4ubv(index, v); }
#define glVertexAttrib4ubv brebisVertexAttrib4ubv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4ubvARB(GLuint index, const GLubyte * v) { brebisGL.brebisVertexAttrib4ubvARB(index, v); }
#define glVertexAttrib4ubvARB brebisVertexAttrib4ubvARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4ubvNV(GLuint index, const GLubyte * v) { brebisGL.brebisVertexAttrib4ubvNV(index, v); }
#define glVertexAttrib4ubvNV brebisVertexAttrib4ubvNV
BREBIS_FORCE_INLINE void  brebisVertexAttrib4uiv(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttrib4uiv(index, v); }
#define glVertexAttrib4uiv brebisVertexAttrib4uiv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4uivARB(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttrib4uivARB(index, v); }
#define glVertexAttrib4uivARB brebisVertexAttrib4uivARB
BREBIS_FORCE_INLINE void  brebisVertexAttrib4usv(GLuint index, const GLushort * v) { brebisGL.brebisVertexAttrib4usv(index, v); }
#define glVertexAttrib4usv brebisVertexAttrib4usv
BREBIS_FORCE_INLINE void  brebisVertexAttrib4usvARB(GLuint index, const GLushort * v) { brebisGL.brebisVertexAttrib4usvARB(index, v); }
#define glVertexAttrib4usvARB brebisVertexAttrib4usvARB
BREBIS_FORCE_INLINE void  brebisVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) { brebisGL.brebisVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset); }
#define glVertexAttribArrayObjectATI brebisVertexAttribArrayObjectATI
BREBIS_FORCE_INLINE void  brebisVertexAttribBinding(GLuint attribindex, GLuint bindingindex) { brebisGL.brebisVertexAttribBinding(attribindex, bindingindex); }
#define glVertexAttribBinding brebisVertexAttribBinding
BREBIS_FORCE_INLINE void  brebisVertexAttribDivisor(GLuint index, GLuint divisor) { brebisGL.brebisVertexAttribDivisor(index, divisor); }
#define glVertexAttribDivisor brebisVertexAttribDivisor
BREBIS_FORCE_INLINE void  brebisVertexAttribDivisorANGLE(GLuint index, GLuint divisor) { brebisGL.brebisVertexAttribDivisorANGLE(index, divisor); }
#define glVertexAttribDivisorANGLE brebisVertexAttribDivisorANGLE
BREBIS_FORCE_INLINE void  brebisVertexAttribDivisorARB(GLuint index, GLuint divisor) { brebisGL.brebisVertexAttribDivisorARB(index, divisor); }
#define glVertexAttribDivisorARB brebisVertexAttribDivisorARB
BREBIS_FORCE_INLINE void  brebisVertexAttribDivisorEXT(GLuint index, GLuint divisor) { brebisGL.brebisVertexAttribDivisorEXT(index, divisor); }
#define glVertexAttribDivisorEXT brebisVertexAttribDivisorEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribDivisorNV(GLuint index, GLuint divisor) { brebisGL.brebisVertexAttribDivisorNV(index, divisor); }
#define glVertexAttribDivisorNV brebisVertexAttribDivisorNV
BREBIS_FORCE_INLINE void  brebisVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { brebisGL.brebisVertexAttribFormat(attribindex, size, type, normalized, relativeoffset); }
#define glVertexAttribFormat brebisVertexAttribFormat
BREBIS_FORCE_INLINE void  brebisVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) { brebisGL.brebisVertexAttribFormatNV(index, size, type, normalized, stride); }
#define glVertexAttribFormatNV brebisVertexAttribFormatNV
BREBIS_FORCE_INLINE void  brebisVertexAttribI1i(GLuint index, GLint x) { brebisGL.brebisVertexAttribI1i(index, x); }
#define glVertexAttribI1i brebisVertexAttribI1i
BREBIS_FORCE_INLINE void  brebisVertexAttribI1iEXT(GLuint index, GLint x) { brebisGL.brebisVertexAttribI1iEXT(index, x); }
#define glVertexAttribI1iEXT brebisVertexAttribI1iEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI1iv(GLuint index, const GLint * v) { brebisGL.brebisVertexAttribI1iv(index, v); }
#define glVertexAttribI1iv brebisVertexAttribI1iv
BREBIS_FORCE_INLINE void  brebisVertexAttribI1ivEXT(GLuint index, const GLint * v) { brebisGL.brebisVertexAttribI1ivEXT(index, v); }
#define glVertexAttribI1ivEXT brebisVertexAttribI1ivEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI1ui(GLuint index, GLuint x) { brebisGL.brebisVertexAttribI1ui(index, x); }
#define glVertexAttribI1ui brebisVertexAttribI1ui
BREBIS_FORCE_INLINE void  brebisVertexAttribI1uiEXT(GLuint index, GLuint x) { brebisGL.brebisVertexAttribI1uiEXT(index, x); }
#define glVertexAttribI1uiEXT brebisVertexAttribI1uiEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI1uiv(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttribI1uiv(index, v); }
#define glVertexAttribI1uiv brebisVertexAttribI1uiv
BREBIS_FORCE_INLINE void  brebisVertexAttribI1uivEXT(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttribI1uivEXT(index, v); }
#define glVertexAttribI1uivEXT brebisVertexAttribI1uivEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI2i(GLuint index, GLint x, GLint y) { brebisGL.brebisVertexAttribI2i(index, x, y); }
#define glVertexAttribI2i brebisVertexAttribI2i
BREBIS_FORCE_INLINE void  brebisVertexAttribI2iEXT(GLuint index, GLint x, GLint y) { brebisGL.brebisVertexAttribI2iEXT(index, x, y); }
#define glVertexAttribI2iEXT brebisVertexAttribI2iEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI2iv(GLuint index, const GLint * v) { brebisGL.brebisVertexAttribI2iv(index, v); }
#define glVertexAttribI2iv brebisVertexAttribI2iv
BREBIS_FORCE_INLINE void  brebisVertexAttribI2ivEXT(GLuint index, const GLint * v) { brebisGL.brebisVertexAttribI2ivEXT(index, v); }
#define glVertexAttribI2ivEXT brebisVertexAttribI2ivEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI2ui(GLuint index, GLuint x, GLuint y) { brebisGL.brebisVertexAttribI2ui(index, x, y); }
#define glVertexAttribI2ui brebisVertexAttribI2ui
BREBIS_FORCE_INLINE void  brebisVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) { brebisGL.brebisVertexAttribI2uiEXT(index, x, y); }
#define glVertexAttribI2uiEXT brebisVertexAttribI2uiEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI2uiv(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttribI2uiv(index, v); }
#define glVertexAttribI2uiv brebisVertexAttribI2uiv
BREBIS_FORCE_INLINE void  brebisVertexAttribI2uivEXT(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttribI2uivEXT(index, v); }
#define glVertexAttribI2uivEXT brebisVertexAttribI2uivEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) { brebisGL.brebisVertexAttribI3i(index, x, y, z); }
#define glVertexAttribI3i brebisVertexAttribI3i
BREBIS_FORCE_INLINE void  brebisVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) { brebisGL.brebisVertexAttribI3iEXT(index, x, y, z); }
#define glVertexAttribI3iEXT brebisVertexAttribI3iEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI3iv(GLuint index, const GLint * v) { brebisGL.brebisVertexAttribI3iv(index, v); }
#define glVertexAttribI3iv brebisVertexAttribI3iv
BREBIS_FORCE_INLINE void  brebisVertexAttribI3ivEXT(GLuint index, const GLint * v) { brebisGL.brebisVertexAttribI3ivEXT(index, v); }
#define glVertexAttribI3ivEXT brebisVertexAttribI3ivEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) { brebisGL.brebisVertexAttribI3ui(index, x, y, z); }
#define glVertexAttribI3ui brebisVertexAttribI3ui
BREBIS_FORCE_INLINE void  brebisVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) { brebisGL.brebisVertexAttribI3uiEXT(index, x, y, z); }
#define glVertexAttribI3uiEXT brebisVertexAttribI3uiEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI3uiv(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttribI3uiv(index, v); }
#define glVertexAttribI3uiv brebisVertexAttribI3uiv
BREBIS_FORCE_INLINE void  brebisVertexAttribI3uivEXT(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttribI3uivEXT(index, v); }
#define glVertexAttribI3uivEXT brebisVertexAttribI3uivEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI4bv(GLuint index, const GLbyte * v) { brebisGL.brebisVertexAttribI4bv(index, v); }
#define glVertexAttribI4bv brebisVertexAttribI4bv
BREBIS_FORCE_INLINE void  brebisVertexAttribI4bvEXT(GLuint index, const GLbyte * v) { brebisGL.brebisVertexAttribI4bvEXT(index, v); }
#define glVertexAttribI4bvEXT brebisVertexAttribI4bvEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) { brebisGL.brebisVertexAttribI4i(index, x, y, z, w); }
#define glVertexAttribI4i brebisVertexAttribI4i
BREBIS_FORCE_INLINE void  brebisVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) { brebisGL.brebisVertexAttribI4iEXT(index, x, y, z, w); }
#define glVertexAttribI4iEXT brebisVertexAttribI4iEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI4iv(GLuint index, const GLint * v) { brebisGL.brebisVertexAttribI4iv(index, v); }
#define glVertexAttribI4iv brebisVertexAttribI4iv
BREBIS_FORCE_INLINE void  brebisVertexAttribI4ivEXT(GLuint index, const GLint * v) { brebisGL.brebisVertexAttribI4ivEXT(index, v); }
#define glVertexAttribI4ivEXT brebisVertexAttribI4ivEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI4sv(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttribI4sv(index, v); }
#define glVertexAttribI4sv brebisVertexAttribI4sv
BREBIS_FORCE_INLINE void  brebisVertexAttribI4svEXT(GLuint index, const GLshort * v) { brebisGL.brebisVertexAttribI4svEXT(index, v); }
#define glVertexAttribI4svEXT brebisVertexAttribI4svEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI4ubv(GLuint index, const GLubyte * v) { brebisGL.brebisVertexAttribI4ubv(index, v); }
#define glVertexAttribI4ubv brebisVertexAttribI4ubv
BREBIS_FORCE_INLINE void  brebisVertexAttribI4ubvEXT(GLuint index, const GLubyte * v) { brebisGL.brebisVertexAttribI4ubvEXT(index, v); }
#define glVertexAttribI4ubvEXT brebisVertexAttribI4ubvEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { brebisGL.brebisVertexAttribI4ui(index, x, y, z, w); }
#define glVertexAttribI4ui brebisVertexAttribI4ui
BREBIS_FORCE_INLINE void  brebisVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { brebisGL.brebisVertexAttribI4uiEXT(index, x, y, z, w); }
#define glVertexAttribI4uiEXT brebisVertexAttribI4uiEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI4uiv(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttribI4uiv(index, v); }
#define glVertexAttribI4uiv brebisVertexAttribI4uiv
BREBIS_FORCE_INLINE void  brebisVertexAttribI4uivEXT(GLuint index, const GLuint * v) { brebisGL.brebisVertexAttribI4uivEXT(index, v); }
#define glVertexAttribI4uivEXT brebisVertexAttribI4uivEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribI4usv(GLuint index, const GLushort * v) { brebisGL.brebisVertexAttribI4usv(index, v); }
#define glVertexAttribI4usv brebisVertexAttribI4usv
BREBIS_FORCE_INLINE void  brebisVertexAttribI4usvEXT(GLuint index, const GLushort * v) { brebisGL.brebisVertexAttribI4usvEXT(index, v); }
#define glVertexAttribI4usvEXT brebisVertexAttribI4usvEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { brebisGL.brebisVertexAttribIFormat(attribindex, size, type, relativeoffset); }
#define glVertexAttribIFormat brebisVertexAttribIFormat
BREBIS_FORCE_INLINE void  brebisVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { brebisGL.brebisVertexAttribIFormatNV(index, size, type, stride); }
#define glVertexAttribIFormatNV brebisVertexAttribIFormatNV
BREBIS_FORCE_INLINE void  brebisVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisVertexAttribIPointer(index, size, type, stride, pointer); }
#define glVertexAttribIPointer brebisVertexAttribIPointer
BREBIS_FORCE_INLINE void  brebisVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisVertexAttribIPointerEXT(index, size, type, stride, pointer); }
#define glVertexAttribIPointerEXT brebisVertexAttribIPointerEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribL1d(GLuint index, GLdouble x) { brebisGL.brebisVertexAttribL1d(index, x); }
#define glVertexAttribL1d brebisVertexAttribL1d
BREBIS_FORCE_INLINE void  brebisVertexAttribL1dEXT(GLuint index, GLdouble x) { brebisGL.brebisVertexAttribL1dEXT(index, x); }
#define glVertexAttribL1dEXT brebisVertexAttribL1dEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribL1dv(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttribL1dv(index, v); }
#define glVertexAttribL1dv brebisVertexAttribL1dv
BREBIS_FORCE_INLINE void  brebisVertexAttribL1dvEXT(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttribL1dvEXT(index, v); }
#define glVertexAttribL1dvEXT brebisVertexAttribL1dvEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribL1i64NV(GLuint index, GLint64EXT x) { brebisGL.brebisVertexAttribL1i64NV(index, x); }
#define glVertexAttribL1i64NV brebisVertexAttribL1i64NV
BREBIS_FORCE_INLINE void  brebisVertexAttribL1i64vNV(GLuint index, const GLint64EXT * v) { brebisGL.brebisVertexAttribL1i64vNV(index, v); }
#define glVertexAttribL1i64vNV brebisVertexAttribL1i64vNV
BREBIS_FORCE_INLINE void  brebisVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) { brebisGL.brebisVertexAttribL1ui64ARB(index, x); }
#define glVertexAttribL1ui64ARB brebisVertexAttribL1ui64ARB
BREBIS_FORCE_INLINE void  brebisVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) { brebisGL.brebisVertexAttribL1ui64NV(index, x); }
#define glVertexAttribL1ui64NV brebisVertexAttribL1ui64NV
BREBIS_FORCE_INLINE void  brebisVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT * v) { brebisGL.brebisVertexAttribL1ui64vARB(index, v); }
#define glVertexAttribL1ui64vARB brebisVertexAttribL1ui64vARB
BREBIS_FORCE_INLINE void  brebisVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT * v) { brebisGL.brebisVertexAttribL1ui64vNV(index, v); }
#define glVertexAttribL1ui64vNV brebisVertexAttribL1ui64vNV
BREBIS_FORCE_INLINE void  brebisVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) { brebisGL.brebisVertexAttribL2d(index, x, y); }
#define glVertexAttribL2d brebisVertexAttribL2d
BREBIS_FORCE_INLINE void  brebisVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) { brebisGL.brebisVertexAttribL2dEXT(index, x, y); }
#define glVertexAttribL2dEXT brebisVertexAttribL2dEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribL2dv(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttribL2dv(index, v); }
#define glVertexAttribL2dv brebisVertexAttribL2dv
BREBIS_FORCE_INLINE void  brebisVertexAttribL2dvEXT(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttribL2dvEXT(index, v); }
#define glVertexAttribL2dvEXT brebisVertexAttribL2dvEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) { brebisGL.brebisVertexAttribL2i64NV(index, x, y); }
#define glVertexAttribL2i64NV brebisVertexAttribL2i64NV
BREBIS_FORCE_INLINE void  brebisVertexAttribL2i64vNV(GLuint index, const GLint64EXT * v) { brebisGL.brebisVertexAttribL2i64vNV(index, v); }
#define glVertexAttribL2i64vNV brebisVertexAttribL2i64vNV
BREBIS_FORCE_INLINE void  brebisVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) { brebisGL.brebisVertexAttribL2ui64NV(index, x, y); }
#define glVertexAttribL2ui64NV brebisVertexAttribL2ui64NV
BREBIS_FORCE_INLINE void  brebisVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT * v) { brebisGL.brebisVertexAttribL2ui64vNV(index, v); }
#define glVertexAttribL2ui64vNV brebisVertexAttribL2ui64vNV
BREBIS_FORCE_INLINE void  brebisVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisVertexAttribL3d(index, x, y, z); }
#define glVertexAttribL3d brebisVertexAttribL3d
BREBIS_FORCE_INLINE void  brebisVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisVertexAttribL3dEXT(index, x, y, z); }
#define glVertexAttribL3dEXT brebisVertexAttribL3dEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribL3dv(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttribL3dv(index, v); }
#define glVertexAttribL3dv brebisVertexAttribL3dv
BREBIS_FORCE_INLINE void  brebisVertexAttribL3dvEXT(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttribL3dvEXT(index, v); }
#define glVertexAttribL3dvEXT brebisVertexAttribL3dvEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) { brebisGL.brebisVertexAttribL3i64NV(index, x, y, z); }
#define glVertexAttribL3i64NV brebisVertexAttribL3i64NV
BREBIS_FORCE_INLINE void  brebisVertexAttribL3i64vNV(GLuint index, const GLint64EXT * v) { brebisGL.brebisVertexAttribL3i64vNV(index, v); }
#define glVertexAttribL3i64vNV brebisVertexAttribL3i64vNV
BREBIS_FORCE_INLINE void  brebisVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { brebisGL.brebisVertexAttribL3ui64NV(index, x, y, z); }
#define glVertexAttribL3ui64NV brebisVertexAttribL3ui64NV
BREBIS_FORCE_INLINE void  brebisVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT * v) { brebisGL.brebisVertexAttribL3ui64vNV(index, v); }
#define glVertexAttribL3ui64vNV brebisVertexAttribL3ui64vNV
BREBIS_FORCE_INLINE void  brebisVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisVertexAttribL4d(index, x, y, z, w); }
#define glVertexAttribL4d brebisVertexAttribL4d
BREBIS_FORCE_INLINE void  brebisVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisVertexAttribL4dEXT(index, x, y, z, w); }
#define glVertexAttribL4dEXT brebisVertexAttribL4dEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribL4dv(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttribL4dv(index, v); }
#define glVertexAttribL4dv brebisVertexAttribL4dv
BREBIS_FORCE_INLINE void  brebisVertexAttribL4dvEXT(GLuint index, const GLdouble * v) { brebisGL.brebisVertexAttribL4dvEXT(index, v); }
#define glVertexAttribL4dvEXT brebisVertexAttribL4dvEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { brebisGL.brebisVertexAttribL4i64NV(index, x, y, z, w); }
#define glVertexAttribL4i64NV brebisVertexAttribL4i64NV
BREBIS_FORCE_INLINE void  brebisVertexAttribL4i64vNV(GLuint index, const GLint64EXT * v) { brebisGL.brebisVertexAttribL4i64vNV(index, v); }
#define glVertexAttribL4i64vNV brebisVertexAttribL4i64vNV
BREBIS_FORCE_INLINE void  brebisVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { brebisGL.brebisVertexAttribL4ui64NV(index, x, y, z, w); }
#define glVertexAttribL4ui64NV brebisVertexAttribL4ui64NV
BREBIS_FORCE_INLINE void  brebisVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT * v) { brebisGL.brebisVertexAttribL4ui64vNV(index, v); }
#define glVertexAttribL4ui64vNV brebisVertexAttribL4ui64vNV
BREBIS_FORCE_INLINE void  brebisVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { brebisGL.brebisVertexAttribLFormat(attribindex, size, type, relativeoffset); }
#define glVertexAttribLFormat brebisVertexAttribLFormat
BREBIS_FORCE_INLINE void  brebisVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { brebisGL.brebisVertexAttribLFormatNV(index, size, type, stride); }
#define glVertexAttribLFormatNV brebisVertexAttribLFormatNV
BREBIS_FORCE_INLINE void  brebisVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisVertexAttribLPointer(index, size, type, stride, pointer); }
#define glVertexAttribLPointer brebisVertexAttribLPointer
BREBIS_FORCE_INLINE void  brebisVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisVertexAttribLPointerEXT(index, size, type, stride, pointer); }
#define glVertexAttribLPointerEXT brebisVertexAttribLPointerEXT
BREBIS_FORCE_INLINE void  brebisVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { brebisGL.brebisVertexAttribP1ui(index, type, normalized, value); }
#define glVertexAttribP1ui brebisVertexAttribP1ui
BREBIS_FORCE_INLINE void  brebisVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { brebisGL.brebisVertexAttribP1uiv(index, type, normalized, value); }
#define glVertexAttribP1uiv brebisVertexAttribP1uiv
BREBIS_FORCE_INLINE void  brebisVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { brebisGL.brebisVertexAttribP2ui(index, type, normalized, value); }
#define glVertexAttribP2ui brebisVertexAttribP2ui
BREBIS_FORCE_INLINE void  brebisVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { brebisGL.brebisVertexAttribP2uiv(index, type, normalized, value); }
#define glVertexAttribP2uiv brebisVertexAttribP2uiv
BREBIS_FORCE_INLINE void  brebisVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { brebisGL.brebisVertexAttribP3ui(index, type, normalized, value); }
#define glVertexAttribP3ui brebisVertexAttribP3ui
BREBIS_FORCE_INLINE void  brebisVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { brebisGL.brebisVertexAttribP3uiv(index, type, normalized, value); }
#define glVertexAttribP3uiv brebisVertexAttribP3uiv
BREBIS_FORCE_INLINE void  brebisVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { brebisGL.brebisVertexAttribP4ui(index, type, normalized, value); }
#define glVertexAttribP4ui brebisVertexAttribP4ui
BREBIS_FORCE_INLINE void  brebisVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { brebisGL.brebisVertexAttribP4uiv(index, type, normalized, value); }
#define glVertexAttribP4uiv brebisVertexAttribP4uiv
BREBIS_FORCE_INLINE void  brebisVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) { brebisGL.brebisVertexAttribParameteriAMD(index, pname, param); }
#define glVertexAttribParameteriAMD brebisVertexAttribParameteriAMD
BREBIS_FORCE_INLINE void  brebisVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { brebisGL.brebisVertexAttribPointer(index, size, type, normalized, stride, pointer); }
#define glVertexAttribPointer brebisVertexAttribPointer
BREBIS_FORCE_INLINE void  brebisVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { brebisGL.brebisVertexAttribPointerARB(index, size, type, normalized, stride, pointer); }
#define glVertexAttribPointerARB brebisVertexAttribPointerARB
BREBIS_FORCE_INLINE void  brebisVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisVertexAttribPointerNV(index, fsize, type, stride, pointer); }
#define glVertexAttribPointerNV brebisVertexAttribPointerNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v) { brebisGL.brebisVertexAttribs1dvNV(index, count, v); }
#define glVertexAttribs1dvNV brebisVertexAttribs1dvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat * v) { brebisGL.brebisVertexAttribs1fvNV(index, count, v); }
#define glVertexAttribs1fvNV brebisVertexAttribs1fvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { brebisGL.brebisVertexAttribs1hvNV(index, n, v); }
#define glVertexAttribs1hvNV brebisVertexAttribs1hvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v) { brebisGL.brebisVertexAttribs1svNV(index, count, v); }
#define glVertexAttribs1svNV brebisVertexAttribs1svNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v) { brebisGL.brebisVertexAttribs2dvNV(index, count, v); }
#define glVertexAttribs2dvNV brebisVertexAttribs2dvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat * v) { brebisGL.brebisVertexAttribs2fvNV(index, count, v); }
#define glVertexAttribs2fvNV brebisVertexAttribs2fvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { brebisGL.brebisVertexAttribs2hvNV(index, n, v); }
#define glVertexAttribs2hvNV brebisVertexAttribs2hvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v) { brebisGL.brebisVertexAttribs2svNV(index, count, v); }
#define glVertexAttribs2svNV brebisVertexAttribs2svNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v) { brebisGL.brebisVertexAttribs3dvNV(index, count, v); }
#define glVertexAttribs3dvNV brebisVertexAttribs3dvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat * v) { brebisGL.brebisVertexAttribs3fvNV(index, count, v); }
#define glVertexAttribs3fvNV brebisVertexAttribs3fvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { brebisGL.brebisVertexAttribs3hvNV(index, n, v); }
#define glVertexAttribs3hvNV brebisVertexAttribs3hvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v) { brebisGL.brebisVertexAttribs3svNV(index, count, v); }
#define glVertexAttribs3svNV brebisVertexAttribs3svNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v) { brebisGL.brebisVertexAttribs4dvNV(index, count, v); }
#define glVertexAttribs4dvNV brebisVertexAttribs4dvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat * v) { brebisGL.brebisVertexAttribs4fvNV(index, count, v); }
#define glVertexAttribs4fvNV brebisVertexAttribs4fvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { brebisGL.brebisVertexAttribs4hvNV(index, n, v); }
#define glVertexAttribs4hvNV brebisVertexAttribs4hvNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v) { brebisGL.brebisVertexAttribs4svNV(index, count, v); }
#define glVertexAttribs4svNV brebisVertexAttribs4svNV
BREBIS_FORCE_INLINE void  brebisVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v) { brebisGL.brebisVertexAttribs4ubvNV(index, count, v); }
#define glVertexAttribs4ubvNV brebisVertexAttribs4ubvNV
BREBIS_FORCE_INLINE void  brebisVertexBindingDivisor(GLuint bindingindex, GLuint divisor) { brebisGL.brebisVertexBindingDivisor(bindingindex, divisor); }
#define glVertexBindingDivisor brebisVertexBindingDivisor
BREBIS_FORCE_INLINE void  brebisVertexBlendARB(GLint count) { brebisGL.brebisVertexBlendARB(count); }
#define glVertexBlendARB brebisVertexBlendARB
BREBIS_FORCE_INLINE void  brebisVertexBlendEnvfATI(GLenum pname, GLfloat param) { brebisGL.brebisVertexBlendEnvfATI(pname, param); }
#define glVertexBlendEnvfATI brebisVertexBlendEnvfATI
BREBIS_FORCE_INLINE void  brebisVertexBlendEnviATI(GLenum pname, GLint param) { brebisGL.brebisVertexBlendEnviATI(pname, param); }
#define glVertexBlendEnviATI brebisVertexBlendEnviATI
BREBIS_FORCE_INLINE void  brebisVertexFormatNV(GLint size, GLenum type, GLsizei stride) { brebisGL.brebisVertexFormatNV(size, type, stride); }
#define glVertexFormatNV brebisVertexFormatNV
BREBIS_FORCE_INLINE void  brebisVertexP2ui(GLenum type, GLuint value) { brebisGL.brebisVertexP2ui(type, value); }
#define glVertexP2ui brebisVertexP2ui
BREBIS_FORCE_INLINE void  brebisVertexP2uiv(GLenum type, const GLuint * value) { brebisGL.brebisVertexP2uiv(type, value); }
#define glVertexP2uiv brebisVertexP2uiv
BREBIS_FORCE_INLINE void  brebisVertexP3ui(GLenum type, GLuint value) { brebisGL.brebisVertexP3ui(type, value); }
#define glVertexP3ui brebisVertexP3ui
BREBIS_FORCE_INLINE void  brebisVertexP3uiv(GLenum type, const GLuint * value) { brebisGL.brebisVertexP3uiv(type, value); }
#define glVertexP3uiv brebisVertexP3uiv
BREBIS_FORCE_INLINE void  brebisVertexP4ui(GLenum type, GLuint value) { brebisGL.brebisVertexP4ui(type, value); }
#define glVertexP4ui brebisVertexP4ui
BREBIS_FORCE_INLINE void  brebisVertexP4uiv(GLenum type, const GLuint * value) { brebisGL.brebisVertexP4uiv(type, value); }
#define glVertexP4uiv brebisVertexP4uiv
BREBIS_FORCE_INLINE void  brebisVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisVertexPointer(size, type, stride, pointer); }
#define glVertexPointer brebisVertexPointer
BREBIS_FORCE_INLINE void  brebisVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { brebisGL.brebisVertexPointerEXT(size, type, stride, count, pointer); }
#define glVertexPointerEXT brebisVertexPointerEXT
BREBIS_FORCE_INLINE void  brebisVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { brebisGL.brebisVertexPointerListIBM(size, type, stride, pointer, ptrstride); }
#define glVertexPointerListIBM brebisVertexPointerListIBM
BREBIS_FORCE_INLINE void  brebisVertexPointervINTEL(GLint size, GLenum type, const void ** pointer) { brebisGL.brebisVertexPointervINTEL(size, type, pointer); }
#define glVertexPointervINTEL brebisVertexPointervINTEL
BREBIS_FORCE_INLINE void  brebisVertexStream1dATI(GLenum stream, GLdouble x) { brebisGL.brebisVertexStream1dATI(stream, x); }
#define glVertexStream1dATI brebisVertexStream1dATI
BREBIS_FORCE_INLINE void  brebisVertexStream1dvATI(GLenum stream, const GLdouble * coords) { brebisGL.brebisVertexStream1dvATI(stream, coords); }
#define glVertexStream1dvATI brebisVertexStream1dvATI
BREBIS_FORCE_INLINE void  brebisVertexStream1fATI(GLenum stream, GLfloat x) { brebisGL.brebisVertexStream1fATI(stream, x); }
#define glVertexStream1fATI brebisVertexStream1fATI
BREBIS_FORCE_INLINE void  brebisVertexStream1fvATI(GLenum stream, const GLfloat * coords) { brebisGL.brebisVertexStream1fvATI(stream, coords); }
#define glVertexStream1fvATI brebisVertexStream1fvATI
BREBIS_FORCE_INLINE void  brebisVertexStream1iATI(GLenum stream, GLint x) { brebisGL.brebisVertexStream1iATI(stream, x); }
#define glVertexStream1iATI brebisVertexStream1iATI
BREBIS_FORCE_INLINE void  brebisVertexStream1ivATI(GLenum stream, const GLint * coords) { brebisGL.brebisVertexStream1ivATI(stream, coords); }
#define glVertexStream1ivATI brebisVertexStream1ivATI
BREBIS_FORCE_INLINE void  brebisVertexStream1sATI(GLenum stream, GLshort x) { brebisGL.brebisVertexStream1sATI(stream, x); }
#define glVertexStream1sATI brebisVertexStream1sATI
BREBIS_FORCE_INLINE void  brebisVertexStream1svATI(GLenum stream, const GLshort * coords) { brebisGL.brebisVertexStream1svATI(stream, coords); }
#define glVertexStream1svATI brebisVertexStream1svATI
BREBIS_FORCE_INLINE void  brebisVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) { brebisGL.brebisVertexStream2dATI(stream, x, y); }
#define glVertexStream2dATI brebisVertexStream2dATI
BREBIS_FORCE_INLINE void  brebisVertexStream2dvATI(GLenum stream, const GLdouble * coords) { brebisGL.brebisVertexStream2dvATI(stream, coords); }
#define glVertexStream2dvATI brebisVertexStream2dvATI
BREBIS_FORCE_INLINE void  brebisVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) { brebisGL.brebisVertexStream2fATI(stream, x, y); }
#define glVertexStream2fATI brebisVertexStream2fATI
BREBIS_FORCE_INLINE void  brebisVertexStream2fvATI(GLenum stream, const GLfloat * coords) { brebisGL.brebisVertexStream2fvATI(stream, coords); }
#define glVertexStream2fvATI brebisVertexStream2fvATI
BREBIS_FORCE_INLINE void  brebisVertexStream2iATI(GLenum stream, GLint x, GLint y) { brebisGL.brebisVertexStream2iATI(stream, x, y); }
#define glVertexStream2iATI brebisVertexStream2iATI
BREBIS_FORCE_INLINE void  brebisVertexStream2ivATI(GLenum stream, const GLint * coords) { brebisGL.brebisVertexStream2ivATI(stream, coords); }
#define glVertexStream2ivATI brebisVertexStream2ivATI
BREBIS_FORCE_INLINE void  brebisVertexStream2sATI(GLenum stream, GLshort x, GLshort y) { brebisGL.brebisVertexStream2sATI(stream, x, y); }
#define glVertexStream2sATI brebisVertexStream2sATI
BREBIS_FORCE_INLINE void  brebisVertexStream2svATI(GLenum stream, const GLshort * coords) { brebisGL.brebisVertexStream2svATI(stream, coords); }
#define glVertexStream2svATI brebisVertexStream2svATI
BREBIS_FORCE_INLINE void  brebisVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisVertexStream3dATI(stream, x, y, z); }
#define glVertexStream3dATI brebisVertexStream3dATI
BREBIS_FORCE_INLINE void  brebisVertexStream3dvATI(GLenum stream, const GLdouble * coords) { brebisGL.brebisVertexStream3dvATI(stream, coords); }
#define glVertexStream3dvATI brebisVertexStream3dvATI
BREBIS_FORCE_INLINE void  brebisVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisVertexStream3fATI(stream, x, y, z); }
#define glVertexStream3fATI brebisVertexStream3fATI
BREBIS_FORCE_INLINE void  brebisVertexStream3fvATI(GLenum stream, const GLfloat * coords) { brebisGL.brebisVertexStream3fvATI(stream, coords); }
#define glVertexStream3fvATI brebisVertexStream3fvATI
BREBIS_FORCE_INLINE void  brebisVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) { brebisGL.brebisVertexStream3iATI(stream, x, y, z); }
#define glVertexStream3iATI brebisVertexStream3iATI
BREBIS_FORCE_INLINE void  brebisVertexStream3ivATI(GLenum stream, const GLint * coords) { brebisGL.brebisVertexStream3ivATI(stream, coords); }
#define glVertexStream3ivATI brebisVertexStream3ivATI
BREBIS_FORCE_INLINE void  brebisVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) { brebisGL.brebisVertexStream3sATI(stream, x, y, z); }
#define glVertexStream3sATI brebisVertexStream3sATI
BREBIS_FORCE_INLINE void  brebisVertexStream3svATI(GLenum stream, const GLshort * coords) { brebisGL.brebisVertexStream3svATI(stream, coords); }
#define glVertexStream3svATI brebisVertexStream3svATI
BREBIS_FORCE_INLINE void  brebisVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisVertexStream4dATI(stream, x, y, z, w); }
#define glVertexStream4dATI brebisVertexStream4dATI
BREBIS_FORCE_INLINE void  brebisVertexStream4dvATI(GLenum stream, const GLdouble * coords) { brebisGL.brebisVertexStream4dvATI(stream, coords); }
#define glVertexStream4dvATI brebisVertexStream4dvATI
BREBIS_FORCE_INLINE void  brebisVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisVertexStream4fATI(stream, x, y, z, w); }
#define glVertexStream4fATI brebisVertexStream4fATI
BREBIS_FORCE_INLINE void  brebisVertexStream4fvATI(GLenum stream, const GLfloat * coords) { brebisGL.brebisVertexStream4fvATI(stream, coords); }
#define glVertexStream4fvATI brebisVertexStream4fvATI
BREBIS_FORCE_INLINE void  brebisVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) { brebisGL.brebisVertexStream4iATI(stream, x, y, z, w); }
#define glVertexStream4iATI brebisVertexStream4iATI
BREBIS_FORCE_INLINE void  brebisVertexStream4ivATI(GLenum stream, const GLint * coords) { brebisGL.brebisVertexStream4ivATI(stream, coords); }
#define glVertexStream4ivATI brebisVertexStream4ivATI
BREBIS_FORCE_INLINE void  brebisVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) { brebisGL.brebisVertexStream4sATI(stream, x, y, z, w); }
#define glVertexStream4sATI brebisVertexStream4sATI
BREBIS_FORCE_INLINE void  brebisVertexStream4svATI(GLenum stream, const GLshort * coords) { brebisGL.brebisVertexStream4svATI(stream, coords); }
#define glVertexStream4svATI brebisVertexStream4svATI
BREBIS_FORCE_INLINE void  brebisVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisVertexWeightPointerEXT(size, type, stride, pointer); }
#define glVertexWeightPointerEXT brebisVertexWeightPointerEXT
BREBIS_FORCE_INLINE void  brebisVertexWeightfEXT(GLfloat weight) { brebisGL.brebisVertexWeightfEXT(weight); }
#define glVertexWeightfEXT brebisVertexWeightfEXT
BREBIS_FORCE_INLINE void  brebisVertexWeightfvEXT(const GLfloat * weight) { brebisGL.brebisVertexWeightfvEXT(weight); }
#define glVertexWeightfvEXT brebisVertexWeightfvEXT
BREBIS_FORCE_INLINE void  brebisVertexWeighthNV(GLhalfNV weight) { brebisGL.brebisVertexWeighthNV(weight); }
#define glVertexWeighthNV brebisVertexWeighthNV
BREBIS_FORCE_INLINE void  brebisVertexWeighthvNV(const GLhalfNV * weight) { brebisGL.brebisVertexWeighthvNV(weight); }
#define glVertexWeighthvNV brebisVertexWeighthvNV
BREBIS_FORCE_INLINE GLenum brebisVideoCaptureNV(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) { return brebisGL.brebisVideoCaptureNV(video_capture_slot, sequence_num, capture_time); }
#define glVideoCaptureNV brebisVideoCaptureNV
BREBIS_FORCE_INLINE void  brebisVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params) { brebisGL.brebisVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params); }
#define glVideoCaptureStreamParameterdvNV brebisVideoCaptureStreamParameterdvNV
BREBIS_FORCE_INLINE void  brebisVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params) { brebisGL.brebisVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params); }
#define glVideoCaptureStreamParameterfvNV brebisVideoCaptureStreamParameterfvNV
BREBIS_FORCE_INLINE void  brebisVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params) { brebisGL.brebisVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params); }
#define glVideoCaptureStreamParameterivNV brebisVideoCaptureStreamParameterivNV
BREBIS_FORCE_INLINE void  brebisViewport(GLint x, GLint y, GLsizei width, GLsizei height) { brebisGL.brebisViewport(x, y, width, height); }
#define glViewport brebisViewport
BREBIS_FORCE_INLINE void  brebisViewportArrayv(GLuint first, GLsizei count, const GLfloat * v) { brebisGL.brebisViewportArrayv(first, count, v); }
#define glViewportArrayv brebisViewportArrayv
BREBIS_FORCE_INLINE void  brebisViewportArrayvNV(GLuint first, GLsizei count, const GLfloat * v) { brebisGL.brebisViewportArrayvNV(first, count, v); }
#define glViewportArrayvNV brebisViewportArrayvNV
BREBIS_FORCE_INLINE void  brebisViewportArrayvOES(GLuint first, GLsizei count, const GLfloat * v) { brebisGL.brebisViewportArrayvOES(first, count, v); }
#define glViewportArrayvOES brebisViewportArrayvOES
BREBIS_FORCE_INLINE void  brebisViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { brebisGL.brebisViewportIndexedf(index, x, y, w, h); }
#define glViewportIndexedf brebisViewportIndexedf
BREBIS_FORCE_INLINE void  brebisViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { brebisGL.brebisViewportIndexedfNV(index, x, y, w, h); }
#define glViewportIndexedfNV brebisViewportIndexedfNV
BREBIS_FORCE_INLINE void  brebisViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { brebisGL.brebisViewportIndexedfOES(index, x, y, w, h); }
#define glViewportIndexedfOES brebisViewportIndexedfOES
BREBIS_FORCE_INLINE void  brebisViewportIndexedfv(GLuint index, const GLfloat * v) { brebisGL.brebisViewportIndexedfv(index, v); }
#define glViewportIndexedfv brebisViewportIndexedfv
BREBIS_FORCE_INLINE void  brebisViewportIndexedfvNV(GLuint index, const GLfloat * v) { brebisGL.brebisViewportIndexedfvNV(index, v); }
#define glViewportIndexedfvNV brebisViewportIndexedfvNV
BREBIS_FORCE_INLINE void  brebisViewportIndexedfvOES(GLuint index, const GLfloat * v) { brebisGL.brebisViewportIndexedfvOES(index, v); }
#define glViewportIndexedfvOES brebisViewportIndexedfvOES
BREBIS_FORCE_INLINE void  brebisViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) { brebisGL.brebisViewportPositionWScaleNV(index, xcoeff, ycoeff); }
#define glViewportPositionWScaleNV brebisViewportPositionWScaleNV
BREBIS_FORCE_INLINE void  brebisViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) { brebisGL.brebisViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew); }
#define glViewportSwizzleNV brebisViewportSwizzleNV
BREBIS_FORCE_INLINE void  brebisWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts) { brebisGL.brebisWaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts); }
#define glWaitSemaphoreEXT brebisWaitSemaphoreEXT
BREBIS_FORCE_INLINE void  brebisWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { brebisGL.brebisWaitSync(sync, flags, timeout); }
#define glWaitSync brebisWaitSync
BREBIS_FORCE_INLINE void  brebisWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { brebisGL.brebisWaitSyncAPPLE(sync, flags, timeout); }
#define glWaitSyncAPPLE brebisWaitSyncAPPLE
BREBIS_FORCE_INLINE void  brebisWaitVkSemaphoreNV(GLuint64 vkSemaphore) { brebisGL.brebisWaitVkSemaphoreNV(vkSemaphore); }
#define glWaitVkSemaphoreNV brebisWaitVkSemaphoreNV
BREBIS_FORCE_INLINE void  brebisWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights) { brebisGL.brebisWeightPathsNV(resultPath, numPaths, paths, weights); }
#define glWeightPathsNV brebisWeightPathsNV
BREBIS_FORCE_INLINE void  brebisWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisWeightPointerARB(size, type, stride, pointer); }
#define glWeightPointerARB brebisWeightPointerARB
BREBIS_FORCE_INLINE void  brebisWeightPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { brebisGL.brebisWeightPointerOES(size, type, stride, pointer); }
#define glWeightPointerOES brebisWeightPointerOES
BREBIS_FORCE_INLINE void  brebisWeightbvARB(GLint size, const GLbyte * weights) { brebisGL.brebisWeightbvARB(size, weights); }
#define glWeightbvARB brebisWeightbvARB
BREBIS_FORCE_INLINE void  brebisWeightdvARB(GLint size, const GLdouble * weights) { brebisGL.brebisWeightdvARB(size, weights); }
#define glWeightdvARB brebisWeightdvARB
BREBIS_FORCE_INLINE void  brebisWeightfvARB(GLint size, const GLfloat * weights) { brebisGL.brebisWeightfvARB(size, weights); }
#define glWeightfvARB brebisWeightfvARB
BREBIS_FORCE_INLINE void  brebisWeightivARB(GLint size, const GLint * weights) { brebisGL.brebisWeightivARB(size, weights); }
#define glWeightivARB brebisWeightivARB
BREBIS_FORCE_INLINE void  brebisWeightsvARB(GLint size, const GLshort * weights) { brebisGL.brebisWeightsvARB(size, weights); }
#define glWeightsvARB brebisWeightsvARB
BREBIS_FORCE_INLINE void  brebisWeightubvARB(GLint size, const GLubyte * weights) { brebisGL.brebisWeightubvARB(size, weights); }
#define glWeightubvARB brebisWeightubvARB
BREBIS_FORCE_INLINE void  brebisWeightuivARB(GLint size, const GLuint * weights) { brebisGL.brebisWeightuivARB(size, weights); }
#define glWeightuivARB brebisWeightuivARB
BREBIS_FORCE_INLINE void  brebisWeightusvARB(GLint size, const GLushort * weights) { brebisGL.brebisWeightusvARB(size, weights); }
#define glWeightusvARB brebisWeightusvARB
BREBIS_FORCE_INLINE void  brebisWindowPos2d(GLdouble x, GLdouble y) { brebisGL.brebisWindowPos2d(x, y); }
#define glWindowPos2d brebisWindowPos2d
BREBIS_FORCE_INLINE void  brebisWindowPos2dARB(GLdouble x, GLdouble y) { brebisGL.brebisWindowPos2dARB(x, y); }
#define glWindowPos2dARB brebisWindowPos2dARB
BREBIS_FORCE_INLINE void  brebisWindowPos2dMESA(GLdouble x, GLdouble y) { brebisGL.brebisWindowPos2dMESA(x, y); }
#define glWindowPos2dMESA brebisWindowPos2dMESA
BREBIS_FORCE_INLINE void  brebisWindowPos2dv(const GLdouble * v) { brebisGL.brebisWindowPos2dv(v); }
#define glWindowPos2dv brebisWindowPos2dv
BREBIS_FORCE_INLINE void  brebisWindowPos2dvARB(const GLdouble * v) { brebisGL.brebisWindowPos2dvARB(v); }
#define glWindowPos2dvARB brebisWindowPos2dvARB
BREBIS_FORCE_INLINE void  brebisWindowPos2dvMESA(const GLdouble * v) { brebisGL.brebisWindowPos2dvMESA(v); }
#define glWindowPos2dvMESA brebisWindowPos2dvMESA
BREBIS_FORCE_INLINE void  brebisWindowPos2f(GLfloat x, GLfloat y) { brebisGL.brebisWindowPos2f(x, y); }
#define glWindowPos2f brebisWindowPos2f
BREBIS_FORCE_INLINE void  brebisWindowPos2fARB(GLfloat x, GLfloat y) { brebisGL.brebisWindowPos2fARB(x, y); }
#define glWindowPos2fARB brebisWindowPos2fARB
BREBIS_FORCE_INLINE void  brebisWindowPos2fMESA(GLfloat x, GLfloat y) { brebisGL.brebisWindowPos2fMESA(x, y); }
#define glWindowPos2fMESA brebisWindowPos2fMESA
BREBIS_FORCE_INLINE void  brebisWindowPos2fv(const GLfloat * v) { brebisGL.brebisWindowPos2fv(v); }
#define glWindowPos2fv brebisWindowPos2fv
BREBIS_FORCE_INLINE void  brebisWindowPos2fvARB(const GLfloat * v) { brebisGL.brebisWindowPos2fvARB(v); }
#define glWindowPos2fvARB brebisWindowPos2fvARB
BREBIS_FORCE_INLINE void  brebisWindowPos2fvMESA(const GLfloat * v) { brebisGL.brebisWindowPos2fvMESA(v); }
#define glWindowPos2fvMESA brebisWindowPos2fvMESA
BREBIS_FORCE_INLINE void  brebisWindowPos2i(GLint x, GLint y) { brebisGL.brebisWindowPos2i(x, y); }
#define glWindowPos2i brebisWindowPos2i
BREBIS_FORCE_INLINE void  brebisWindowPos2iARB(GLint x, GLint y) { brebisGL.brebisWindowPos2iARB(x, y); }
#define glWindowPos2iARB brebisWindowPos2iARB
BREBIS_FORCE_INLINE void  brebisWindowPos2iMESA(GLint x, GLint y) { brebisGL.brebisWindowPos2iMESA(x, y); }
#define glWindowPos2iMESA brebisWindowPos2iMESA
BREBIS_FORCE_INLINE void  brebisWindowPos2iv(const GLint * v) { brebisGL.brebisWindowPos2iv(v); }
#define glWindowPos2iv brebisWindowPos2iv
BREBIS_FORCE_INLINE void  brebisWindowPos2ivARB(const GLint * v) { brebisGL.brebisWindowPos2ivARB(v); }
#define glWindowPos2ivARB brebisWindowPos2ivARB
BREBIS_FORCE_INLINE void  brebisWindowPos2ivMESA(const GLint * v) { brebisGL.brebisWindowPos2ivMESA(v); }
#define glWindowPos2ivMESA brebisWindowPos2ivMESA
BREBIS_FORCE_INLINE void  brebisWindowPos2s(GLshort x, GLshort y) { brebisGL.brebisWindowPos2s(x, y); }
#define glWindowPos2s brebisWindowPos2s
BREBIS_FORCE_INLINE void  brebisWindowPos2sARB(GLshort x, GLshort y) { brebisGL.brebisWindowPos2sARB(x, y); }
#define glWindowPos2sARB brebisWindowPos2sARB
BREBIS_FORCE_INLINE void  brebisWindowPos2sMESA(GLshort x, GLshort y) { brebisGL.brebisWindowPos2sMESA(x, y); }
#define glWindowPos2sMESA brebisWindowPos2sMESA
BREBIS_FORCE_INLINE void  brebisWindowPos2sv(const GLshort * v) { brebisGL.brebisWindowPos2sv(v); }
#define glWindowPos2sv brebisWindowPos2sv
BREBIS_FORCE_INLINE void  brebisWindowPos2svARB(const GLshort * v) { brebisGL.brebisWindowPos2svARB(v); }
#define glWindowPos2svARB brebisWindowPos2svARB
BREBIS_FORCE_INLINE void  brebisWindowPos2svMESA(const GLshort * v) { brebisGL.brebisWindowPos2svMESA(v); }
#define glWindowPos2svMESA brebisWindowPos2svMESA
BREBIS_FORCE_INLINE void  brebisWindowPos3d(GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisWindowPos3d(x, y, z); }
#define glWindowPos3d brebisWindowPos3d
BREBIS_FORCE_INLINE void  brebisWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisWindowPos3dARB(x, y, z); }
#define glWindowPos3dARB brebisWindowPos3dARB
BREBIS_FORCE_INLINE void  brebisWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) { brebisGL.brebisWindowPos3dMESA(x, y, z); }
#define glWindowPos3dMESA brebisWindowPos3dMESA
BREBIS_FORCE_INLINE void  brebisWindowPos3dv(const GLdouble * v) { brebisGL.brebisWindowPos3dv(v); }
#define glWindowPos3dv brebisWindowPos3dv
BREBIS_FORCE_INLINE void  brebisWindowPos3dvARB(const GLdouble * v) { brebisGL.brebisWindowPos3dvARB(v); }
#define glWindowPos3dvARB brebisWindowPos3dvARB
BREBIS_FORCE_INLINE void  brebisWindowPos3dvMESA(const GLdouble * v) { brebisGL.brebisWindowPos3dvMESA(v); }
#define glWindowPos3dvMESA brebisWindowPos3dvMESA
BREBIS_FORCE_INLINE void  brebisWindowPos3f(GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisWindowPos3f(x, y, z); }
#define glWindowPos3f brebisWindowPos3f
BREBIS_FORCE_INLINE void  brebisWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisWindowPos3fARB(x, y, z); }
#define glWindowPos3fARB brebisWindowPos3fARB
BREBIS_FORCE_INLINE void  brebisWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) { brebisGL.brebisWindowPos3fMESA(x, y, z); }
#define glWindowPos3fMESA brebisWindowPos3fMESA
BREBIS_FORCE_INLINE void  brebisWindowPos3fv(const GLfloat * v) { brebisGL.brebisWindowPos3fv(v); }
#define glWindowPos3fv brebisWindowPos3fv
BREBIS_FORCE_INLINE void  brebisWindowPos3fvARB(const GLfloat * v) { brebisGL.brebisWindowPos3fvARB(v); }
#define glWindowPos3fvARB brebisWindowPos3fvARB
BREBIS_FORCE_INLINE void  brebisWindowPos3fvMESA(const GLfloat * v) { brebisGL.brebisWindowPos3fvMESA(v); }
#define glWindowPos3fvMESA brebisWindowPos3fvMESA
BREBIS_FORCE_INLINE void  brebisWindowPos3i(GLint x, GLint y, GLint z) { brebisGL.brebisWindowPos3i(x, y, z); }
#define glWindowPos3i brebisWindowPos3i
BREBIS_FORCE_INLINE void  brebisWindowPos3iARB(GLint x, GLint y, GLint z) { brebisGL.brebisWindowPos3iARB(x, y, z); }
#define glWindowPos3iARB brebisWindowPos3iARB
BREBIS_FORCE_INLINE void  brebisWindowPos3iMESA(GLint x, GLint y, GLint z) { brebisGL.brebisWindowPos3iMESA(x, y, z); }
#define glWindowPos3iMESA brebisWindowPos3iMESA
BREBIS_FORCE_INLINE void  brebisWindowPos3iv(const GLint * v) { brebisGL.brebisWindowPos3iv(v); }
#define glWindowPos3iv brebisWindowPos3iv
BREBIS_FORCE_INLINE void  brebisWindowPos3ivARB(const GLint * v) { brebisGL.brebisWindowPos3ivARB(v); }
#define glWindowPos3ivARB brebisWindowPos3ivARB
BREBIS_FORCE_INLINE void  brebisWindowPos3ivMESA(const GLint * v) { brebisGL.brebisWindowPos3ivMESA(v); }
#define glWindowPos3ivMESA brebisWindowPos3ivMESA
BREBIS_FORCE_INLINE void  brebisWindowPos3s(GLshort x, GLshort y, GLshort z) { brebisGL.brebisWindowPos3s(x, y, z); }
#define glWindowPos3s brebisWindowPos3s
BREBIS_FORCE_INLINE void  brebisWindowPos3sARB(GLshort x, GLshort y, GLshort z) { brebisGL.brebisWindowPos3sARB(x, y, z); }
#define glWindowPos3sARB brebisWindowPos3sARB
BREBIS_FORCE_INLINE void  brebisWindowPos3sMESA(GLshort x, GLshort y, GLshort z) { brebisGL.brebisWindowPos3sMESA(x, y, z); }
#define glWindowPos3sMESA brebisWindowPos3sMESA
BREBIS_FORCE_INLINE void  brebisWindowPos3sv(const GLshort * v) { brebisGL.brebisWindowPos3sv(v); }
#define glWindowPos3sv brebisWindowPos3sv
BREBIS_FORCE_INLINE void  brebisWindowPos3svARB(const GLshort * v) { brebisGL.brebisWindowPos3svARB(v); }
#define glWindowPos3svARB brebisWindowPos3svARB
BREBIS_FORCE_INLINE void  brebisWindowPos3svMESA(const GLshort * v) { brebisGL.brebisWindowPos3svMESA(v); }
#define glWindowPos3svMESA brebisWindowPos3svMESA
BREBIS_FORCE_INLINE void  brebisWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { brebisGL.brebisWindowPos4dMESA(x, y, z, w); }
#define glWindowPos4dMESA brebisWindowPos4dMESA
BREBIS_FORCE_INLINE void  brebisWindowPos4dvMESA(const GLdouble * v) { brebisGL.brebisWindowPos4dvMESA(v); }
#define glWindowPos4dvMESA brebisWindowPos4dvMESA
BREBIS_FORCE_INLINE void  brebisWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { brebisGL.brebisWindowPos4fMESA(x, y, z, w); }
#define glWindowPos4fMESA brebisWindowPos4fMESA
BREBIS_FORCE_INLINE void  brebisWindowPos4fvMESA(const GLfloat * v) { brebisGL.brebisWindowPos4fvMESA(v); }
#define glWindowPos4fvMESA brebisWindowPos4fvMESA
BREBIS_FORCE_INLINE void  brebisWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) { brebisGL.brebisWindowPos4iMESA(x, y, z, w); }
#define glWindowPos4iMESA brebisWindowPos4iMESA
BREBIS_FORCE_INLINE void  brebisWindowPos4ivMESA(const GLint * v) { brebisGL.brebisWindowPos4ivMESA(v); }
#define glWindowPos4ivMESA brebisWindowPos4ivMESA
BREBIS_FORCE_INLINE void  brebisWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) { brebisGL.brebisWindowPos4sMESA(x, y, z, w); }
#define glWindowPos4sMESA brebisWindowPos4sMESA
BREBIS_FORCE_INLINE void  brebisWindowPos4svMESA(const GLshort * v) { brebisGL.brebisWindowPos4svMESA(v); }
#define glWindowPos4svMESA brebisWindowPos4svMESA
BREBIS_FORCE_INLINE void  brebisWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint * box) { brebisGL.brebisWindowRectanglesEXT(mode, count, box); }
#define glWindowRectanglesEXT brebisWindowRectanglesEXT
BREBIS_FORCE_INLINE void  brebisWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { brebisGL.brebisWriteMaskEXT(res, in, outX, outY, outZ, outW); }
#define glWriteMaskEXT brebisWriteMaskEXT


#if defined(__cplusplus)
} /* extern "C" */
#endif

#if defined(BREBIS_GL_IMPLEMENTATION)

#include <stdio.h>
#include <string.h>

#if !defined(NDEBUG)
    #include <time.h>
#endif

#if !defined(_WIN32) && !defined(__EMSCRIPTEN__)
    #include <dlfcn.h>
#endif

#if !defined(BREBIS_SSCANF)
    #if defined(_MSC_VER)
        #define BREBIS_SSCANF sscanf_s
    #else
        #define BREBIS_SSCANF sscanf
    #endif
#endif

#if defined(__cplusplus)
extern "C"  {
#endif

#if defined(__EMSCRIPTEN__)
    extern void* emscripten_GetProcAddress(const char *name_);
#elif defined(_WIN32) && !defined(__CYGWIN__)
    static HMODULE s_brebisGLLib = NULL;
#else
    static void *s_brebisGLLib = NULL;
#endif

#if defined(_MSC_VER)
    #if defined(__has_include)
        #if __has_include(<winapifamily.h>)
            #define HAVE_WINAPIFAMILY 1
        #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
        #define HAVE_WINAPIFAMILY 1
    #endif
#endif

#if defined(HAVE_WINAPIFAMILY)
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
        #define IS_UWP 1
    #endif
#endif

BrebisGLConfig brebisGL;

static BrebisGLProc brebisGLGetProcAddressDefaultImpl(const char *procName)
{
    BrebisGLProc proc;
#if defined(__EMSCRIPTEN__)
    proc = (BrebisGLProc)emscripten_GetProcAddress(procName);
#elif defined(_WIN32)
    proc = (BrebisGLProc)GetProcAddress(s_brebisGLLib, procName);
    if (!proc)
    {
        proc = (BrebisGLProc)wglGetProcAddress(procName);
    }
#else
    *(void **)(&proc) = dlsym(s_brebisGLLib, procName);
#endif
    return proc;
}

BrebisGLGetProcAddressFunc brebisGLGetProcAddress = brebisGLGetProcAddressDefaultImpl;

static void brebisGLAddExtension(khronos_int8_t isGLES, const char* const extensionStr, khronos_usize_t extensionStrLength) {
    if(isGLES) {
        if (!brebisGL.support[GL_AMD_compressed_3DC_texture] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_AMD_compressed_3DC_texture", extensionStrLength) == 0) { brebisGL.support[GL_AMD_compressed_3DC_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_compressed_ATC_texture] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_AMD_compressed_ATC_texture", extensionStrLength) == 0) { brebisGL.support[GL_AMD_compressed_ATC_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_program_binary_Z400] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_program_binary_Z400", extensionStrLength) == 0) { brebisGL.support[GL_AMD_program_binary_Z400] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANDROID_extension_pack_es31a] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ANDROID_extension_pack_es31a", extensionStrLength) == 0) { brebisGL.support[GL_ANDROID_extension_pack_es31a] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_depth_texture] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ANGLE_depth_texture", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_depth_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_framebuffer_blit] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ANGLE_framebuffer_blit", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_framebuffer_blit] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_framebuffer_multisample] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ANGLE_framebuffer_multisample", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_instanced_arrays] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ANGLE_instanced_arrays", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_pack_reverse_row_order] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ANGLE_pack_reverse_row_order", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_pack_reverse_row_order] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_program_binary] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ANGLE_program_binary", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_program_binary] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_texture_compression_dxt3] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ANGLE_texture_compression_dxt3", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_texture_compression_dxt3] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_texture_compression_dxt5] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ANGLE_texture_compression_dxt5", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_texture_compression_dxt5] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_texture_usage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ANGLE_texture_usage", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_texture_usage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ANGLE_translated_shader_source] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ANGLE_translated_shader_source", extensionStrLength) == 0) { brebisGL.support[GL_ANGLE_translated_shader_source] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_clip_distance] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_APPLE_clip_distance", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_clip_distance] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_color_buffer_packed_float] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_APPLE_color_buffer_packed_float", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_color_buffer_packed_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_copy_texture_levels] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_APPLE_copy_texture_levels", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_copy_texture_levels] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_framebuffer_multisample] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_APPLE_framebuffer_multisample", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_sync] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_APPLE_sync", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_sync] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_texture_2D_limited_npot] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_APPLE_texture_2D_limited_npot", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_texture_2D_limited_npot] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_texture_format_BGRA8888] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_APPLE_texture_format_BGRA8888", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_texture_format_BGRA8888] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_texture_max_level] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_APPLE_texture_max_level", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_texture_max_level] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_texture_packed_float] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_APPLE_texture_packed_float", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_texture_packed_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARM_mali_program_binary] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARM_mali_program_binary", extensionStrLength) == 0) { brebisGL.support[GL_ARM_mali_program_binary] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARM_mali_shader_binary] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARM_mali_shader_binary", extensionStrLength) == 0) { brebisGL.support[GL_ARM_mali_shader_binary] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARM_rgba8] && (extensionStrLength == 12) && strncmp(extensionStr, "GL_ARM_rgba8", extensionStrLength) == 0) { brebisGL.support[GL_ARM_rgba8] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARM_shader_framebuffer_fetch] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARM_shader_framebuffer_fetch", extensionStrLength) == 0) { brebisGL.support[GL_ARM_shader_framebuffer_fetch] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARM_shader_framebuffer_fetch_depth_stencil] && (extensionStrLength == 45) && strncmp(extensionStr, "GL_ARM_shader_framebuffer_fetch_depth_stencil", extensionStrLength) == 0) { brebisGL.support[GL_ARM_shader_framebuffer_fetch_depth_stencil] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_DMP_program_binary] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_DMP_program_binary", extensionStrLength) == 0) { brebisGL.support[GL_DMP_program_binary] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_DMP_shader_binary] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_DMP_shader_binary", extensionStrLength) == 0) { brebisGL.support[GL_DMP_shader_binary] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_EGL_image_array] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_EGL_image_array", extensionStrLength) == 0) { brebisGL.support[GL_EXT_EGL_image_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_YUV_target] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_YUV_target", extensionStrLength) == 0) { brebisGL.support[GL_EXT_YUV_target] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_base_instance] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_base_instance", extensionStrLength) == 0) { brebisGL.support[GL_EXT_base_instance] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_blend_func_extended] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_blend_func_extended", extensionStrLength) == 0) { brebisGL.support[GL_EXT_blend_func_extended] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_blend_minmax] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_blend_minmax", extensionStrLength) == 0) { brebisGL.support[GL_EXT_blend_minmax] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_buffer_storage] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_buffer_storage", extensionStrLength) == 0) { brebisGL.support[GL_EXT_buffer_storage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_clear_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_clear_texture", extensionStrLength) == 0) { brebisGL.support[GL_EXT_clear_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_clip_control] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_clip_control", extensionStrLength) == 0) { brebisGL.support[GL_EXT_clip_control] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_clip_cull_distance] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_clip_cull_distance", extensionStrLength) == 0) { brebisGL.support[GL_EXT_clip_cull_distance] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_color_buffer_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_color_buffer_float", extensionStrLength) == 0) { brebisGL.support[GL_EXT_color_buffer_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_color_buffer_half_float] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_color_buffer_half_float", extensionStrLength) == 0) { brebisGL.support[GL_EXT_color_buffer_half_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_conservative_depth] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_conservative_depth", extensionStrLength) == 0) { brebisGL.support[GL_EXT_conservative_depth] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_copy_image] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_copy_image", extensionStrLength) == 0) { brebisGL.support[GL_EXT_copy_image] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_discard_framebuffer] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_discard_framebuffer", extensionStrLength) == 0) { brebisGL.support[GL_EXT_discard_framebuffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_disjoint_timer_query] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_disjoint_timer_query", extensionStrLength) == 0) { brebisGL.support[GL_EXT_disjoint_timer_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_draw_buffers] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_draw_buffers", extensionStrLength) == 0) { brebisGL.support[GL_EXT_draw_buffers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_draw_buffers_indexed] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_draw_buffers_indexed", extensionStrLength) == 0) { brebisGL.support[GL_EXT_draw_buffers_indexed] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_draw_elements_base_vertex] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_EXT_draw_elements_base_vertex", extensionStrLength) == 0) { brebisGL.support[GL_EXT_draw_elements_base_vertex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_draw_transform_feedback] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_draw_transform_feedback", extensionStrLength) == 0) { brebisGL.support[GL_EXT_draw_transform_feedback] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_external_buffer] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_external_buffer", extensionStrLength) == 0) { brebisGL.support[GL_EXT_external_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_float_blend] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_float_blend", extensionStrLength) == 0) { brebisGL.support[GL_EXT_float_blend] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_geometry_point_size] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_geometry_point_size", extensionStrLength) == 0) { brebisGL.support[GL_EXT_geometry_point_size] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_geometry_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_geometry_shader", extensionStrLength) == 0) { brebisGL.support[GL_EXT_geometry_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_gpu_shader5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_gpu_shader5", extensionStrLength) == 0) { brebisGL.support[GL_EXT_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_instanced_arrays] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_instanced_arrays", extensionStrLength) == 0) { brebisGL.support[GL_EXT_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_map_buffer_range] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_map_buffer_range", extensionStrLength) == 0) { brebisGL.support[GL_EXT_map_buffer_range] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_memory_object] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_memory_object", extensionStrLength) == 0) { brebisGL.support[GL_EXT_memory_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_memory_object_fd] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_memory_object_fd", extensionStrLength) == 0) { brebisGL.support[GL_EXT_memory_object_fd] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_memory_object_win32] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_memory_object_win32", extensionStrLength) == 0) { brebisGL.support[GL_EXT_memory_object_win32] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_multi_draw_arrays] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_multi_draw_arrays", extensionStrLength) == 0) { brebisGL.support[GL_EXT_multi_draw_arrays] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_multi_draw_indirect] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_multi_draw_indirect", extensionStrLength) == 0) { brebisGL.support[GL_EXT_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_multisampled_compatibility] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_multisampled_compatibility", extensionStrLength) == 0) { brebisGL.support[GL_EXT_multisampled_compatibility] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_multisampled_render_to_texture] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_EXT_multisampled_render_to_texture", extensionStrLength) == 0) { brebisGL.support[GL_EXT_multisampled_render_to_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_multiview_draw_buffers] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_multiview_draw_buffers", extensionStrLength) == 0) { brebisGL.support[GL_EXT_multiview_draw_buffers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_occlusion_query_boolean] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_occlusion_query_boolean", extensionStrLength) == 0) { brebisGL.support[GL_EXT_occlusion_query_boolean] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_primitive_bounding_box] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_primitive_bounding_box", extensionStrLength) == 0) { brebisGL.support[GL_EXT_primitive_bounding_box] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_protected_textures] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_protected_textures", extensionStrLength) == 0) { brebisGL.support[GL_EXT_protected_textures] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_pvrtc_sRGB] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_pvrtc_sRGB", extensionStrLength) == 0) { brebisGL.support[GL_EXT_pvrtc_sRGB] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_read_format_bgra] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_read_format_bgra", extensionStrLength) == 0) { brebisGL.support[GL_EXT_read_format_bgra] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_render_snorm] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_render_snorm", extensionStrLength) == 0) { brebisGL.support[GL_EXT_render_snorm] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_robustness] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_robustness", extensionStrLength) == 0) { brebisGL.support[GL_EXT_robustness] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_sRGB] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_EXT_sRGB", extensionStrLength) == 0) { brebisGL.support[GL_EXT_sRGB] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_sRGB_write_control] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_sRGB_write_control", extensionStrLength) == 0) { brebisGL.support[GL_EXT_sRGB_write_control] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_semaphore] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_semaphore", extensionStrLength) == 0) { brebisGL.support[GL_EXT_semaphore] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_semaphore_fd] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_semaphore_fd", extensionStrLength) == 0) { brebisGL.support[GL_EXT_semaphore_fd] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_semaphore_win32] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_semaphore_win32", extensionStrLength) == 0) { brebisGL.support[GL_EXT_semaphore_win32] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_group_vote] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_shader_group_vote", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_group_vote] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_implicit_conversions] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_shader_implicit_conversions", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_implicit_conversions] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_io_blocks] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_shader_io_blocks", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_io_blocks] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_non_constant_global_initializers] && (extensionStrLength == 46) && strncmp(extensionStr, "GL_EXT_shader_non_constant_global_initializers", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_non_constant_global_initializers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_pixel_local_storage] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_shader_pixel_local_storage", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_pixel_local_storage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_pixel_local_storage2] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_shader_pixel_local_storage2", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_pixel_local_storage2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_texture_lod] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_shader_texture_lod", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_texture_lod] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shadow_samplers] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_shadow_samplers", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shadow_samplers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_sparse_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_sparse_texture", extensionStrLength) == 0) { brebisGL.support[GL_EXT_sparse_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_sparse_texture2] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_sparse_texture2", extensionStrLength) == 0) { brebisGL.support[GL_EXT_sparse_texture2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_tessellation_point_size] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_tessellation_point_size", extensionStrLength) == 0) { brebisGL.support[GL_EXT_tessellation_point_size] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_tessellation_shader] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_tessellation_shader", extensionStrLength) == 0) { brebisGL.support[GL_EXT_tessellation_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_border_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_texture_border_clamp", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_buffer] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_texture_buffer", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_compression_astc_decode_mode] && (extensionStrLength == 43) && strncmp(extensionStr, "GL_EXT_texture_compression_astc_decode_mode", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_compression_astc_decode_mode] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_compression_bptc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_bptc", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_compression_bptc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_compression_dxt1] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_dxt1", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_compression_dxt1] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_compression_rgtc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_rgtc", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_compression_rgtc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_compression_s3tc_srgb] && (extensionStrLength == 36) && strncmp(extensionStr, "GL_EXT_texture_compression_s3tc_srgb", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_compression_s3tc_srgb] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_cube_map_array] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_texture_cube_map_array", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_cube_map_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_filter_anisotropic] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_texture_filter_anisotropic", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_filter_anisotropic] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_format_BGRA8888] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_texture_format_BGRA8888", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_format_BGRA8888] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_format_sRGB_override] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_EXT_texture_format_sRGB_override", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_format_sRGB_override] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_lod_bias] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_lod_bias", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_lod_bias] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_mirror_clamp_to_edge] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_EXT_texture_mirror_clamp_to_edge", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_mirror_clamp_to_edge] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_norm16] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_texture_norm16", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_norm16] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_rg] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_texture_rg", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_rg] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_sRGB_R8] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_sRGB_R8", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_sRGB_R8] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_sRGB_RG8] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_sRGB_RG8", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_sRGB_RG8] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_storage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_storage", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_storage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_type_2_10_10_10_REV] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_texture_type_2_10_10_10_REV", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_type_2_10_10_10_REV] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_view] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_texture_view", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_view] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_unpack_subimage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_unpack_subimage", extensionStrLength) == 0) { brebisGL.support[GL_EXT_unpack_subimage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_win32_keyed_mutex] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_win32_keyed_mutex", extensionStrLength) == 0) { brebisGL.support[GL_EXT_win32_keyed_mutex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_FJ_shader_binary_GCCSO] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_FJ_shader_binary_GCCSO", extensionStrLength) == 0) { brebisGL.support[GL_FJ_shader_binary_GCCSO] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_bindless_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_IMG_bindless_texture", extensionStrLength) == 0) { brebisGL.support[GL_IMG_bindless_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_framebuffer_downsample] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_IMG_framebuffer_downsample", extensionStrLength) == 0) { brebisGL.support[GL_IMG_framebuffer_downsample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_multisampled_render_to_texture] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_IMG_multisampled_render_to_texture", extensionStrLength) == 0) { brebisGL.support[GL_IMG_multisampled_render_to_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_program_binary] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_IMG_program_binary", extensionStrLength) == 0) { brebisGL.support[GL_IMG_program_binary] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_read_format] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_IMG_read_format", extensionStrLength) == 0) { brebisGL.support[GL_IMG_read_format] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_shader_binary] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_IMG_shader_binary", extensionStrLength) == 0) { brebisGL.support[GL_IMG_shader_binary] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_texture_compression_pvrtc] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_IMG_texture_compression_pvrtc", extensionStrLength) == 0) { brebisGL.support[GL_IMG_texture_compression_pvrtc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_texture_compression_pvrtc2] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_IMG_texture_compression_pvrtc2", extensionStrLength) == 0) { brebisGL.support[GL_IMG_texture_compression_pvrtc2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_texture_env_enhanced_fixed_function] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_IMG_texture_env_enhanced_fixed_function", extensionStrLength) == 0) { brebisGL.support[GL_IMG_texture_env_enhanced_fixed_function] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_texture_filter_cubic] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_IMG_texture_filter_cubic", extensionStrLength) == 0) { brebisGL.support[GL_IMG_texture_filter_cubic] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IMG_user_clip_plane] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_IMG_user_clip_plane", extensionStrLength) == 0) { brebisGL.support[GL_IMG_user_clip_plane] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_framebuffer_flip_y] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_MESA_framebuffer_flip_y", extensionStrLength) == 0) { brebisGL.support[GL_MESA_framebuffer_flip_y] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_program_binary_formats] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_MESA_program_binary_formats", extensionStrLength) == 0) { brebisGL.support[GL_MESA_program_binary_formats] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_shader_integer_functions] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_MESA_shader_integer_functions", extensionStrLength) == 0) { brebisGL.support[GL_MESA_shader_integer_functions] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] && (extensionStrLength == 49) && strncmp(extensionStr, "GL_NVX_blend_equation_advanced_multi_draw_buffers", extensionStrLength) == 0) { brebisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_copy_buffer] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_copy_buffer", extensionStrLength) == 0) { brebisGL.support[GL_NV_copy_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_coverage_sample] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_coverage_sample", extensionStrLength) == 0) { brebisGL.support[GL_NV_coverage_sample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_depth_nonlinear] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_depth_nonlinear", extensionStrLength) == 0) { brebisGL.support[GL_NV_depth_nonlinear] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_draw_buffers] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_draw_buffers", extensionStrLength) == 0) { brebisGL.support[GL_NV_draw_buffers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_draw_instanced] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_draw_instanced", extensionStrLength) == 0) { brebisGL.support[GL_NV_draw_instanced] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_explicit_attrib_location] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_NV_explicit_attrib_location", extensionStrLength) == 0) { brebisGL.support[GL_NV_explicit_attrib_location] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fbo_color_attachments] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_fbo_color_attachments", extensionStrLength) == 0) { brebisGL.support[GL_NV_fbo_color_attachments] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fence] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_NV_fence", extensionStrLength) == 0) { brebisGL.support[GL_NV_fence] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_framebuffer_blit] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_framebuffer_blit", extensionStrLength) == 0) { brebisGL.support[GL_NV_framebuffer_blit] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_framebuffer_multisample] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_framebuffer_multisample", extensionStrLength) == 0) { brebisGL.support[GL_NV_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_generate_mipmap_sRGB] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_generate_mipmap_sRGB", extensionStrLength) == 0) { brebisGL.support[GL_NV_generate_mipmap_sRGB] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_image_formats] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_image_formats", extensionStrLength) == 0) { brebisGL.support[GL_NV_image_formats] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_instanced_arrays] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_instanced_arrays", extensionStrLength) == 0) { brebisGL.support[GL_NV_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_non_square_matrices] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_non_square_matrices", extensionStrLength) == 0) { brebisGL.support[GL_NV_non_square_matrices] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_pixel_buffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_pixel_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_NV_pixel_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_polygon_mode] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_polygon_mode", extensionStrLength) == 0) { brebisGL.support[GL_NV_polygon_mode] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_read_buffer] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_read_buffer", extensionStrLength) == 0) { brebisGL.support[GL_NV_read_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_read_buffer_front] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_read_buffer_front", extensionStrLength) == 0) { brebisGL.support[GL_NV_read_buffer_front] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_read_depth] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_read_depth", extensionStrLength) == 0) { brebisGL.support[GL_NV_read_depth] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_read_depth_stencil] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_read_depth_stencil", extensionStrLength) == 0) { brebisGL.support[GL_NV_read_depth_stencil] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_read_stencil] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_read_stencil", extensionStrLength) == 0) { brebisGL.support[GL_NV_read_stencil] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_sRGB_formats] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_sRGB_formats", extensionStrLength) == 0) { brebisGL.support[GL_NV_sRGB_formats] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_noperspective_interpolation] && (extensionStrLength == 40) && strncmp(extensionStr, "GL_NV_shader_noperspective_interpolation", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_noperspective_interpolation] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shadow_samplers_array] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_shadow_samplers_array", extensionStrLength) == 0) { brebisGL.support[GL_NV_shadow_samplers_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shadow_samplers_cube] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_shadow_samplers_cube", extensionStrLength) == 0) { brebisGL.support[GL_NV_shadow_samplers_cube] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_border_clamp] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_texture_border_clamp", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_compression_s3tc_update] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_NV_texture_compression_s3tc_update", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_compression_s3tc_update] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_npot_2D_mipmap] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_NV_texture_npot_2D_mipmap", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_npot_2D_mipmap] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_viewport_array] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_viewport_array", extensionStrLength) == 0) { brebisGL.support[GL_NV_viewport_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_EGL_image] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OES_EGL_image", extensionStrLength) == 0) { brebisGL.support[GL_OES_EGL_image] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_EGL_image_external] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_EGL_image_external", extensionStrLength) == 0) { brebisGL.support[GL_OES_EGL_image_external] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_EGL_image_external_essl3] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_OES_EGL_image_external_essl3", extensionStrLength) == 0) { brebisGL.support[GL_OES_EGL_image_external_essl3] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_blend_equation_separate] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_blend_equation_separate", extensionStrLength) == 0) { brebisGL.support[GL_OES_blend_equation_separate] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_blend_func_separate] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_blend_func_separate", extensionStrLength) == 0) { brebisGL.support[GL_OES_blend_func_separate] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_blend_subtract] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_blend_subtract", extensionStrLength) == 0) { brebisGL.support[GL_OES_blend_subtract] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_byte_coordinates] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_byte_coordinates", extensionStrLength) == 0) { brebisGL.support[GL_OES_byte_coordinates] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_compressed_ETC1_RGB8_sub_texture] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_OES_compressed_ETC1_RGB8_sub_texture", extensionStrLength) == 0) { brebisGL.support[GL_OES_compressed_ETC1_RGB8_sub_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_compressed_ETC1_RGB8_texture] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_OES_compressed_ETC1_RGB8_texture", extensionStrLength) == 0) { brebisGL.support[GL_OES_compressed_ETC1_RGB8_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_compressed_paletted_texture] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_OES_compressed_paletted_texture", extensionStrLength) == 0) { brebisGL.support[GL_OES_compressed_paletted_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_copy_image] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_copy_image", extensionStrLength) == 0) { brebisGL.support[GL_OES_copy_image] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_depth24] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_OES_depth24", extensionStrLength) == 0) { brebisGL.support[GL_OES_depth24] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_depth32] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_OES_depth32", extensionStrLength) == 0) { brebisGL.support[GL_OES_depth32] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_depth_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_OES_depth_texture", extensionStrLength) == 0) { brebisGL.support[GL_OES_depth_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_draw_buffers_indexed] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_draw_buffers_indexed", extensionStrLength) == 0) { brebisGL.support[GL_OES_draw_buffers_indexed] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_draw_elements_base_vertex] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_OES_draw_elements_base_vertex", extensionStrLength) == 0) { brebisGL.support[GL_OES_draw_elements_base_vertex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_draw_texture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_draw_texture", extensionStrLength) == 0) { brebisGL.support[GL_OES_draw_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_element_index_uint] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_element_index_uint", extensionStrLength) == 0) { brebisGL.support[GL_OES_element_index_uint] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_extended_matrix_palette] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_extended_matrix_palette", extensionStrLength) == 0) { brebisGL.support[GL_OES_extended_matrix_palette] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_fbo_render_mipmap] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_OES_fbo_render_mipmap", extensionStrLength) == 0) { brebisGL.support[GL_OES_fbo_render_mipmap] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_fixed_point] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_fixed_point", extensionStrLength) == 0) { brebisGL.support[GL_OES_fixed_point] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_fragment_precision_high] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_fragment_precision_high", extensionStrLength) == 0) { brebisGL.support[GL_OES_fragment_precision_high] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_framebuffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_framebuffer_object", extensionStrLength) == 0) { brebisGL.support[GL_OES_framebuffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_geometry_point_size] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_geometry_point_size", extensionStrLength) == 0) { brebisGL.support[GL_OES_geometry_point_size] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_geometry_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_OES_geometry_shader", extensionStrLength) == 0) { brebisGL.support[GL_OES_geometry_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_get_program_binary] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_get_program_binary", extensionStrLength) == 0) { brebisGL.support[GL_OES_get_program_binary] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_gpu_shader5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_gpu_shader5", extensionStrLength) == 0) { brebisGL.support[GL_OES_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_mapbuffer] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OES_mapbuffer", extensionStrLength) == 0) { brebisGL.support[GL_OES_mapbuffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_matrix_get] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_matrix_get", extensionStrLength) == 0) { brebisGL.support[GL_OES_matrix_get] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_matrix_palette] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_matrix_palette", extensionStrLength) == 0) { brebisGL.support[GL_OES_matrix_palette] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_packed_depth_stencil] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_packed_depth_stencil", extensionStrLength) == 0) { brebisGL.support[GL_OES_packed_depth_stencil] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_point_size_array] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_point_size_array", extensionStrLength) == 0) { brebisGL.support[GL_OES_point_size_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_point_sprite] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_point_sprite", extensionStrLength) == 0) { brebisGL.support[GL_OES_point_sprite] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_primitive_bounding_box] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_OES_primitive_bounding_box", extensionStrLength) == 0) { brebisGL.support[GL_OES_primitive_bounding_box] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_query_matrix] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_query_matrix", extensionStrLength) == 0) { brebisGL.support[GL_OES_query_matrix] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_read_format] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_read_format", extensionStrLength) == 0) { brebisGL.support[GL_OES_read_format] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_required_internalformat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_required_internalformat", extensionStrLength) == 0) { brebisGL.support[GL_OES_required_internalformat] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_rgb8_rgba8] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_rgb8_rgba8", extensionStrLength) == 0) { brebisGL.support[GL_OES_rgb8_rgba8] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_sample_shading] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_sample_shading", extensionStrLength) == 0) { brebisGL.support[GL_OES_sample_shading] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_sample_variables] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_sample_variables", extensionStrLength) == 0) { brebisGL.support[GL_OES_sample_variables] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_shader_image_atomic] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_shader_image_atomic", extensionStrLength) == 0) { brebisGL.support[GL_OES_shader_image_atomic] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_shader_io_blocks] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_shader_io_blocks", extensionStrLength) == 0) { brebisGL.support[GL_OES_shader_io_blocks] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_shader_multisample_interpolation] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_OES_shader_multisample_interpolation", extensionStrLength) == 0) { brebisGL.support[GL_OES_shader_multisample_interpolation] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_single_precision] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_single_precision", extensionStrLength) == 0) { brebisGL.support[GL_OES_single_precision] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_standard_derivatives] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_standard_derivatives", extensionStrLength) == 0) { brebisGL.support[GL_OES_standard_derivatives] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_stencil1] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OES_stencil1", extensionStrLength) == 0) { brebisGL.support[GL_OES_stencil1] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_stencil4] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OES_stencil4", extensionStrLength) == 0) { brebisGL.support[GL_OES_stencil4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_stencil8] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OES_stencil8", extensionStrLength) == 0) { brebisGL.support[GL_OES_stencil8] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_stencil_wrap] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_stencil_wrap", extensionStrLength) == 0) { brebisGL.support[GL_OES_stencil_wrap] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_surfaceless_context] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_surfaceless_context", extensionStrLength) == 0) { brebisGL.support[GL_OES_surfaceless_context] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_tessellation_point_size] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_tessellation_point_size", extensionStrLength) == 0) { brebisGL.support[GL_OES_tessellation_point_size] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_tessellation_shader] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_tessellation_shader", extensionStrLength) == 0) { brebisGL.support[GL_OES_tessellation_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_3D] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OES_texture_3D", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_3D] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_border_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_texture_border_clamp", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_buffer] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_texture_buffer", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_compression_astc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_OES_texture_compression_astc", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_compression_astc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_cube_map] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_texture_cube_map", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_cube_map] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_cube_map_array] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_OES_texture_cube_map_array", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_cube_map_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_env_crossbar] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_texture_env_crossbar", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_env_crossbar] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_float] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_OES_texture_float", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_float_linear] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_OES_texture_float_linear", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_float_linear] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_half_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_OES_texture_half_float", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_half_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_half_float_linear] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_OES_texture_half_float_linear", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_half_float_linear] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_mirrored_repeat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_OES_texture_mirrored_repeat", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_mirrored_repeat] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_npot] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_texture_npot", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_npot] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_stencil8] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_texture_stencil8", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_stencil8] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_storage_multisample_2d_array] && (extensionStrLength == 43) && strncmp(extensionStr, "GL_OES_texture_storage_multisample_2d_array", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_storage_multisample_2d_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_texture_view] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_texture_view", extensionStrLength) == 0) { brebisGL.support[GL_OES_texture_view] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_vertex_array_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_OES_vertex_array_object", extensionStrLength) == 0) { brebisGL.support[GL_OES_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_vertex_half_float] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_OES_vertex_half_float", extensionStrLength) == 0) { brebisGL.support[GL_OES_vertex_half_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_vertex_type_10_10_10_2] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_OES_vertex_type_10_10_10_2", extensionStrLength) == 0) { brebisGL.support[GL_OES_vertex_type_10_10_10_2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_viewport_array] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_OES_viewport_array", extensionStrLength) == 0) { brebisGL.support[GL_OES_viewport_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OVR_multiview_multisampled_render_to_texture] && (extensionStrLength == 47) && strncmp(extensionStr, "GL_OVR_multiview_multisampled_render_to_texture", extensionStrLength) == 0) { brebisGL.support[GL_OVR_multiview_multisampled_render_to_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_alpha_test] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_QCOM_alpha_test", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_alpha_test] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_binning_control] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_QCOM_binning_control", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_binning_control] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_driver_control] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_QCOM_driver_control", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_driver_control] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_extended_get] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_QCOM_extended_get", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_extended_get] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_extended_get2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_QCOM_extended_get2", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_extended_get2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_framebuffer_foveated] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_QCOM_framebuffer_foveated", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_framebuffer_foveated] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_perfmon_global_mode] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_QCOM_perfmon_global_mode", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_perfmon_global_mode] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_shader_framebuffer_fetch_noncoherent] && (extensionStrLength == 44) && strncmp(extensionStr, "GL_QCOM_shader_framebuffer_fetch_noncoherent", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_shader_framebuffer_fetch_noncoherent] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_shader_framebuffer_fetch_rate] && (extensionStrLength == 37) && strncmp(extensionStr, "GL_QCOM_shader_framebuffer_fetch_rate", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_shader_framebuffer_fetch_rate] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_texture_foveated] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_QCOM_texture_foveated", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_texture_foveated] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_texture_foveated_subsampled_layout] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_QCOM_texture_foveated_subsampled_layout", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_texture_foveated_subsampled_layout] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_tiled_rendering] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_QCOM_tiled_rendering", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_tiled_rendering] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_QCOM_writeonly_rendering] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_QCOM_writeonly_rendering", extensionStrLength) == 0) { brebisGL.support[GL_QCOM_writeonly_rendering] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_VIV_shader_binary] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_VIV_shader_binary", extensionStrLength) == 0) { brebisGL.support[GL_VIV_shader_binary] = KHRONOS_TRUE; return; }

        /*
         * Discovered a bug in Qualcomm Adreno 200 OpenGL ES driver, where
         * these three extensions are literally fused together.
         */
        if (!(brebisGL.support[GL_EXT_debug_label] && brebisGL.support[GL_EXT_debug_marker] && brebisGL.support[GL_EXT_robustness]) &&
            (extensionStrLength == 54) && strncmp(extensionStr, "GL_EXT_debug_labelGL_EXT_debug_markerGL_EXT_robustness", extensionStrLength) == 0)
        {
            brebisGL.support[GL_EXT_debug_label] = KHRONOS_TRUE;
            brebisGL.support[GL_EXT_debug_marker] = KHRONOS_TRUE;
            brebisGL.support[GL_EXT_robustness] = KHRONOS_TRUE;
            return;
        }
    } else {
        if (!brebisGL.support[GL_3DFX_multisample] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_3DFX_multisample", extensionStrLength) == 0) { brebisGL.support[GL_3DFX_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_3DFX_tbuffer] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_3DFX_tbuffer", extensionStrLength) == 0) { brebisGL.support[GL_3DFX_tbuffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_3DFX_texture_compression_FXT1] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_3DFX_texture_compression_FXT1", extensionStrLength) == 0) { brebisGL.support[GL_3DFX_texture_compression_FXT1] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_blend_minmax_factor] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_blend_minmax_factor", extensionStrLength) == 0) { brebisGL.support[GL_AMD_blend_minmax_factor] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_conservative_depth] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_AMD_conservative_depth", extensionStrLength) == 0) { brebisGL.support[GL_AMD_conservative_depth] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_debug_output] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_AMD_debug_output", extensionStrLength) == 0) { brebisGL.support[GL_AMD_debug_output] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_depth_clamp_separate] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_AMD_depth_clamp_separate", extensionStrLength) == 0) { brebisGL.support[GL_AMD_depth_clamp_separate] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_draw_buffers_blend] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_AMD_draw_buffers_blend", extensionStrLength) == 0) { brebisGL.support[GL_AMD_draw_buffers_blend] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_framebuffer_multisample_advanced] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_AMD_framebuffer_multisample_advanced", extensionStrLength) == 0) { brebisGL.support[GL_AMD_framebuffer_multisample_advanced] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_framebuffer_sample_positions] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_AMD_framebuffer_sample_positions", extensionStrLength) == 0) { brebisGL.support[GL_AMD_framebuffer_sample_positions] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_gcn_shader] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_AMD_gcn_shader", extensionStrLength) == 0) { brebisGL.support[GL_AMD_gcn_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_gpu_shader_half_float] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_gpu_shader_half_float", extensionStrLength) == 0) { brebisGL.support[GL_AMD_gpu_shader_half_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_gpu_shader_int16] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_gpu_shader_int16", extensionStrLength) == 0) { brebisGL.support[GL_AMD_gpu_shader_int16] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_gpu_shader_int64] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_gpu_shader_int64", extensionStrLength) == 0) { brebisGL.support[GL_AMD_gpu_shader_int64] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_interleaved_elements] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_AMD_interleaved_elements", extensionStrLength) == 0) { brebisGL.support[GL_AMD_interleaved_elements] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_multi_draw_indirect] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_multi_draw_indirect", extensionStrLength) == 0) { brebisGL.support[GL_AMD_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_name_gen_delete] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_AMD_name_gen_delete", extensionStrLength) == 0) { brebisGL.support[GL_AMD_name_gen_delete] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_occlusion_query_event] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_occlusion_query_event", extensionStrLength) == 0) { brebisGL.support[GL_AMD_occlusion_query_event] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_performance_monitor] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_performance_monitor", extensionStrLength) == 0) { brebisGL.support[GL_AMD_performance_monitor] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_pinned_memory] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_AMD_pinned_memory", extensionStrLength) == 0) { brebisGL.support[GL_AMD_pinned_memory] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_query_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_query_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_AMD_query_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_sample_positions] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_sample_positions", extensionStrLength) == 0) { brebisGL.support[GL_AMD_sample_positions] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_seamless_cubemap_per_texture] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_AMD_seamless_cubemap_per_texture", extensionStrLength) == 0) { brebisGL.support[GL_AMD_seamless_cubemap_per_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_shader_atomic_counter_ops] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_AMD_shader_atomic_counter_ops", extensionStrLength) == 0) { brebisGL.support[GL_AMD_shader_atomic_counter_ops] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_shader_ballot] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_AMD_shader_ballot", extensionStrLength) == 0) { brebisGL.support[GL_AMD_shader_ballot] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_shader_explicit_vertex_parameter] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_AMD_shader_explicit_vertex_parameter", extensionStrLength) == 0) { brebisGL.support[GL_AMD_shader_explicit_vertex_parameter] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_shader_gpu_shader_half_float_fetch] && (extensionStrLength == 41) && strncmp(extensionStr, "GL_AMD_shader_gpu_shader_half_float_fetch", extensionStrLength) == 0) { brebisGL.support[GL_AMD_shader_gpu_shader_half_float_fetch] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_shader_image_load_store_lod] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_AMD_shader_image_load_store_lod", extensionStrLength) == 0) { brebisGL.support[GL_AMD_shader_image_load_store_lod] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_shader_stencil_export] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_shader_stencil_export", extensionStrLength) == 0) { brebisGL.support[GL_AMD_shader_stencil_export] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_shader_trinary_minmax] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_AMD_shader_trinary_minmax", extensionStrLength) == 0) { brebisGL.support[GL_AMD_shader_trinary_minmax] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_sparse_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_AMD_sparse_texture", extensionStrLength) == 0) { brebisGL.support[GL_AMD_sparse_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_stencil_operation_extended] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_AMD_stencil_operation_extended", extensionStrLength) == 0) { brebisGL.support[GL_AMD_stencil_operation_extended] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_texture_gather_bias_lod] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_AMD_texture_gather_bias_lod", extensionStrLength) == 0) { brebisGL.support[GL_AMD_texture_gather_bias_lod] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_texture_texture4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_AMD_texture_texture4", extensionStrLength) == 0) { brebisGL.support[GL_AMD_texture_texture4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_transform_feedback3_lines_triangles] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_AMD_transform_feedback3_lines_triangles", extensionStrLength) == 0) { brebisGL.support[GL_AMD_transform_feedback3_lines_triangles] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_transform_feedback4] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_transform_feedback4", extensionStrLength) == 0) { brebisGL.support[GL_AMD_transform_feedback4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_vertex_shader_layer] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_AMD_vertex_shader_layer", extensionStrLength) == 0) { brebisGL.support[GL_AMD_vertex_shader_layer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_vertex_shader_tessellator] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_AMD_vertex_shader_tessellator", extensionStrLength) == 0) { brebisGL.support[GL_AMD_vertex_shader_tessellator] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_AMD_vertex_shader_viewport_index] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_AMD_vertex_shader_viewport_index", extensionStrLength) == 0) { brebisGL.support[GL_AMD_vertex_shader_viewport_index] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_aux_depth_stencil] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_APPLE_aux_depth_stencil", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_aux_depth_stencil] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_client_storage] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_APPLE_client_storage", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_client_storage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_element_array] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_APPLE_element_array", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_element_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_fence] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_APPLE_fence", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_fence] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_float_pixels] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_APPLE_float_pixels", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_float_pixels] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_flush_buffer_range] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_APPLE_flush_buffer_range", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_flush_buffer_range] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_object_purgeable] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_APPLE_object_purgeable", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_object_purgeable] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_rgb_422] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_APPLE_rgb_422", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_rgb_422] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_row_bytes] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_APPLE_row_bytes", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_row_bytes] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_specular_vector] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_APPLE_specular_vector", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_specular_vector] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_texture_range] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_APPLE_texture_range", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_texture_range] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_transform_hint] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_APPLE_transform_hint", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_transform_hint] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_vertex_array_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_APPLE_vertex_array_object", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_vertex_array_range] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_APPLE_vertex_array_range", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_vertex_array_range] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_vertex_program_evaluators] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_APPLE_vertex_program_evaluators", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_vertex_program_evaluators] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_APPLE_ycbcr_422] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_APPLE_ycbcr_422", extensionStrLength) == 0) { brebisGL.support[GL_APPLE_ycbcr_422] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_ES2_compatibility] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_ES2_compatibility", extensionStrLength) == 0) { brebisGL.support[GL_ARB_ES2_compatibility] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_ES3_1_compatibility] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_ES3_1_compatibility", extensionStrLength) == 0) { brebisGL.support[GL_ARB_ES3_1_compatibility] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_ES3_2_compatibility] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_ES3_2_compatibility", extensionStrLength) == 0) { brebisGL.support[GL_ARB_ES3_2_compatibility] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_ES3_compatibility] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_ES3_compatibility", extensionStrLength) == 0) { brebisGL.support[GL_ARB_ES3_compatibility] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_arrays_of_arrays] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_arrays_of_arrays", extensionStrLength) == 0) { brebisGL.support[GL_ARB_arrays_of_arrays] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_base_instance] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_base_instance", extensionStrLength) == 0) { brebisGL.support[GL_ARB_base_instance] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_bindless_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_bindless_texture", extensionStrLength) == 0) { brebisGL.support[GL_ARB_bindless_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_blend_func_extended] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_blend_func_extended", extensionStrLength) == 0) { brebisGL.support[GL_ARB_blend_func_extended] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_buffer_storage] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_buffer_storage", extensionStrLength) == 0) { brebisGL.support[GL_ARB_buffer_storage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_cl_event] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_ARB_cl_event", extensionStrLength) == 0) { brebisGL.support[GL_ARB_cl_event] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_clear_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_clear_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_ARB_clear_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_clear_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_clear_texture", extensionStrLength) == 0) { brebisGL.support[GL_ARB_clear_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_clip_control] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_clip_control", extensionStrLength) == 0) { brebisGL.support[GL_ARB_clip_control] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_color_buffer_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_color_buffer_float", extensionStrLength) == 0) { brebisGL.support[GL_ARB_color_buffer_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_compatibility] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_compatibility", extensionStrLength) == 0) { brebisGL.support[GL_ARB_compatibility] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_compressed_texture_pixel_storage] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_ARB_compressed_texture_pixel_storage", extensionStrLength) == 0) { brebisGL.support[GL_ARB_compressed_texture_pixel_storage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_compute_shader] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_compute_shader", extensionStrLength) == 0) { brebisGL.support[GL_ARB_compute_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_compute_variable_group_size] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_compute_variable_group_size", extensionStrLength) == 0) { brebisGL.support[GL_ARB_compute_variable_group_size] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_conditional_render_inverted] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_conditional_render_inverted", extensionStrLength) == 0) { brebisGL.support[GL_ARB_conditional_render_inverted] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_conservative_depth] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_conservative_depth", extensionStrLength) == 0) { brebisGL.support[GL_ARB_conservative_depth] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_copy_buffer] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_copy_buffer", extensionStrLength) == 0) { brebisGL.support[GL_ARB_copy_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_copy_image] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_copy_image", extensionStrLength) == 0) { brebisGL.support[GL_ARB_copy_image] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_cull_distance] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_cull_distance", extensionStrLength) == 0) { brebisGL.support[GL_ARB_cull_distance] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_debug_output] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_debug_output", extensionStrLength) == 0) { brebisGL.support[GL_ARB_debug_output] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_depth_buffer_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_depth_buffer_float", extensionStrLength) == 0) { brebisGL.support[GL_ARB_depth_buffer_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_depth_clamp] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_depth_clamp", extensionStrLength) == 0) { brebisGL.support[GL_ARB_depth_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_depth_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_depth_texture", extensionStrLength) == 0) { brebisGL.support[GL_ARB_depth_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_derivative_control] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_derivative_control", extensionStrLength) == 0) { brebisGL.support[GL_ARB_derivative_control] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_direct_state_access] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_direct_state_access", extensionStrLength) == 0) { brebisGL.support[GL_ARB_direct_state_access] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_draw_buffers] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_draw_buffers", extensionStrLength) == 0) { brebisGL.support[GL_ARB_draw_buffers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_draw_buffers_blend] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_draw_buffers_blend", extensionStrLength) == 0) { brebisGL.support[GL_ARB_draw_buffers_blend] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_draw_elements_base_vertex] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_draw_elements_base_vertex", extensionStrLength) == 0) { brebisGL.support[GL_ARB_draw_elements_base_vertex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_draw_indirect] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_draw_indirect", extensionStrLength) == 0) { brebisGL.support[GL_ARB_draw_indirect] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_draw_instanced] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_draw_instanced", extensionStrLength) == 0) { brebisGL.support[GL_ARB_draw_instanced] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_enhanced_layouts] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_enhanced_layouts", extensionStrLength) == 0) { brebisGL.support[GL_ARB_enhanced_layouts] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_explicit_attrib_location] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_explicit_attrib_location", extensionStrLength) == 0) { brebisGL.support[GL_ARB_explicit_attrib_location] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_explicit_uniform_location] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_explicit_uniform_location", extensionStrLength) == 0) { brebisGL.support[GL_ARB_explicit_uniform_location] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_fragment_coord_conventions] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_fragment_coord_conventions", extensionStrLength) == 0) { brebisGL.support[GL_ARB_fragment_coord_conventions] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_fragment_layer_viewport] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_fragment_layer_viewport", extensionStrLength) == 0) { brebisGL.support[GL_ARB_fragment_layer_viewport] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_fragment_program] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_fragment_program", extensionStrLength) == 0) { brebisGL.support[GL_ARB_fragment_program] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_fragment_program_shadow] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_fragment_program_shadow", extensionStrLength) == 0) { brebisGL.support[GL_ARB_fragment_program_shadow] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_fragment_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_fragment_shader", extensionStrLength) == 0) { brebisGL.support[GL_ARB_fragment_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_fragment_shader_interlock] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_fragment_shader_interlock", extensionStrLength) == 0) { brebisGL.support[GL_ARB_fragment_shader_interlock] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_framebuffer_no_attachments] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_framebuffer_no_attachments", extensionStrLength) == 0) { brebisGL.support[GL_ARB_framebuffer_no_attachments] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_framebuffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_framebuffer_object", extensionStrLength) == 0) { brebisGL.support[GL_ARB_framebuffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_framebuffer_sRGB] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_framebuffer_sRGB", extensionStrLength) == 0) { brebisGL.support[GL_ARB_framebuffer_sRGB] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_geometry_shader4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_geometry_shader4", extensionStrLength) == 0) { brebisGL.support[GL_ARB_geometry_shader4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_get_program_binary] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_get_program_binary", extensionStrLength) == 0) { brebisGL.support[GL_ARB_get_program_binary] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_get_texture_sub_image] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_get_texture_sub_image", extensionStrLength) == 0) { brebisGL.support[GL_ARB_get_texture_sub_image] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_gl_spirv] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_ARB_gl_spirv", extensionStrLength) == 0) { brebisGL.support[GL_ARB_gl_spirv] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_gpu_shader5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_gpu_shader5", extensionStrLength) == 0) { brebisGL.support[GL_ARB_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_gpu_shader_fp64] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_gpu_shader_fp64", extensionStrLength) == 0) { brebisGL.support[GL_ARB_gpu_shader_fp64] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_gpu_shader_int64] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_gpu_shader_int64", extensionStrLength) == 0) { brebisGL.support[GL_ARB_gpu_shader_int64] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_half_float_pixel] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_half_float_pixel", extensionStrLength) == 0) { brebisGL.support[GL_ARB_half_float_pixel] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_half_float_vertex] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_half_float_vertex", extensionStrLength) == 0) { brebisGL.support[GL_ARB_half_float_vertex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_imaging] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_ARB_imaging", extensionStrLength) == 0) { brebisGL.support[GL_ARB_imaging] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_indirect_parameters] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_indirect_parameters", extensionStrLength) == 0) { brebisGL.support[GL_ARB_indirect_parameters] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_instanced_arrays] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_instanced_arrays", extensionStrLength) == 0) { brebisGL.support[GL_ARB_instanced_arrays] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_internalformat_query] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_internalformat_query", extensionStrLength) == 0) { brebisGL.support[GL_ARB_internalformat_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_internalformat_query2] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_internalformat_query2", extensionStrLength) == 0) { brebisGL.support[GL_ARB_internalformat_query2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_invalidate_subdata] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_invalidate_subdata", extensionStrLength) == 0) { brebisGL.support[GL_ARB_invalidate_subdata] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_map_buffer_alignment] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_map_buffer_alignment", extensionStrLength) == 0) { brebisGL.support[GL_ARB_map_buffer_alignment] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_map_buffer_range] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_map_buffer_range", extensionStrLength) == 0) { brebisGL.support[GL_ARB_map_buffer_range] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_matrix_palette] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_matrix_palette", extensionStrLength) == 0) { brebisGL.support[GL_ARB_matrix_palette] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_multi_bind] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_multi_bind", extensionStrLength) == 0) { brebisGL.support[GL_ARB_multi_bind] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_multi_draw_indirect] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_multi_draw_indirect", extensionStrLength) == 0) { brebisGL.support[GL_ARB_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_multisample] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_multisample", extensionStrLength) == 0) { brebisGL.support[GL_ARB_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_multitexture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_multitexture", extensionStrLength) == 0) { brebisGL.support[GL_ARB_multitexture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_occlusion_query] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_occlusion_query", extensionStrLength) == 0) { brebisGL.support[GL_ARB_occlusion_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_occlusion_query2] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_occlusion_query2", extensionStrLength) == 0) { brebisGL.support[GL_ARB_occlusion_query2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_parallel_shader_compile] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_parallel_shader_compile", extensionStrLength) == 0) { brebisGL.support[GL_ARB_parallel_shader_compile] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_pipeline_statistics_query] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_pipeline_statistics_query", extensionStrLength) == 0) { brebisGL.support[GL_ARB_pipeline_statistics_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_pixel_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_pixel_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_ARB_pixel_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_point_parameters] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_point_parameters", extensionStrLength) == 0) { brebisGL.support[GL_ARB_point_parameters] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_point_sprite] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_point_sprite", extensionStrLength) == 0) { brebisGL.support[GL_ARB_point_sprite] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_polygon_offset_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_polygon_offset_clamp", extensionStrLength) == 0) { brebisGL.support[GL_ARB_polygon_offset_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_post_depth_coverage] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_post_depth_coverage", extensionStrLength) == 0) { brebisGL.support[GL_ARB_post_depth_coverage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_program_interface_query] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_program_interface_query", extensionStrLength) == 0) { brebisGL.support[GL_ARB_program_interface_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_provoking_vertex] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_provoking_vertex", extensionStrLength) == 0) { brebisGL.support[GL_ARB_provoking_vertex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_query_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_query_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_ARB_query_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_robust_buffer_access_behavior] && (extensionStrLength == 36) && strncmp(extensionStr, "GL_ARB_robust_buffer_access_behavior", extensionStrLength) == 0) { brebisGL.support[GL_ARB_robust_buffer_access_behavior] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_robustness] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_robustness", extensionStrLength) == 0) { brebisGL.support[GL_ARB_robustness] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_robustness_isolation] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_robustness_isolation", extensionStrLength) == 0) { brebisGL.support[GL_ARB_robustness_isolation] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_sample_locations] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_sample_locations", extensionStrLength) == 0) { brebisGL.support[GL_ARB_sample_locations] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_sample_shading] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_sample_shading", extensionStrLength) == 0) { brebisGL.support[GL_ARB_sample_shading] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_sampler_objects] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_sampler_objects", extensionStrLength) == 0) { brebisGL.support[GL_ARB_sampler_objects] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_seamless_cube_map] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_seamless_cube_map", extensionStrLength) == 0) { brebisGL.support[GL_ARB_seamless_cube_map] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_seamless_cubemap_per_texture] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_seamless_cubemap_per_texture", extensionStrLength) == 0) { brebisGL.support[GL_ARB_seamless_cubemap_per_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_separate_shader_objects] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_separate_shader_objects", extensionStrLength) == 0) { brebisGL.support[GL_ARB_separate_shader_objects] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_atomic_counter_ops] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_ARB_shader_atomic_counter_ops", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_atomic_counter_ops] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_atomic_counters] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_ARB_shader_atomic_counters", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_atomic_counters] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_ballot] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_shader_ballot", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_ballot] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_bit_encoding] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_shader_bit_encoding", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_bit_encoding] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_clock] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_shader_clock", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_clock] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_draw_parameters] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_ARB_shader_draw_parameters", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_draw_parameters] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_group_vote] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_shader_group_vote", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_group_vote] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_image_load_store] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_shader_image_load_store", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_image_load_store] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_image_size] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_shader_image_size", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_image_size] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_objects] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_shader_objects", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_objects] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_precision] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_shader_precision", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_precision] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_stencil_export] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_shader_stencil_export", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_stencil_export] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_storage_buffer_object] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_shader_storage_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_storage_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_subroutine] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_shader_subroutine", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_subroutine] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_texture_image_samples] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_shader_texture_image_samples", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_texture_image_samples] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_texture_lod] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_shader_texture_lod", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_texture_lod] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shader_viewport_layer_array] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_shader_viewport_layer_array", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shader_viewport_layer_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shading_language_100] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_shading_language_100", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shading_language_100] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shading_language_420pack] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_shading_language_420pack", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shading_language_420pack] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shading_language_include] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_shading_language_include", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shading_language_include] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shading_language_packing] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_shading_language_packing", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shading_language_packing] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shadow] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_ARB_shadow", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shadow] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_shadow_ambient] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_shadow_ambient", extensionStrLength) == 0) { brebisGL.support[GL_ARB_shadow_ambient] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_sparse_buffer] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_sparse_buffer", extensionStrLength) == 0) { brebisGL.support[GL_ARB_sparse_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_sparse_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_sparse_texture", extensionStrLength) == 0) { brebisGL.support[GL_ARB_sparse_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_sparse_texture2] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_sparse_texture2", extensionStrLength) == 0) { brebisGL.support[GL_ARB_sparse_texture2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_sparse_texture_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_sparse_texture_clamp", extensionStrLength) == 0) { brebisGL.support[GL_ARB_sparse_texture_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_spirv_extensions] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_spirv_extensions", extensionStrLength) == 0) { brebisGL.support[GL_ARB_spirv_extensions] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_stencil_texturing] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_stencil_texturing", extensionStrLength) == 0) { brebisGL.support[GL_ARB_stencil_texturing] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_sync] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_ARB_sync", extensionStrLength) == 0) { brebisGL.support[GL_ARB_sync] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_tessellation_shader] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_tessellation_shader", extensionStrLength) == 0) { brebisGL.support[GL_ARB_tessellation_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_barrier] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_barrier", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_barrier] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_border_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_border_clamp", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_buffer_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_texture_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_buffer_object_rgb32] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_texture_buffer_object_rgb32", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_buffer_object_rgb32] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_buffer_range] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_buffer_range", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_buffer_range] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_compression] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_texture_compression", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_compression] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_compression_bptc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_texture_compression_bptc", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_compression_bptc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_compression_rgtc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_texture_compression_rgtc", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_compression_rgtc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_cube_map] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_texture_cube_map", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_cube_map] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_cube_map_array] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_ARB_texture_cube_map_array", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_cube_map_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_env_add] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_env_add", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_env_add] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_env_combine] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_texture_env_combine", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_env_combine] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_env_crossbar] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_env_crossbar", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_env_crossbar] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_env_dot3] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_texture_env_dot3", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_env_dot3] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_filter_anisotropic] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_texture_filter_anisotropic", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_filter_anisotropic] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_filter_minmax] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_texture_filter_minmax", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_filter_minmax] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_float] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_texture_float", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_gather] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_texture_gather", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_gather] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_mirror_clamp_to_edge] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_texture_mirror_clamp_to_edge", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_mirror_clamp_to_edge] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_mirrored_repeat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_ARB_texture_mirrored_repeat", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_mirrored_repeat] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_multisample] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_texture_multisample", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_non_power_of_two] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_ARB_texture_non_power_of_two", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_non_power_of_two] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_query_levels] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_texture_query_levels", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_query_levels] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_query_lod] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_texture_query_lod", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_query_lod] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_rectangle] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_texture_rectangle", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_rectangle] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_rg] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_texture_rg", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_rg] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_rgb10_a2ui] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ARB_texture_rgb10_a2ui", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_rgb10_a2ui] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_stencil8] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_texture_stencil8", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_stencil8] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_storage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_storage", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_storage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_storage_multisample] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_texture_storage_multisample", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_storage_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_swizzle] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ARB_texture_swizzle", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_swizzle] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_texture_view] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_texture_view", extensionStrLength) == 0) { brebisGL.support[GL_ARB_texture_view] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_timer_query] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_ARB_timer_query", extensionStrLength) == 0) { brebisGL.support[GL_ARB_timer_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_transform_feedback2] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_transform_feedback2", extensionStrLength) == 0) { brebisGL.support[GL_ARB_transform_feedback2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_transform_feedback3] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_transform_feedback3", extensionStrLength) == 0) { brebisGL.support[GL_ARB_transform_feedback3] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_transform_feedback_instanced] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_ARB_transform_feedback_instanced", extensionStrLength) == 0) { brebisGL.support[GL_ARB_transform_feedback_instanced] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_transform_feedback_overflow_query] && (extensionStrLength == 40) && strncmp(extensionStr, "GL_ARB_transform_feedback_overflow_query", extensionStrLength) == 0) { brebisGL.support[GL_ARB_transform_feedback_overflow_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_transpose_matrix] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ARB_transpose_matrix", extensionStrLength) == 0) { brebisGL.support[GL_ARB_transpose_matrix] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_uniform_buffer_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_uniform_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_ARB_uniform_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_array_bgra] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ARB_vertex_array_bgra", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_array_bgra] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_array_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_vertex_array_object", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_attrib_64bit] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ARB_vertex_attrib_64bit", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_attrib_64bit] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_attrib_binding] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_ARB_vertex_attrib_binding", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_attrib_binding] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_blend] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ARB_vertex_blend", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_blend] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_buffer_object] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ARB_vertex_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_program] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_vertex_program", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_program] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_shader] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ARB_vertex_shader", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_type_10f_11f_11f_rev] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_ARB_vertex_type_10f_11f_11f_rev", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_type_10f_11f_11f_rev] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_vertex_type_2_10_10_10_rev] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ARB_vertex_type_2_10_10_10_rev", extensionStrLength) == 0) { brebisGL.support[GL_ARB_vertex_type_2_10_10_10_rev] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_viewport_array] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ARB_viewport_array", extensionStrLength) == 0) { brebisGL.support[GL_ARB_viewport_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ARB_window_pos] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_ARB_window_pos", extensionStrLength) == 0) { brebisGL.support[GL_ARB_window_pos] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_draw_buffers] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ATI_draw_buffers", extensionStrLength) == 0) { brebisGL.support[GL_ATI_draw_buffers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_element_array] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ATI_element_array", extensionStrLength) == 0) { brebisGL.support[GL_ATI_element_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_envmap_bumpmap] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ATI_envmap_bumpmap", extensionStrLength) == 0) { brebisGL.support[GL_ATI_envmap_bumpmap] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_fragment_shader] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_ATI_fragment_shader", extensionStrLength) == 0) { brebisGL.support[GL_ATI_fragment_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_map_object_buffer] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_ATI_map_object_buffer", extensionStrLength) == 0) { brebisGL.support[GL_ATI_map_object_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_meminfo] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_ATI_meminfo", extensionStrLength) == 0) { brebisGL.support[GL_ATI_meminfo] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_pixel_format_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_ATI_pixel_format_float", extensionStrLength) == 0) { brebisGL.support[GL_ATI_pixel_format_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_pn_triangles] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_ATI_pn_triangles", extensionStrLength) == 0) { brebisGL.support[GL_ATI_pn_triangles] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_separate_stencil] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_ATI_separate_stencil", extensionStrLength) == 0) { brebisGL.support[GL_ATI_separate_stencil] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_text_fragment_shader] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ATI_text_fragment_shader", extensionStrLength) == 0) { brebisGL.support[GL_ATI_text_fragment_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_texture_env_combine3] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_ATI_texture_env_combine3", extensionStrLength) == 0) { brebisGL.support[GL_ATI_texture_env_combine3] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_texture_float] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_ATI_texture_float", extensionStrLength) == 0) { brebisGL.support[GL_ATI_texture_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_texture_mirror_once] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ATI_texture_mirror_once", extensionStrLength) == 0) { brebisGL.support[GL_ATI_texture_mirror_once] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_vertex_array_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_ATI_vertex_array_object", extensionStrLength) == 0) { brebisGL.support[GL_ATI_vertex_array_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_vertex_attrib_array_object] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_ATI_vertex_attrib_array_object", extensionStrLength) == 0) { brebisGL.support[GL_ATI_vertex_attrib_array_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_ATI_vertex_streams] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_ATI_vertex_streams", extensionStrLength) == 0) { brebisGL.support[GL_ATI_vertex_streams] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXTX_framebuffer_mixed_formats] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXTX_framebuffer_mixed_formats", extensionStrLength) == 0) { brebisGL.support[GL_EXTX_framebuffer_mixed_formats] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_422_pixels] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_422_pixels", extensionStrLength) == 0) { brebisGL.support[GL_EXT_422_pixels] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_Cg_shader] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_Cg_shader", extensionStrLength) == 0) { brebisGL.support[GL_EXT_Cg_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_EGL_image_storage] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_EGL_image_storage", extensionStrLength) == 0) { brebisGL.support[GL_EXT_EGL_image_storage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_abgr] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_EXT_abgr", extensionStrLength) == 0) { brebisGL.support[GL_EXT_abgr] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_bgra] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_EXT_bgra", extensionStrLength) == 0) { brebisGL.support[GL_EXT_bgra] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_bindable_uniform] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_bindable_uniform", extensionStrLength) == 0) { brebisGL.support[GL_EXT_bindable_uniform] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_blend_color] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_blend_color", extensionStrLength) == 0) { brebisGL.support[GL_EXT_blend_color] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_blend_equation_separate] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_blend_equation_separate", extensionStrLength) == 0) { brebisGL.support[GL_EXT_blend_equation_separate] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_blend_func_separate] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_blend_func_separate", extensionStrLength) == 0) { brebisGL.support[GL_EXT_blend_func_separate] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_blend_logic_op] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_blend_logic_op", extensionStrLength) == 0) { brebisGL.support[GL_EXT_blend_logic_op] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_blend_minmax] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_blend_minmax", extensionStrLength) == 0) { brebisGL.support[GL_EXT_blend_minmax] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_blend_subtract] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_blend_subtract", extensionStrLength) == 0) { brebisGL.support[GL_EXT_blend_subtract] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_clip_volume_hint] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_clip_volume_hint", extensionStrLength) == 0) { brebisGL.support[GL_EXT_clip_volume_hint] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_cmyka] && (extensionStrLength == 12) && strncmp(extensionStr, "GL_EXT_cmyka", extensionStrLength) == 0) { brebisGL.support[GL_EXT_cmyka] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_color_subtable] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_color_subtable", extensionStrLength) == 0) { brebisGL.support[GL_EXT_color_subtable] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_compiled_vertex_array] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_EXT_compiled_vertex_array", extensionStrLength) == 0) { brebisGL.support[GL_EXT_compiled_vertex_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_convolution] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_convolution", extensionStrLength) == 0) { brebisGL.support[GL_EXT_convolution] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_coordinate_frame] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_coordinate_frame", extensionStrLength) == 0) { brebisGL.support[GL_EXT_coordinate_frame] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_copy_texture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_copy_texture", extensionStrLength) == 0) { brebisGL.support[GL_EXT_copy_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_cull_vertex] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_cull_vertex", extensionStrLength) == 0) { brebisGL.support[GL_EXT_cull_vertex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_debug_label] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_debug_label", extensionStrLength) == 0) { brebisGL.support[GL_EXT_debug_label] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_debug_marker] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_debug_marker", extensionStrLength) == 0) { brebisGL.support[GL_EXT_debug_marker] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_depth_bounds_test] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_depth_bounds_test", extensionStrLength) == 0) { brebisGL.support[GL_EXT_depth_bounds_test] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_direct_state_access] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_direct_state_access", extensionStrLength) == 0) { brebisGL.support[GL_EXT_direct_state_access] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_draw_buffers2] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_draw_buffers2", extensionStrLength) == 0) { brebisGL.support[GL_EXT_draw_buffers2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_draw_instanced] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_draw_instanced", extensionStrLength) == 0) { brebisGL.support[GL_EXT_draw_instanced] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_draw_range_elements] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_draw_range_elements", extensionStrLength) == 0) { brebisGL.support[GL_EXT_draw_range_elements] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_external_buffer] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_external_buffer", extensionStrLength) == 0) { brebisGL.support[GL_EXT_external_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_fog_coord] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_fog_coord", extensionStrLength) == 0) { brebisGL.support[GL_EXT_fog_coord] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_framebuffer_blit] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_framebuffer_blit", extensionStrLength) == 0) { brebisGL.support[GL_EXT_framebuffer_blit] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_framebuffer_multisample] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_framebuffer_multisample", extensionStrLength) == 0) { brebisGL.support[GL_EXT_framebuffer_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_framebuffer_multisample_blit_scaled] && (extensionStrLength == 42) && strncmp(extensionStr, "GL_EXT_framebuffer_multisample_blit_scaled", extensionStrLength) == 0) { brebisGL.support[GL_EXT_framebuffer_multisample_blit_scaled] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_framebuffer_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_framebuffer_object", extensionStrLength) == 0) { brebisGL.support[GL_EXT_framebuffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_framebuffer_sRGB] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_framebuffer_sRGB", extensionStrLength) == 0) { brebisGL.support[GL_EXT_framebuffer_sRGB] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_geometry_shader4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_geometry_shader4", extensionStrLength) == 0) { brebisGL.support[GL_EXT_geometry_shader4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_gpu_program_parameters] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_gpu_program_parameters", extensionStrLength) == 0) { brebisGL.support[GL_EXT_gpu_program_parameters] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_gpu_shader4] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_gpu_shader4", extensionStrLength) == 0) { brebisGL.support[GL_EXT_gpu_shader4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_histogram] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_histogram", extensionStrLength) == 0) { brebisGL.support[GL_EXT_histogram] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_import_sync_object] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_import_sync_object", extensionStrLength) == 0) { brebisGL.support[GL_EXT_import_sync_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_index_array_formats] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_index_array_formats", extensionStrLength) == 0) { brebisGL.support[GL_EXT_index_array_formats] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_index_func] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_index_func", extensionStrLength) == 0) { brebisGL.support[GL_EXT_index_func] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_index_material] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_index_material", extensionStrLength) == 0) { brebisGL.support[GL_EXT_index_material] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_index_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_index_texture", extensionStrLength) == 0) { brebisGL.support[GL_EXT_index_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_light_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_light_texture", extensionStrLength) == 0) { brebisGL.support[GL_EXT_light_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_memory_object] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_memory_object", extensionStrLength) == 0) { brebisGL.support[GL_EXT_memory_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_memory_object_fd] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_memory_object_fd", extensionStrLength) == 0) { brebisGL.support[GL_EXT_memory_object_fd] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_memory_object_win32] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_memory_object_win32", extensionStrLength) == 0) { brebisGL.support[GL_EXT_memory_object_win32] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_misc_attribute] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_misc_attribute", extensionStrLength) == 0) { brebisGL.support[GL_EXT_misc_attribute] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_multi_draw_arrays] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_multi_draw_arrays", extensionStrLength) == 0) { brebisGL.support[GL_EXT_multi_draw_arrays] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_multisample] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_multisample", extensionStrLength) == 0) { brebisGL.support[GL_EXT_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_packed_depth_stencil] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_packed_depth_stencil", extensionStrLength) == 0) { brebisGL.support[GL_EXT_packed_depth_stencil] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_packed_float] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_packed_float", extensionStrLength) == 0) { brebisGL.support[GL_EXT_packed_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_packed_pixels] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_packed_pixels", extensionStrLength) == 0) { brebisGL.support[GL_EXT_packed_pixels] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_paletted_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_paletted_texture", extensionStrLength) == 0) { brebisGL.support[GL_EXT_paletted_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_pixel_buffer_object] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_pixel_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_EXT_pixel_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_pixel_transform] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_pixel_transform", extensionStrLength) == 0) { brebisGL.support[GL_EXT_pixel_transform] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_pixel_transform_color_table] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_pixel_transform_color_table", extensionStrLength) == 0) { brebisGL.support[GL_EXT_pixel_transform_color_table] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_point_parameters] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_point_parameters", extensionStrLength) == 0) { brebisGL.support[GL_EXT_point_parameters] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_polygon_offset] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_polygon_offset", extensionStrLength) == 0) { brebisGL.support[GL_EXT_polygon_offset] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_polygon_offset_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_polygon_offset_clamp", extensionStrLength) == 0) { brebisGL.support[GL_EXT_polygon_offset_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_post_depth_coverage] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_post_depth_coverage", extensionStrLength) == 0) { brebisGL.support[GL_EXT_post_depth_coverage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_provoking_vertex] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_provoking_vertex", extensionStrLength) == 0) { brebisGL.support[GL_EXT_provoking_vertex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_raster_multisample] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_raster_multisample", extensionStrLength) == 0) { brebisGL.support[GL_EXT_raster_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_rescale_normal] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_rescale_normal", extensionStrLength) == 0) { brebisGL.support[GL_EXT_rescale_normal] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_secondary_color] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_secondary_color", extensionStrLength) == 0) { brebisGL.support[GL_EXT_secondary_color] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_semaphore] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_semaphore", extensionStrLength) == 0) { brebisGL.support[GL_EXT_semaphore] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_semaphore_fd] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_semaphore_fd", extensionStrLength) == 0) { brebisGL.support[GL_EXT_semaphore_fd] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_semaphore_win32] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_semaphore_win32", extensionStrLength) == 0) { brebisGL.support[GL_EXT_semaphore_win32] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_separate_shader_objects] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_separate_shader_objects", extensionStrLength) == 0) { brebisGL.support[GL_EXT_separate_shader_objects] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_separate_specular_color] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_separate_specular_color", extensionStrLength) == 0) { brebisGL.support[GL_EXT_separate_specular_color] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_framebuffer_fetch] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_shader_framebuffer_fetch", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_framebuffer_fetch] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_framebuffer_fetch_non_coherent] && (extensionStrLength == 44) && strncmp(extensionStr, "GL_EXT_shader_framebuffer_fetch_non_coherent", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_framebuffer_fetch_non_coherent] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_image_load_formatted] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_EXT_shader_image_load_formatted", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_image_load_formatted] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_image_load_store] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_shader_image_load_store", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_image_load_store] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shader_integer_mix] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_shader_integer_mix", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shader_integer_mix] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shadow_funcs] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_shadow_funcs", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shadow_funcs] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_shared_texture_palette] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_shared_texture_palette", extensionStrLength) == 0) { brebisGL.support[GL_EXT_shared_texture_palette] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_sparse_texture2] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_sparse_texture2", extensionStrLength) == 0) { brebisGL.support[GL_EXT_sparse_texture2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_stencil_clear_tag] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_stencil_clear_tag", extensionStrLength) == 0) { brebisGL.support[GL_EXT_stencil_clear_tag] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_stencil_two_side] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_stencil_two_side", extensionStrLength) == 0) { brebisGL.support[GL_EXT_stencil_two_side] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_stencil_wrap] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_stencil_wrap", extensionStrLength) == 0) { brebisGL.support[GL_EXT_stencil_wrap] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_subtexture] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_EXT_subtexture", extensionStrLength) == 0) { brebisGL.support[GL_EXT_subtexture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_EXT_texture", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture3D] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_EXT_texture3D", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture3D] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_array] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_texture_array", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_buffer_object] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_EXT_texture_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_compression_dxt1] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_dxt1", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_compression_dxt1] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_compression_latc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_latc", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_compression_latc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_compression_rgtc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_rgtc", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_compression_rgtc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_compression_s3tc] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_EXT_texture_compression_s3tc", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_compression_s3tc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_cube_map] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_cube_map", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_cube_map] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_edge_clamp] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_texture_edge_clamp", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_edge_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_env_add] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_env_add", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_env_add] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_env_combine] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_texture_env_combine", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_env_combine] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_env_dot3] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_env_dot3", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_env_dot3] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_filter_anisotropic] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_EXT_texture_filter_anisotropic", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_filter_anisotropic] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_filter_minmax] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_EXT_texture_filter_minmax", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_filter_minmax] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_integer] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_integer", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_integer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_lod] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_texture_lod", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_lod] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_lod_bias] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_texture_lod_bias", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_lod_bias] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_mirror_clamp] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_EXT_texture_mirror_clamp", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_mirror_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_object] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_EXT_texture_object", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_perturb_normal] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_EXT_texture_perturb_normal", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_perturb_normal] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_sRGB] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_texture_sRGB", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_sRGB] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_sRGB_decode] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_texture_sRGB_decode", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_sRGB_decode] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_shared_exponent] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_EXT_texture_shared_exponent", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_shared_exponent] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_snorm] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_texture_snorm", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_snorm] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_storage] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_storage", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_storage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_texture_swizzle] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_texture_swizzle", extensionStrLength) == 0) { brebisGL.support[GL_EXT_texture_swizzle] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_timer_query] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_EXT_timer_query", extensionStrLength) == 0) { brebisGL.support[GL_EXT_timer_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_transform_feedback] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_EXT_transform_feedback", extensionStrLength) == 0) { brebisGL.support[GL_EXT_transform_feedback] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_vertex_array] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_EXT_vertex_array", extensionStrLength) == 0) { brebisGL.support[GL_EXT_vertex_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_vertex_array_bgra] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_vertex_array_bgra", extensionStrLength) == 0) { brebisGL.support[GL_EXT_vertex_array_bgra] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_vertex_attrib_64bit] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_EXT_vertex_attrib_64bit", extensionStrLength) == 0) { brebisGL.support[GL_EXT_vertex_attrib_64bit] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_vertex_shader] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_EXT_vertex_shader", extensionStrLength) == 0) { brebisGL.support[GL_EXT_vertex_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_vertex_weighting] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_EXT_vertex_weighting", extensionStrLength) == 0) { brebisGL.support[GL_EXT_vertex_weighting] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_win32_keyed_mutex] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_win32_keyed_mutex", extensionStrLength) == 0) { brebisGL.support[GL_EXT_win32_keyed_mutex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_window_rectangles] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_EXT_window_rectangles", extensionStrLength) == 0) { brebisGL.support[GL_EXT_window_rectangles] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_EXT_x11_sync_object] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_EXT_x11_sync_object", extensionStrLength) == 0) { brebisGL.support[GL_EXT_x11_sync_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_GREMEDY_frame_terminator] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_GREMEDY_frame_terminator", extensionStrLength) == 0) { brebisGL.support[GL_GREMEDY_frame_terminator] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_GREMEDY_string_marker] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_GREMEDY_string_marker", extensionStrLength) == 0) { brebisGL.support[GL_GREMEDY_string_marker] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_HP_convolution_border_modes] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_HP_convolution_border_modes", extensionStrLength) == 0) { brebisGL.support[GL_HP_convolution_border_modes] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_HP_image_transform] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_HP_image_transform", extensionStrLength) == 0) { brebisGL.support[GL_HP_image_transform] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_HP_occlusion_test] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_HP_occlusion_test", extensionStrLength) == 0) { brebisGL.support[GL_HP_occlusion_test] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_HP_texture_lighting] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_HP_texture_lighting", extensionStrLength) == 0) { brebisGL.support[GL_HP_texture_lighting] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IBM_cull_vertex] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_IBM_cull_vertex", extensionStrLength) == 0) { brebisGL.support[GL_IBM_cull_vertex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IBM_multimode_draw_arrays] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_IBM_multimode_draw_arrays", extensionStrLength) == 0) { brebisGL.support[GL_IBM_multimode_draw_arrays] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IBM_rasterpos_clip] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_IBM_rasterpos_clip", extensionStrLength) == 0) { brebisGL.support[GL_IBM_rasterpos_clip] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IBM_static_data] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_IBM_static_data", extensionStrLength) == 0) { brebisGL.support[GL_IBM_static_data] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IBM_texture_mirrored_repeat] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_IBM_texture_mirrored_repeat", extensionStrLength) == 0) { brebisGL.support[GL_IBM_texture_mirrored_repeat] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_IBM_vertex_array_lists] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_IBM_vertex_array_lists", extensionStrLength) == 0) { brebisGL.support[GL_IBM_vertex_array_lists] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INGR_blend_func_separate] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_INGR_blend_func_separate", extensionStrLength) == 0) { brebisGL.support[GL_INGR_blend_func_separate] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INGR_color_clamp] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_INGR_color_clamp", extensionStrLength) == 0) { brebisGL.support[GL_INGR_color_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INGR_interlace_read] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_INGR_interlace_read", extensionStrLength) == 0) { brebisGL.support[GL_INGR_interlace_read] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INTEL_blackhole_render] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_INTEL_blackhole_render", extensionStrLength) == 0) { brebisGL.support[GL_INTEL_blackhole_render] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INTEL_conservative_rasterization] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_INTEL_conservative_rasterization", extensionStrLength) == 0) { brebisGL.support[GL_INTEL_conservative_rasterization] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INTEL_fragment_shader_ordering] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_INTEL_fragment_shader_ordering", extensionStrLength) == 0) { brebisGL.support[GL_INTEL_fragment_shader_ordering] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INTEL_framebuffer_CMAA] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_INTEL_framebuffer_CMAA", extensionStrLength) == 0) { brebisGL.support[GL_INTEL_framebuffer_CMAA] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INTEL_map_texture] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_INTEL_map_texture", extensionStrLength) == 0) { brebisGL.support[GL_INTEL_map_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INTEL_parallel_arrays] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_INTEL_parallel_arrays", extensionStrLength) == 0) { brebisGL.support[GL_INTEL_parallel_arrays] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_INTEL_performance_query] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_INTEL_performance_query", extensionStrLength) == 0) { brebisGL.support[GL_INTEL_performance_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_blend_equation_advanced] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_KHR_blend_equation_advanced", extensionStrLength) == 0) { brebisGL.support[GL_KHR_blend_equation_advanced] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_blend_equation_advanced_coherent] && (extensionStrLength == 39) && strncmp(extensionStr, "GL_KHR_blend_equation_advanced_coherent", extensionStrLength) == 0) { brebisGL.support[GL_KHR_blend_equation_advanced_coherent] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_context_flush_control] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_KHR_context_flush_control", extensionStrLength) == 0) { brebisGL.support[GL_KHR_context_flush_control] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_debug] && (extensionStrLength == 12) && strncmp(extensionStr, "GL_KHR_debug", extensionStrLength) == 0) { brebisGL.support[GL_KHR_debug] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_no_error] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_KHR_no_error", extensionStrLength) == 0) { brebisGL.support[GL_KHR_no_error] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_parallel_shader_compile] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_KHR_parallel_shader_compile", extensionStrLength) == 0) { brebisGL.support[GL_KHR_parallel_shader_compile] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_robust_buffer_access_behavior] && (extensionStrLength == 36) && strncmp(extensionStr, "GL_KHR_robust_buffer_access_behavior", extensionStrLength) == 0) { brebisGL.support[GL_KHR_robust_buffer_access_behavior] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_robustness] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_KHR_robustness", extensionStrLength) == 0) { brebisGL.support[GL_KHR_robustness] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_texture_compression_astc_hdr] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_KHR_texture_compression_astc_hdr", extensionStrLength) == 0) { brebisGL.support[GL_KHR_texture_compression_astc_hdr] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_texture_compression_astc_ldr] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_KHR_texture_compression_astc_ldr", extensionStrLength) == 0) { brebisGL.support[GL_KHR_texture_compression_astc_ldr] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KHR_texture_compression_astc_sliced_3d] && (extensionStrLength == 41) && strncmp(extensionStr, "GL_KHR_texture_compression_astc_sliced_3d", extensionStrLength) == 0) { brebisGL.support[GL_KHR_texture_compression_astc_sliced_3d] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_KTX_buffer_region] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_KTX_buffer_region", extensionStrLength) == 0) { brebisGL.support[GL_KTX_buffer_region] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESAX_texture_stack] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_MESAX_texture_stack", extensionStrLength) == 0) { brebisGL.support[GL_MESAX_texture_stack] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_pack_invert] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_MESA_pack_invert", extensionStrLength) == 0) { brebisGL.support[GL_MESA_pack_invert] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_program_binary_formats] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_MESA_program_binary_formats", extensionStrLength) == 0) { brebisGL.support[GL_MESA_program_binary_formats] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_resize_buffers] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_MESA_resize_buffers", extensionStrLength) == 0) { brebisGL.support[GL_MESA_resize_buffers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_shader_integer_functions] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_MESA_shader_integer_functions", extensionStrLength) == 0) { brebisGL.support[GL_MESA_shader_integer_functions] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_tile_raster_order] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_MESA_tile_raster_order", extensionStrLength) == 0) { brebisGL.support[GL_MESA_tile_raster_order] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_window_pos] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_MESA_window_pos", extensionStrLength) == 0) { brebisGL.support[GL_MESA_window_pos] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_MESA_ycbcr_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_MESA_ycbcr_texture", extensionStrLength) == 0) { brebisGL.support[GL_MESA_ycbcr_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] && (extensionStrLength == 49) && strncmp(extensionStr, "GL_NVX_blend_equation_advanced_multi_draw_buffers", extensionStrLength) == 0) { brebisGL.support[GL_NVX_blend_equation_advanced_multi_draw_buffers] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NVX_conditional_render] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NVX_conditional_render", extensionStrLength) == 0) { brebisGL.support[GL_NVX_conditional_render] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NVX_gpu_memory_info] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NVX_gpu_memory_info", extensionStrLength) == 0) { brebisGL.support[GL_NVX_gpu_memory_info] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NVX_linked_gpu_multicast] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NVX_linked_gpu_multicast", extensionStrLength) == 0) { brebisGL.support[GL_NVX_linked_gpu_multicast] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_ES1_1_compatibility] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_ES1_1_compatibility", extensionStrLength) == 0) { brebisGL.support[GL_NV_ES1_1_compatibility] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_ES3_1_compatibility] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_ES3_1_compatibility", extensionStrLength) == 0) { brebisGL.support[GL_NV_ES3_1_compatibility] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_alpha_to_coverage_dither_control] && (extensionStrLength == 38) && strncmp(extensionStr, "GL_NV_alpha_to_coverage_dither_control", extensionStrLength) == 0) { brebisGL.support[GL_NV_alpha_to_coverage_dither_control] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_bindless_multi_draw_indirect] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_bindless_multi_draw_indirect", extensionStrLength) == 0) { brebisGL.support[GL_NV_bindless_multi_draw_indirect] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_bindless_multi_draw_indirect_count] && (extensionStrLength == 40) && strncmp(extensionStr, "GL_NV_bindless_multi_draw_indirect_count", extensionStrLength) == 0) { brebisGL.support[GL_NV_bindless_multi_draw_indirect_count] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_bindless_texture] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_bindless_texture", extensionStrLength) == 0) { brebisGL.support[GL_NV_bindless_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_blend_equation_advanced] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_blend_equation_advanced", extensionStrLength) == 0) { brebisGL.support[GL_NV_blend_equation_advanced] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_blend_equation_advanced_coherent] && (extensionStrLength == 38) && strncmp(extensionStr, "GL_NV_blend_equation_advanced_coherent", extensionStrLength) == 0) { brebisGL.support[GL_NV_blend_equation_advanced_coherent] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_blend_minmax_factor] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_blend_minmax_factor", extensionStrLength) == 0) { brebisGL.support[GL_NV_blend_minmax_factor] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_blend_square] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_blend_square", extensionStrLength) == 0) { brebisGL.support[GL_NV_blend_square] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_clip_space_w_scaling] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_clip_space_w_scaling", extensionStrLength) == 0) { brebisGL.support[GL_NV_clip_space_w_scaling] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_command_list] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_command_list", extensionStrLength) == 0) { brebisGL.support[GL_NV_command_list] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_compute_program5] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_compute_program5", extensionStrLength) == 0) { brebisGL.support[GL_NV_compute_program5] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_compute_shader_derivatives] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_compute_shader_derivatives", extensionStrLength) == 0) { brebisGL.support[GL_NV_compute_shader_derivatives] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_conditional_render] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_conditional_render", extensionStrLength) == 0) { brebisGL.support[GL_NV_conditional_render] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_conservative_raster] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_conservative_raster", extensionStrLength) == 0) { brebisGL.support[GL_NV_conservative_raster] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_conservative_raster_dilate] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_conservative_raster_dilate", extensionStrLength) == 0) { brebisGL.support[GL_NV_conservative_raster_dilate] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_conservative_raster_pre_snap] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_conservative_raster_pre_snap", extensionStrLength) == 0) { brebisGL.support[GL_NV_conservative_raster_pre_snap] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_conservative_raster_pre_snap_triangles] && (extensionStrLength == 44) && strncmp(extensionStr, "GL_NV_conservative_raster_pre_snap_triangles", extensionStrLength) == 0) { brebisGL.support[GL_NV_conservative_raster_pre_snap_triangles] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_conservative_raster_underestimation] && (extensionStrLength == 41) && strncmp(extensionStr, "GL_NV_conservative_raster_underestimation", extensionStrLength) == 0) { brebisGL.support[GL_NV_conservative_raster_underestimation] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_copy_depth_to_color] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_copy_depth_to_color", extensionStrLength) == 0) { brebisGL.support[GL_NV_copy_depth_to_color] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_copy_image] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_copy_image", extensionStrLength) == 0) { brebisGL.support[GL_NV_copy_image] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_deep_texture3D] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_deep_texture3D", extensionStrLength) == 0) { brebisGL.support[GL_NV_deep_texture3D] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_depth_buffer_float] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_depth_buffer_float", extensionStrLength) == 0) { brebisGL.support[GL_NV_depth_buffer_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_depth_clamp] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_depth_clamp", extensionStrLength) == 0) { brebisGL.support[GL_NV_depth_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_draw_texture] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_draw_texture", extensionStrLength) == 0) { brebisGL.support[GL_NV_draw_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_draw_vulkan_image] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_draw_vulkan_image", extensionStrLength) == 0) { brebisGL.support[GL_NV_draw_vulkan_image] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_evaluators] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_evaluators", extensionStrLength) == 0) { brebisGL.support[GL_NV_evaluators] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_explicit_multisample] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_explicit_multisample", extensionStrLength) == 0) { brebisGL.support[GL_NV_explicit_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fence] && (extensionStrLength == 11) && strncmp(extensionStr, "GL_NV_fence", extensionStrLength) == 0) { brebisGL.support[GL_NV_fence] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fill_rectangle] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_fill_rectangle", extensionStrLength) == 0) { brebisGL.support[GL_NV_fill_rectangle] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_float_buffer] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_float_buffer", extensionStrLength) == 0) { brebisGL.support[GL_NV_float_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fog_distance] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_fog_distance", extensionStrLength) == 0) { brebisGL.support[GL_NV_fog_distance] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fragment_coverage_to_color] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_fragment_coverage_to_color", extensionStrLength) == 0) { brebisGL.support[GL_NV_fragment_coverage_to_color] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fragment_program] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_fragment_program", extensionStrLength) == 0) { brebisGL.support[GL_NV_fragment_program] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fragment_program2] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_fragment_program2", extensionStrLength) == 0) { brebisGL.support[GL_NV_fragment_program2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fragment_program4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_fragment_program4", extensionStrLength) == 0) { brebisGL.support[GL_NV_fragment_program4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fragment_program_option] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_fragment_program_option", extensionStrLength) == 0) { brebisGL.support[GL_NV_fragment_program_option] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fragment_shader_barycentric] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_fragment_shader_barycentric", extensionStrLength) == 0) { brebisGL.support[GL_NV_fragment_shader_barycentric] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_fragment_shader_interlock] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_fragment_shader_interlock", extensionStrLength) == 0) { brebisGL.support[GL_NV_fragment_shader_interlock] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_framebuffer_mixed_samples] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_framebuffer_mixed_samples", extensionStrLength) == 0) { brebisGL.support[GL_NV_framebuffer_mixed_samples] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_framebuffer_multisample_coverage] && (extensionStrLength == 38) && strncmp(extensionStr, "GL_NV_framebuffer_multisample_coverage", extensionStrLength) == 0) { brebisGL.support[GL_NV_framebuffer_multisample_coverage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_geometry_program4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_geometry_program4", extensionStrLength) == 0) { brebisGL.support[GL_NV_geometry_program4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_geometry_shader4] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_geometry_shader4", extensionStrLength) == 0) { brebisGL.support[GL_NV_geometry_shader4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_geometry_shader_passthrough] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_geometry_shader_passthrough", extensionStrLength) == 0) { brebisGL.support[GL_NV_geometry_shader_passthrough] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_gpu_multicast] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_gpu_multicast", extensionStrLength) == 0) { brebisGL.support[GL_NV_gpu_multicast] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_gpu_program4] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_gpu_program4", extensionStrLength) == 0) { brebisGL.support[GL_NV_gpu_program4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_gpu_program5] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_gpu_program5", extensionStrLength) == 0) { brebisGL.support[GL_NV_gpu_program5] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_gpu_program5_mem_extended] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_gpu_program5_mem_extended", extensionStrLength) == 0) { brebisGL.support[GL_NV_gpu_program5_mem_extended] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_gpu_shader5] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_gpu_shader5", extensionStrLength) == 0) { brebisGL.support[GL_NV_gpu_shader5] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_half_float] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_NV_half_float", extensionStrLength) == 0) { brebisGL.support[GL_NV_half_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_internalformat_sample_query] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_internalformat_sample_query", extensionStrLength) == 0) { brebisGL.support[GL_NV_internalformat_sample_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_light_max_exponent] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_light_max_exponent", extensionStrLength) == 0) { brebisGL.support[GL_NV_light_max_exponent] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_memory_attachment] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_memory_attachment", extensionStrLength) == 0) { brebisGL.support[GL_NV_memory_attachment] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_mesh_shader] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_NV_mesh_shader", extensionStrLength) == 0) { brebisGL.support[GL_NV_mesh_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_multisample_coverage] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_multisample_coverage", extensionStrLength) == 0) { brebisGL.support[GL_NV_multisample_coverage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_multisample_filter_hint] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_multisample_filter_hint", extensionStrLength) == 0) { brebisGL.support[GL_NV_multisample_filter_hint] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_occlusion_query] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_occlusion_query", extensionStrLength) == 0) { brebisGL.support[GL_NV_occlusion_query] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_packed_depth_stencil] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_packed_depth_stencil", extensionStrLength) == 0) { brebisGL.support[GL_NV_packed_depth_stencil] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_parameter_buffer_object] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_parameter_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_NV_parameter_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_parameter_buffer_object2] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_NV_parameter_buffer_object2", extensionStrLength) == 0) { brebisGL.support[GL_NV_parameter_buffer_object2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_path_rendering] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_path_rendering", extensionStrLength) == 0) { brebisGL.support[GL_NV_path_rendering] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_path_rendering_shared_edge] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_NV_path_rendering_shared_edge", extensionStrLength) == 0) { brebisGL.support[GL_NV_path_rendering_shared_edge] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_pixel_data_range] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_pixel_data_range", extensionStrLength) == 0) { brebisGL.support[GL_NV_pixel_data_range] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_point_sprite] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_NV_point_sprite", extensionStrLength) == 0) { brebisGL.support[GL_NV_point_sprite] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_present_video] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_present_video", extensionStrLength) == 0) { brebisGL.support[GL_NV_present_video] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_primitive_restart] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_primitive_restart", extensionStrLength) == 0) { brebisGL.support[GL_NV_primitive_restart] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_query_resource] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_query_resource", extensionStrLength) == 0) { brebisGL.support[GL_NV_query_resource] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_query_resource_tag] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_query_resource_tag", extensionStrLength) == 0) { brebisGL.support[GL_NV_query_resource_tag] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_register_combiners] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_register_combiners", extensionStrLength) == 0) { brebisGL.support[GL_NV_register_combiners] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_register_combiners2] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_register_combiners2", extensionStrLength) == 0) { brebisGL.support[GL_NV_register_combiners2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_representative_fragment_test] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_representative_fragment_test", extensionStrLength) == 0) { brebisGL.support[GL_NV_representative_fragment_test] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_robustness_video_memory_purge] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_NV_robustness_video_memory_purge", extensionStrLength) == 0) { brebisGL.support[GL_NV_robustness_video_memory_purge] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_sample_locations] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_sample_locations", extensionStrLength) == 0) { brebisGL.support[GL_NV_sample_locations] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_sample_mask_override_coverage] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_NV_sample_mask_override_coverage", extensionStrLength) == 0) { brebisGL.support[GL_NV_sample_mask_override_coverage] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_scissor_exclusive] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_scissor_exclusive", extensionStrLength) == 0) { brebisGL.support[GL_NV_scissor_exclusive] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_atomic_counters] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_NV_shader_atomic_counters", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_atomic_counters] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_atomic_float] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_atomic_float", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_atomic_float] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_atomic_float64] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_shader_atomic_float64", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_atomic_float64] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_atomic_fp16_vector] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_NV_shader_atomic_fp16_vector", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_atomic_fp16_vector] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_atomic_int64] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_atomic_int64", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_atomic_int64] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_buffer_load] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_shader_buffer_load", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_buffer_load] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_buffer_store] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_buffer_store", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_buffer_store] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_storage_buffer_object] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_shader_storage_buffer_object", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_storage_buffer_object] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_texture_footprint] && (extensionStrLength == 30) && strncmp(extensionStr, "GL_NV_shader_texture_footprint", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_texture_footprint] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_thread_group] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_shader_thread_group", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_thread_group] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shader_thread_shuffle] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_shader_thread_shuffle", extensionStrLength) == 0) { brebisGL.support[GL_NV_shader_thread_shuffle] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_shading_rate_image] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_shading_rate_image", extensionStrLength) == 0) { brebisGL.support[GL_NV_shading_rate_image] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_stereo_view_rendering] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_stereo_view_rendering", extensionStrLength) == 0) { brebisGL.support[GL_NV_stereo_view_rendering] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_tessellation_program5] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_tessellation_program5", extensionStrLength) == 0) { brebisGL.support[GL_NV_tessellation_program5] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texgen_emboss] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_texgen_emboss", extensionStrLength) == 0) { brebisGL.support[GL_NV_texgen_emboss] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texgen_reflection] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_texgen_reflection", extensionStrLength) == 0) { brebisGL.support[GL_NV_texgen_reflection] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_barrier] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_texture_barrier", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_barrier] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_compression_vtc] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_NV_texture_compression_vtc", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_compression_vtc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_env_combine4] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_NV_texture_env_combine4", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_env_combine4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_expand_normal] && (extensionStrLength == 27) && strncmp(extensionStr, "GL_NV_texture_expand_normal", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_expand_normal] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_multisample] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_texture_multisample", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_rectangle] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_texture_rectangle", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_rectangle] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_rectangle_compressed] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_texture_rectangle_compressed", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_rectangle_compressed] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_shader] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_texture_shader", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_shader] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_shader2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_texture_shader2", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_shader2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_texture_shader3] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_texture_shader3", extensionStrLength) == 0) { brebisGL.support[GL_NV_texture_shader3] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_transform_feedback] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_transform_feedback", extensionStrLength) == 0) { brebisGL.support[GL_NV_transform_feedback] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_transform_feedback2] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_transform_feedback2", extensionStrLength) == 0) { brebisGL.support[GL_NV_transform_feedback2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_uniform_buffer_unified_memory] && (extensionStrLength == 35) && strncmp(extensionStr, "GL_NV_uniform_buffer_unified_memory", extensionStrLength) == 0) { brebisGL.support[GL_NV_uniform_buffer_unified_memory] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vdpau_interop] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_vdpau_interop", extensionStrLength) == 0) { brebisGL.support[GL_NV_vdpau_interop] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_array_range] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_NV_vertex_array_range", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_array_range] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_array_range2] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_NV_vertex_array_range2", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_array_range2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_attrib_integer_64bit] && (extensionStrLength == 33) && strncmp(extensionStr, "GL_NV_vertex_attrib_integer_64bit", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_attrib_integer_64bit] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_buffer_unified_memory] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_NV_vertex_buffer_unified_memory", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_buffer_unified_memory] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_program] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_NV_vertex_program", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_program] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_program1_1] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_NV_vertex_program1_1", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_program1_1] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_program2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_vertex_program2", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_program2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_program2_option] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_NV_vertex_program2_option", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_program2_option] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_program3] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_vertex_program3", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_program3] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_vertex_program4] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_vertex_program4", extensionStrLength) == 0) { brebisGL.support[GL_NV_vertex_program4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_video_capture] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_NV_video_capture", extensionStrLength) == 0) { brebisGL.support[GL_NV_video_capture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_viewport_array2] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_NV_viewport_array2", extensionStrLength) == 0) { brebisGL.support[GL_NV_viewport_array2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_NV_viewport_swizzle] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_NV_viewport_swizzle", extensionStrLength) == 0) { brebisGL.support[GL_NV_viewport_swizzle] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_byte_coordinates] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_byte_coordinates", extensionStrLength) == 0) { brebisGL.support[GL_OES_byte_coordinates] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_compressed_paletted_texture] && (extensionStrLength == 34) && strncmp(extensionStr, "GL_OES_compressed_paletted_texture", extensionStrLength) == 0) { brebisGL.support[GL_OES_compressed_paletted_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_fixed_point] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_fixed_point", extensionStrLength) == 0) { brebisGL.support[GL_OES_fixed_point] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_query_matrix] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_OES_query_matrix", extensionStrLength) == 0) { brebisGL.support[GL_OES_query_matrix] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_read_format] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_OES_read_format", extensionStrLength) == 0) { brebisGL.support[GL_OES_read_format] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OES_single_precision] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_OES_single_precision", extensionStrLength) == 0) { brebisGL.support[GL_OES_single_precision] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OML_interlace] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OML_interlace", extensionStrLength) == 0) { brebisGL.support[GL_OML_interlace] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OML_resample] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_OML_resample", extensionStrLength) == 0) { brebisGL.support[GL_OML_resample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OML_subsample] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OML_subsample", extensionStrLength) == 0) { brebisGL.support[GL_OML_subsample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OVR_multiview] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_OVR_multiview", extensionStrLength) == 0) { brebisGL.support[GL_OVR_multiview] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_OVR_multiview2] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_OVR_multiview2", extensionStrLength) == 0) { brebisGL.support[GL_OVR_multiview2] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_PGI_misc_hints] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_PGI_misc_hints", extensionStrLength) == 0) { brebisGL.support[GL_PGI_misc_hints] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_PGI_vertex_hints] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_PGI_vertex_hints", extensionStrLength) == 0) { brebisGL.support[GL_PGI_vertex_hints] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_REND_screen_coordinates] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_REND_screen_coordinates", extensionStrLength) == 0) { brebisGL.support[GL_REND_screen_coordinates] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_S3_s3tc] && (extensionStrLength == 10) && strncmp(extensionStr, "GL_S3_s3tc", extensionStrLength) == 0) { brebisGL.support[GL_S3_s3tc] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_detail_texture] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIS_detail_texture", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_detail_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_fog_function] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_SGIS_fog_function", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_fog_function] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_generate_mipmap] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIS_generate_mipmap", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_generate_mipmap] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_multisample] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIS_multisample", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_multisample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_pixel_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIS_pixel_texture", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_pixel_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_point_line_texgen] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_SGIS_point_line_texgen", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_point_line_texgen] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_point_parameters] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_SGIS_point_parameters", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_point_parameters] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_sharpen_texture] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIS_sharpen_texture", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_sharpen_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_texture4D] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIS_texture4D", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_texture4D] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_texture_border_clamp] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_SGIS_texture_border_clamp", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_texture_border_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_texture_color_mask] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIS_texture_color_mask", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_texture_color_mask] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_texture_edge_clamp] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIS_texture_edge_clamp", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_texture_edge_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_texture_filter4] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIS_texture_filter4", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_texture_filter4] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_texture_lod] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIS_texture_lod", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_texture_lod] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIS_texture_select] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIS_texture_select", extensionStrLength) == 0) { brebisGL.support[GL_SGIS_texture_select] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_async] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_SGIX_async", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_async] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_async_histogram] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_async_histogram", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_async_histogram] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_async_pixel] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIX_async_pixel", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_async_pixel] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_blend_alpha_minmax] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIX_blend_alpha_minmax", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_blend_alpha_minmax] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_calligraphic_fragment] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_SGIX_calligraphic_fragment", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_calligraphic_fragment] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_clipmap] && (extensionStrLength == 15) && strncmp(extensionStr, "GL_SGIX_clipmap", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_clipmap] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_convolution_accuracy] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_SGIX_convolution_accuracy", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_convolution_accuracy] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_depth_pass_instrument] && (extensionStrLength == 29) && strncmp(extensionStr, "GL_SGIX_depth_pass_instrument", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_depth_pass_instrument] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_depth_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIX_depth_texture", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_depth_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_flush_raster] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_SGIX_flush_raster", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_flush_raster] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_fog_offset] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_SGIX_fog_offset", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_fog_offset] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_fragment_lighting] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_SGIX_fragment_lighting", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_fragment_lighting] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_framezoom] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIX_framezoom", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_framezoom] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_igloo_interface] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_igloo_interface", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_igloo_interface] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_instruments] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIX_instruments", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_instruments] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_interlace] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIX_interlace", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_interlace] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_ir_instrument1] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_ir_instrument1", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_ir_instrument1] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_list_priority] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIX_list_priority", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_list_priority] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_pixel_texture] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SGIX_pixel_texture", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_pixel_texture] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_pixel_tiles] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGIX_pixel_tiles", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_pixel_tiles] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_polynomial_ffd] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_polynomial_ffd", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_polynomial_ffd] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_reference_plane] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_reference_plane", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_reference_plane] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_resample] && (extensionStrLength == 16) && strncmp(extensionStr, "GL_SGIX_resample", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_resample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_scalebias_hint] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_scalebias_hint", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_scalebias_hint] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_shadow] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_SGIX_shadow", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_shadow] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_shadow_ambient] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_shadow_ambient", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_shadow_ambient] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_sprite] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_SGIX_sprite", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_sprite] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_subsample] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SGIX_subsample", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_subsample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_tag_sample_buffer] && (extensionStrLength == 25) && strncmp(extensionStr, "GL_SGIX_tag_sample_buffer", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_tag_sample_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_texture_add_env] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_texture_add_env", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_texture_add_env] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_texture_coordinate_clamp] && (extensionStrLength == 32) && strncmp(extensionStr, "GL_SGIX_texture_coordinate_clamp", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_texture_coordinate_clamp] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_texture_lod_bias] && (extensionStrLength == 24) && strncmp(extensionStr, "GL_SGIX_texture_lod_bias", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_texture_lod_bias] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_texture_multi_buffer] && (extensionStrLength == 28) && strncmp(extensionStr, "GL_SGIX_texture_multi_buffer", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_texture_multi_buffer] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_texture_scale_bias] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGIX_texture_scale_bias", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_texture_scale_bias] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_vertex_preclip] && (extensionStrLength == 22) && strncmp(extensionStr, "GL_SGIX_vertex_preclip", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_vertex_preclip] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_ycrcb] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_SGIX_ycrcb", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_ycrcb] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_ycrcb_subsample] && (extensionStrLength == 23) && strncmp(extensionStr, "GL_SGIX_ycrcb_subsample", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_ycrcb_subsample] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGIX_ycrcba] && (extensionStrLength == 14) && strncmp(extensionStr, "GL_SGIX_ycrcba", extensionStrLength) == 0) { brebisGL.support[GL_SGIX_ycrcba] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGI_color_matrix] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SGI_color_matrix", extensionStrLength) == 0) { brebisGL.support[GL_SGI_color_matrix] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGI_color_table] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_SGI_color_table", extensionStrLength) == 0) { brebisGL.support[GL_SGI_color_table] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SGI_texture_color_table] && (extensionStrLength == 26) && strncmp(extensionStr, "GL_SGI_texture_color_table", extensionStrLength) == 0) { brebisGL.support[GL_SGI_texture_color_table] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SUNX_constant_data] && (extensionStrLength == 21) && strncmp(extensionStr, "GL_SUNX_constant_data", extensionStrLength) == 0) { brebisGL.support[GL_SUNX_constant_data] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SUN_convolution_border_modes] && (extensionStrLength == 31) && strncmp(extensionStr, "GL_SUN_convolution_border_modes", extensionStrLength) == 0) { brebisGL.support[GL_SUN_convolution_border_modes] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SUN_global_alpha] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_SUN_global_alpha", extensionStrLength) == 0) { brebisGL.support[GL_SUN_global_alpha] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SUN_mesh_array] && (extensionStrLength == 17) && strncmp(extensionStr, "GL_SUN_mesh_array", extensionStrLength) == 0) { brebisGL.support[GL_SUN_mesh_array] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SUN_slice_accum] && (extensionStrLength == 18) && strncmp(extensionStr, "GL_SUN_slice_accum", extensionStrLength) == 0) { brebisGL.support[GL_SUN_slice_accum] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SUN_triangle_list] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_SUN_triangle_list", extensionStrLength) == 0) { brebisGL.support[GL_SUN_triangle_list] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_SUN_vertex] && (extensionStrLength == 13) && strncmp(extensionStr, "GL_SUN_vertex", extensionStrLength) == 0) { brebisGL.support[GL_SUN_vertex] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_WIN_phong_shading] && (extensionStrLength == 20) && strncmp(extensionStr, "GL_WIN_phong_shading", extensionStrLength) == 0) { brebisGL.support[GL_WIN_phong_shading] = KHRONOS_TRUE; return; }
        if (!brebisGL.support[GL_WIN_specular_fog] && (extensionStrLength == 19) && strncmp(extensionStr, "GL_WIN_specular_fog", extensionStrLength) == 0) { brebisGL.support[GL_WIN_specular_fog] = KHRONOS_TRUE; return; }

    }
#if !defined(NDEBUG)
    fprintf(stderr, "brebisGLInit() : Found unwrangled extension: %.*s\n", (int)extensionStrLength, extensionStr);
#endif
}

khronos_int8_t brebisGLInit(void) {
    khronos_int8_t  isGLES = KHRONOS_FALSE;
    const char*     version = NULL;
    khronos_int32_t versionMajor = -1;
    khronos_int32_t versionMinor = -1;

#if !defined(NDEBUG)
    clock_t start = clock();
#endif

#if !defined(__EMSCRIPTEN__)
    if (s_brebisGLLib == NULL)
    {
#if defined(_WIN32)
    #if !defined(IS_UWP)
        s_brebisGLLib = LoadLibraryA(TEXT("opengl32.dll"));
    #endif
#else
        s_brebisGLLib = dlopen("libGL.so.1", RTLD_LAZY | RTLD_GLOBAL);
        if (s_brebisGLLib == NULL) s_brebisGLLib = dlopen("libGLESv3.so", RTLD_LAZY | RTLD_GLOBAL);
        if (s_brebisGLLib == NULL) s_brebisGLLib = dlopen("libGLESv2.so", RTLD_LAZY | RTLD_GLOBAL);
        if (s_brebisGLLib == NULL) s_brebisGLLib = dlopen(0, RTLD_LAZY | RTLD_GLOBAL);
#endif
    }
#endif

    memset(&brebisGL, 0, sizeof(BrebisGLConfig));

    brebisGL.brebisAccum = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glAccum");
    brebisGL.brebisAccumxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glAccumxOES");
    brebisGL.brebisAcquireKeyedMutexWin32EXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLuint64, GLuint))brebisGLGetProcAddress("glAcquireKeyedMutexWin32EXT");
    brebisGL.brebisActiveProgramEXT = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glActiveProgramEXT");
    brebisGL.brebisActiveShaderProgram = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glActiveShaderProgram");
    brebisGL.brebisActiveShaderProgramEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glActiveShaderProgramEXT");
    brebisGL.brebisActiveStencilFaceEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glActiveStencilFaceEXT");
    brebisGL.brebisActiveTexture = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glActiveTexture");
    brebisGL.brebisActiveTextureARB = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glActiveTextureARB");
    brebisGL.brebisActiveVaryingNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLchar *))brebisGLGetProcAddress("glActiveVaryingNV");
    brebisGL.brebisAlphaFragmentOp1ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glAlphaFragmentOp1ATI");
    brebisGL.brebisAlphaFragmentOp2ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glAlphaFragmentOp2ATI");
    brebisGL.brebisAlphaFragmentOp3ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glAlphaFragmentOp3ATI");
    brebisGL.brebisAlphaFunc = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glAlphaFunc");
    brebisGL.brebisAlphaFuncQCOM = (void (KHRONOS_APIENTRY *)(GLenum, GLclampf))brebisGLGetProcAddress("glAlphaFuncQCOM");
    brebisGL.brebisAlphaFuncx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glAlphaFuncx");
    brebisGL.brebisAlphaFuncxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glAlphaFuncxOES");
    brebisGL.brebisAlphaToCoverageDitherControlNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glAlphaToCoverageDitherControlNV");
    brebisGL.brebisApplyFramebufferAttachmentCMAAINTEL = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glApplyFramebufferAttachmentCMAAINTEL");
    brebisGL.brebisApplyTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glApplyTextureEXT");
    brebisGL.brebisAreProgramsResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLboolean *))brebisGLGetProcAddress("glAreProgramsResidentNV");
    brebisGL.brebisAreTexturesResident = (GLboolean(KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLboolean *))brebisGLGetProcAddress("glAreTexturesResident");
    brebisGL.brebisAreTexturesResidentEXT = (GLboolean(KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLboolean *))brebisGLGetProcAddress("glAreTexturesResidentEXT");
    brebisGL.brebisArrayElement = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glArrayElement");
    brebisGL.brebisArrayElementEXT = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glArrayElementEXT");
    brebisGL.brebisArrayObjectATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint))brebisGLGetProcAddress("glArrayObjectATI");
    brebisGL.brebisAsyncMarkerSGIX = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glAsyncMarkerSGIX");
    brebisGL.brebisAttachObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLhandleARB))brebisGLGetProcAddress("glAttachObjectARB");
    brebisGL.brebisAttachShader = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glAttachShader");
    brebisGL.brebisBegin = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glBegin");
    brebisGL.brebisBeginConditionalRender = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glBeginConditionalRender");
    brebisGL.brebisBeginConditionalRenderNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glBeginConditionalRenderNV");
    brebisGL.brebisBeginConditionalRenderNVX = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBeginConditionalRenderNVX");
    brebisGL.brebisBeginFragmentShaderATI = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glBeginFragmentShaderATI");
    brebisGL.brebisBeginOcclusionQueryNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBeginOcclusionQueryNV");
    brebisGL.brebisBeginPerfMonitorAMD = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBeginPerfMonitorAMD");
    brebisGL.brebisBeginPerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBeginPerfQueryINTEL");
    brebisGL.brebisBeginQuery = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBeginQuery");
    brebisGL.brebisBeginQueryARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBeginQueryARB");
    brebisGL.brebisBeginQueryEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBeginQueryEXT");
    brebisGL.brebisBeginQueryIndexed = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))brebisGLGetProcAddress("glBeginQueryIndexed");
    brebisGL.brebisBeginTransformFeedback = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glBeginTransformFeedback");
    brebisGL.brebisBeginTransformFeedbackEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glBeginTransformFeedbackEXT");
    brebisGL.brebisBeginTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glBeginTransformFeedbackNV");
    brebisGL.brebisBeginVertexShaderEXT = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glBeginVertexShaderEXT");
    brebisGL.brebisBeginVideoCaptureNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBeginVideoCaptureNV");
    brebisGL.brebisBindAttribLocation = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLchar *))brebisGLGetProcAddress("glBindAttribLocation");
    brebisGL.brebisBindAttribLocationARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLuint, const GLcharARB *))brebisGLGetProcAddress("glBindAttribLocationARB");
    brebisGL.brebisBindBuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindBuffer");
    brebisGL.brebisBindBufferARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindBufferARB");
    brebisGL.brebisBindBufferBase = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))brebisGLGetProcAddress("glBindBufferBase");
    brebisGL.brebisBindBufferBaseEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))brebisGLGetProcAddress("glBindBufferBaseEXT");
    brebisGL.brebisBindBufferBaseNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))brebisGLGetProcAddress("glBindBufferBaseNV");
    brebisGL.brebisBindBufferOffsetEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr))brebisGLGetProcAddress("glBindBufferOffsetEXT");
    brebisGL.brebisBindBufferOffsetNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr))brebisGLGetProcAddress("glBindBufferOffsetNV");
    brebisGL.brebisBindBufferRange = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glBindBufferRange");
    brebisGL.brebisBindBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glBindBufferRangeEXT");
    brebisGL.brebisBindBufferRangeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glBindBufferRangeNV");
    brebisGL.brebisBindBuffersBase = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *))brebisGLGetProcAddress("glBindBuffersBase");
    brebisGL.brebisBindBuffersRange = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *))brebisGLGetProcAddress("glBindBuffersRange");
    brebisGL.brebisBindFragDataLocation = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLchar *))brebisGLGetProcAddress("glBindFragDataLocation");
    brebisGL.brebisBindFragDataLocationEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLchar *))brebisGLGetProcAddress("glBindFragDataLocationEXT");
    brebisGL.brebisBindFragDataLocationIndexed = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, const GLchar *))brebisGLGetProcAddress("glBindFragDataLocationIndexed");
    brebisGL.brebisBindFragDataLocationIndexedEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, const GLchar *))brebisGLGetProcAddress("glBindFragDataLocationIndexedEXT");
    brebisGL.brebisBindFragmentShaderATI = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBindFragmentShaderATI");
    brebisGL.brebisBindFramebuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindFramebuffer");
    brebisGL.brebisBindFramebufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindFramebufferEXT");
    brebisGL.brebisBindFramebufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindFramebufferOES");
    brebisGL.brebisBindImageTexture = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum))brebisGLGetProcAddress("glBindImageTexture");
    brebisGL.brebisBindImageTextureEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint))brebisGLGetProcAddress("glBindImageTextureEXT");
    brebisGL.brebisBindImageTextures = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *))brebisGLGetProcAddress("glBindImageTextures");
    brebisGL.brebisBindLightParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glBindLightParameterEXT");
    brebisGL.brebisBindMaterialParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glBindMaterialParameterEXT");
    brebisGL.brebisBindMultiTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glBindMultiTextureEXT");
    brebisGL.brebisBindParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glBindParameterEXT");
    brebisGL.brebisBindProgramARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindProgramARB");
    brebisGL.brebisBindProgramNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindProgramNV");
    brebisGL.brebisBindProgramPipeline = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBindProgramPipeline");
    brebisGL.brebisBindProgramPipelineEXT = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBindProgramPipelineEXT");
    brebisGL.brebisBindRenderbuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindRenderbuffer");
    brebisGL.brebisBindRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindRenderbufferEXT");
    brebisGL.brebisBindRenderbufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindRenderbufferOES");
    brebisGL.brebisBindSampler = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glBindSampler");
    brebisGL.brebisBindSamplers = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *))brebisGLGetProcAddress("glBindSamplers");
    brebisGL.brebisBindShadingRateImageNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBindShadingRateImageNV");
    brebisGL.brebisBindTexGenParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBindTexGenParameterEXT");
    brebisGL.brebisBindTexture = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindTexture");
    brebisGL.brebisBindTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindTextureEXT");
    brebisGL.brebisBindTextureUnit = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glBindTextureUnit");
    brebisGL.brebisBindTextureUnitParameterEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glBindTextureUnitParameterEXT");
    brebisGL.brebisBindTextures = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *))brebisGLGetProcAddress("glBindTextures");
    brebisGL.brebisBindTransformFeedback = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindTransformFeedback");
    brebisGL.brebisBindTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glBindTransformFeedbackNV");
    brebisGL.brebisBindVertexArray = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBindVertexArray");
    brebisGL.brebisBindVertexArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBindVertexArrayAPPLE");
    brebisGL.brebisBindVertexArrayOES = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBindVertexArrayOES");
    brebisGL.brebisBindVertexBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLintptr, GLsizei))brebisGLGetProcAddress("glBindVertexBuffer");
    brebisGL.brebisBindVertexBuffers = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *))brebisGLGetProcAddress("glBindVertexBuffers");
    brebisGL.brebisBindVertexShaderEXT = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glBindVertexShaderEXT");
    brebisGL.brebisBindVideoCaptureStreamBufferNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptrARB))brebisGLGetProcAddress("glBindVideoCaptureStreamBufferNV");
    brebisGL.brebisBindVideoCaptureStreamTextureNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLenum, GLuint))brebisGLGetProcAddress("glBindVideoCaptureStreamTextureNV");
    brebisGL.brebisBinormal3bEXT = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glBinormal3bEXT");
    brebisGL.brebisBinormal3bvEXT = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glBinormal3bvEXT");
    brebisGL.brebisBinormal3dEXT = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glBinormal3dEXT");
    brebisGL.brebisBinormal3dvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glBinormal3dvEXT");
    brebisGL.brebisBinormal3fEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glBinormal3fEXT");
    brebisGL.brebisBinormal3fvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glBinormal3fvEXT");
    brebisGL.brebisBinormal3iEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glBinormal3iEXT");
    brebisGL.brebisBinormal3ivEXT = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glBinormal3ivEXT");
    brebisGL.brebisBinormal3sEXT = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glBinormal3sEXT");
    brebisGL.brebisBinormal3svEXT = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glBinormal3svEXT");
    brebisGL.brebisBinormalPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glBinormalPointerEXT");
    brebisGL.brebisBitmap = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *))brebisGLGetProcAddress("glBitmap");
    brebisGL.brebisBitmapxOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *))brebisGLGetProcAddress("glBitmapxOES");
    brebisGL.brebisBlendBarrier = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glBlendBarrier");
    brebisGL.brebisBlendBarrierKHR = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glBlendBarrierKHR");
    brebisGL.brebisBlendBarrierNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glBlendBarrierNV");
    brebisGL.brebisBlendColor = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glBlendColor");
    brebisGL.brebisBlendColorEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glBlendColorEXT");
    brebisGL.brebisBlendColorxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glBlendColorxOES");
    brebisGL.brebisBlendEquation = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glBlendEquation");
    brebisGL.brebisBlendEquationEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glBlendEquationEXT");
    brebisGL.brebisBlendEquationIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glBlendEquationIndexedAMD");
    brebisGL.brebisBlendEquationOES = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glBlendEquationOES");
    brebisGL.brebisBlendEquationSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glBlendEquationSeparate");
    brebisGL.brebisBlendEquationSeparateEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glBlendEquationSeparateEXT");
    brebisGL.brebisBlendEquationSeparateIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendEquationSeparateIndexedAMD");
    brebisGL.brebisBlendEquationSeparateOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glBlendEquationSeparateOES");
    brebisGL.brebisBlendEquationSeparatei = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendEquationSeparatei");
    brebisGL.brebisBlendEquationSeparateiARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendEquationSeparateiARB");
    brebisGL.brebisBlendEquationSeparateiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendEquationSeparateiEXT");
    brebisGL.brebisBlendEquationSeparateiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendEquationSeparateiOES");
    brebisGL.brebisBlendEquationi = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glBlendEquationi");
    brebisGL.brebisBlendEquationiARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glBlendEquationiARB");
    brebisGL.brebisBlendEquationiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glBlendEquationiEXT");
    brebisGL.brebisBlendEquationiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glBlendEquationiOES");
    brebisGL.brebisBlendFunc = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glBlendFunc");
    brebisGL.brebisBlendFuncIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncIndexedAMD");
    brebisGL.brebisBlendFuncSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncSeparate");
    brebisGL.brebisBlendFuncSeparateEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncSeparateEXT");
    brebisGL.brebisBlendFuncSeparateINGR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncSeparateINGR");
    brebisGL.brebisBlendFuncSeparateIndexedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncSeparateIndexedAMD");
    brebisGL.brebisBlendFuncSeparateOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncSeparateOES");
    brebisGL.brebisBlendFuncSeparatei = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncSeparatei");
    brebisGL.brebisBlendFuncSeparateiARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncSeparateiARB");
    brebisGL.brebisBlendFuncSeparateiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncSeparateiEXT");
    brebisGL.brebisBlendFuncSeparateiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glBlendFuncSeparateiOES");
    brebisGL.brebisBlendFunci = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendFunci");
    brebisGL.brebisBlendFunciARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendFunciARB");
    brebisGL.brebisBlendFunciEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendFunciEXT");
    brebisGL.brebisBlendFunciOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum))brebisGLGetProcAddress("glBlendFunciOES");
    brebisGL.brebisBlendParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glBlendParameteriNV");
    brebisGL.brebisBlitFramebuffer = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))brebisGLGetProcAddress("glBlitFramebuffer");
    brebisGL.brebisBlitFramebufferANGLE = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))brebisGLGetProcAddress("glBlitFramebufferANGLE");
    brebisGL.brebisBlitFramebufferEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))brebisGLGetProcAddress("glBlitFramebufferEXT");
    brebisGL.brebisBlitFramebufferNV = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))brebisGLGetProcAddress("glBlitFramebufferNV");
    brebisGL.brebisBlitNamedFramebuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))brebisGLGetProcAddress("glBlitNamedFramebuffer");
    brebisGL.brebisBufferAddressRangeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64EXT, GLsizeiptr))brebisGLGetProcAddress("glBufferAddressRangeNV");
    brebisGL.brebisBufferAttachMemoryNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64))brebisGLGetProcAddress("glBufferAttachMemoryNV");
    brebisGL.brebisBufferData = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, const void *, GLenum))brebisGLGetProcAddress("glBufferData");
    brebisGL.brebisBufferDataARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptrARB, const void *, GLenum))brebisGLGetProcAddress("glBufferDataARB");
    brebisGL.brebisBufferPageCommitmentARB = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLboolean))brebisGLGetProcAddress("glBufferPageCommitmentARB");
    brebisGL.brebisBufferParameteriAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glBufferParameteriAPPLE");
    brebisGL.brebisBufferRegionEnabled = (GLuint(KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glBufferRegionEnabled");
    brebisGL.brebisBufferStorage = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, const void *, GLbitfield))brebisGLGetProcAddress("glBufferStorage");
    brebisGL.brebisBufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, const void *, GLbitfield))brebisGLGetProcAddress("glBufferStorageEXT");
    brebisGL.brebisBufferStorageExternalEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield))brebisGLGetProcAddress("glBufferStorageExternalEXT");
    brebisGL.brebisBufferStorageMemEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizeiptr, GLuint, GLuint64))brebisGLGetProcAddress("glBufferStorageMemEXT");
    brebisGL.brebisBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, const void *))brebisGLGetProcAddress("glBufferSubData");
    brebisGL.brebisBufferSubDataARB = (void (KHRONOS_APIENTRY *)(GLenum, GLintptrARB, GLsizeiptrARB, const void *))brebisGLGetProcAddress("glBufferSubDataARB");
    brebisGL.brebisCallCommandListNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glCallCommandListNV");
    brebisGL.brebisCallList = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glCallList");
    brebisGL.brebisCallLists = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *))brebisGLGetProcAddress("glCallLists");
    brebisGL.brebisCheckFramebufferStatus = (GLenum(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glCheckFramebufferStatus");
    brebisGL.brebisCheckFramebufferStatusEXT = (GLenum(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glCheckFramebufferStatusEXT");
    brebisGL.brebisCheckFramebufferStatusOES = (GLenum(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glCheckFramebufferStatusOES");
    brebisGL.brebisCheckNamedFramebufferStatus = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glCheckNamedFramebufferStatus");
    brebisGL.brebisCheckNamedFramebufferStatusEXT = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glCheckNamedFramebufferStatusEXT");
    brebisGL.brebisClampColor = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glClampColor");
    brebisGL.brebisClampColorARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glClampColorARB");
    brebisGL.brebisClear = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glClear");
    brebisGL.brebisClearAccum = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glClearAccum");
    brebisGL.brebisClearAccumxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glClearAccumxOES");
    brebisGL.brebisClearBufferData = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearBufferData");
    brebisGL.brebisClearBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearBufferSubData");
    brebisGL.brebisClearBufferfi = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLfloat, GLint))brebisGLGetProcAddress("glClearBufferfi");
    brebisGL.brebisClearBufferfv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLfloat *))brebisGLGetProcAddress("glClearBufferfv");
    brebisGL.brebisClearBufferiv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLint *))brebisGLGetProcAddress("glClearBufferiv");
    brebisGL.brebisClearBufferuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLuint *))brebisGLGetProcAddress("glClearBufferuiv");
    brebisGL.brebisClearColor = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glClearColor");
    brebisGL.brebisClearColorIiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glClearColorIiEXT");
    brebisGL.brebisClearColorIuiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glClearColorIuiEXT");
    brebisGL.brebisClearColorx = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glClearColorx");
    brebisGL.brebisClearColorxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glClearColorxOES");
    brebisGL.brebisClearDepth = (void (KHRONOS_APIENTRY *)(GLdouble))brebisGLGetProcAddress("glClearDepth");
    brebisGL.brebisClearDepthdNV = (void (KHRONOS_APIENTRY *)(GLdouble))brebisGLGetProcAddress("glClearDepthdNV");
    brebisGL.brebisClearDepthf = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glClearDepthf");
    brebisGL.brebisClearDepthfOES = (void (KHRONOS_APIENTRY *)(GLclampf))brebisGLGetProcAddress("glClearDepthfOES");
    brebisGL.brebisClearDepthx = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glClearDepthx");
    brebisGL.brebisClearDepthxOES = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glClearDepthxOES");
    brebisGL.brebisClearIndex = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glClearIndex");
    brebisGL.brebisClearNamedBufferData = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearNamedBufferData");
    brebisGL.brebisClearNamedBufferDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearNamedBufferDataEXT");
    brebisGL.brebisClearNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearNamedBufferSubData");
    brebisGL.brebisClearNamedBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearNamedBufferSubDataEXT");
    brebisGL.brebisClearNamedFramebufferfi = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLfloat, GLint))brebisGLGetProcAddress("glClearNamedFramebufferfi");
    brebisGL.brebisClearNamedFramebufferfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, const GLfloat *))brebisGLGetProcAddress("glClearNamedFramebufferfv");
    brebisGL.brebisClearNamedFramebufferiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, const GLint *))brebisGLGetProcAddress("glClearNamedFramebufferiv");
    brebisGL.brebisClearNamedFramebufferuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, const GLuint *))brebisGLGetProcAddress("glClearNamedFramebufferuiv");
    brebisGL.brebisClearPixelLocalStorageuiEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, const GLuint *))brebisGLGetProcAddress("glClearPixelLocalStorageuiEXT");
    brebisGL.brebisClearStencil = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glClearStencil");
    brebisGL.brebisClearTexImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearTexImage");
    brebisGL.brebisClearTexImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearTexImageEXT");
    brebisGL.brebisClearTexSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearTexSubImage");
    brebisGL.brebisClearTexSubImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glClearTexSubImageEXT");
    brebisGL.brebisClientActiveTexture = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glClientActiveTexture");
    brebisGL.brebisClientActiveTextureARB = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glClientActiveTextureARB");
    brebisGL.brebisClientActiveVertexStreamATI = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glClientActiveVertexStreamATI");
    brebisGL.brebisClientAttribDefaultEXT = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glClientAttribDefaultEXT");
    brebisGL.brebisClientWaitSync = (GLenum(KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))brebisGLGetProcAddress("glClientWaitSync");
    brebisGL.brebisClientWaitSyncAPPLE = (GLenum(KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))brebisGLGetProcAddress("glClientWaitSyncAPPLE");
    brebisGL.brebisClipControl = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glClipControl");
    brebisGL.brebisClipControlEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glClipControlEXT");
    brebisGL.brebisClipPlane = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glClipPlane");
    brebisGL.brebisClipPlanef = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glClipPlanef");
    brebisGL.brebisClipPlanefIMG = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glClipPlanefIMG");
    brebisGL.brebisClipPlanefOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glClipPlanefOES");
    brebisGL.brebisClipPlanex = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glClipPlanex");
    brebisGL.brebisClipPlanexIMG = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glClipPlanexIMG");
    brebisGL.brebisClipPlanexOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glClipPlanexOES");
    brebisGL.brebisColor3b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glColor3b");
    brebisGL.brebisColor3bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glColor3bv");
    brebisGL.brebisColor3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glColor3d");
    brebisGL.brebisColor3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glColor3dv");
    brebisGL.brebisColor3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glColor3f");
    brebisGL.brebisColor3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glColor3fVertex3fSUN");
    brebisGL.brebisColor3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glColor3fVertex3fvSUN");
    brebisGL.brebisColor3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glColor3fv");
    brebisGL.brebisColor3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glColor3hNV");
    brebisGL.brebisColor3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glColor3hvNV");
    brebisGL.brebisColor3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glColor3i");
    brebisGL.brebisColor3iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glColor3iv");
    brebisGL.brebisColor3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glColor3s");
    brebisGL.brebisColor3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glColor3sv");
    brebisGL.brebisColor3ub = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte))brebisGLGetProcAddress("glColor3ub");
    brebisGL.brebisColor3ubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))brebisGLGetProcAddress("glColor3ubv");
    brebisGL.brebisColor3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glColor3ui");
    brebisGL.brebisColor3uiv = (void (KHRONOS_APIENTRY *)(const GLuint *))brebisGLGetProcAddress("glColor3uiv");
    brebisGL.brebisColor3us = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort))brebisGLGetProcAddress("glColor3us");
    brebisGL.brebisColor3usv = (void (KHRONOS_APIENTRY *)(const GLushort *))brebisGLGetProcAddress("glColor3usv");
    brebisGL.brebisColor3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glColor3xOES");
    brebisGL.brebisColor3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glColor3xvOES");
    brebisGL.brebisColor4b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glColor4b");
    brebisGL.brebisColor4bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glColor4bv");
    brebisGL.brebisColor4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glColor4d");
    brebisGL.brebisColor4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glColor4dv");
    brebisGL.brebisColor4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glColor4f");
    brebisGL.brebisColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glColor4fNormal3fVertex3fSUN");
    brebisGL.brebisColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glColor4fNormal3fVertex3fvSUN");
    brebisGL.brebisColor4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glColor4fv");
    brebisGL.brebisColor4hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glColor4hNV");
    brebisGL.brebisColor4hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glColor4hvNV");
    brebisGL.brebisColor4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glColor4i");
    brebisGL.brebisColor4iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glColor4iv");
    brebisGL.brebisColor4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glColor4s");
    brebisGL.brebisColor4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glColor4sv");
    brebisGL.brebisColor4ub = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte))brebisGLGetProcAddress("glColor4ub");
    brebisGL.brebisColor4ubVertex2fSUN = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat))brebisGLGetProcAddress("glColor4ubVertex2fSUN");
    brebisGL.brebisColor4ubVertex2fvSUN = (void (KHRONOS_APIENTRY *)(const GLubyte *, const GLfloat *))brebisGLGetProcAddress("glColor4ubVertex2fvSUN");
    brebisGL.brebisColor4ubVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glColor4ubVertex3fSUN");
    brebisGL.brebisColor4ubVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLubyte *, const GLfloat *))brebisGLGetProcAddress("glColor4ubVertex3fvSUN");
    brebisGL.brebisColor4ubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))brebisGLGetProcAddress("glColor4ubv");
    brebisGL.brebisColor4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glColor4ui");
    brebisGL.brebisColor4uiv = (void (KHRONOS_APIENTRY *)(const GLuint *))brebisGLGetProcAddress("glColor4uiv");
    brebisGL.brebisColor4us = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort, GLushort))brebisGLGetProcAddress("glColor4us");
    brebisGL.brebisColor4usv = (void (KHRONOS_APIENTRY *)(const GLushort *))brebisGLGetProcAddress("glColor4usv");
    brebisGL.brebisColor4x = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glColor4x");
    brebisGL.brebisColor4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glColor4xOES");
    brebisGL.brebisColor4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glColor4xvOES");
    brebisGL.brebisColorFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))brebisGLGetProcAddress("glColorFormatNV");
    brebisGL.brebisColorFragmentOp1ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glColorFragmentOp1ATI");
    brebisGL.brebisColorFragmentOp2ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glColorFragmentOp2ATI");
    brebisGL.brebisColorFragmentOp3ATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glColorFragmentOp3ATI");
    brebisGL.brebisColorMask = (void (KHRONOS_APIENTRY *)(GLboolean, GLboolean, GLboolean, GLboolean))brebisGLGetProcAddress("glColorMask");
    brebisGL.brebisColorMaskIndexedEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))brebisGLGetProcAddress("glColorMaskIndexedEXT");
    brebisGL.brebisColorMaski = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))brebisGLGetProcAddress("glColorMaski");
    brebisGL.brebisColorMaskiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))brebisGLGetProcAddress("glColorMaskiEXT");
    brebisGL.brebisColorMaskiOES = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean))brebisGLGetProcAddress("glColorMaskiOES");
    brebisGL.brebisColorMaterial = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glColorMaterial");
    brebisGL.brebisColorP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glColorP3ui");
    brebisGL.brebisColorP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glColorP3uiv");
    brebisGL.brebisColorP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glColorP4ui");
    brebisGL.brebisColorP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glColorP4uiv");
    brebisGL.brebisColorPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glColorPointer");
    brebisGL.brebisColorPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, GLsizei, const void *))brebisGLGetProcAddress("glColorPointerEXT");
    brebisGL.brebisColorPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))brebisGLGetProcAddress("glColorPointerListIBM");
    brebisGL.brebisColorPointervINTEL = (void (KHRONOS_APIENTRY *)(GLint, GLenum, const void **))brebisGLGetProcAddress("glColorPointervINTEL");
    brebisGL.brebisColorSubTable = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glColorSubTable");
    brebisGL.brebisColorSubTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glColorSubTableEXT");
    brebisGL.brebisColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glColorTable");
    brebisGL.brebisColorTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glColorTableEXT");
    brebisGL.brebisColorTableParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glColorTableParameterfv");
    brebisGL.brebisColorTableParameterfvSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glColorTableParameterfvSGI");
    brebisGL.brebisColorTableParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glColorTableParameteriv");
    brebisGL.brebisColorTableParameterivSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glColorTableParameterivSGI");
    brebisGL.brebisColorTableSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glColorTableSGI");
    brebisGL.brebisCombinerInputNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glCombinerInputNV");
    brebisGL.brebisCombinerOutputNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean))brebisGLGetProcAddress("glCombinerOutputNV");
    brebisGL.brebisCombinerParameterfNV = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glCombinerParameterfNV");
    brebisGL.brebisCombinerParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glCombinerParameterfvNV");
    brebisGL.brebisCombinerParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glCombinerParameteriNV");
    brebisGL.brebisCombinerParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glCombinerParameterivNV");
    brebisGL.brebisCombinerStageParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glCombinerStageParameterfvNV");
    brebisGL.brebisCommandListSegmentsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glCommandListSegmentsNV");
    brebisGL.brebisCompileCommandListNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glCompileCommandListNV");
    brebisGL.brebisCompileShader = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glCompileShader");
    brebisGL.brebisCompileShaderARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))brebisGLGetProcAddress("glCompileShaderARB");
    brebisGL.brebisCompileShaderIncludeARB = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, const GLint *))brebisGLGetProcAddress("glCompileShaderIncludeARB");
    brebisGL.brebisCompressedMultiTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedMultiTexImage1DEXT");
    brebisGL.brebisCompressedMultiTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedMultiTexImage2DEXT");
    brebisGL.brebisCompressedMultiTexImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedMultiTexImage3DEXT");
    brebisGL.brebisCompressedMultiTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedMultiTexSubImage1DEXT");
    brebisGL.brebisCompressedMultiTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedMultiTexSubImage2DEXT");
    brebisGL.brebisCompressedMultiTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedMultiTexSubImage3DEXT");
    brebisGL.brebisCompressedTexImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexImage1D");
    brebisGL.brebisCompressedTexImage1DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexImage1DARB");
    brebisGL.brebisCompressedTexImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexImage2D");
    brebisGL.brebisCompressedTexImage2DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexImage2DARB");
    brebisGL.brebisCompressedTexImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexImage3D");
    brebisGL.brebisCompressedTexImage3DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexImage3DARB");
    brebisGL.brebisCompressedTexImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexImage3DOES");
    brebisGL.brebisCompressedTexSubImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexSubImage1D");
    brebisGL.brebisCompressedTexSubImage1DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexSubImage1DARB");
    brebisGL.brebisCompressedTexSubImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexSubImage2D");
    brebisGL.brebisCompressedTexSubImage2DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexSubImage2DARB");
    brebisGL.brebisCompressedTexSubImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexSubImage3D");
    brebisGL.brebisCompressedTexSubImage3DARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexSubImage3DARB");
    brebisGL.brebisCompressedTexSubImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTexSubImage3DOES");
    brebisGL.brebisCompressedTextureImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTextureImage1DEXT");
    brebisGL.brebisCompressedTextureImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTextureImage2DEXT");
    brebisGL.brebisCompressedTextureImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTextureImage3DEXT");
    brebisGL.brebisCompressedTextureSubImage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTextureSubImage1D");
    brebisGL.brebisCompressedTextureSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTextureSubImage1DEXT");
    brebisGL.brebisCompressedTextureSubImage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTextureSubImage2D");
    brebisGL.brebisCompressedTextureSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTextureSubImage2DEXT");
    brebisGL.brebisCompressedTextureSubImage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTextureSubImage3D");
    brebisGL.brebisCompressedTextureSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glCompressedTextureSubImage3DEXT");
    brebisGL.brebisConservativeRasterParameterfNV = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glConservativeRasterParameterfNV");
    brebisGL.brebisConservativeRasterParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glConservativeRasterParameteriNV");
    brebisGL.brebisConvolutionFilter1D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glConvolutionFilter1D");
    brebisGL.brebisConvolutionFilter1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glConvolutionFilter1DEXT");
    brebisGL.brebisConvolutionFilter2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glConvolutionFilter2D");
    brebisGL.brebisConvolutionFilter2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glConvolutionFilter2DEXT");
    brebisGL.brebisConvolutionParameterf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glConvolutionParameterf");
    brebisGL.brebisConvolutionParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glConvolutionParameterfEXT");
    brebisGL.brebisConvolutionParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glConvolutionParameterfv");
    brebisGL.brebisConvolutionParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glConvolutionParameterfvEXT");
    brebisGL.brebisConvolutionParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glConvolutionParameteri");
    brebisGL.brebisConvolutionParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glConvolutionParameteriEXT");
    brebisGL.brebisConvolutionParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glConvolutionParameteriv");
    brebisGL.brebisConvolutionParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glConvolutionParameterivEXT");
    brebisGL.brebisConvolutionParameterxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glConvolutionParameterxOES");
    brebisGL.brebisConvolutionParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glConvolutionParameterxvOES");
    brebisGL.brebisCopyBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glCopyBufferSubData");
    brebisGL.brebisCopyBufferSubDataNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glCopyBufferSubDataNV");
    brebisGL.brebisCopyColorSubTable = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyColorSubTable");
    brebisGL.brebisCopyColorSubTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyColorSubTableEXT");
    brebisGL.brebisCopyColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyColorTable");
    brebisGL.brebisCopyColorTableSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyColorTableSGI");
    brebisGL.brebisCopyConvolutionFilter1D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyConvolutionFilter1D");
    brebisGL.brebisCopyConvolutionFilter1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyConvolutionFilter1DEXT");
    brebisGL.brebisCopyConvolutionFilter2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyConvolutionFilter2D");
    brebisGL.brebisCopyConvolutionFilter2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyConvolutionFilter2DEXT");
    brebisGL.brebisCopyImageSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyImageSubData");
    brebisGL.brebisCopyImageSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyImageSubDataEXT");
    brebisGL.brebisCopyImageSubDataNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyImageSubDataNV");
    brebisGL.brebisCopyImageSubDataOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyImageSubDataOES");
    brebisGL.brebisCopyMultiTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))brebisGLGetProcAddress("glCopyMultiTexImage1DEXT");
    brebisGL.brebisCopyMultiTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))brebisGLGetProcAddress("glCopyMultiTexImage2DEXT");
    brebisGL.brebisCopyMultiTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyMultiTexSubImage1DEXT");
    brebisGL.brebisCopyMultiTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyMultiTexSubImage2DEXT");
    brebisGL.brebisCopyMultiTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyMultiTexSubImage3DEXT");
    brebisGL.brebisCopyNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glCopyNamedBufferSubData");
    brebisGL.brebisCopyPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glCopyPathNV");
    brebisGL.brebisCopyPixels = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum))brebisGLGetProcAddress("glCopyPixels");
    brebisGL.brebisCopyTexImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))brebisGLGetProcAddress("glCopyTexImage1D");
    brebisGL.brebisCopyTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))brebisGLGetProcAddress("glCopyTexImage1DEXT");
    brebisGL.brebisCopyTexImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))brebisGLGetProcAddress("glCopyTexImage2D");
    brebisGL.brebisCopyTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))brebisGLGetProcAddress("glCopyTexImage2DEXT");
    brebisGL.brebisCopyTexSubImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyTexSubImage1D");
    brebisGL.brebisCopyTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyTexSubImage1DEXT");
    brebisGL.brebisCopyTexSubImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyTexSubImage2D");
    brebisGL.brebisCopyTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyTexSubImage2DEXT");
    brebisGL.brebisCopyTexSubImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyTexSubImage3D");
    brebisGL.brebisCopyTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyTexSubImage3DEXT");
    brebisGL.brebisCopyTexSubImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyTexSubImage3DOES");
    brebisGL.brebisCopyTextureImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint))brebisGLGetProcAddress("glCopyTextureImage1DEXT");
    brebisGL.brebisCopyTextureImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint))brebisGLGetProcAddress("glCopyTextureImage2DEXT");
    brebisGL.brebisCopyTextureLevelsAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLsizei))brebisGLGetProcAddress("glCopyTextureLevelsAPPLE");
    brebisGL.brebisCopyTextureSubImage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyTextureSubImage1D");
    brebisGL.brebisCopyTextureSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei))brebisGLGetProcAddress("glCopyTextureSubImage1DEXT");
    brebisGL.brebisCopyTextureSubImage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyTextureSubImage2D");
    brebisGL.brebisCopyTextureSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyTextureSubImage2DEXT");
    brebisGL.brebisCopyTextureSubImage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyTextureSubImage3D");
    brebisGL.brebisCopyTextureSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glCopyTextureSubImage3DEXT");
    brebisGL.brebisCoverFillPathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glCoverFillPathInstancedNV");
    brebisGL.brebisCoverFillPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glCoverFillPathNV");
    brebisGL.brebisCoverStrokePathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glCoverStrokePathInstancedNV");
    brebisGL.brebisCoverStrokePathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glCoverStrokePathNV");
    brebisGL.brebisCoverageMaskNV = (void (KHRONOS_APIENTRY *)(GLboolean))brebisGLGetProcAddress("glCoverageMaskNV");
    brebisGL.brebisCoverageModulationNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glCoverageModulationNV");
    brebisGL.brebisCoverageModulationTableNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLfloat *))brebisGLGetProcAddress("glCoverageModulationTableNV");
    brebisGL.brebisCoverageOperationNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glCoverageOperationNV");
    brebisGL.brebisCreateBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateBuffers");
    brebisGL.brebisCreateCommandListsNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateCommandListsNV");
    brebisGL.brebisCreateFramebuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateFramebuffers");
    brebisGL.brebisCreateMemoryObjectsEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateMemoryObjectsEXT");
    brebisGL.brebisCreatePerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint *))brebisGLGetProcAddress("glCreatePerfQueryINTEL");
    brebisGL.brebisCreateProgram = (GLuint(KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glCreateProgram");
    brebisGL.brebisCreateProgramObjectARB = (GLhandleARB(KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glCreateProgramObjectARB");
    brebisGL.brebisCreateProgramPipelines = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateProgramPipelines");
    brebisGL.brebisCreateQueries = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))brebisGLGetProcAddress("glCreateQueries");
    brebisGL.brebisCreateRenderbuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateRenderbuffers");
    brebisGL.brebisCreateSamplers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateSamplers");
    brebisGL.brebisCreateShader = (GLuint(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glCreateShader");
    brebisGL.brebisCreateShaderObjectARB = (GLhandleARB(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glCreateShaderObjectARB");
    brebisGL.brebisCreateShaderProgramEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, const GLchar *))brebisGLGetProcAddress("glCreateShaderProgramEXT");
    brebisGL.brebisCreateShaderProgramv = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLchar *const*))brebisGLGetProcAddress("glCreateShaderProgramv");
    brebisGL.brebisCreateShaderProgramvEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLchar **))brebisGLGetProcAddress("glCreateShaderProgramvEXT");
    brebisGL.brebisCreateStatesNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateStatesNV");
    brebisGL.brebisCreateSyncFromCLeventARB = (GLsync(KHRONOS_APIENTRY *)(struct _cl_context *, struct _cl_event *, GLbitfield))brebisGLGetProcAddress("glCreateSyncFromCLeventARB");
    brebisGL.brebisCreateTextures = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))brebisGLGetProcAddress("glCreateTextures");
    brebisGL.brebisCreateTransformFeedbacks = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateTransformFeedbacks");
    brebisGL.brebisCreateVertexArrays = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glCreateVertexArrays");
    brebisGL.brebisCullFace = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glCullFace");
    brebisGL.brebisCullParameterdvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble *))brebisGLGetProcAddress("glCullParameterdvEXT");
    brebisGL.brebisCullParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))brebisGLGetProcAddress("glCullParameterfvEXT");
    brebisGL.brebisCurrentPaletteMatrixARB = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glCurrentPaletteMatrixARB");
    brebisGL.brebisCurrentPaletteMatrixOES = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glCurrentPaletteMatrixOES");
    brebisGL.brebisDebugMessageCallback = (void (KHRONOS_APIENTRY *)(GLDEBUGPROC, const void *))brebisGLGetProcAddress("glDebugMessageCallback");
    brebisGL.brebisDebugMessageCallbackAMD = (void (KHRONOS_APIENTRY *)(GLDEBUGPROCAMD, void *))brebisGLGetProcAddress("glDebugMessageCallbackAMD");
    brebisGL.brebisDebugMessageCallbackARB = (void (KHRONOS_APIENTRY *)(GLDEBUGPROCARB, const void *))brebisGLGetProcAddress("glDebugMessageCallbackARB");
    brebisGL.brebisDebugMessageCallbackKHR = (void (KHRONOS_APIENTRY *)(GLDEBUGPROCKHR, const void *))brebisGLGetProcAddress("glDebugMessageCallbackKHR");
    brebisGL.brebisDebugMessageControl = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean))brebisGLGetProcAddress("glDebugMessageControl");
    brebisGL.brebisDebugMessageControlARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean))brebisGLGetProcAddress("glDebugMessageControlARB");
    brebisGL.brebisDebugMessageControlKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean))brebisGLGetProcAddress("glDebugMessageControlKHR");
    brebisGL.brebisDebugMessageEnableAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, const GLuint *, GLboolean))brebisGLGetProcAddress("glDebugMessageEnableAMD");
    brebisGL.brebisDebugMessageInsert = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *))brebisGLGetProcAddress("glDebugMessageInsert");
    brebisGL.brebisDebugMessageInsertAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLsizei, const GLchar *))brebisGLGetProcAddress("glDebugMessageInsertAMD");
    brebisGL.brebisDebugMessageInsertARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *))brebisGLGetProcAddress("glDebugMessageInsertARB");
    brebisGL.brebisDebugMessageInsertKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *))brebisGLGetProcAddress("glDebugMessageInsertKHR");
    brebisGL.brebisDeformSGIX = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glDeformSGIX");
    brebisGL.brebisDeformationMap3dSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))brebisGLGetProcAddress("glDeformationMap3dSGIX");
    brebisGL.brebisDeformationMap3fSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))brebisGLGetProcAddress("glDeformationMap3fSGIX");
    brebisGL.brebisDeleteAsyncMarkersSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))brebisGLGetProcAddress("glDeleteAsyncMarkersSGIX");
    brebisGL.brebisDeleteBufferRegion = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glDeleteBufferRegion");
    brebisGL.brebisDeleteBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteBuffers");
    brebisGL.brebisDeleteBuffersARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteBuffersARB");
    brebisGL.brebisDeleteCommandListsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteCommandListsNV");
    brebisGL.brebisDeleteFencesAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteFencesAPPLE");
    brebisGL.brebisDeleteFencesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteFencesNV");
    brebisGL.brebisDeleteFragmentShaderATI = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glDeleteFragmentShaderATI");
    brebisGL.brebisDeleteFramebuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteFramebuffers");
    brebisGL.brebisDeleteFramebuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteFramebuffersEXT");
    brebisGL.brebisDeleteFramebuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteFramebuffersOES");
    brebisGL.brebisDeleteLists = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))brebisGLGetProcAddress("glDeleteLists");
    brebisGL.brebisDeleteMemoryObjectsEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteMemoryObjectsEXT");
    brebisGL.brebisDeleteNamedStringARB = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *))brebisGLGetProcAddress("glDeleteNamedStringARB");
    brebisGL.brebisDeleteNamesAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLuint *))brebisGLGetProcAddress("glDeleteNamesAMD");
    brebisGL.brebisDeleteObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))brebisGLGetProcAddress("glDeleteObjectARB");
    brebisGL.brebisDeleteOcclusionQueriesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteOcclusionQueriesNV");
    brebisGL.brebisDeletePathsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))brebisGLGetProcAddress("glDeletePathsNV");
    brebisGL.brebisDeletePerfMonitorsAMD = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glDeletePerfMonitorsAMD");
    brebisGL.brebisDeletePerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glDeletePerfQueryINTEL");
    brebisGL.brebisDeleteProgram = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glDeleteProgram");
    brebisGL.brebisDeleteProgramPipelines = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteProgramPipelines");
    brebisGL.brebisDeleteProgramPipelinesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteProgramPipelinesEXT");
    brebisGL.brebisDeleteProgramsARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteProgramsARB");
    brebisGL.brebisDeleteProgramsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteProgramsNV");
    brebisGL.brebisDeleteQueries = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteQueries");
    brebisGL.brebisDeleteQueriesARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteQueriesARB");
    brebisGL.brebisDeleteQueriesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteQueriesEXT");
    brebisGL.brebisDeleteQueryResourceTagNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLint *))brebisGLGetProcAddress("glDeleteQueryResourceTagNV");
    brebisGL.brebisDeleteRenderbuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteRenderbuffers");
    brebisGL.brebisDeleteRenderbuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteRenderbuffersEXT");
    brebisGL.brebisDeleteRenderbuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteRenderbuffersOES");
    brebisGL.brebisDeleteSamplers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteSamplers");
    brebisGL.brebisDeleteSemaphoresEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteSemaphoresEXT");
    brebisGL.brebisDeleteShader = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glDeleteShader");
    brebisGL.brebisDeleteStatesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteStatesNV");
    brebisGL.brebisDeleteSync = (void (KHRONOS_APIENTRY *)(GLsync))brebisGLGetProcAddress("glDeleteSync");
    brebisGL.brebisDeleteSyncAPPLE = (void (KHRONOS_APIENTRY *)(GLsync))brebisGLGetProcAddress("glDeleteSyncAPPLE");
    brebisGL.brebisDeleteTextures = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteTextures");
    brebisGL.brebisDeleteTexturesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteTexturesEXT");
    brebisGL.brebisDeleteTransformFeedbacks = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteTransformFeedbacks");
    brebisGL.brebisDeleteTransformFeedbacksNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteTransformFeedbacksNV");
    brebisGL.brebisDeleteVertexArrays = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteVertexArrays");
    brebisGL.brebisDeleteVertexArraysAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteVertexArraysAPPLE");
    brebisGL.brebisDeleteVertexArraysOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glDeleteVertexArraysOES");
    brebisGL.brebisDeleteVertexShaderEXT = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glDeleteVertexShaderEXT");
    brebisGL.brebisDepthBoundsEXT = (void (KHRONOS_APIENTRY *)(GLclampd, GLclampd))brebisGLGetProcAddress("glDepthBoundsEXT");
    brebisGL.brebisDepthBoundsdNV = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glDepthBoundsdNV");
    brebisGL.brebisDepthFunc = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glDepthFunc");
    brebisGL.brebisDepthMask = (void (KHRONOS_APIENTRY *)(GLboolean))brebisGLGetProcAddress("glDepthMask");
    brebisGL.brebisDepthRange = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glDepthRange");
    brebisGL.brebisDepthRangeArrayfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glDepthRangeArrayfvNV");
    brebisGL.brebisDepthRangeArrayfvOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glDepthRangeArrayfvOES");
    brebisGL.brebisDepthRangeArrayv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glDepthRangeArrayv");
    brebisGL.brebisDepthRangeIndexed = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))brebisGLGetProcAddress("glDepthRangeIndexed");
    brebisGL.brebisDepthRangeIndexedfNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))brebisGLGetProcAddress("glDepthRangeIndexedfNV");
    brebisGL.brebisDepthRangeIndexedfOES = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))brebisGLGetProcAddress("glDepthRangeIndexedfOES");
    brebisGL.brebisDepthRangedNV = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glDepthRangedNV");
    brebisGL.brebisDepthRangef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glDepthRangef");
    brebisGL.brebisDepthRangefOES = (void (KHRONOS_APIENTRY *)(GLclampf, GLclampf))brebisGLGetProcAddress("glDepthRangefOES");
    brebisGL.brebisDepthRangex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))brebisGLGetProcAddress("glDepthRangex");
    brebisGL.brebisDepthRangexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))brebisGLGetProcAddress("glDepthRangexOES");
    brebisGL.brebisDetachObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLhandleARB))brebisGLGetProcAddress("glDetachObjectARB");
    brebisGL.brebisDetachShader = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glDetachShader");
    brebisGL.brebisDetailTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLfloat *))brebisGLGetProcAddress("glDetailTexFuncSGIS");
    brebisGL.brebisDisable = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glDisable");
    brebisGL.brebisDisableClientState = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glDisableClientState");
    brebisGL.brebisDisableClientStateIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDisableClientStateIndexedEXT");
    brebisGL.brebisDisableClientStateiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDisableClientStateiEXT");
    brebisGL.brebisDisableDriverControlQCOM = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glDisableDriverControlQCOM");
    brebisGL.brebisDisableIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDisableIndexedEXT");
    brebisGL.brebisDisableVariantClientStateEXT = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glDisableVariantClientStateEXT");
    brebisGL.brebisDisableVertexArrayAttrib = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glDisableVertexArrayAttrib");
    brebisGL.brebisDisableVertexArrayAttribEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glDisableVertexArrayAttribEXT");
    brebisGL.brebisDisableVertexArrayEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glDisableVertexArrayEXT");
    brebisGL.brebisDisableVertexAttribAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glDisableVertexAttribAPPLE");
    brebisGL.brebisDisableVertexAttribArray = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glDisableVertexAttribArray");
    brebisGL.brebisDisableVertexAttribArrayARB = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glDisableVertexAttribArrayARB");
    brebisGL.brebisDisablei = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDisablei");
    brebisGL.brebisDisableiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDisableiEXT");
    brebisGL.brebisDisableiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDisableiNV");
    brebisGL.brebisDisableiOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDisableiOES");
    brebisGL.brebisDiscardFramebufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLenum *))brebisGLGetProcAddress("glDiscardFramebufferEXT");
    brebisGL.brebisDispatchCompute = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glDispatchCompute");
    brebisGL.brebisDispatchComputeGroupSizeARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glDispatchComputeGroupSizeARB");
    brebisGL.brebisDispatchComputeIndirect = (void (KHRONOS_APIENTRY *)(GLintptr))brebisGLGetProcAddress("glDispatchComputeIndirect");
    brebisGL.brebisDrawArrays = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei))brebisGLGetProcAddress("glDrawArrays");
    brebisGL.brebisDrawArraysEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei))brebisGLGetProcAddress("glDrawArraysEXT");
    brebisGL.brebisDrawArraysIndirect = (void (KHRONOS_APIENTRY *)(GLenum, const void *))brebisGLGetProcAddress("glDrawArraysIndirect");
    brebisGL.brebisDrawArraysInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glDrawArraysInstanced");
    brebisGL.brebisDrawArraysInstancedANGLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glDrawArraysInstancedANGLE");
    brebisGL.brebisDrawArraysInstancedARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glDrawArraysInstancedARB");
    brebisGL.brebisDrawArraysInstancedBaseInstance = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei, GLuint))brebisGLGetProcAddress("glDrawArraysInstancedBaseInstance");
    brebisGL.brebisDrawArraysInstancedBaseInstanceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei, GLuint))brebisGLGetProcAddress("glDrawArraysInstancedBaseInstanceEXT");
    brebisGL.brebisDrawArraysInstancedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glDrawArraysInstancedEXT");
    brebisGL.brebisDrawArraysInstancedNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glDrawArraysInstancedNV");
    brebisGL.brebisDrawBuffer = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glDrawBuffer");
    brebisGL.brebisDrawBufferRegion = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint))brebisGLGetProcAddress("glDrawBufferRegion");
    brebisGL.brebisDrawBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))brebisGLGetProcAddress("glDrawBuffers");
    brebisGL.brebisDrawBuffersARB = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))brebisGLGetProcAddress("glDrawBuffersARB");
    brebisGL.brebisDrawBuffersATI = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))brebisGLGetProcAddress("glDrawBuffersATI");
    brebisGL.brebisDrawBuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))brebisGLGetProcAddress("glDrawBuffersEXT");
    brebisGL.brebisDrawBuffersIndexedEXT = (void (KHRONOS_APIENTRY *)(GLint, const GLenum *, const GLint *))brebisGLGetProcAddress("glDrawBuffersIndexedEXT");
    brebisGL.brebisDrawBuffersNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLenum *))brebisGLGetProcAddress("glDrawBuffersNV");
    brebisGL.brebisDrawCommandsAddressNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint64 *, const GLsizei *, GLuint))brebisGLGetProcAddress("glDrawCommandsAddressNV");
    brebisGL.brebisDrawCommandsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLintptr *, const GLsizei *, GLuint))brebisGLGetProcAddress("glDrawCommandsNV");
    brebisGL.brebisDrawCommandsStatesAddressNV = (void (KHRONOS_APIENTRY *)(const GLuint64 *, const GLsizei *, const GLuint *, const GLuint *, GLuint))brebisGLGetProcAddress("glDrawCommandsStatesAddressNV");
    brebisGL.brebisDrawCommandsStatesNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLintptr *, const GLsizei *, const GLuint *, const GLuint *, GLuint))brebisGLGetProcAddress("glDrawCommandsStatesNV");
    brebisGL.brebisDrawElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei))brebisGLGetProcAddress("glDrawElementArrayAPPLE");
    brebisGL.brebisDrawElementArrayATI = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))brebisGLGetProcAddress("glDrawElementArrayATI");
    brebisGL.brebisDrawElements = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *))brebisGLGetProcAddress("glDrawElements");
    brebisGL.brebisDrawElementsBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLint))brebisGLGetProcAddress("glDrawElementsBaseVertex");
    brebisGL.brebisDrawElementsBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLint))brebisGLGetProcAddress("glDrawElementsBaseVertexEXT");
    brebisGL.brebisDrawElementsBaseVertexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLint))brebisGLGetProcAddress("glDrawElementsBaseVertexOES");
    brebisGL.brebisDrawElementsIndirect = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *))brebisGLGetProcAddress("glDrawElementsIndirect");
    brebisGL.brebisDrawElementsInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))brebisGLGetProcAddress("glDrawElementsInstanced");
    brebisGL.brebisDrawElementsInstancedANGLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))brebisGLGetProcAddress("glDrawElementsInstancedANGLE");
    brebisGL.brebisDrawElementsInstancedARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))brebisGLGetProcAddress("glDrawElementsInstancedARB");
    brebisGL.brebisDrawElementsInstancedBaseInstance = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint))brebisGLGetProcAddress("glDrawElementsInstancedBaseInstance");
    brebisGL.brebisDrawElementsInstancedBaseInstanceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint))brebisGLGetProcAddress("glDrawElementsInstancedBaseInstanceEXT");
    brebisGL.brebisDrawElementsInstancedBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))brebisGLGetProcAddress("glDrawElementsInstancedBaseVertex");
    brebisGL.brebisDrawElementsInstancedBaseVertexBaseInstance = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint))brebisGLGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
    brebisGL.brebisDrawElementsInstancedBaseVertexBaseInstanceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint))brebisGLGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstanceEXT");
    brebisGL.brebisDrawElementsInstancedBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))brebisGLGetProcAddress("glDrawElementsInstancedBaseVertexEXT");
    brebisGL.brebisDrawElementsInstancedBaseVertexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint))brebisGLGetProcAddress("glDrawElementsInstancedBaseVertexOES");
    brebisGL.brebisDrawElementsInstancedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))brebisGLGetProcAddress("glDrawElementsInstancedEXT");
    brebisGL.brebisDrawElementsInstancedNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLsizei))brebisGLGetProcAddress("glDrawElementsInstancedNV");
    brebisGL.brebisDrawMeshArraysSUN = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glDrawMeshArraysSUN");
    brebisGL.brebisDrawMeshTasksIndirectNV = (void (KHRONOS_APIENTRY *)(GLintptr))brebisGLGetProcAddress("glDrawMeshTasksIndirectNV");
    brebisGL.brebisDrawMeshTasksNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glDrawMeshTasksNV");
    brebisGL.brebisDrawPixels = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glDrawPixels");
    brebisGL.brebisDrawRangeElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLint, GLsizei))brebisGLGetProcAddress("glDrawRangeElementArrayAPPLE");
    brebisGL.brebisDrawRangeElementArrayATI = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei))brebisGLGetProcAddress("glDrawRangeElementArrayATI");
    brebisGL.brebisDrawRangeElements = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *))brebisGLGetProcAddress("glDrawRangeElements");
    brebisGL.brebisDrawRangeElementsBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))brebisGLGetProcAddress("glDrawRangeElementsBaseVertex");
    brebisGL.brebisDrawRangeElementsBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))brebisGLGetProcAddress("glDrawRangeElementsBaseVertexEXT");
    brebisGL.brebisDrawRangeElementsBaseVertexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint))brebisGLGetProcAddress("glDrawRangeElementsBaseVertexOES");
    brebisGL.brebisDrawRangeElementsEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *))brebisGLGetProcAddress("glDrawRangeElementsEXT");
    brebisGL.brebisDrawTexfOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glDrawTexfOES");
    brebisGL.brebisDrawTexfvOES = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glDrawTexfvOES");
    brebisGL.brebisDrawTexiOES = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glDrawTexiOES");
    brebisGL.brebisDrawTexivOES = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glDrawTexivOES");
    brebisGL.brebisDrawTexsOES = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glDrawTexsOES");
    brebisGL.brebisDrawTexsvOES = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glDrawTexsvOES");
    brebisGL.brebisDrawTextureNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glDrawTextureNV");
    brebisGL.brebisDrawTexxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glDrawTexxOES");
    brebisGL.brebisDrawTexxvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glDrawTexxvOES");
    brebisGL.brebisDrawTransformFeedback = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDrawTransformFeedback");
    brebisGL.brebisDrawTransformFeedbackEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDrawTransformFeedbackEXT");
    brebisGL.brebisDrawTransformFeedbackInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei))brebisGLGetProcAddress("glDrawTransformFeedbackInstanced");
    brebisGL.brebisDrawTransformFeedbackInstancedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei))brebisGLGetProcAddress("glDrawTransformFeedbackInstancedEXT");
    brebisGL.brebisDrawTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glDrawTransformFeedbackNV");
    brebisGL.brebisDrawTransformFeedbackStream = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))brebisGLGetProcAddress("glDrawTransformFeedbackStream");
    brebisGL.brebisDrawTransformFeedbackStreamInstanced = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei))brebisGLGetProcAddress("glDrawTransformFeedbackStreamInstanced");
    brebisGL.brebisDrawVkImageNV = (void (KHRONOS_APIENTRY *)(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glDrawVkImageNV");
    brebisGL.brebisEGLImageTargetRenderbufferStorageOES = (void (KHRONOS_APIENTRY *)(GLenum, GLeglImageOES))brebisGLGetProcAddress("glEGLImageTargetRenderbufferStorageOES");
    brebisGL.brebisEGLImageTargetTexStorageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLeglImageOES, const GLint* ))brebisGLGetProcAddress("glEGLImageTargetTexStorageEXT");
    brebisGL.brebisEGLImageTargetTexture2DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLeglImageOES))brebisGLGetProcAddress("glEGLImageTargetTexture2DOES");
    brebisGL.brebisEGLImageTargetTextureStorageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLeglImageOES, const GLint* ))brebisGLGetProcAddress("glEGLImageTargetTextureStorageEXT");
    brebisGL.brebisEdgeFlag = (void (KHRONOS_APIENTRY *)(GLboolean))brebisGLGetProcAddress("glEdgeFlag");
    brebisGL.brebisEdgeFlagFormatNV = (void (KHRONOS_APIENTRY *)(GLsizei))brebisGLGetProcAddress("glEdgeFlagFormatNV");
    brebisGL.brebisEdgeFlagPointer = (void (KHRONOS_APIENTRY *)(GLsizei, const void *))brebisGLGetProcAddress("glEdgeFlagPointer");
    brebisGL.brebisEdgeFlagPointerEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLsizei, const GLboolean *))brebisGLGetProcAddress("glEdgeFlagPointerEXT");
    brebisGL.brebisEdgeFlagPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, const GLboolean **, GLint))brebisGLGetProcAddress("glEdgeFlagPointerListIBM");
    brebisGL.brebisEdgeFlagv = (void (KHRONOS_APIENTRY *)(const GLboolean *))brebisGLGetProcAddress("glEdgeFlagv");
    brebisGL.brebisElementPointerAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, const void *))brebisGLGetProcAddress("glElementPointerAPPLE");
    brebisGL.brebisElementPointerATI = (void (KHRONOS_APIENTRY *)(GLenum, const void *))brebisGLGetProcAddress("glElementPointerATI");
    brebisGL.brebisEnable = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glEnable");
    brebisGL.brebisEnableClientState = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glEnableClientState");
    brebisGL.brebisEnableClientStateIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glEnableClientStateIndexedEXT");
    brebisGL.brebisEnableClientStateiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glEnableClientStateiEXT");
    brebisGL.brebisEnableDriverControlQCOM = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glEnableDriverControlQCOM");
    brebisGL.brebisEnableIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glEnableIndexedEXT");
    brebisGL.brebisEnableVariantClientStateEXT = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glEnableVariantClientStateEXT");
    brebisGL.brebisEnableVertexArrayAttrib = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glEnableVertexArrayAttrib");
    brebisGL.brebisEnableVertexArrayAttribEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glEnableVertexArrayAttribEXT");
    brebisGL.brebisEnableVertexArrayEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glEnableVertexArrayEXT");
    brebisGL.brebisEnableVertexAttribAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glEnableVertexAttribAPPLE");
    brebisGL.brebisEnableVertexAttribArray = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glEnableVertexAttribArray");
    brebisGL.brebisEnableVertexAttribArrayARB = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glEnableVertexAttribArrayARB");
    brebisGL.brebisEnablei = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glEnablei");
    brebisGL.brebisEnableiEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glEnableiEXT");
    brebisGL.brebisEnableiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glEnableiNV");
    brebisGL.brebisEnableiOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glEnableiOES");
    brebisGL.brebisEnd = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEnd");
    brebisGL.brebisEndConditionalRender = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndConditionalRender");
    brebisGL.brebisEndConditionalRenderNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndConditionalRenderNV");
    brebisGL.brebisEndConditionalRenderNVX = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndConditionalRenderNVX");
    brebisGL.brebisEndFragmentShaderATI = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndFragmentShaderATI");
    brebisGL.brebisEndList = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndList");
    brebisGL.brebisEndOcclusionQueryNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndOcclusionQueryNV");
    brebisGL.brebisEndPerfMonitorAMD = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glEndPerfMonitorAMD");
    brebisGL.brebisEndPerfQueryINTEL = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glEndPerfQueryINTEL");
    brebisGL.brebisEndQuery = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glEndQuery");
    brebisGL.brebisEndQueryARB = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glEndQueryARB");
    brebisGL.brebisEndQueryEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glEndQueryEXT");
    brebisGL.brebisEndQueryIndexed = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glEndQueryIndexed");
    brebisGL.brebisEndTilingQCOM = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glEndTilingQCOM");
    brebisGL.brebisEndTransformFeedback = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndTransformFeedback");
    brebisGL.brebisEndTransformFeedbackEXT = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndTransformFeedbackEXT");
    brebisGL.brebisEndTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndTransformFeedbackNV");
    brebisGL.brebisEndVertexShaderEXT = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEndVertexShaderEXT");
    brebisGL.brebisEndVideoCaptureNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glEndVideoCaptureNV");
    brebisGL.brebisEvalCoord1d = (void (KHRONOS_APIENTRY *)(GLdouble))brebisGLGetProcAddress("glEvalCoord1d");
    brebisGL.brebisEvalCoord1dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glEvalCoord1dv");
    brebisGL.brebisEvalCoord1f = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glEvalCoord1f");
    brebisGL.brebisEvalCoord1fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glEvalCoord1fv");
    brebisGL.brebisEvalCoord1xOES = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glEvalCoord1xOES");
    brebisGL.brebisEvalCoord1xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glEvalCoord1xvOES");
    brebisGL.brebisEvalCoord2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glEvalCoord2d");
    brebisGL.brebisEvalCoord2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glEvalCoord2dv");
    brebisGL.brebisEvalCoord2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glEvalCoord2f");
    brebisGL.brebisEvalCoord2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glEvalCoord2fv");
    brebisGL.brebisEvalCoord2xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))brebisGLGetProcAddress("glEvalCoord2xOES");
    brebisGL.brebisEvalCoord2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glEvalCoord2xvOES");
    brebisGL.brebisEvalMapsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glEvalMapsNV");
    brebisGL.brebisEvalMesh1 = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))brebisGLGetProcAddress("glEvalMesh1");
    brebisGL.brebisEvalMesh2 = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glEvalMesh2");
    brebisGL.brebisEvalPoint1 = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glEvalPoint1");
    brebisGL.brebisEvalPoint2 = (void (KHRONOS_APIENTRY *)(GLint, GLint))brebisGLGetProcAddress("glEvalPoint2");
    brebisGL.brebisEvaluateDepthValuesARB = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glEvaluateDepthValuesARB");
    brebisGL.brebisExecuteProgramNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))brebisGLGetProcAddress("glExecuteProgramNV");
    brebisGL.brebisExtGetBufferPointervQCOM = (void (KHRONOS_APIENTRY *)(GLenum, void **))brebisGLGetProcAddress("glExtGetBufferPointervQCOM");
    brebisGL.brebisExtGetBuffersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))brebisGLGetProcAddress("glExtGetBuffersQCOM");
    brebisGL.brebisExtGetFramebuffersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))brebisGLGetProcAddress("glExtGetFramebuffersQCOM");
    brebisGL.brebisExtGetProgramBinarySourceQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLchar *, GLint *))brebisGLGetProcAddress("glExtGetProgramBinarySourceQCOM");
    brebisGL.brebisExtGetProgramsQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))brebisGLGetProcAddress("glExtGetProgramsQCOM");
    brebisGL.brebisExtGetRenderbuffersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))brebisGLGetProcAddress("glExtGetRenderbuffersQCOM");
    brebisGL.brebisExtGetShadersQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))brebisGLGetProcAddress("glExtGetShadersQCOM");
    brebisGL.brebisExtGetTexLevelParameterivQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint *))brebisGLGetProcAddress("glExtGetTexLevelParameterivQCOM");
    brebisGL.brebisExtGetTexSubImageQCOM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void *))brebisGLGetProcAddress("glExtGetTexSubImageQCOM");
    brebisGL.brebisExtGetTexturesQCOM = (void (KHRONOS_APIENTRY *)(GLuint *, GLint, GLint *))brebisGLGetProcAddress("glExtGetTexturesQCOM");
    brebisGL.brebisExtIsProgramBinaryQCOM = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glExtIsProgramBinaryQCOM");
    brebisGL.brebisExtTexObjectStateOverrideiQCOM = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glExtTexObjectStateOverrideiQCOM");
    brebisGL.brebisExtractComponentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glExtractComponentEXT");
    brebisGL.brebisFeedbackBuffer = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, GLfloat *))brebisGLGetProcAddress("glFeedbackBuffer");
    brebisGL.brebisFeedbackBufferxOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const GLfixed *))brebisGLGetProcAddress("glFeedbackBufferxOES");
    brebisGL.brebisFenceSync = (GLsync(KHRONOS_APIENTRY *)(GLenum, GLbitfield))brebisGLGetProcAddress("glFenceSync");
    brebisGL.brebisFenceSyncAPPLE = (GLsync(KHRONOS_APIENTRY *)(GLenum, GLbitfield))brebisGLGetProcAddress("glFenceSyncAPPLE");
    brebisGL.brebisFinalCombinerInputNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glFinalCombinerInputNV");
    brebisGL.brebisFinish = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glFinish");
    brebisGL.brebisFinishAsyncSGIX = (GLint(KHRONOS_APIENTRY *)(GLuint *))brebisGLGetProcAddress("glFinishAsyncSGIX");
    brebisGL.brebisFinishFenceAPPLE = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glFinishFenceAPPLE");
    brebisGL.brebisFinishFenceNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glFinishFenceNV");
    brebisGL.brebisFinishObjectAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glFinishObjectAPPLE");
    brebisGL.brebisFinishTextureSUNX = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glFinishTextureSUNX");
    brebisGL.brebisFlush = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glFlush");
    brebisGL.brebisFlushMappedBufferRange = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glFlushMappedBufferRange");
    brebisGL.brebisFlushMappedBufferRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glFlushMappedBufferRangeAPPLE");
    brebisGL.brebisFlushMappedBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glFlushMappedBufferRangeEXT");
    brebisGL.brebisFlushMappedNamedBufferRange = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glFlushMappedNamedBufferRange");
    brebisGL.brebisFlushMappedNamedBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glFlushMappedNamedBufferRangeEXT");
    brebisGL.brebisFlushPixelDataRangeNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glFlushPixelDataRangeNV");
    brebisGL.brebisFlushRasterSGIX = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glFlushRasterSGIX");
    brebisGL.brebisFlushStaticDataIBM = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glFlushStaticDataIBM");
    brebisGL.brebisFlushVertexArrayRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, void *))brebisGLGetProcAddress("glFlushVertexArrayRangeAPPLE");
    brebisGL.brebisFlushVertexArrayRangeNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glFlushVertexArrayRangeNV");
    brebisGL.brebisFogCoordFormatNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))brebisGLGetProcAddress("glFogCoordFormatNV");
    brebisGL.brebisFogCoordPointer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glFogCoordPointer");
    brebisGL.brebisFogCoordPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glFogCoordPointerEXT");
    brebisGL.brebisFogCoordPointerListIBM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const void **, GLint))brebisGLGetProcAddress("glFogCoordPointerListIBM");
    brebisGL.brebisFogCoordd = (void (KHRONOS_APIENTRY *)(GLdouble))brebisGLGetProcAddress("glFogCoordd");
    brebisGL.brebisFogCoorddEXT = (void (KHRONOS_APIENTRY *)(GLdouble))brebisGLGetProcAddress("glFogCoorddEXT");
    brebisGL.brebisFogCoorddv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glFogCoorddv");
    brebisGL.brebisFogCoorddvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glFogCoorddvEXT");
    brebisGL.brebisFogCoordf = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glFogCoordf");
    brebisGL.brebisFogCoordfEXT = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glFogCoordfEXT");
    brebisGL.brebisFogCoordfv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glFogCoordfv");
    brebisGL.brebisFogCoordfvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glFogCoordfvEXT");
    brebisGL.brebisFogCoordhNV = (void (KHRONOS_APIENTRY *)(GLhalfNV))brebisGLGetProcAddress("glFogCoordhNV");
    brebisGL.brebisFogCoordhvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glFogCoordhvNV");
    brebisGL.brebisFogFuncSGIS = (void (KHRONOS_APIENTRY *)(GLsizei, const GLfloat *))brebisGLGetProcAddress("glFogFuncSGIS");
    brebisGL.brebisFogf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glFogf");
    brebisGL.brebisFogfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glFogfv");
    brebisGL.brebisFogi = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glFogi");
    brebisGL.brebisFogiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glFogiv");
    brebisGL.brebisFogx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glFogx");
    brebisGL.brebisFogxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glFogxOES");
    brebisGL.brebisFogxv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glFogxv");
    brebisGL.brebisFogxvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glFogxvOES");
    brebisGL.brebisFragmentColorMaterialSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glFragmentColorMaterialSGIX");
    brebisGL.brebisFragmentCoverageColorNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glFragmentCoverageColorNV");
    brebisGL.brebisFragmentLightModelfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glFragmentLightModelfSGIX");
    brebisGL.brebisFragmentLightModelfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glFragmentLightModelfvSGIX");
    brebisGL.brebisFragmentLightModeliSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glFragmentLightModeliSGIX");
    brebisGL.brebisFragmentLightModelivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glFragmentLightModelivSGIX");
    brebisGL.brebisFragmentLightfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glFragmentLightfSGIX");
    brebisGL.brebisFragmentLightfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glFragmentLightfvSGIX");
    brebisGL.brebisFragmentLightiSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glFragmentLightiSGIX");
    brebisGL.brebisFragmentLightivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glFragmentLightivSGIX");
    brebisGL.brebisFragmentMaterialfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glFragmentMaterialfSGIX");
    brebisGL.brebisFragmentMaterialfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glFragmentMaterialfvSGIX");
    brebisGL.brebisFragmentMaterialiSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glFragmentMaterialiSGIX");
    brebisGL.brebisFragmentMaterialivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glFragmentMaterialivSGIX");
    brebisGL.brebisFrameTerminatorGREMEDY = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glFrameTerminatorGREMEDY");
    brebisGL.brebisFrameZoomSGIX = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glFrameZoomSGIX");
    brebisGL.brebisFramebufferDrawBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glFramebufferDrawBufferEXT");
    brebisGL.brebisFramebufferDrawBuffersEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *))brebisGLGetProcAddress("glFramebufferDrawBuffersEXT");
    brebisGL.brebisFramebufferFetchBarrierEXT = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glFramebufferFetchBarrierEXT");
    brebisGL.brebisFramebufferFetchBarrierQCOM = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glFramebufferFetchBarrierQCOM");
    brebisGL.brebisFramebufferFoveationConfigQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint *))brebisGLGetProcAddress("glFramebufferFoveationConfigQCOM");
    brebisGL.brebisFramebufferFoveationParametersQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glFramebufferFoveationParametersQCOM");
    brebisGL.brebisFramebufferParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glFramebufferParameteri");
    brebisGL.brebisFramebufferPixelLocalStorageSizeEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei))brebisGLGetProcAddress("glFramebufferPixelLocalStorageSizeEXT");
    brebisGL.brebisFramebufferReadBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glFramebufferReadBufferEXT");
    brebisGL.brebisFramebufferRenderbuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))brebisGLGetProcAddress("glFramebufferRenderbuffer");
    brebisGL.brebisFramebufferRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))brebisGLGetProcAddress("glFramebufferRenderbufferEXT");
    brebisGL.brebisFramebufferRenderbufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))brebisGLGetProcAddress("glFramebufferRenderbufferOES");
    brebisGL.brebisFramebufferSampleLocationsfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glFramebufferSampleLocationsfvARB");
    brebisGL.brebisFramebufferSampleLocationsfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glFramebufferSampleLocationsfvNV");
    brebisGL.brebisFramebufferSamplePositionsfvAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, const GLfloat *))brebisGLGetProcAddress("glFramebufferSamplePositionsfvAMD");
    brebisGL.brebisFramebufferTexture = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glFramebufferTexture");
    brebisGL.brebisFramebufferTexture1D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glFramebufferTexture1D");
    brebisGL.brebisFramebufferTexture1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glFramebufferTexture1DEXT");
    brebisGL.brebisFramebufferTexture2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glFramebufferTexture2D");
    brebisGL.brebisFramebufferTexture2DDownsampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint))brebisGLGetProcAddress("glFramebufferTexture2DDownsampleIMG");
    brebisGL.brebisFramebufferTexture2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glFramebufferTexture2DEXT");
    brebisGL.brebisFramebufferTexture2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei))brebisGLGetProcAddress("glFramebufferTexture2DMultisampleEXT");
    brebisGL.brebisFramebufferTexture2DMultisampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei))brebisGLGetProcAddress("glFramebufferTexture2DMultisampleIMG");
    brebisGL.brebisFramebufferTexture2DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glFramebufferTexture2DOES");
    brebisGL.brebisFramebufferTexture3D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))brebisGLGetProcAddress("glFramebufferTexture3D");
    brebisGL.brebisFramebufferTexture3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))brebisGLGetProcAddress("glFramebufferTexture3DEXT");
    brebisGL.brebisFramebufferTexture3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint, GLint, GLint))brebisGLGetProcAddress("glFramebufferTexture3DOES");
    brebisGL.brebisFramebufferTextureARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glFramebufferTextureARB");
    brebisGL.brebisFramebufferTextureEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glFramebufferTextureEXT");
    brebisGL.brebisFramebufferTextureFaceARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLenum))brebisGLGetProcAddress("glFramebufferTextureFaceARB");
    brebisGL.brebisFramebufferTextureFaceEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLenum))brebisGLGetProcAddress("glFramebufferTextureFaceEXT");
    brebisGL.brebisFramebufferTextureLayer = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint))brebisGLGetProcAddress("glFramebufferTextureLayer");
    brebisGL.brebisFramebufferTextureLayerARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint))brebisGLGetProcAddress("glFramebufferTextureLayerARB");
    brebisGL.brebisFramebufferTextureLayerDownsampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glFramebufferTextureLayerDownsampleIMG");
    brebisGL.brebisFramebufferTextureLayerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint))brebisGLGetProcAddress("glFramebufferTextureLayerEXT");
    brebisGL.brebisFramebufferTextureMultisampleMultiviewOVR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei))brebisGLGetProcAddress("glFramebufferTextureMultisampleMultiviewOVR");
    brebisGL.brebisFramebufferTextureMultiviewOVR = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint, GLint, GLsizei))brebisGLGetProcAddress("glFramebufferTextureMultiviewOVR");
    brebisGL.brebisFramebufferTextureOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glFramebufferTextureOES");
    brebisGL.brebisFreeObjectBufferATI = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glFreeObjectBufferATI");
    brebisGL.brebisFrontFace = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glFrontFace");
    brebisGL.brebisFrustum = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glFrustum");
    brebisGL.brebisFrustumf = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glFrustumf");
    brebisGL.brebisFrustumfOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glFrustumfOES");
    brebisGL.brebisFrustumx = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glFrustumx");
    brebisGL.brebisFrustumxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glFrustumxOES");
    brebisGL.brebisGenAsyncMarkersSGIX = (GLuint(KHRONOS_APIENTRY *)(GLsizei))brebisGLGetProcAddress("glGenAsyncMarkersSGIX");
    brebisGL.brebisGenBuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenBuffers");
    brebisGL.brebisGenBuffersARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenBuffersARB");
    brebisGL.brebisGenFencesAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenFencesAPPLE");
    brebisGL.brebisGenFencesNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenFencesNV");
    brebisGL.brebisGenFragmentShadersATI = (GLuint(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glGenFragmentShadersATI");
    brebisGL.brebisGenFramebuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenFramebuffers");
    brebisGL.brebisGenFramebuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenFramebuffersEXT");
    brebisGL.brebisGenFramebuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenFramebuffersOES");
    brebisGL.brebisGenLists = (GLuint(KHRONOS_APIENTRY *)(GLsizei))brebisGLGetProcAddress("glGenLists");
    brebisGL.brebisGenNamesAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))brebisGLGetProcAddress("glGenNamesAMD");
    brebisGL.brebisGenOcclusionQueriesNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenOcclusionQueriesNV");
    brebisGL.brebisGenPathsNV = (GLuint(KHRONOS_APIENTRY *)(GLsizei))brebisGLGetProcAddress("glGenPathsNV");
    brebisGL.brebisGenPerfMonitorsAMD = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenPerfMonitorsAMD");
    brebisGL.brebisGenProgramPipelines = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenProgramPipelines");
    brebisGL.brebisGenProgramPipelinesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenProgramPipelinesEXT");
    brebisGL.brebisGenProgramsARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenProgramsARB");
    brebisGL.brebisGenProgramsNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenProgramsNV");
    brebisGL.brebisGenQueries = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenQueries");
    brebisGL.brebisGenQueriesARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenQueriesARB");
    brebisGL.brebisGenQueriesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenQueriesEXT");
    brebisGL.brebisGenQueryResourceTagNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLint *))brebisGLGetProcAddress("glGenQueryResourceTagNV");
    brebisGL.brebisGenRenderbuffers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenRenderbuffers");
    brebisGL.brebisGenRenderbuffersEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenRenderbuffersEXT");
    brebisGL.brebisGenRenderbuffersOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenRenderbuffersOES");
    brebisGL.brebisGenSamplers = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenSamplers");
    brebisGL.brebisGenSemaphoresEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenSemaphoresEXT");
    brebisGL.brebisGenSymbolsEXT = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))brebisGLGetProcAddress("glGenSymbolsEXT");
    brebisGL.brebisGenTextures = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenTextures");
    brebisGL.brebisGenTexturesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenTexturesEXT");
    brebisGL.brebisGenTransformFeedbacks = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenTransformFeedbacks");
    brebisGL.brebisGenTransformFeedbacksNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenTransformFeedbacksNV");
    brebisGL.brebisGenVertexArrays = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenVertexArrays");
    brebisGL.brebisGenVertexArraysAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenVertexArraysAPPLE");
    brebisGL.brebisGenVertexArraysOES = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glGenVertexArraysOES");
    brebisGL.brebisGenVertexShadersEXT = (GLuint(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glGenVertexShadersEXT");
    brebisGL.brebisGenerateMipmap = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glGenerateMipmap");
    brebisGL.brebisGenerateMipmapEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glGenerateMipmapEXT");
    brebisGL.brebisGenerateMipmapOES = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glGenerateMipmapOES");
    brebisGL.brebisGenerateMultiTexMipmapEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glGenerateMultiTexMipmapEXT");
    brebisGL.brebisGenerateTextureMipmap = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glGenerateTextureMipmap");
    brebisGL.brebisGenerateTextureMipmapEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glGenerateTextureMipmapEXT");
    brebisGL.brebisGetActiveAtomicCounterBufferiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetActiveAtomicCounterBufferiv");
    brebisGL.brebisGetActiveAttrib = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *))brebisGLGetProcAddress("glGetActiveAttrib");
    brebisGL.brebisGetActiveAttribARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *))brebisGLGetProcAddress("glGetActiveAttribARB");
    brebisGL.brebisGetActiveSubroutineName = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetActiveSubroutineName");
    brebisGL.brebisGetActiveSubroutineUniformName = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetActiveSubroutineUniformName");
    brebisGL.brebisGetActiveSubroutineUniformiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetActiveSubroutineUniformiv");
    brebisGL.brebisGetActiveUniform = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *))brebisGLGetProcAddress("glGetActiveUniform");
    brebisGL.brebisGetActiveUniformARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *))brebisGLGetProcAddress("glGetActiveUniformARB");
    brebisGL.brebisGetActiveUniformBlockName = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetActiveUniformBlockName");
    brebisGL.brebisGetActiveUniformBlockiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetActiveUniformBlockiv");
    brebisGL.brebisGetActiveUniformName = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetActiveUniformName");
    brebisGL.brebisGetActiveUniformsiv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *, GLenum, GLint *))brebisGLGetProcAddress("glGetActiveUniformsiv");
    brebisGL.brebisGetActiveVaryingNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))brebisGLGetProcAddress("glGetActiveVaryingNV");
    brebisGL.brebisGetArrayObjectfvATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetArrayObjectfvATI");
    brebisGL.brebisGetArrayObjectivATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetArrayObjectivATI");
    brebisGL.brebisGetAttachedObjectsARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *))brebisGLGetProcAddress("glGetAttachedObjectsARB");
    brebisGL.brebisGetAttachedShaders = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLuint *))brebisGLGetProcAddress("glGetAttachedShaders");
    brebisGL.brebisGetAttribLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))brebisGLGetProcAddress("glGetAttribLocation");
    brebisGL.brebisGetAttribLocationARB = (GLint(KHRONOS_APIENTRY *)(GLhandleARB, const GLcharARB *))brebisGLGetProcAddress("glGetAttribLocationARB");
    brebisGL.brebisGetBooleanIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLboolean *))brebisGLGetProcAddress("glGetBooleanIndexedvEXT");
    brebisGL.brebisGetBooleani_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLboolean *))brebisGLGetProcAddress("glGetBooleani_v");
    brebisGL.brebisGetBooleanv = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean *))brebisGLGetProcAddress("glGetBooleanv");
    brebisGL.brebisGetBufferParameteri64v = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint64 *))brebisGLGetProcAddress("glGetBufferParameteri64v");
    brebisGL.brebisGetBufferParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetBufferParameteriv");
    brebisGL.brebisGetBufferParameterivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetBufferParameterivARB");
    brebisGL.brebisGetBufferParameterui64vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint64EXT *))brebisGLGetProcAddress("glGetBufferParameterui64vNV");
    brebisGL.brebisGetBufferPointerv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))brebisGLGetProcAddress("glGetBufferPointerv");
    brebisGL.brebisGetBufferPointervARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))brebisGLGetProcAddress("glGetBufferPointervARB");
    brebisGL.brebisGetBufferPointervOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))brebisGLGetProcAddress("glGetBufferPointervOES");
    brebisGL.brebisGetBufferSubData = (void (KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, void *))brebisGLGetProcAddress("glGetBufferSubData");
    brebisGL.brebisGetBufferSubDataARB = (void (KHRONOS_APIENTRY *)(GLenum, GLintptrARB, GLsizeiptrARB, void *))brebisGLGetProcAddress("glGetBufferSubDataARB");
    brebisGL.brebisGetClipPlane = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble *))brebisGLGetProcAddress("glGetClipPlane");
    brebisGL.brebisGetClipPlanef = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))brebisGLGetProcAddress("glGetClipPlanef");
    brebisGL.brebisGetClipPlanefOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))brebisGLGetProcAddress("glGetClipPlanefOES");
    brebisGL.brebisGetClipPlanex = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))brebisGLGetProcAddress("glGetClipPlanex");
    brebisGL.brebisGetClipPlanexOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))brebisGLGetProcAddress("glGetClipPlanexOES");
    brebisGL.brebisGetColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetColorTable");
    brebisGL.brebisGetColorTableEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetColorTableEXT");
    brebisGL.brebisGetColorTableParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetColorTableParameterfv");
    brebisGL.brebisGetColorTableParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetColorTableParameterfvEXT");
    brebisGL.brebisGetColorTableParameterfvSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetColorTableParameterfvSGI");
    brebisGL.brebisGetColorTableParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetColorTableParameteriv");
    brebisGL.brebisGetColorTableParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetColorTableParameterivEXT");
    brebisGL.brebisGetColorTableParameterivSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetColorTableParameterivSGI");
    brebisGL.brebisGetColorTableSGI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetColorTableSGI");
    brebisGL.brebisGetCombinerInputParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetCombinerInputParameterfvNV");
    brebisGL.brebisGetCombinerInputParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetCombinerInputParameterivNV");
    brebisGL.brebisGetCombinerOutputParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetCombinerOutputParameterfvNV");
    brebisGL.brebisGetCombinerOutputParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetCombinerOutputParameterivNV");
    brebisGL.brebisGetCombinerStageParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetCombinerStageParameterfvNV");
    brebisGL.brebisGetCommandHeaderNV = (GLuint(KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glGetCommandHeaderNV");
    brebisGL.brebisGetCompressedMultiTexImageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, void *))brebisGLGetProcAddress("glGetCompressedMultiTexImageEXT");
    brebisGL.brebisGetCompressedTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, void *))brebisGLGetProcAddress("glGetCompressedTexImage");
    brebisGL.brebisGetCompressedTexImageARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, void *))brebisGLGetProcAddress("glGetCompressedTexImageARB");
    brebisGL.brebisGetCompressedTextureImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, void *))brebisGLGetProcAddress("glGetCompressedTextureImage");
    brebisGL.brebisGetCompressedTextureImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, void *))brebisGLGetProcAddress("glGetCompressedTextureImageEXT");
    brebisGL.brebisGetCompressedTextureSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *))brebisGLGetProcAddress("glGetCompressedTextureSubImage");
    brebisGL.brebisGetConvolutionFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetConvolutionFilter");
    brebisGL.brebisGetConvolutionFilterEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetConvolutionFilterEXT");
    brebisGL.brebisGetConvolutionParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetConvolutionParameterfv");
    brebisGL.brebisGetConvolutionParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetConvolutionParameterfvEXT");
    brebisGL.brebisGetConvolutionParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetConvolutionParameteriv");
    brebisGL.brebisGetConvolutionParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetConvolutionParameterivEXT");
    brebisGL.brebisGetConvolutionParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetConvolutionParameterxvOES");
    brebisGL.brebisGetCoverageModulationTableNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLfloat *))brebisGLGetProcAddress("glGetCoverageModulationTableNV");
    brebisGL.brebisGetDebugMessageLog = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetDebugMessageLog");
    brebisGL.brebisGetDebugMessageLogAMD = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetDebugMessageLogAMD");
    brebisGL.brebisGetDebugMessageLogARB = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetDebugMessageLogARB");
    brebisGL.brebisGetDebugMessageLogKHR = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetDebugMessageLogKHR");
    brebisGL.brebisGetDetailTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))brebisGLGetProcAddress("glGetDetailTexFuncSGIS");
    brebisGL.brebisGetDoubleIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))brebisGLGetProcAddress("glGetDoubleIndexedvEXT");
    brebisGL.brebisGetDoublei_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))brebisGLGetProcAddress("glGetDoublei_v");
    brebisGL.brebisGetDoublei_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))brebisGLGetProcAddress("glGetDoublei_vEXT");
    brebisGL.brebisGetDoublev = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble *))brebisGLGetProcAddress("glGetDoublev");
    brebisGL.brebisGetDriverControlStringQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetDriverControlStringQCOM");
    brebisGL.brebisGetDriverControlsQCOM = (void (KHRONOS_APIENTRY *)(GLint *, GLsizei, GLuint *))brebisGLGetProcAddress("glGetDriverControlsQCOM");
    brebisGL.brebisGetError = (GLenum(KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glGetError");
    brebisGL.brebisGetFenceivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetFenceivNV");
    brebisGL.brebisGetFinalCombinerInputParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetFinalCombinerInputParameterfvNV");
    brebisGL.brebisGetFinalCombinerInputParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetFinalCombinerInputParameterivNV");
    brebisGL.brebisGetFirstPerfQueryIdINTEL = (void (KHRONOS_APIENTRY *)(GLuint *))brebisGLGetProcAddress("glGetFirstPerfQueryIdINTEL");
    brebisGL.brebisGetFixedv = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))brebisGLGetProcAddress("glGetFixedv");
    brebisGL.brebisGetFixedvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed *))brebisGLGetProcAddress("glGetFixedvOES");
    brebisGL.brebisGetFloatIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetFloatIndexedvEXT");
    brebisGL.brebisGetFloati_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetFloati_v");
    brebisGL.brebisGetFloati_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetFloati_vEXT");
    brebisGL.brebisGetFloati_vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetFloati_vNV");
    brebisGL.brebisGetFloati_vOES = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetFloati_vOES");
    brebisGL.brebisGetFloatv = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))brebisGLGetProcAddress("glGetFloatv");
    brebisGL.brebisGetFogFuncSGIS = (void (KHRONOS_APIENTRY *)(GLfloat *))brebisGLGetProcAddress("glGetFogFuncSGIS");
    brebisGL.brebisGetFragDataIndex = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))brebisGLGetProcAddress("glGetFragDataIndex");
    brebisGL.brebisGetFragDataIndexEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))brebisGLGetProcAddress("glGetFragDataIndexEXT");
    brebisGL.brebisGetFragDataLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))brebisGLGetProcAddress("glGetFragDataLocation");
    brebisGL.brebisGetFragDataLocationEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))brebisGLGetProcAddress("glGetFragDataLocationEXT");
    brebisGL.brebisGetFragmentLightfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetFragmentLightfvSGIX");
    brebisGL.brebisGetFragmentLightivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetFragmentLightivSGIX");
    brebisGL.brebisGetFragmentMaterialfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetFragmentMaterialfvSGIX");
    brebisGL.brebisGetFragmentMaterialivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetFragmentMaterialivSGIX");
    brebisGL.brebisGetFramebufferAttachmentParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetFramebufferAttachmentParameteriv");
    brebisGL.brebisGetFramebufferAttachmentParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetFramebufferAttachmentParameterivEXT");
    brebisGL.brebisGetFramebufferAttachmentParameterivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetFramebufferAttachmentParameterivOES");
    brebisGL.brebisGetFramebufferParameterfvAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLuint, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetFramebufferParameterfvAMD");
    brebisGL.brebisGetFramebufferParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetFramebufferParameteriv");
    brebisGL.brebisGetFramebufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetFramebufferParameterivEXT");
    brebisGL.brebisGetFramebufferPixelLocalStorageSizeEXT = (GLsizei(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glGetFramebufferPixelLocalStorageSizeEXT");
    brebisGL.brebisGetGraphicsResetStatus = (GLenum(KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glGetGraphicsResetStatus");
    brebisGL.brebisGetGraphicsResetStatusARB = (GLenum(KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glGetGraphicsResetStatusARB");
    brebisGL.brebisGetGraphicsResetStatusEXT = (GLenum(KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glGetGraphicsResetStatusEXT");
    brebisGL.brebisGetGraphicsResetStatusKHR = (GLenum(KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glGetGraphicsResetStatusKHR");
    brebisGL.brebisGetHandleARB = (GLhandleARB(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glGetHandleARB");
    brebisGL.brebisGetHistogram = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetHistogram");
    brebisGL.brebisGetHistogramEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetHistogramEXT");
    brebisGL.brebisGetHistogramParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetHistogramParameterfv");
    brebisGL.brebisGetHistogramParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetHistogramParameterfvEXT");
    brebisGL.brebisGetHistogramParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetHistogramParameteriv");
    brebisGL.brebisGetHistogramParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetHistogramParameterivEXT");
    brebisGL.brebisGetHistogramParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetHistogramParameterxvOES");
    brebisGL.brebisGetImageHandleARB = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLint, GLboolean, GLint, GLenum))brebisGLGetProcAddress("glGetImageHandleARB");
    brebisGL.brebisGetImageHandleNV = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLint, GLboolean, GLint, GLenum))brebisGLGetProcAddress("glGetImageHandleNV");
    brebisGL.brebisGetImageTransformParameterfvHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetImageTransformParameterfvHP");
    brebisGL.brebisGetImageTransformParameterivHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetImageTransformParameterivHP");
    brebisGL.brebisGetInfoLogARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *))brebisGLGetProcAddress("glGetInfoLogARB");
    brebisGL.brebisGetInstrumentsSGIX = (GLint(KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glGetInstrumentsSGIX");
    brebisGL.brebisGetInteger64i_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint64 *))brebisGLGetProcAddress("glGetInteger64i_v");
    brebisGL.brebisGetInteger64v = (void (KHRONOS_APIENTRY *)(GLenum, GLint64 *))brebisGLGetProcAddress("glGetInteger64v");
    brebisGL.brebisGetInteger64vAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint64 *))brebisGLGetProcAddress("glGetInteger64vAPPLE");
    brebisGL.brebisGetIntegerIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))brebisGLGetProcAddress("glGetIntegerIndexedvEXT");
    brebisGL.brebisGetIntegeri_v = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))brebisGLGetProcAddress("glGetIntegeri_v");
    brebisGL.brebisGetIntegeri_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))brebisGLGetProcAddress("glGetIntegeri_vEXT");
    brebisGL.brebisGetIntegerui64i_vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64EXT *))brebisGLGetProcAddress("glGetIntegerui64i_vNV");
    brebisGL.brebisGetIntegerui64vNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint64EXT *))brebisGLGetProcAddress("glGetIntegerui64vNV");
    brebisGL.brebisGetIntegerv = (void (KHRONOS_APIENTRY *)(GLenum, GLint *))brebisGLGetProcAddress("glGetIntegerv");
    brebisGL.brebisGetInternalformatSampleivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint *))brebisGLGetProcAddress("glGetInternalformatSampleivNV");
    brebisGL.brebisGetInternalformati64v = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, GLint64 *))brebisGLGetProcAddress("glGetInternalformati64v");
    brebisGL.brebisGetInternalformativ = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, GLint *))brebisGLGetProcAddress("glGetInternalformativ");
    brebisGL.brebisGetInvariantBooleanvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean *))brebisGLGetProcAddress("glGetInvariantBooleanvEXT");
    brebisGL.brebisGetInvariantFloatvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetInvariantFloatvEXT");
    brebisGL.brebisGetInvariantIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetInvariantIntegervEXT");
    brebisGL.brebisGetLightfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetLightfv");
    brebisGL.brebisGetLightiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetLightiv");
    brebisGL.brebisGetLightxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetLightxOES");
    brebisGL.brebisGetLightxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetLightxv");
    brebisGL.brebisGetLightxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetLightxvOES");
    brebisGL.brebisGetListParameterfvSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetListParameterfvSGIX");
    brebisGL.brebisGetListParameterivSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetListParameterivSGIX");
    brebisGL.brebisGetLocalConstantBooleanvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean *))brebisGLGetProcAddress("glGetLocalConstantBooleanvEXT");
    brebisGL.brebisGetLocalConstantFloatvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetLocalConstantFloatvEXT");
    brebisGL.brebisGetLocalConstantIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetLocalConstantIntegervEXT");
    brebisGL.brebisGetMapAttribParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMapAttribParameterfvNV");
    brebisGL.brebisGetMapAttribParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetMapAttribParameterivNV");
    brebisGL.brebisGetMapControlPointsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void *))brebisGLGetProcAddress("glGetMapControlPointsNV");
    brebisGL.brebisGetMapParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMapParameterfvNV");
    brebisGL.brebisGetMapParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetMapParameterivNV");
    brebisGL.brebisGetMapdv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLdouble *))brebisGLGetProcAddress("glGetMapdv");
    brebisGL.brebisGetMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMapfv");
    brebisGL.brebisGetMapiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetMapiv");
    brebisGL.brebisGetMapxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetMapxvOES");
    brebisGL.brebisGetMaterialfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMaterialfv");
    brebisGL.brebisGetMaterialiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetMaterialiv");
    brebisGL.brebisGetMaterialxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glGetMaterialxOES");
    brebisGL.brebisGetMaterialxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetMaterialxv");
    brebisGL.brebisGetMaterialxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetMaterialxvOES");
    brebisGL.brebisGetMemoryObjectDetachedResourcesuivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLsizei, GLuint *))brebisGLGetProcAddress("glGetMemoryObjectDetachedResourcesuivNV");
    brebisGL.brebisGetMemoryObjectParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetMemoryObjectParameterivEXT");
    brebisGL.brebisGetMinmax = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetMinmax");
    brebisGL.brebisGetMinmaxEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetMinmaxEXT");
    brebisGL.brebisGetMinmaxParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMinmaxParameterfv");
    brebisGL.brebisGetMinmaxParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMinmaxParameterfvEXT");
    brebisGL.brebisGetMinmaxParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetMinmaxParameteriv");
    brebisGL.brebisGetMinmaxParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetMinmaxParameterivEXT");
    brebisGL.brebisGetMultiTexEnvfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMultiTexEnvfvEXT");
    brebisGL.brebisGetMultiTexEnvivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetMultiTexEnvivEXT");
    brebisGL.brebisGetMultiTexGendvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLdouble *))brebisGLGetProcAddress("glGetMultiTexGendvEXT");
    brebisGL.brebisGetMultiTexGenfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMultiTexGenfvEXT");
    brebisGL.brebisGetMultiTexGenivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetMultiTexGenivEXT");
    brebisGL.brebisGetMultiTexImageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetMultiTexImageEXT");
    brebisGL.brebisGetMultiTexLevelParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMultiTexLevelParameterfvEXT");
    brebisGL.brebisGetMultiTexLevelParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLenum, GLint *))brebisGLGetProcAddress("glGetMultiTexLevelParameterivEXT");
    brebisGL.brebisGetMultiTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetMultiTexParameterIivEXT");
    brebisGL.brebisGetMultiTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint *))brebisGLGetProcAddress("glGetMultiTexParameterIuivEXT");
    brebisGL.brebisGetMultiTexParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetMultiTexParameterfvEXT");
    brebisGL.brebisGetMultiTexParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetMultiTexParameterivEXT");
    brebisGL.brebisGetMultisamplefv = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetMultisamplefv");
    brebisGL.brebisGetMultisamplefvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetMultisamplefvNV");
    brebisGL.brebisGetNamedBufferParameteri64v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64 *))brebisGLGetProcAddress("glGetNamedBufferParameteri64v");
    brebisGL.brebisGetNamedBufferParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedBufferParameteriv");
    brebisGL.brebisGetNamedBufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedBufferParameterivEXT");
    brebisGL.brebisGetNamedBufferParameterui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))brebisGLGetProcAddress("glGetNamedBufferParameterui64vNV");
    brebisGL.brebisGetNamedBufferPointerv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))brebisGLGetProcAddress("glGetNamedBufferPointerv");
    brebisGL.brebisGetNamedBufferPointervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))brebisGLGetProcAddress("glGetNamedBufferPointervEXT");
    brebisGL.brebisGetNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, void *))brebisGLGetProcAddress("glGetNamedBufferSubData");
    brebisGL.brebisGetNamedBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, void *))brebisGLGetProcAddress("glGetNamedBufferSubDataEXT");
    brebisGL.brebisGetNamedFramebufferAttachmentParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedFramebufferAttachmentParameteriv");
    brebisGL.brebisGetNamedFramebufferAttachmentParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT");
    brebisGL.brebisGetNamedFramebufferParameterfvAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLuint, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetNamedFramebufferParameterfvAMD");
    brebisGL.brebisGetNamedFramebufferParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedFramebufferParameteriv");
    brebisGL.brebisGetNamedFramebufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedFramebufferParameterivEXT");
    brebisGL.brebisGetNamedProgramLocalParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint *))brebisGLGetProcAddress("glGetNamedProgramLocalParameterIivEXT");
    brebisGL.brebisGetNamedProgramLocalParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLuint *))brebisGLGetProcAddress("glGetNamedProgramLocalParameterIuivEXT");
    brebisGL.brebisGetNamedProgramLocalParameterdvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLdouble *))brebisGLGetProcAddress("glGetNamedProgramLocalParameterdvEXT");
    brebisGL.brebisGetNamedProgramLocalParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetNamedProgramLocalParameterfvEXT");
    brebisGL.brebisGetNamedProgramStringEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetNamedProgramStringEXT");
    brebisGL.brebisGetNamedProgramivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedProgramivEXT");
    brebisGL.brebisGetNamedRenderbufferParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedRenderbufferParameteriv");
    brebisGL.brebisGetNamedRenderbufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedRenderbufferParameterivEXT");
    brebisGL.brebisGetNamedStringARB = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *, GLsizei, GLint *, GLchar *))brebisGLGetProcAddress("glGetNamedStringARB");
    brebisGL.brebisGetNamedStringivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *, GLenum, GLint *))brebisGLGetProcAddress("glGetNamedStringivARB");
    brebisGL.brebisGetNextPerfQueryIdINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint *))brebisGLGetProcAddress("glGetNextPerfQueryIdINTEL");
    brebisGL.brebisGetObjectBufferfvATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetObjectBufferfvATI");
    brebisGL.brebisGetObjectBufferivATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetObjectBufferivATI");
    brebisGL.brebisGetObjectLabel = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetObjectLabel");
    brebisGL.brebisGetObjectLabelEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetObjectLabelEXT");
    brebisGL.brebisGetObjectLabelKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetObjectLabelKHR");
    brebisGL.brebisGetObjectParameterfvARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLenum, GLfloat *))brebisGLGetProcAddress("glGetObjectParameterfvARB");
    brebisGL.brebisGetObjectParameterivAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetObjectParameterivAPPLE");
    brebisGL.brebisGetObjectParameterivARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLenum, GLint *))brebisGLGetProcAddress("glGetObjectParameterivARB");
    brebisGL.brebisGetObjectPtrLabel = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetObjectPtrLabel");
    brebisGL.brebisGetObjectPtrLabelKHR = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetObjectPtrLabelKHR");
    brebisGL.brebisGetOcclusionQueryivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetOcclusionQueryivNV");
    brebisGL.brebisGetOcclusionQueryuivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetOcclusionQueryuivNV");
    brebisGL.brebisGetPathColorGenfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetPathColorGenfvNV");
    brebisGL.brebisGetPathColorGenivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetPathColorGenivNV");
    brebisGL.brebisGetPathCommandsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte *))brebisGLGetProcAddress("glGetPathCommandsNV");
    brebisGL.brebisGetPathCoordsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat *))brebisGLGetProcAddress("glGetPathCoordsNV");
    brebisGL.brebisGetPathDashArrayNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat *))brebisGLGetProcAddress("glGetPathDashArrayNV");
    brebisGL.brebisGetPathLengthNV = (GLfloat(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei))brebisGLGetProcAddress("glGetPathLengthNV");
    brebisGL.brebisGetPathMetricRangeNV = (void (KHRONOS_APIENTRY *)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetPathMetricRangeNV");
    brebisGL.brebisGetPathMetricsNV = (void (KHRONOS_APIENTRY *)(GLbitfield, GLsizei, GLenum, const void *, GLuint, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetPathMetricsNV");
    brebisGL.brebisGetPathParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetPathParameterfvNV");
    brebisGL.brebisGetPathParameterivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetPathParameterivNV");
    brebisGL.brebisGetPathSpacingNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, const void *, GLuint, GLfloat, GLfloat, GLenum, GLfloat *))brebisGLGetProcAddress("glGetPathSpacingNV");
    brebisGL.brebisGetPathTexGenfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetPathTexGenfvNV");
    brebisGL.brebisGetPathTexGenivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetPathTexGenivNV");
    brebisGL.brebisGetPerfCounterInfoINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *))brebisGLGetProcAddress("glGetPerfCounterInfoINTEL");
    brebisGL.brebisGetPerfMonitorCounterDataAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLuint *, GLint *))brebisGLGetProcAddress("glGetPerfMonitorCounterDataAMD");
    brebisGL.brebisGetPerfMonitorCounterInfoAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, void *))brebisGLGetProcAddress("glGetPerfMonitorCounterInfoAMD");
    brebisGL.brebisGetPerfMonitorCounterStringAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetPerfMonitorCounterStringAMD");
    brebisGL.brebisGetPerfMonitorCountersAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLint *, GLint *, GLsizei, GLuint *))brebisGLGetProcAddress("glGetPerfMonitorCountersAMD");
    brebisGL.brebisGetPerfMonitorGroupStringAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetPerfMonitorGroupStringAMD");
    brebisGL.brebisGetPerfMonitorGroupsAMD = (void (KHRONOS_APIENTRY *)(GLint *, GLsizei, GLuint *))brebisGLGetProcAddress("glGetPerfMonitorGroupsAMD");
    brebisGL.brebisGetPerfQueryDataINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, void *, GLuint *))brebisGLGetProcAddress("glGetPerfQueryDataINTEL");
    brebisGL.brebisGetPerfQueryIdByNameINTEL = (void (KHRONOS_APIENTRY *)(GLchar *, GLuint *))brebisGLGetProcAddress("glGetPerfQueryIdByNameINTEL");
    brebisGL.brebisGetPerfQueryInfoINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *))brebisGLGetProcAddress("glGetPerfQueryInfoINTEL");
    brebisGL.brebisGetPixelMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))brebisGLGetProcAddress("glGetPixelMapfv");
    brebisGL.brebisGetPixelMapuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLuint *))brebisGLGetProcAddress("glGetPixelMapuiv");
    brebisGL.brebisGetPixelMapusv = (void (KHRONOS_APIENTRY *)(GLenum, GLushort *))brebisGLGetProcAddress("glGetPixelMapusv");
    brebisGL.brebisGetPixelMapxv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLfixed *))brebisGLGetProcAddress("glGetPixelMapxv");
    brebisGL.brebisGetPixelTexGenParameterfvSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))brebisGLGetProcAddress("glGetPixelTexGenParameterfvSGIS");
    brebisGL.brebisGetPixelTexGenParameterivSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint *))brebisGLGetProcAddress("glGetPixelTexGenParameterivSGIS");
    brebisGL.brebisGetPixelTransformParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetPixelTransformParameterfvEXT");
    brebisGL.brebisGetPixelTransformParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetPixelTransformParameterivEXT");
    brebisGL.brebisGetPointerIndexedvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, void **))brebisGLGetProcAddress("glGetPointerIndexedvEXT");
    brebisGL.brebisGetPointeri_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, void **))brebisGLGetProcAddress("glGetPointeri_vEXT");
    brebisGL.brebisGetPointerv = (void (KHRONOS_APIENTRY *)(GLenum, void **))brebisGLGetProcAddress("glGetPointerv");
    brebisGL.brebisGetPointervEXT = (void (KHRONOS_APIENTRY *)(GLenum, void **))brebisGLGetProcAddress("glGetPointervEXT");
    brebisGL.brebisGetPointervKHR = (void (KHRONOS_APIENTRY *)(GLenum, void **))brebisGLGetProcAddress("glGetPointervKHR");
    brebisGL.brebisGetPolygonStipple = (void (KHRONOS_APIENTRY *)(GLubyte *))brebisGLGetProcAddress("glGetPolygonStipple");
    brebisGL.brebisGetProgramBinary = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLenum *, void *))brebisGLGetProcAddress("glGetProgramBinary");
    brebisGL.brebisGetProgramBinaryOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLenum *, void *))brebisGLGetProcAddress("glGetProgramBinaryOES");
    brebisGL.brebisGetProgramEnvParameterIivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))brebisGLGetProcAddress("glGetProgramEnvParameterIivNV");
    brebisGL.brebisGetProgramEnvParameterIuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))brebisGLGetProcAddress("glGetProgramEnvParameterIuivNV");
    brebisGL.brebisGetProgramEnvParameterdvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))brebisGLGetProcAddress("glGetProgramEnvParameterdvARB");
    brebisGL.brebisGetProgramEnvParameterfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetProgramEnvParameterfvARB");
    brebisGL.brebisGetProgramInfoLog = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetProgramInfoLog");
    brebisGL.brebisGetProgramInterfaceiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetProgramInterfaceiv");
    brebisGL.brebisGetProgramLocalParameterIivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint *))brebisGLGetProcAddress("glGetProgramLocalParameterIivNV");
    brebisGL.brebisGetProgramLocalParameterIuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))brebisGLGetProcAddress("glGetProgramLocalParameterIuivNV");
    brebisGL.brebisGetProgramLocalParameterdvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble *))brebisGLGetProcAddress("glGetProgramLocalParameterdvARB");
    brebisGL.brebisGetProgramLocalParameterfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat *))brebisGLGetProcAddress("glGetProgramLocalParameterfvARB");
    brebisGL.brebisGetProgramNamedParameterdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLdouble *))brebisGLGetProcAddress("glGetProgramNamedParameterdvNV");
    brebisGL.brebisGetProgramNamedParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLfloat *))brebisGLGetProcAddress("glGetProgramNamedParameterfvNV");
    brebisGL.brebisGetProgramParameterdvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLdouble *))brebisGLGetProcAddress("glGetProgramParameterdvNV");
    brebisGL.brebisGetProgramParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetProgramParameterfvNV");
    brebisGL.brebisGetProgramPipelineInfoLog = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetProgramPipelineInfoLog");
    brebisGL.brebisGetProgramPipelineInfoLogEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetProgramPipelineInfoLogEXT");
    brebisGL.brebisGetProgramPipelineiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetProgramPipelineiv");
    brebisGL.brebisGetProgramPipelineivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetProgramPipelineivEXT");
    brebisGL.brebisGetProgramResourceIndex = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))brebisGLGetProcAddress("glGetProgramResourceIndex");
    brebisGL.brebisGetProgramResourceLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))brebisGLGetProcAddress("glGetProgramResourceLocation");
    brebisGL.brebisGetProgramResourceLocationIndex = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))brebisGLGetProcAddress("glGetProgramResourceLocationIndex");
    brebisGL.brebisGetProgramResourceLocationIndexEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))brebisGLGetProcAddress("glGetProgramResourceLocationIndexEXT");
    brebisGL.brebisGetProgramResourceName = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetProgramResourceName");
    brebisGL.brebisGetProgramResourcefvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *))brebisGLGetProcAddress("glGetProgramResourcefvNV");
    brebisGL.brebisGetProgramResourceiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *))brebisGLGetProcAddress("glGetProgramResourceiv");
    brebisGL.brebisGetProgramStageiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetProgramStageiv");
    brebisGL.brebisGetProgramStringARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void *))brebisGLGetProcAddress("glGetProgramStringARB");
    brebisGL.brebisGetProgramStringNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLubyte *))brebisGLGetProcAddress("glGetProgramStringNV");
    brebisGL.brebisGetProgramSubroutineParameteruivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint *))brebisGLGetProcAddress("glGetProgramSubroutineParameteruivNV");
    brebisGL.brebisGetProgramiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetProgramiv");
    brebisGL.brebisGetProgramivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetProgramivARB");
    brebisGL.brebisGetProgramivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetProgramivNV");
    brebisGL.brebisGetQueryBufferObjecti64v = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))brebisGLGetProcAddress("glGetQueryBufferObjecti64v");
    brebisGL.brebisGetQueryBufferObjectiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))brebisGLGetProcAddress("glGetQueryBufferObjectiv");
    brebisGL.brebisGetQueryBufferObjectui64v = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))brebisGLGetProcAddress("glGetQueryBufferObjectui64v");
    brebisGL.brebisGetQueryBufferObjectuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLintptr))brebisGLGetProcAddress("glGetQueryBufferObjectuiv");
    brebisGL.brebisGetQueryIndexediv = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetQueryIndexediv");
    brebisGL.brebisGetQueryObjecti64v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64 *))brebisGLGetProcAddress("glGetQueryObjecti64v");
    brebisGL.brebisGetQueryObjecti64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64 *))brebisGLGetProcAddress("glGetQueryObjecti64vEXT");
    brebisGL.brebisGetQueryObjectiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetQueryObjectiv");
    brebisGL.brebisGetQueryObjectivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetQueryObjectivARB");
    brebisGL.brebisGetQueryObjectivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetQueryObjectivEXT");
    brebisGL.brebisGetQueryObjectui64v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64 *))brebisGLGetProcAddress("glGetQueryObjectui64v");
    brebisGL.brebisGetQueryObjectui64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64 *))brebisGLGetProcAddress("glGetQueryObjectui64vEXT");
    brebisGL.brebisGetQueryObjectuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetQueryObjectuiv");
    brebisGL.brebisGetQueryObjectuivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetQueryObjectuivARB");
    brebisGL.brebisGetQueryObjectuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetQueryObjectuivEXT");
    brebisGL.brebisGetQueryiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetQueryiv");
    brebisGL.brebisGetQueryivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetQueryivARB");
    brebisGL.brebisGetQueryivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetQueryivEXT");
    brebisGL.brebisGetRenderbufferParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetRenderbufferParameteriv");
    brebisGL.brebisGetRenderbufferParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetRenderbufferParameterivEXT");
    brebisGL.brebisGetRenderbufferParameterivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetRenderbufferParameterivOES");
    brebisGL.brebisGetSamplerParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetSamplerParameterIiv");
    brebisGL.brebisGetSamplerParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetSamplerParameterIivEXT");
    brebisGL.brebisGetSamplerParameterIivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetSamplerParameterIivOES");
    brebisGL.brebisGetSamplerParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetSamplerParameterIuiv");
    brebisGL.brebisGetSamplerParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetSamplerParameterIuivEXT");
    brebisGL.brebisGetSamplerParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetSamplerParameterIuivOES");
    brebisGL.brebisGetSamplerParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetSamplerParameterfv");
    brebisGL.brebisGetSamplerParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetSamplerParameteriv");
    brebisGL.brebisGetSemaphoreParameterui64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64 *))brebisGLGetProcAddress("glGetSemaphoreParameterui64vEXT");
    brebisGL.brebisGetSeparableFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *, void *, void *))brebisGLGetProcAddress("glGetSeparableFilter");
    brebisGL.brebisGetSeparableFilterEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, void *, void *, void *))brebisGLGetProcAddress("glGetSeparableFilterEXT");
    brebisGL.brebisGetShaderInfoLog = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetShaderInfoLog");
    brebisGL.brebisGetShaderPrecisionFormat = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *, GLint *))brebisGLGetProcAddress("glGetShaderPrecisionFormat");
    brebisGL.brebisGetShaderSource = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetShaderSource");
    brebisGL.brebisGetShaderSourceARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *))brebisGLGetProcAddress("glGetShaderSourceARB");
    brebisGL.brebisGetShaderiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetShaderiv");
    brebisGL.brebisGetShadingRateImagePaletteNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum *))brebisGLGetProcAddress("glGetShadingRateImagePaletteNV");
    brebisGL.brebisGetShadingRateSampleLocationivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLint *))brebisGLGetProcAddress("glGetShadingRateSampleLocationivNV");
    brebisGL.brebisGetSharpenTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))brebisGLGetProcAddress("glGetSharpenTexFuncSGIS");
    brebisGL.brebisGetStageIndexNV = (GLushort(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glGetStageIndexNV");
    brebisGL.brebisGetString = (const GLubyte *(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glGetString");
    brebisGL.brebisGetStringi = (const GLubyte *(KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glGetStringi");
    brebisGL.brebisGetSubroutineIndex = (GLuint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))brebisGLGetProcAddress("glGetSubroutineIndex");
    brebisGL.brebisGetSubroutineUniformLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, GLenum, const GLchar *))brebisGLGetProcAddress("glGetSubroutineUniformLocation");
    brebisGL.brebisGetSynciv = (void (KHRONOS_APIENTRY *)(GLsync, GLenum, GLsizei, GLsizei *, GLint *))brebisGLGetProcAddress("glGetSynciv");
    brebisGL.brebisGetSyncivAPPLE = (void (KHRONOS_APIENTRY *)(GLsync, GLenum, GLsizei, GLsizei *, GLint *))brebisGLGetProcAddress("glGetSyncivAPPLE");
    brebisGL.brebisGetTexBumpParameterfvATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat *))brebisGLGetProcAddress("glGetTexBumpParameterfvATI");
    brebisGL.brebisGetTexBumpParameterivATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint *))brebisGLGetProcAddress("glGetTexBumpParameterivATI");
    brebisGL.brebisGetTexEnvfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTexEnvfv");
    brebisGL.brebisGetTexEnviv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetTexEnviv");
    brebisGL.brebisGetTexEnvxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetTexEnvxv");
    brebisGL.brebisGetTexEnvxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetTexEnvxvOES");
    brebisGL.brebisGetTexFilterFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTexFilterFuncSGIS");
    brebisGL.brebisGetTexGendv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLdouble *))brebisGLGetProcAddress("glGetTexGendv");
    brebisGL.brebisGetTexGenfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTexGenfv");
    brebisGL.brebisGetTexGenfvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTexGenfvOES");
    brebisGL.brebisGetTexGeniv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetTexGeniv");
    brebisGL.brebisGetTexGenivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetTexGenivOES");
    brebisGL.brebisGetTexGenxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetTexGenxvOES");
    brebisGL.brebisGetTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetTexImage");
    brebisGL.brebisGetTexLevelParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTexLevelParameterfv");
    brebisGL.brebisGetTexLevelParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLint *))brebisGLGetProcAddress("glGetTexLevelParameteriv");
    brebisGL.brebisGetTexLevelParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLfixed *))brebisGLGetProcAddress("glGetTexLevelParameterxvOES");
    brebisGL.brebisGetTexParameterIiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetTexParameterIiv");
    brebisGL.brebisGetTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetTexParameterIivEXT");
    brebisGL.brebisGetTexParameterIivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetTexParameterIivOES");
    brebisGL.brebisGetTexParameterIuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint *))brebisGLGetProcAddress("glGetTexParameterIuiv");
    brebisGL.brebisGetTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint *))brebisGLGetProcAddress("glGetTexParameterIuivEXT");
    brebisGL.brebisGetTexParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint *))brebisGLGetProcAddress("glGetTexParameterIuivOES");
    brebisGL.brebisGetTexParameterPointervAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, void **))brebisGLGetProcAddress("glGetTexParameterPointervAPPLE");
    brebisGL.brebisGetTexParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTexParameterfv");
    brebisGL.brebisGetTexParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetTexParameteriv");
    brebisGL.brebisGetTexParameterxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetTexParameterxv");
    brebisGL.brebisGetTexParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed *))brebisGLGetProcAddress("glGetTexParameterxvOES");
    brebisGL.brebisGetTextureHandleARB = (GLuint64(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glGetTextureHandleARB");
    brebisGL.brebisGetTextureHandleIMG = (GLuint64(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glGetTextureHandleIMG");
    brebisGL.brebisGetTextureHandleNV = (GLuint64(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glGetTextureHandleNV");
    brebisGL.brebisGetTextureImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetTextureImage");
    brebisGL.brebisGetTextureImageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLenum, void *))brebisGLGetProcAddress("glGetTextureImageEXT");
    brebisGL.brebisGetTextureLevelParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTextureLevelParameterfv");
    brebisGL.brebisGetTextureLevelParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTextureLevelParameterfvEXT");
    brebisGL.brebisGetTextureLevelParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLint *))brebisGLGetProcAddress("glGetTextureLevelParameteriv");
    brebisGL.brebisGetTextureLevelParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLenum, GLint *))brebisGLGetProcAddress("glGetTextureLevelParameterivEXT");
    brebisGL.brebisGetTextureParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetTextureParameterIiv");
    brebisGL.brebisGetTextureParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetTextureParameterIivEXT");
    brebisGL.brebisGetTextureParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetTextureParameterIuiv");
    brebisGL.brebisGetTextureParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint *))brebisGLGetProcAddress("glGetTextureParameterIuivEXT");
    brebisGL.brebisGetTextureParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTextureParameterfv");
    brebisGL.brebisGetTextureParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLfloat *))brebisGLGetProcAddress("glGetTextureParameterfvEXT");
    brebisGL.brebisGetTextureParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetTextureParameteriv");
    brebisGL.brebisGetTextureParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint *))brebisGLGetProcAddress("glGetTextureParameterivEXT");
    brebisGL.brebisGetTextureSamplerHandleARB = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glGetTextureSamplerHandleARB");
    brebisGL.brebisGetTextureSamplerHandleIMG = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glGetTextureSamplerHandleIMG");
    brebisGL.brebisGetTextureSamplerHandleNV = (GLuint64(KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glGetTextureSamplerHandleNV");
    brebisGL.brebisGetTextureSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetTextureSubImage");
    brebisGL.brebisGetTrackMatrixivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetTrackMatrixivNV");
    brebisGL.brebisGetTransformFeedbackVarying = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))brebisGLGetProcAddress("glGetTransformFeedbackVarying");
    brebisGL.brebisGetTransformFeedbackVaryingEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *))brebisGLGetProcAddress("glGetTransformFeedbackVaryingEXT");
    brebisGL.brebisGetTransformFeedbackVaryingNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint *))brebisGLGetProcAddress("glGetTransformFeedbackVaryingNV");
    brebisGL.brebisGetTransformFeedbacki64_v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint64 *))brebisGLGetProcAddress("glGetTransformFeedbacki64_v");
    brebisGL.brebisGetTransformFeedbacki_v = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint *))brebisGLGetProcAddress("glGetTransformFeedbacki_v");
    brebisGL.brebisGetTransformFeedbackiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetTransformFeedbackiv");
    brebisGL.brebisGetTranslatedShaderSourceANGLE = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei *, GLchar *))brebisGLGetProcAddress("glGetTranslatedShaderSourceANGLE");
    brebisGL.brebisGetUniformBlockIndex = (GLuint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))brebisGLGetProcAddress("glGetUniformBlockIndex");
    brebisGL.brebisGetUniformBufferSizeEXT = (GLint(KHRONOS_APIENTRY *)(GLuint, GLint))brebisGLGetProcAddress("glGetUniformBufferSizeEXT");
    brebisGL.brebisGetUniformIndices = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, GLuint *))brebisGLGetProcAddress("glGetUniformIndices");
    brebisGL.brebisGetUniformLocation = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))brebisGLGetProcAddress("glGetUniformLocation");
    brebisGL.brebisGetUniformLocationARB = (GLint(KHRONOS_APIENTRY *)(GLhandleARB, const GLcharARB *))brebisGLGetProcAddress("glGetUniformLocationARB");
    brebisGL.brebisGetUniformOffsetEXT = (GLintptr(KHRONOS_APIENTRY *)(GLuint, GLint))brebisGLGetProcAddress("glGetUniformOffsetEXT");
    brebisGL.brebisGetUniformSubroutineuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLuint *))brebisGLGetProcAddress("glGetUniformSubroutineuiv");
    brebisGL.brebisGetUniformdv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble *))brebisGLGetProcAddress("glGetUniformdv");
    brebisGL.brebisGetUniformfv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat *))brebisGLGetProcAddress("glGetUniformfv");
    brebisGL.brebisGetUniformfvARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLint, GLfloat *))brebisGLGetProcAddress("glGetUniformfvARB");
    brebisGL.brebisGetUniformi64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64 *))brebisGLGetProcAddress("glGetUniformi64vARB");
    brebisGL.brebisGetUniformi64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT *))brebisGLGetProcAddress("glGetUniformi64vNV");
    brebisGL.brebisGetUniformiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint *))brebisGLGetProcAddress("glGetUniformiv");
    brebisGL.brebisGetUniformivARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLint, GLint *))brebisGLGetProcAddress("glGetUniformivARB");
    brebisGL.brebisGetUniformui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64 *))brebisGLGetProcAddress("glGetUniformui64vARB");
    brebisGL.brebisGetUniformui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT *))brebisGLGetProcAddress("glGetUniformui64vNV");
    brebisGL.brebisGetUniformuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint *))brebisGLGetProcAddress("glGetUniformuiv");
    brebisGL.brebisGetUniformuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint *))brebisGLGetProcAddress("glGetUniformuivEXT");
    brebisGL.brebisGetUnsignedBytei_vEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLubyte *))brebisGLGetProcAddress("glGetUnsignedBytei_vEXT");
    brebisGL.brebisGetUnsignedBytevEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLubyte *))brebisGLGetProcAddress("glGetUnsignedBytevEXT");
    brebisGL.brebisGetVariantArrayObjectfvATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetVariantArrayObjectfvATI");
    brebisGL.brebisGetVariantArrayObjectivATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVariantArrayObjectivATI");
    brebisGL.brebisGetVariantBooleanvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean *))brebisGLGetProcAddress("glGetVariantBooleanvEXT");
    brebisGL.brebisGetVariantFloatvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetVariantFloatvEXT");
    brebisGL.brebisGetVariantIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVariantIntegervEXT");
    brebisGL.brebisGetVariantPointervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))brebisGLGetProcAddress("glGetVariantPointervEXT");
    brebisGL.brebisGetVaryingLocationNV = (GLint(KHRONOS_APIENTRY *)(GLuint, const GLchar *))brebisGLGetProcAddress("glGetVaryingLocationNV");
    brebisGL.brebisGetVertexArrayIndexed64iv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint64 *))brebisGLGetProcAddress("glGetVertexArrayIndexed64iv");
    brebisGL.brebisGetVertexArrayIndexediv = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexArrayIndexediv");
    brebisGL.brebisGetVertexArrayIntegeri_vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexArrayIntegeri_vEXT");
    brebisGL.brebisGetVertexArrayIntegervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexArrayIntegervEXT");
    brebisGL.brebisGetVertexArrayPointeri_vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, void **))brebisGLGetProcAddress("glGetVertexArrayPointeri_vEXT");
    brebisGL.brebisGetVertexArrayPointervEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))brebisGLGetProcAddress("glGetVertexArrayPointervEXT");
    brebisGL.brebisGetVertexArrayiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexArrayiv");
    brebisGL.brebisGetVertexAttribArrayObjectfvATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetVertexAttribArrayObjectfvATI");
    brebisGL.brebisGetVertexAttribArrayObjectivATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexAttribArrayObjectivATI");
    brebisGL.brebisGetVertexAttribIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexAttribIiv");
    brebisGL.brebisGetVertexAttribIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexAttribIivEXT");
    brebisGL.brebisGetVertexAttribIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetVertexAttribIuiv");
    brebisGL.brebisGetVertexAttribIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetVertexAttribIuivEXT");
    brebisGL.brebisGetVertexAttribLdv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))brebisGLGetProcAddress("glGetVertexAttribLdv");
    brebisGL.brebisGetVertexAttribLdvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))brebisGLGetProcAddress("glGetVertexAttribLdvEXT");
    brebisGL.brebisGetVertexAttribLi64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64EXT *))brebisGLGetProcAddress("glGetVertexAttribLi64vNV");
    brebisGL.brebisGetVertexAttribLui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))brebisGLGetProcAddress("glGetVertexAttribLui64vARB");
    brebisGL.brebisGetVertexAttribLui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))brebisGLGetProcAddress("glGetVertexAttribLui64vNV");
    brebisGL.brebisGetVertexAttribPointerv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))brebisGLGetProcAddress("glGetVertexAttribPointerv");
    brebisGL.brebisGetVertexAttribPointervARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))brebisGLGetProcAddress("glGetVertexAttribPointervARB");
    brebisGL.brebisGetVertexAttribPointervNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void **))brebisGLGetProcAddress("glGetVertexAttribPointervNV");
    brebisGL.brebisGetVertexAttribdv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))brebisGLGetProcAddress("glGetVertexAttribdv");
    brebisGL.brebisGetVertexAttribdvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))brebisGLGetProcAddress("glGetVertexAttribdvARB");
    brebisGL.brebisGetVertexAttribdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLdouble *))brebisGLGetProcAddress("glGetVertexAttribdvNV");
    brebisGL.brebisGetVertexAttribfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetVertexAttribfv");
    brebisGL.brebisGetVertexAttribfvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetVertexAttribfvARB");
    brebisGL.brebisGetVertexAttribfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetVertexAttribfvNV");
    brebisGL.brebisGetVertexAttribiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexAttribiv");
    brebisGL.brebisGetVertexAttribivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexAttribivARB");
    brebisGL.brebisGetVertexAttribivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVertexAttribivNV");
    brebisGL.brebisGetVideoCaptureStreamdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLdouble *))brebisGLGetProcAddress("glGetVideoCaptureStreamdvNV");
    brebisGL.brebisGetVideoCaptureStreamfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLfloat *))brebisGLGetProcAddress("glGetVideoCaptureStreamfvNV");
    brebisGL.brebisGetVideoCaptureStreamivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVideoCaptureStreamivNV");
    brebisGL.brebisGetVideoCaptureivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVideoCaptureivNV");
    brebisGL.brebisGetVideoi64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint64EXT *))brebisGLGetProcAddress("glGetVideoi64vNV");
    brebisGL.brebisGetVideoivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint *))brebisGLGetProcAddress("glGetVideoivNV");
    brebisGL.brebisGetVideoui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint64EXT *))brebisGLGetProcAddress("glGetVideoui64vNV");
    brebisGL.brebisGetVideouivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glGetVideouivNV");
    brebisGL.brebisGetVkProcAddrNV = (GLVULKANPROCNV(KHRONOS_APIENTRY *)(const GLchar *))brebisGLGetProcAddress("glGetVkProcAddrNV");
    brebisGL.brebisGetnColorTable = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnColorTable");
    brebisGL.brebisGetnColorTableARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnColorTableARB");
    brebisGL.brebisGetnCompressedTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, void *))brebisGLGetProcAddress("glGetnCompressedTexImage");
    brebisGL.brebisGetnCompressedTexImageARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLsizei, void *))brebisGLGetProcAddress("glGetnCompressedTexImageARB");
    brebisGL.brebisGetnConvolutionFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnConvolutionFilter");
    brebisGL.brebisGetnConvolutionFilterARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnConvolutionFilterARB");
    brebisGL.brebisGetnHistogram = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnHistogram");
    brebisGL.brebisGetnHistogramARB = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnHistogramARB");
    brebisGL.brebisGetnMapdv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLdouble *))brebisGLGetProcAddress("glGetnMapdv");
    brebisGL.brebisGetnMapdvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLdouble *))brebisGLGetProcAddress("glGetnMapdvARB");
    brebisGL.brebisGetnMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetnMapfv");
    brebisGL.brebisGetnMapfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetnMapfvARB");
    brebisGL.brebisGetnMapiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLint *))brebisGLGetProcAddress("glGetnMapiv");
    brebisGL.brebisGetnMapivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLint *))brebisGLGetProcAddress("glGetnMapivARB");
    brebisGL.brebisGetnMinmax = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnMinmax");
    brebisGL.brebisGetnMinmaxARB = (void (KHRONOS_APIENTRY *)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnMinmaxARB");
    brebisGL.brebisGetnPixelMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetnPixelMapfv");
    brebisGL.brebisGetnPixelMapfvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetnPixelMapfvARB");
    brebisGL.brebisGetnPixelMapuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))brebisGLGetProcAddress("glGetnPixelMapuiv");
    brebisGL.brebisGetnPixelMapuivARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLuint *))brebisGLGetProcAddress("glGetnPixelMapuivARB");
    brebisGL.brebisGetnPixelMapusv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLushort *))brebisGLGetProcAddress("glGetnPixelMapusv");
    brebisGL.brebisGetnPixelMapusvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLushort *))brebisGLGetProcAddress("glGetnPixelMapusvARB");
    brebisGL.brebisGetnPolygonStipple = (void (KHRONOS_APIENTRY *)(GLsizei, GLubyte *))brebisGLGetProcAddress("glGetnPolygonStipple");
    brebisGL.brebisGetnPolygonStippleARB = (void (KHRONOS_APIENTRY *)(GLsizei, GLubyte *))brebisGLGetProcAddress("glGetnPolygonStippleARB");
    brebisGL.brebisGetnSeparableFilter = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *))brebisGLGetProcAddress("glGetnSeparableFilter");
    brebisGL.brebisGetnSeparableFilterARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *))brebisGLGetProcAddress("glGetnSeparableFilterARB");
    brebisGL.brebisGetnTexImage = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnTexImage");
    brebisGL.brebisGetnTexImageARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glGetnTexImageARB");
    brebisGL.brebisGetnUniformdv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLdouble *))brebisGLGetProcAddress("glGetnUniformdv");
    brebisGL.brebisGetnUniformdvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLdouble *))brebisGLGetProcAddress("glGetnUniformdvARB");
    brebisGL.brebisGetnUniformfv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetnUniformfv");
    brebisGL.brebisGetnUniformfvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetnUniformfvARB");
    brebisGL.brebisGetnUniformfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetnUniformfvEXT");
    brebisGL.brebisGetnUniformfvKHR = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLfloat *))brebisGLGetProcAddress("glGetnUniformfvKHR");
    brebisGL.brebisGetnUniformi64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint64 *))brebisGLGetProcAddress("glGetnUniformi64vARB");
    brebisGL.brebisGetnUniformiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))brebisGLGetProcAddress("glGetnUniformiv");
    brebisGL.brebisGetnUniformivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))brebisGLGetProcAddress("glGetnUniformivARB");
    brebisGL.brebisGetnUniformivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))brebisGLGetProcAddress("glGetnUniformivEXT");
    brebisGL.brebisGetnUniformivKHR = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLint *))brebisGLGetProcAddress("glGetnUniformivKHR");
    brebisGL.brebisGetnUniformui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint64 *))brebisGLGetProcAddress("glGetnUniformui64vARB");
    brebisGL.brebisGetnUniformuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint *))brebisGLGetProcAddress("glGetnUniformuiv");
    brebisGL.brebisGetnUniformuivARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint *))brebisGLGetProcAddress("glGetnUniformuivARB");
    brebisGL.brebisGetnUniformuivKHR = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLuint *))brebisGLGetProcAddress("glGetnUniformuivKHR");
    brebisGL.brebisGlobalAlphaFactorbSUN = (void (KHRONOS_APIENTRY *)(GLbyte))brebisGLGetProcAddress("glGlobalAlphaFactorbSUN");
    brebisGL.brebisGlobalAlphaFactordSUN = (void (KHRONOS_APIENTRY *)(GLdouble))brebisGLGetProcAddress("glGlobalAlphaFactordSUN");
    brebisGL.brebisGlobalAlphaFactorfSUN = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glGlobalAlphaFactorfSUN");
    brebisGL.brebisGlobalAlphaFactoriSUN = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glGlobalAlphaFactoriSUN");
    brebisGL.brebisGlobalAlphaFactorsSUN = (void (KHRONOS_APIENTRY *)(GLshort))brebisGLGetProcAddress("glGlobalAlphaFactorsSUN");
    brebisGL.brebisGlobalAlphaFactorubSUN = (void (KHRONOS_APIENTRY *)(GLubyte))brebisGLGetProcAddress("glGlobalAlphaFactorubSUN");
    brebisGL.brebisGlobalAlphaFactoruiSUN = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glGlobalAlphaFactoruiSUN");
    brebisGL.brebisGlobalAlphaFactorusSUN = (void (KHRONOS_APIENTRY *)(GLushort))brebisGLGetProcAddress("glGlobalAlphaFactorusSUN");
    brebisGL.brebisHint = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glHint");
    brebisGL.brebisHintPGI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glHintPGI");
    brebisGL.brebisHistogram = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLboolean))brebisGLGetProcAddress("glHistogram");
    brebisGL.brebisHistogramEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLboolean))brebisGLGetProcAddress("glHistogramEXT");
    brebisGL.brebisIglooInterfaceSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const void *))brebisGLGetProcAddress("glIglooInterfaceSGIX");
    brebisGL.brebisImageTransformParameterfHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glImageTransformParameterfHP");
    brebisGL.brebisImageTransformParameterfvHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glImageTransformParameterfvHP");
    brebisGL.brebisImageTransformParameteriHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glImageTransformParameteriHP");
    brebisGL.brebisImageTransformParameterivHP = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glImageTransformParameterivHP");
    brebisGL.brebisImportMemoryFdEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64, GLenum, GLint))brebisGLGetProcAddress("glImportMemoryFdEXT");
    brebisGL.brebisImportMemoryWin32HandleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64, GLenum, void *))brebisGLGetProcAddress("glImportMemoryWin32HandleEXT");
    brebisGL.brebisImportMemoryWin32NameEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64, GLenum, const void *))brebisGLGetProcAddress("glImportMemoryWin32NameEXT");
    brebisGL.brebisImportSemaphoreFdEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glImportSemaphoreFdEXT");
    brebisGL.brebisImportSemaphoreWin32HandleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, void *))brebisGLGetProcAddress("glImportSemaphoreWin32HandleEXT");
    brebisGL.brebisImportSemaphoreWin32NameEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *))brebisGLGetProcAddress("glImportSemaphoreWin32NameEXT");
    brebisGL.brebisImportSyncEXT = (GLsync(KHRONOS_APIENTRY *)(GLenum, GLintptr, GLbitfield))brebisGLGetProcAddress("glImportSyncEXT");
    brebisGL.brebisIndexFormatNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))brebisGLGetProcAddress("glIndexFormatNV");
    brebisGL.brebisIndexFuncEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLclampf))brebisGLGetProcAddress("glIndexFuncEXT");
    brebisGL.brebisIndexMask = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIndexMask");
    brebisGL.brebisIndexMaterialEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glIndexMaterialEXT");
    brebisGL.brebisIndexPointer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glIndexPointer");
    brebisGL.brebisIndexPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, const void *))brebisGLGetProcAddress("glIndexPointerEXT");
    brebisGL.brebisIndexPointerListIBM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const void **, GLint))brebisGLGetProcAddress("glIndexPointerListIBM");
    brebisGL.brebisIndexd = (void (KHRONOS_APIENTRY *)(GLdouble))brebisGLGetProcAddress("glIndexd");
    brebisGL.brebisIndexdv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glIndexdv");
    brebisGL.brebisIndexf = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glIndexf");
    brebisGL.brebisIndexfv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glIndexfv");
    brebisGL.brebisIndexi = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glIndexi");
    brebisGL.brebisIndexiv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glIndexiv");
    brebisGL.brebisIndexs = (void (KHRONOS_APIENTRY *)(GLshort))brebisGLGetProcAddress("glIndexs");
    brebisGL.brebisIndexsv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glIndexsv");
    brebisGL.brebisIndexub = (void (KHRONOS_APIENTRY *)(GLubyte))brebisGLGetProcAddress("glIndexub");
    brebisGL.brebisIndexubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))brebisGLGetProcAddress("glIndexubv");
    brebisGL.brebisIndexxOES = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glIndexxOES");
    brebisGL.brebisIndexxvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glIndexxvOES");
    brebisGL.brebisInitNames = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glInitNames");
    brebisGL.brebisInsertComponentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glInsertComponentEXT");
    brebisGL.brebisInsertEventMarkerEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLchar *))brebisGLGetProcAddress("glInsertEventMarkerEXT");
    brebisGL.brebisInstrumentsBufferSGIX = (void (KHRONOS_APIENTRY *)(GLsizei, GLint *))brebisGLGetProcAddress("glInstrumentsBufferSGIX");
    brebisGL.brebisInterleavedArrays = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glInterleavedArrays");
    brebisGL.brebisInterpolatePathsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLfloat))brebisGLGetProcAddress("glInterpolatePathsNV");
    brebisGL.brebisInvalidateBufferData = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glInvalidateBufferData");
    brebisGL.brebisInvalidateBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glInvalidateBufferSubData");
    brebisGL.brebisInvalidateFramebuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLenum *))brebisGLGetProcAddress("glInvalidateFramebuffer");
    brebisGL.brebisInvalidateNamedFramebufferData = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *))brebisGLGetProcAddress("glInvalidateNamedFramebufferData");
    brebisGL.brebisInvalidateNamedFramebufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glInvalidateNamedFramebufferSubData");
    brebisGL.brebisInvalidateSubFramebuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glInvalidateSubFramebuffer");
    brebisGL.brebisInvalidateTexImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint))brebisGLGetProcAddress("glInvalidateTexImage");
    brebisGL.brebisInvalidateTexSubImage = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glInvalidateTexSubImage");
    brebisGL.brebisIsAsyncMarkerSGIX = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsAsyncMarkerSGIX");
    brebisGL.brebisIsBuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsBuffer");
    brebisGL.brebisIsBufferARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsBufferARB");
    brebisGL.brebisIsBufferResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glIsBufferResidentNV");
    brebisGL.brebisIsCommandListNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsCommandListNV");
    brebisGL.brebisIsEnabled = (GLboolean(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glIsEnabled");
    brebisGL.brebisIsEnabledIndexedEXT = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glIsEnabledIndexedEXT");
    brebisGL.brebisIsEnabledi = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glIsEnabledi");
    brebisGL.brebisIsEnablediEXT = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glIsEnablediEXT");
    brebisGL.brebisIsEnablediNV = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glIsEnablediNV");
    brebisGL.brebisIsEnablediOES = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glIsEnablediOES");
    brebisGL.brebisIsFenceAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsFenceAPPLE");
    brebisGL.brebisIsFenceNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsFenceNV");
    brebisGL.brebisIsFramebuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsFramebuffer");
    brebisGL.brebisIsFramebufferEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsFramebufferEXT");
    brebisGL.brebisIsFramebufferOES = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsFramebufferOES");
    brebisGL.brebisIsImageHandleResidentARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glIsImageHandleResidentARB");
    brebisGL.brebisIsImageHandleResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glIsImageHandleResidentNV");
    brebisGL.brebisIsList = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsList");
    brebisGL.brebisIsMemoryObjectEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsMemoryObjectEXT");
    brebisGL.brebisIsNameAMD = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glIsNameAMD");
    brebisGL.brebisIsNamedBufferResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsNamedBufferResidentNV");
    brebisGL.brebisIsNamedStringARB = (GLboolean(KHRONOS_APIENTRY *)(GLint, const GLchar *))brebisGLGetProcAddress("glIsNamedStringARB");
    brebisGL.brebisIsObjectBufferATI = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsObjectBufferATI");
    brebisGL.brebisIsOcclusionQueryNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsOcclusionQueryNV");
    brebisGL.brebisIsPathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsPathNV");
    brebisGL.brebisIsPointInFillPathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat))brebisGLGetProcAddress("glIsPointInFillPathNV");
    brebisGL.brebisIsPointInStrokePathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))brebisGLGetProcAddress("glIsPointInStrokePathNV");
    brebisGL.brebisIsProgram = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsProgram");
    brebisGL.brebisIsProgramARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsProgramARB");
    brebisGL.brebisIsProgramNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsProgramNV");
    brebisGL.brebisIsProgramPipeline = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsProgramPipeline");
    brebisGL.brebisIsProgramPipelineEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsProgramPipelineEXT");
    brebisGL.brebisIsQuery = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsQuery");
    brebisGL.brebisIsQueryARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsQueryARB");
    brebisGL.brebisIsQueryEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsQueryEXT");
    brebisGL.brebisIsRenderbuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsRenderbuffer");
    brebisGL.brebisIsRenderbufferEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsRenderbufferEXT");
    brebisGL.brebisIsRenderbufferOES = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsRenderbufferOES");
    brebisGL.brebisIsSampler = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsSampler");
    brebisGL.brebisIsSemaphoreEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsSemaphoreEXT");
    brebisGL.brebisIsShader = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsShader");
    brebisGL.brebisIsStateNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsStateNV");
    brebisGL.brebisIsSync = (GLboolean(KHRONOS_APIENTRY *)(GLsync))brebisGLGetProcAddress("glIsSync");
    brebisGL.brebisIsSyncAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLsync))brebisGLGetProcAddress("glIsSyncAPPLE");
    brebisGL.brebisIsTexture = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsTexture");
    brebisGL.brebisIsTextureEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsTextureEXT");
    brebisGL.brebisIsTextureHandleResidentARB = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glIsTextureHandleResidentARB");
    brebisGL.brebisIsTextureHandleResidentNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glIsTextureHandleResidentNV");
    brebisGL.brebisIsTransformFeedback = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsTransformFeedback");
    brebisGL.brebisIsTransformFeedbackNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsTransformFeedbackNV");
    brebisGL.brebisIsVariantEnabledEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glIsVariantEnabledEXT");
    brebisGL.brebisIsVertexArray = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsVertexArray");
    brebisGL.brebisIsVertexArrayAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsVertexArrayAPPLE");
    brebisGL.brebisIsVertexArrayOES = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glIsVertexArrayOES");
    brebisGL.brebisIsVertexAttribEnabledAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glIsVertexAttribEnabledAPPLE");
    brebisGL.brebisLGPUCopyImageSubDataNVX = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glLGPUCopyImageSubDataNVX");
    brebisGL.brebisLGPUInterlockNVX = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glLGPUInterlockNVX");
    brebisGL.brebisLGPUNamedBufferSubDataNVX = (void (KHRONOS_APIENTRY *)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *))brebisGLGetProcAddress("glLGPUNamedBufferSubDataNVX");
    brebisGL.brebisLabelObjectEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))brebisGLGetProcAddress("glLabelObjectEXT");
    brebisGL.brebisLightEnviSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glLightEnviSGIX");
    brebisGL.brebisLightModelf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glLightModelf");
    brebisGL.brebisLightModelfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glLightModelfv");
    brebisGL.brebisLightModeli = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glLightModeli");
    brebisGL.brebisLightModeliv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glLightModeliv");
    brebisGL.brebisLightModelx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glLightModelx");
    brebisGL.brebisLightModelxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glLightModelxOES");
    brebisGL.brebisLightModelxv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glLightModelxv");
    brebisGL.brebisLightModelxvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glLightModelxvOES");
    brebisGL.brebisLightf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glLightf");
    brebisGL.brebisLightfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glLightfv");
    brebisGL.brebisLighti = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glLighti");
    brebisGL.brebisLightiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glLightiv");
    brebisGL.brebisLightx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glLightx");
    brebisGL.brebisLightxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glLightxOES");
    brebisGL.brebisLightxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glLightxv");
    brebisGL.brebisLightxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glLightxvOES");
    brebisGL.brebisLineStipple = (void (KHRONOS_APIENTRY *)(GLint, GLushort))brebisGLGetProcAddress("glLineStipple");
    brebisGL.brebisLineWidth = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glLineWidth");
    brebisGL.brebisLineWidthx = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glLineWidthx");
    brebisGL.brebisLineWidthxOES = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glLineWidthxOES");
    brebisGL.brebisLinkProgram = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glLinkProgram");
    brebisGL.brebisLinkProgramARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))brebisGLGetProcAddress("glLinkProgramARB");
    brebisGL.brebisListBase = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glListBase");
    brebisGL.brebisListDrawCommandsStatesClientNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const void **, const GLsizei *, const GLuint *, const GLuint *, GLuint))brebisGLGetProcAddress("glListDrawCommandsStatesClientNV");
    brebisGL.brebisListParameterfSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))brebisGLGetProcAddress("glListParameterfSGIX");
    brebisGL.brebisListParameterfvSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))brebisGLGetProcAddress("glListParameterfvSGIX");
    brebisGL.brebisListParameteriSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glListParameteriSGIX");
    brebisGL.brebisListParameterivSGIX = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glListParameterivSGIX");
    brebisGL.brebisLoadIdentity = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glLoadIdentity");
    brebisGL.brebisLoadIdentityDeformationMapSGIX = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glLoadIdentityDeformationMapSGIX");
    brebisGL.brebisLoadMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glLoadMatrixd");
    brebisGL.brebisLoadMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glLoadMatrixf");
    brebisGL.brebisLoadMatrixx = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glLoadMatrixx");
    brebisGL.brebisLoadMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glLoadMatrixxOES");
    brebisGL.brebisLoadName = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glLoadName");
    brebisGL.brebisLoadPaletteFromModelViewMatrixOES = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glLoadPaletteFromModelViewMatrixOES");
    brebisGL.brebisLoadProgramNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLubyte *))brebisGLGetProcAddress("glLoadProgramNV");
    brebisGL.brebisLoadTransposeMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glLoadTransposeMatrixd");
    brebisGL.brebisLoadTransposeMatrixdARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glLoadTransposeMatrixdARB");
    brebisGL.brebisLoadTransposeMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glLoadTransposeMatrixf");
    brebisGL.brebisLoadTransposeMatrixfARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glLoadTransposeMatrixfARB");
    brebisGL.brebisLoadTransposeMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glLoadTransposeMatrixxOES");
    brebisGL.brebisLockArraysEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei))brebisGLGetProcAddress("glLockArraysEXT");
    brebisGL.brebisLogicOp = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glLogicOp");
    brebisGL.brebisMakeBufferNonResidentNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glMakeBufferNonResidentNV");
    brebisGL.brebisMakeBufferResidentNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glMakeBufferResidentNV");
    brebisGL.brebisMakeImageHandleNonResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glMakeImageHandleNonResidentARB");
    brebisGL.brebisMakeImageHandleNonResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glMakeImageHandleNonResidentNV");
    brebisGL.brebisMakeImageHandleResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64, GLenum))brebisGLGetProcAddress("glMakeImageHandleResidentARB");
    brebisGL.brebisMakeImageHandleResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64, GLenum))brebisGLGetProcAddress("glMakeImageHandleResidentNV");
    brebisGL.brebisMakeNamedBufferNonResidentNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glMakeNamedBufferNonResidentNV");
    brebisGL.brebisMakeNamedBufferResidentNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glMakeNamedBufferResidentNV");
    brebisGL.brebisMakeTextureHandleNonResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glMakeTextureHandleNonResidentARB");
    brebisGL.brebisMakeTextureHandleNonResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glMakeTextureHandleNonResidentNV");
    brebisGL.brebisMakeTextureHandleResidentARB = (void (KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glMakeTextureHandleResidentARB");
    brebisGL.brebisMakeTextureHandleResidentNV = (void (KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glMakeTextureHandleResidentNV");
    brebisGL.brebisMap1d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *))brebisGLGetProcAddress("glMap1d");
    brebisGL.brebisMap1f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *))brebisGLGetProcAddress("glMap1f");
    brebisGL.brebisMap1xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed))brebisGLGetProcAddress("glMap1xOES");
    brebisGL.brebisMap2d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))brebisGLGetProcAddress("glMap2d");
    brebisGL.brebisMap2f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))brebisGLGetProcAddress("glMap2f");
    brebisGL.brebisMap2xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed))brebisGLGetProcAddress("glMap2xOES");
    brebisGL.brebisMapBuffer = (void *(KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glMapBuffer");
    brebisGL.brebisMapBufferARB = (void *(KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glMapBufferARB");
    brebisGL.brebisMapBufferOES = (void *(KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glMapBufferOES");
    brebisGL.brebisMapBufferRange = (void *(KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLbitfield))brebisGLGetProcAddress("glMapBufferRange");
    brebisGL.brebisMapBufferRangeEXT = (void *(KHRONOS_APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLbitfield))brebisGLGetProcAddress("glMapBufferRangeEXT");
    brebisGL.brebisMapControlPointsNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *))brebisGLGetProcAddress("glMapControlPointsNV");
    brebisGL.brebisMapGrid1d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble))brebisGLGetProcAddress("glMapGrid1d");
    brebisGL.brebisMapGrid1f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat))brebisGLGetProcAddress("glMapGrid1f");
    brebisGL.brebisMapGrid1xOES = (void (KHRONOS_APIENTRY *)(GLint, GLfixed, GLfixed))brebisGLGetProcAddress("glMapGrid1xOES");
    brebisGL.brebisMapGrid2d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble))brebisGLGetProcAddress("glMapGrid2d");
    brebisGL.brebisMapGrid2f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat))brebisGLGetProcAddress("glMapGrid2f");
    brebisGL.brebisMapGrid2xOES = (void (KHRONOS_APIENTRY *)(GLint, GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glMapGrid2xOES");
    brebisGL.brebisMapNamedBuffer = (void *(KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glMapNamedBuffer");
    brebisGL.brebisMapNamedBufferEXT = (void *(KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glMapNamedBufferEXT");
    brebisGL.brebisMapNamedBufferRange = (void *(KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLbitfield))brebisGLGetProcAddress("glMapNamedBufferRange");
    brebisGL.brebisMapNamedBufferRangeEXT = (void *(KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLbitfield))brebisGLGetProcAddress("glMapNamedBufferRangeEXT");
    brebisGL.brebisMapObjectBufferATI = (void *(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glMapObjectBufferATI");
    brebisGL.brebisMapParameterfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glMapParameterfvNV");
    brebisGL.brebisMapParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glMapParameterivNV");
    brebisGL.brebisMapTexture2DINTEL = (void *(KHRONOS_APIENTRY *)(GLuint, GLint, GLbitfield, GLint *, GLenum *))brebisGLGetProcAddress("glMapTexture2DINTEL");
    brebisGL.brebisMapVertexAttrib1dAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))brebisGLGetProcAddress("glMapVertexAttrib1dAPPLE");
    brebisGL.brebisMapVertexAttrib1fAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))brebisGLGetProcAddress("glMapVertexAttrib1fAPPLE");
    brebisGL.brebisMapVertexAttrib2dAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *))brebisGLGetProcAddress("glMapVertexAttrib2dAPPLE");
    brebisGL.brebisMapVertexAttrib2fAPPLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *))brebisGLGetProcAddress("glMapVertexAttrib2fAPPLE");
    brebisGL.brebisMaterialf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glMaterialf");
    brebisGL.brebisMaterialfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glMaterialfv");
    brebisGL.brebisMateriali = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glMateriali");
    brebisGL.brebisMaterialiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glMaterialiv");
    brebisGL.brebisMaterialx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glMaterialx");
    brebisGL.brebisMaterialxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glMaterialxOES");
    brebisGL.brebisMaterialxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glMaterialxv");
    brebisGL.brebisMaterialxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glMaterialxvOES");
    brebisGL.brebisMatrixFrustumEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glMatrixFrustumEXT");
    brebisGL.brebisMatrixIndexPointerARB = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glMatrixIndexPointerARB");
    brebisGL.brebisMatrixIndexPointerOES = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glMatrixIndexPointerOES");
    brebisGL.brebisMatrixIndexubvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLubyte *))brebisGLGetProcAddress("glMatrixIndexubvARB");
    brebisGL.brebisMatrixIndexuivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLuint *))brebisGLGetProcAddress("glMatrixIndexuivARB");
    brebisGL.brebisMatrixIndexusvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLushort *))brebisGLGetProcAddress("glMatrixIndexusvARB");
    brebisGL.brebisMatrixLoad3x2fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixLoad3x2fNV");
    brebisGL.brebisMatrixLoad3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixLoad3x3fNV");
    brebisGL.brebisMatrixLoadIdentityEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glMatrixLoadIdentityEXT");
    brebisGL.brebisMatrixLoadTranspose3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixLoadTranspose3x3fNV");
    brebisGL.brebisMatrixLoadTransposedEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMatrixLoadTransposedEXT");
    brebisGL.brebisMatrixLoadTransposefEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixLoadTransposefEXT");
    brebisGL.brebisMatrixLoaddEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMatrixLoaddEXT");
    brebisGL.brebisMatrixLoadfEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixLoadfEXT");
    brebisGL.brebisMatrixMode = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glMatrixMode");
    brebisGL.brebisMatrixMult3x2fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixMult3x2fNV");
    brebisGL.brebisMatrixMult3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixMult3x3fNV");
    brebisGL.brebisMatrixMultTranspose3x3fNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixMultTranspose3x3fNV");
    brebisGL.brebisMatrixMultTransposedEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMatrixMultTransposedEXT");
    brebisGL.brebisMatrixMultTransposefEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixMultTransposefEXT");
    brebisGL.brebisMatrixMultdEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMatrixMultdEXT");
    brebisGL.brebisMatrixMultfEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMatrixMultfEXT");
    brebisGL.brebisMatrixOrthoEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glMatrixOrthoEXT");
    brebisGL.brebisMatrixPopEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glMatrixPopEXT");
    brebisGL.brebisMatrixPushEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glMatrixPushEXT");
    brebisGL.brebisMatrixRotatedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glMatrixRotatedEXT");
    brebisGL.brebisMatrixRotatefEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glMatrixRotatefEXT");
    brebisGL.brebisMatrixScaledEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glMatrixScaledEXT");
    brebisGL.brebisMatrixScalefEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glMatrixScalefEXT");
    brebisGL.brebisMatrixTranslatedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glMatrixTranslatedEXT");
    brebisGL.brebisMatrixTranslatefEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glMatrixTranslatefEXT");
    brebisGL.brebisMaxShaderCompilerThreadsARB = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glMaxShaderCompilerThreadsARB");
    brebisGL.brebisMaxShaderCompilerThreadsKHR = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glMaxShaderCompilerThreadsKHR");
    brebisGL.brebisMemoryBarrier = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glMemoryBarrier");
    brebisGL.brebisMemoryBarrierByRegion = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glMemoryBarrierByRegion");
    brebisGL.brebisMemoryBarrierEXT = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glMemoryBarrierEXT");
    brebisGL.brebisMemoryObjectParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glMemoryObjectParameterivEXT");
    brebisGL.brebisMinSampleShading = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glMinSampleShading");
    brebisGL.brebisMinSampleShadingARB = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glMinSampleShadingARB");
    brebisGL.brebisMinSampleShadingOES = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glMinSampleShadingOES");
    brebisGL.brebisMinmax = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLboolean))brebisGLGetProcAddress("glMinmax");
    brebisGL.brebisMinmaxEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLboolean))brebisGLGetProcAddress("glMinmaxEXT");
    brebisGL.brebisMultMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glMultMatrixd");
    brebisGL.brebisMultMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glMultMatrixf");
    brebisGL.brebisMultMatrixx = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glMultMatrixx");
    brebisGL.brebisMultMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glMultMatrixxOES");
    brebisGL.brebisMultTransposeMatrixd = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glMultTransposeMatrixd");
    brebisGL.brebisMultTransposeMatrixdARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glMultTransposeMatrixdARB");
    brebisGL.brebisMultTransposeMatrixf = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glMultTransposeMatrixf");
    brebisGL.brebisMultTransposeMatrixfARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glMultTransposeMatrixfARB");
    brebisGL.brebisMultTransposeMatrixxOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glMultTransposeMatrixxOES");
    brebisGL.brebisMultiDrawArrays = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *, const GLsizei *, GLsizei))brebisGLGetProcAddress("glMultiDrawArrays");
    brebisGL.brebisMultiDrawArraysEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *, const GLsizei *, GLsizei))brebisGLGetProcAddress("glMultiDrawArraysEXT");
    brebisGL.brebisMultiDrawArraysIndirect = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawArraysIndirect");
    brebisGL.brebisMultiDrawArraysIndirectAMD = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawArraysIndirectAMD");
    brebisGL.brebisMultiDrawArraysIndirectBindlessCountNV = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint))brebisGLGetProcAddress("glMultiDrawArraysIndirectBindlessCountNV");
    brebisGL.brebisMultiDrawArraysIndirectBindlessNV = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei, GLint))brebisGLGetProcAddress("glMultiDrawArraysIndirectBindlessNV");
    brebisGL.brebisMultiDrawArraysIndirectCount = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLintptr, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawArraysIndirectCount");
    brebisGL.brebisMultiDrawArraysIndirectCountARB = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLintptr, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawArraysIndirectCountARB");
    brebisGL.brebisMultiDrawArraysIndirectEXT = (void (KHRONOS_APIENTRY *)(GLenum, const void *, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawArraysIndirectEXT");
    brebisGL.brebisMultiDrawElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *, const GLsizei *, GLsizei))brebisGLGetProcAddress("glMultiDrawElementArrayAPPLE");
    brebisGL.brebisMultiDrawElements = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei))brebisGLGetProcAddress("glMultiDrawElements");
    brebisGL.brebisMultiDrawElementsBaseVertex = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *))brebisGLGetProcAddress("glMultiDrawElementsBaseVertex");
    brebisGL.brebisMultiDrawElementsBaseVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *))brebisGLGetProcAddress("glMultiDrawElementsBaseVertexEXT");
    brebisGL.brebisMultiDrawElementsEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei))brebisGLGetProcAddress("glMultiDrawElementsEXT");
    brebisGL.brebisMultiDrawElementsIndirect = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawElementsIndirect");
    brebisGL.brebisMultiDrawElementsIndirectAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawElementsIndirectAMD");
    brebisGL.brebisMultiDrawElementsIndirectBindlessCountNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint))brebisGLGetProcAddress("glMultiDrawElementsIndirectBindlessCountNV");
    brebisGL.brebisMultiDrawElementsIndirectBindlessNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLint))brebisGLGetProcAddress("glMultiDrawElementsIndirectBindlessNV");
    brebisGL.brebisMultiDrawElementsIndirectCount = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawElementsIndirectCount");
    brebisGL.brebisMultiDrawElementsIndirectCountARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawElementsIndirectCountARB");
    brebisGL.brebisMultiDrawElementsIndirectEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const void *, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawElementsIndirectEXT");
    brebisGL.brebisMultiDrawMeshTasksIndirectCountNV = (void (KHRONOS_APIENTRY *)(GLintptr, GLintptr, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawMeshTasksIndirectCountNV");
    brebisGL.brebisMultiDrawMeshTasksIndirectNV = (void (KHRONOS_APIENTRY *)(GLintptr, GLsizei, GLsizei))brebisGLGetProcAddress("glMultiDrawMeshTasksIndirectNV");
    brebisGL.brebisMultiDrawRangeElementArrayAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei))brebisGLGetProcAddress("glMultiDrawRangeElementArrayAPPLE");
    brebisGL.brebisMultiModeDrawArraysIBM = (void (KHRONOS_APIENTRY *)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint))brebisGLGetProcAddress("glMultiModeDrawArraysIBM");
    brebisGL.brebisMultiModeDrawElementsIBM = (void (KHRONOS_APIENTRY *)(const GLenum *, const GLsizei *, GLenum, const void *const*, GLsizei, GLint))brebisGLGetProcAddress("glMultiModeDrawElementsIBM");
    brebisGL.brebisMultiTexBufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLuint))brebisGLGetProcAddress("glMultiTexBufferEXT");
    brebisGL.brebisMultiTexCoord1bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte))brebisGLGetProcAddress("glMultiTexCoord1bOES");
    brebisGL.brebisMultiTexCoord1bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))brebisGLGetProcAddress("glMultiTexCoord1bvOES");
    brebisGL.brebisMultiTexCoord1d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble))brebisGLGetProcAddress("glMultiTexCoord1d");
    brebisGL.brebisMultiTexCoord1dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble))brebisGLGetProcAddress("glMultiTexCoord1dARB");
    brebisGL.brebisMultiTexCoord1dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMultiTexCoord1dv");
    brebisGL.brebisMultiTexCoord1dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMultiTexCoord1dvARB");
    brebisGL.brebisMultiTexCoord1f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glMultiTexCoord1f");
    brebisGL.brebisMultiTexCoord1fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glMultiTexCoord1fARB");
    brebisGL.brebisMultiTexCoord1fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexCoord1fv");
    brebisGL.brebisMultiTexCoord1fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexCoord1fvARB");
    brebisGL.brebisMultiTexCoord1hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV))brebisGLGetProcAddress("glMultiTexCoord1hNV");
    brebisGL.brebisMultiTexCoord1hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))brebisGLGetProcAddress("glMultiTexCoord1hvNV");
    brebisGL.brebisMultiTexCoord1i = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glMultiTexCoord1i");
    brebisGL.brebisMultiTexCoord1iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glMultiTexCoord1iARB");
    brebisGL.brebisMultiTexCoord1iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexCoord1iv");
    brebisGL.brebisMultiTexCoord1ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexCoord1ivARB");
    brebisGL.brebisMultiTexCoord1s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort))brebisGLGetProcAddress("glMultiTexCoord1s");
    brebisGL.brebisMultiTexCoord1sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort))brebisGLGetProcAddress("glMultiTexCoord1sARB");
    brebisGL.brebisMultiTexCoord1sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glMultiTexCoord1sv");
    brebisGL.brebisMultiTexCoord1svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glMultiTexCoord1svARB");
    brebisGL.brebisMultiTexCoord1xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glMultiTexCoord1xOES");
    brebisGL.brebisMultiTexCoord1xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glMultiTexCoord1xvOES");
    brebisGL.brebisMultiTexCoord2bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte))brebisGLGetProcAddress("glMultiTexCoord2bOES");
    brebisGL.brebisMultiTexCoord2bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))brebisGLGetProcAddress("glMultiTexCoord2bvOES");
    brebisGL.brebisMultiTexCoord2d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble))brebisGLGetProcAddress("glMultiTexCoord2d");
    brebisGL.brebisMultiTexCoord2dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble))brebisGLGetProcAddress("glMultiTexCoord2dARB");
    brebisGL.brebisMultiTexCoord2dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMultiTexCoord2dv");
    brebisGL.brebisMultiTexCoord2dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMultiTexCoord2dvARB");
    brebisGL.brebisMultiTexCoord2f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat))brebisGLGetProcAddress("glMultiTexCoord2f");
    brebisGL.brebisMultiTexCoord2fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat))brebisGLGetProcAddress("glMultiTexCoord2fARB");
    brebisGL.brebisMultiTexCoord2fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexCoord2fv");
    brebisGL.brebisMultiTexCoord2fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexCoord2fvARB");
    brebisGL.brebisMultiTexCoord2hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glMultiTexCoord2hNV");
    brebisGL.brebisMultiTexCoord2hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))brebisGLGetProcAddress("glMultiTexCoord2hvNV");
    brebisGL.brebisMultiTexCoord2i = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))brebisGLGetProcAddress("glMultiTexCoord2i");
    brebisGL.brebisMultiTexCoord2iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))brebisGLGetProcAddress("glMultiTexCoord2iARB");
    brebisGL.brebisMultiTexCoord2iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexCoord2iv");
    brebisGL.brebisMultiTexCoord2ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexCoord2ivARB");
    brebisGL.brebisMultiTexCoord2s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort))brebisGLGetProcAddress("glMultiTexCoord2s");
    brebisGL.brebisMultiTexCoord2sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort))brebisGLGetProcAddress("glMultiTexCoord2sARB");
    brebisGL.brebisMultiTexCoord2sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glMultiTexCoord2sv");
    brebisGL.brebisMultiTexCoord2svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glMultiTexCoord2svARB");
    brebisGL.brebisMultiTexCoord2xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed))brebisGLGetProcAddress("glMultiTexCoord2xOES");
    brebisGL.brebisMultiTexCoord2xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glMultiTexCoord2xvOES");
    brebisGL.brebisMultiTexCoord3bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glMultiTexCoord3bOES");
    brebisGL.brebisMultiTexCoord3bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))brebisGLGetProcAddress("glMultiTexCoord3bvOES");
    brebisGL.brebisMultiTexCoord3d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glMultiTexCoord3d");
    brebisGL.brebisMultiTexCoord3dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glMultiTexCoord3dARB");
    brebisGL.brebisMultiTexCoord3dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMultiTexCoord3dv");
    brebisGL.brebisMultiTexCoord3dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMultiTexCoord3dvARB");
    brebisGL.brebisMultiTexCoord3f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glMultiTexCoord3f");
    brebisGL.brebisMultiTexCoord3fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glMultiTexCoord3fARB");
    brebisGL.brebisMultiTexCoord3fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexCoord3fv");
    brebisGL.brebisMultiTexCoord3fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexCoord3fvARB");
    brebisGL.brebisMultiTexCoord3hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glMultiTexCoord3hNV");
    brebisGL.brebisMultiTexCoord3hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))brebisGLGetProcAddress("glMultiTexCoord3hvNV");
    brebisGL.brebisMultiTexCoord3i = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))brebisGLGetProcAddress("glMultiTexCoord3i");
    brebisGL.brebisMultiTexCoord3iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))brebisGLGetProcAddress("glMultiTexCoord3iARB");
    brebisGL.brebisMultiTexCoord3iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexCoord3iv");
    brebisGL.brebisMultiTexCoord3ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexCoord3ivARB");
    brebisGL.brebisMultiTexCoord3s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glMultiTexCoord3s");
    brebisGL.brebisMultiTexCoord3sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glMultiTexCoord3sARB");
    brebisGL.brebisMultiTexCoord3sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glMultiTexCoord3sv");
    brebisGL.brebisMultiTexCoord3svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glMultiTexCoord3svARB");
    brebisGL.brebisMultiTexCoord3xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glMultiTexCoord3xOES");
    brebisGL.brebisMultiTexCoord3xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glMultiTexCoord3xvOES");
    brebisGL.brebisMultiTexCoord4bOES = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glMultiTexCoord4bOES");
    brebisGL.brebisMultiTexCoord4bvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))brebisGLGetProcAddress("glMultiTexCoord4bvOES");
    brebisGL.brebisMultiTexCoord4d = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glMultiTexCoord4d");
    brebisGL.brebisMultiTexCoord4dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glMultiTexCoord4dARB");
    brebisGL.brebisMultiTexCoord4dv = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMultiTexCoord4dv");
    brebisGL.brebisMultiTexCoord4dvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glMultiTexCoord4dvARB");
    brebisGL.brebisMultiTexCoord4f = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glMultiTexCoord4f");
    brebisGL.brebisMultiTexCoord4fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glMultiTexCoord4fARB");
    brebisGL.brebisMultiTexCoord4fv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexCoord4fv");
    brebisGL.brebisMultiTexCoord4fvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexCoord4fvARB");
    brebisGL.brebisMultiTexCoord4hNV = (void (KHRONOS_APIENTRY *)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glMultiTexCoord4hNV");
    brebisGL.brebisMultiTexCoord4hvNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLhalfNV *))brebisGLGetProcAddress("glMultiTexCoord4hvNV");
    brebisGL.brebisMultiTexCoord4i = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glMultiTexCoord4i");
    brebisGL.brebisMultiTexCoord4iARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glMultiTexCoord4iARB");
    brebisGL.brebisMultiTexCoord4iv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexCoord4iv");
    brebisGL.brebisMultiTexCoord4ivARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexCoord4ivARB");
    brebisGL.brebisMultiTexCoord4s = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glMultiTexCoord4s");
    brebisGL.brebisMultiTexCoord4sARB = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glMultiTexCoord4sARB");
    brebisGL.brebisMultiTexCoord4sv = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glMultiTexCoord4sv");
    brebisGL.brebisMultiTexCoord4svARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glMultiTexCoord4svARB");
    brebisGL.brebisMultiTexCoord4x = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glMultiTexCoord4x");
    brebisGL.brebisMultiTexCoord4xOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glMultiTexCoord4xOES");
    brebisGL.brebisMultiTexCoord4xvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glMultiTexCoord4xvOES");
    brebisGL.brebisMultiTexCoordP1ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glMultiTexCoordP1ui");
    brebisGL.brebisMultiTexCoordP1uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))brebisGLGetProcAddress("glMultiTexCoordP1uiv");
    brebisGL.brebisMultiTexCoordP2ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glMultiTexCoordP2ui");
    brebisGL.brebisMultiTexCoordP2uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))brebisGLGetProcAddress("glMultiTexCoordP2uiv");
    brebisGL.brebisMultiTexCoordP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glMultiTexCoordP3ui");
    brebisGL.brebisMultiTexCoordP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))brebisGLGetProcAddress("glMultiTexCoordP3uiv");
    brebisGL.brebisMultiTexCoordP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glMultiTexCoordP4ui");
    brebisGL.brebisMultiTexCoordP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))brebisGLGetProcAddress("glMultiTexCoordP4uiv");
    brebisGL.brebisMultiTexCoordPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glMultiTexCoordPointerEXT");
    brebisGL.brebisMultiTexEnvfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glMultiTexEnvfEXT");
    brebisGL.brebisMultiTexEnvfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexEnvfvEXT");
    brebisGL.brebisMultiTexEnviEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint))brebisGLGetProcAddress("glMultiTexEnviEXT");
    brebisGL.brebisMultiTexEnvivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexEnvivEXT");
    brebisGL.brebisMultiTexGendEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLdouble))brebisGLGetProcAddress("glMultiTexGendEXT");
    brebisGL.brebisMultiTexGendvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLdouble *))brebisGLGetProcAddress("glMultiTexGendvEXT");
    brebisGL.brebisMultiTexGenfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glMultiTexGenfEXT");
    brebisGL.brebisMultiTexGenfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexGenfvEXT");
    brebisGL.brebisMultiTexGeniEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint))brebisGLGetProcAddress("glMultiTexGeniEXT");
    brebisGL.brebisMultiTexGenivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexGenivEXT");
    brebisGL.brebisMultiTexImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glMultiTexImage1DEXT");
    brebisGL.brebisMultiTexImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glMultiTexImage2DEXT");
    brebisGL.brebisMultiTexImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glMultiTexImage3DEXT");
    brebisGL.brebisMultiTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexParameterIivEXT");
    brebisGL.brebisMultiTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLuint *))brebisGLGetProcAddress("glMultiTexParameterIuivEXT");
    brebisGL.brebisMultiTexParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glMultiTexParameterfEXT");
    brebisGL.brebisMultiTexParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glMultiTexParameterfvEXT");
    brebisGL.brebisMultiTexParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLint))brebisGLGetProcAddress("glMultiTexParameteriEXT");
    brebisGL.brebisMultiTexParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glMultiTexParameterivEXT");
    brebisGL.brebisMultiTexRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glMultiTexRenderbufferEXT");
    brebisGL.brebisMultiTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glMultiTexSubImage1DEXT");
    brebisGL.brebisMultiTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glMultiTexSubImage2DEXT");
    brebisGL.brebisMultiTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glMultiTexSubImage3DEXT");
    brebisGL.brebisMulticastBarrierNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glMulticastBarrierNV");
    brebisGL.brebisMulticastBlitFramebufferNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum))brebisGLGetProcAddress("glMulticastBlitFramebufferNV");
    brebisGL.brebisMulticastBufferSubDataNV = (void (KHRONOS_APIENTRY *)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *))brebisGLGetProcAddress("glMulticastBufferSubDataNV");
    brebisGL.brebisMulticastCopyBufferSubDataNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glMulticastCopyBufferSubDataNV");
    brebisGL.brebisMulticastCopyImageSubDataNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glMulticastCopyImageSubDataNV");
    brebisGL.brebisMulticastFramebufferSampleLocationsfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glMulticastFramebufferSampleLocationsfvNV");
    brebisGL.brebisMulticastGetQueryObjecti64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint64 *))brebisGLGetProcAddress("glMulticastGetQueryObjecti64vNV");
    brebisGL.brebisMulticastGetQueryObjectivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint *))brebisGLGetProcAddress("glMulticastGetQueryObjectivNV");
    brebisGL.brebisMulticastGetQueryObjectui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLuint64 *))brebisGLGetProcAddress("glMulticastGetQueryObjectui64vNV");
    brebisGL.brebisMulticastGetQueryObjectuivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLuint *))brebisGLGetProcAddress("glMulticastGetQueryObjectuivNV");
    brebisGL.brebisMulticastWaitSyncNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield))brebisGLGetProcAddress("glMulticastWaitSyncNV");
    brebisGL.brebisNamedBufferAttachMemoryNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint64))brebisGLGetProcAddress("glNamedBufferAttachMemoryNV");
    brebisGL.brebisNamedBufferData = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLenum))brebisGLGetProcAddress("glNamedBufferData");
    brebisGL.brebisNamedBufferDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLenum))brebisGLGetProcAddress("glNamedBufferDataEXT");
    brebisGL.brebisNamedBufferPageCommitmentARB = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLboolean))brebisGLGetProcAddress("glNamedBufferPageCommitmentARB");
    brebisGL.brebisNamedBufferPageCommitmentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLboolean))brebisGLGetProcAddress("glNamedBufferPageCommitmentEXT");
    brebisGL.brebisNamedBufferStorage = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLbitfield))brebisGLGetProcAddress("glNamedBufferStorage");
    brebisGL.brebisNamedBufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, const void *, GLbitfield))brebisGLGetProcAddress("glNamedBufferStorageEXT");
    brebisGL.brebisNamedBufferStorageExternalEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield))brebisGLGetProcAddress("glNamedBufferStorageExternalEXT");
    brebisGL.brebisNamedBufferStorageMemEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizeiptr, GLuint, GLuint64))brebisGLGetProcAddress("glNamedBufferStorageMemEXT");
    brebisGL.brebisNamedBufferSubData = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, const void *))brebisGLGetProcAddress("glNamedBufferSubData");
    brebisGL.brebisNamedBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLintptr, GLsizeiptr, const void *))brebisGLGetProcAddress("glNamedBufferSubDataEXT");
    brebisGL.brebisNamedCopyBufferSubDataEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glNamedCopyBufferSubDataEXT");
    brebisGL.brebisNamedFramebufferDrawBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glNamedFramebufferDrawBuffer");
    brebisGL.brebisNamedFramebufferDrawBuffers = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLenum *))brebisGLGetProcAddress("glNamedFramebufferDrawBuffers");
    brebisGL.brebisNamedFramebufferParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glNamedFramebufferParameteri");
    brebisGL.brebisNamedFramebufferParameteriEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glNamedFramebufferParameteriEXT");
    brebisGL.brebisNamedFramebufferReadBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glNamedFramebufferReadBuffer");
    brebisGL.brebisNamedFramebufferRenderbuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint))brebisGLGetProcAddress("glNamedFramebufferRenderbuffer");
    brebisGL.brebisNamedFramebufferRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint))brebisGLGetProcAddress("glNamedFramebufferRenderbufferEXT");
    brebisGL.brebisNamedFramebufferSampleLocationsfvARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glNamedFramebufferSampleLocationsfvARB");
    brebisGL.brebisNamedFramebufferSampleLocationsfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glNamedFramebufferSampleLocationsfvNV");
    brebisGL.brebisNamedFramebufferSamplePositionsfvAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, const GLfloat *))brebisGLGetProcAddress("glNamedFramebufferSamplePositionsfvAMD");
    brebisGL.brebisNamedFramebufferTexture = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint))brebisGLGetProcAddress("glNamedFramebufferTexture");
    brebisGL.brebisNamedFramebufferTexture1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glNamedFramebufferTexture1DEXT");
    brebisGL.brebisNamedFramebufferTexture2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLint))brebisGLGetProcAddress("glNamedFramebufferTexture2DEXT");
    brebisGL.brebisNamedFramebufferTexture3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLint, GLint))brebisGLGetProcAddress("glNamedFramebufferTexture3DEXT");
    brebisGL.brebisNamedFramebufferTextureEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint))brebisGLGetProcAddress("glNamedFramebufferTextureEXT");
    brebisGL.brebisNamedFramebufferTextureFaceEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLenum))brebisGLGetProcAddress("glNamedFramebufferTextureFaceEXT");
    brebisGL.brebisNamedFramebufferTextureLayer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLint))brebisGLGetProcAddress("glNamedFramebufferTextureLayer");
    brebisGL.brebisNamedFramebufferTextureLayerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLint))brebisGLGetProcAddress("glNamedFramebufferTextureLayerEXT");
    brebisGL.brebisNamedProgramLocalParameter4dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glNamedProgramLocalParameter4dEXT");
    brebisGL.brebisNamedProgramLocalParameter4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLdouble *))brebisGLGetProcAddress("glNamedProgramLocalParameter4dvEXT");
    brebisGL.brebisNamedProgramLocalParameter4fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glNamedProgramLocalParameter4fEXT");
    brebisGL.brebisNamedProgramLocalParameter4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLfloat *))brebisGLGetProcAddress("glNamedProgramLocalParameter4fvEXT");
    brebisGL.brebisNamedProgramLocalParameterI4iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glNamedProgramLocalParameterI4iEXT");
    brebisGL.brebisNamedProgramLocalParameterI4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLint *))brebisGLGetProcAddress("glNamedProgramLocalParameterI4ivEXT");
    brebisGL.brebisNamedProgramLocalParameterI4uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glNamedProgramLocalParameterI4uiEXT");
    brebisGL.brebisNamedProgramLocalParameterI4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const GLuint *))brebisGLGetProcAddress("glNamedProgramLocalParameterI4uivEXT");
    brebisGL.brebisNamedProgramLocalParameters4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glNamedProgramLocalParameters4fvEXT");
    brebisGL.brebisNamedProgramLocalParametersI4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLint *))brebisGLGetProcAddress("glNamedProgramLocalParametersI4ivEXT");
    brebisGL.brebisNamedProgramLocalParametersI4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLsizei, const GLuint *))brebisGLGetProcAddress("glNamedProgramLocalParametersI4uivEXT");
    brebisGL.brebisNamedProgramStringEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glNamedProgramStringEXT");
    brebisGL.brebisNamedRenderbufferStorage = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glNamedRenderbufferStorage");
    brebisGL.brebisNamedRenderbufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glNamedRenderbufferStorageEXT");
    brebisGL.brebisNamedRenderbufferStorageMultisample = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glNamedRenderbufferStorageMultisample");
    brebisGL.brebisNamedRenderbufferStorageMultisampleAdvancedAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glNamedRenderbufferStorageMultisampleAdvancedAMD");
    brebisGL.brebisNamedRenderbufferStorageMultisampleCoverageEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT");
    brebisGL.brebisNamedRenderbufferStorageMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glNamedRenderbufferStorageMultisampleEXT");
    brebisGL.brebisNamedStringARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLchar *, GLint, const GLchar *))brebisGLGetProcAddress("glNamedStringARB");
    brebisGL.brebisNewBufferRegion = (GLuint(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glNewBufferRegion");
    brebisGL.brebisNewList = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glNewList");
    brebisGL.brebisNewObjectBufferATI = (GLuint(KHRONOS_APIENTRY *)(GLsizei, const void *, GLenum))brebisGLGetProcAddress("glNewObjectBufferATI");
    brebisGL.brebisNormal3b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glNormal3b");
    brebisGL.brebisNormal3bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glNormal3bv");
    brebisGL.brebisNormal3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glNormal3d");
    brebisGL.brebisNormal3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glNormal3dv");
    brebisGL.brebisNormal3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glNormal3f");
    brebisGL.brebisNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glNormal3fVertex3fSUN");
    brebisGL.brebisNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glNormal3fVertex3fvSUN");
    brebisGL.brebisNormal3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glNormal3fv");
    brebisGL.brebisNormal3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glNormal3hNV");
    brebisGL.brebisNormal3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glNormal3hvNV");
    brebisGL.brebisNormal3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glNormal3i");
    brebisGL.brebisNormal3iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glNormal3iv");
    brebisGL.brebisNormal3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glNormal3s");
    brebisGL.brebisNormal3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glNormal3sv");
    brebisGL.brebisNormal3x = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glNormal3x");
    brebisGL.brebisNormal3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glNormal3xOES");
    brebisGL.brebisNormal3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glNormal3xvOES");
    brebisGL.brebisNormalFormatNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei))brebisGLGetProcAddress("glNormalFormatNV");
    brebisGL.brebisNormalP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glNormalP3ui");
    brebisGL.brebisNormalP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glNormalP3uiv");
    brebisGL.brebisNormalPointer = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glNormalPointer");
    brebisGL.brebisNormalPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, const void *))brebisGLGetProcAddress("glNormalPointerEXT");
    brebisGL.brebisNormalPointerListIBM = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const void **, GLint))brebisGLGetProcAddress("glNormalPointerListIBM");
    brebisGL.brebisNormalPointervINTEL = (void (KHRONOS_APIENTRY *)(GLenum, const void **))brebisGLGetProcAddress("glNormalPointervINTEL");
    brebisGL.brebisNormalStream3bATI = (void (KHRONOS_APIENTRY *)(GLenum, GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glNormalStream3bATI");
    brebisGL.brebisNormalStream3bvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLbyte *))brebisGLGetProcAddress("glNormalStream3bvATI");
    brebisGL.brebisNormalStream3dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glNormalStream3dATI");
    brebisGL.brebisNormalStream3dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glNormalStream3dvATI");
    brebisGL.brebisNormalStream3fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glNormalStream3fATI");
    brebisGL.brebisNormalStream3fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glNormalStream3fvATI");
    brebisGL.brebisNormalStream3iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))brebisGLGetProcAddress("glNormalStream3iATI");
    brebisGL.brebisNormalStream3ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glNormalStream3ivATI");
    brebisGL.brebisNormalStream3sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glNormalStream3sATI");
    brebisGL.brebisNormalStream3svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glNormalStream3svATI");
    brebisGL.brebisObjectLabel = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))brebisGLGetProcAddress("glObjectLabel");
    brebisGL.brebisObjectLabelKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))brebisGLGetProcAddress("glObjectLabelKHR");
    brebisGL.brebisObjectPtrLabel = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, const GLchar *))brebisGLGetProcAddress("glObjectPtrLabel");
    brebisGL.brebisObjectPtrLabelKHR = (void (KHRONOS_APIENTRY *)(const void *, GLsizei, const GLchar *))brebisGLGetProcAddress("glObjectPtrLabelKHR");
    brebisGL.brebisObjectPurgeableAPPLE = (GLenum(KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum))brebisGLGetProcAddress("glObjectPurgeableAPPLE");
    brebisGL.brebisObjectUnpurgeableAPPLE = (GLenum(KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum))brebisGLGetProcAddress("glObjectUnpurgeableAPPLE");
    brebisGL.brebisOrtho = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glOrtho");
    brebisGL.brebisOrthof = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glOrthof");
    brebisGL.brebisOrthofOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glOrthofOES");
    brebisGL.brebisOrthox = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glOrthox");
    brebisGL.brebisOrthoxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glOrthoxOES");
    brebisGL.brebisPNTrianglesfATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glPNTrianglesfATI");
    brebisGL.brebisPNTrianglesiATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glPNTrianglesiATI");
    brebisGL.brebisPassTexCoordATI = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum))brebisGLGetProcAddress("glPassTexCoordATI");
    brebisGL.brebisPassThrough = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glPassThrough");
    brebisGL.brebisPassThroughxOES = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glPassThroughxOES");
    brebisGL.brebisPatchParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glPatchParameterfv");
    brebisGL.brebisPatchParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glPatchParameteri");
    brebisGL.brebisPatchParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glPatchParameteriEXT");
    brebisGL.brebisPatchParameteriOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glPatchParameteriOES");
    brebisGL.brebisPathColorGenNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glPathColorGenNV");
    brebisGL.brebisPathCommandsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLsizei, GLenum, const void *))brebisGLGetProcAddress("glPathCommandsNV");
    brebisGL.brebisPathCoordsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, const void *))brebisGLGetProcAddress("glPathCoordsNV");
    brebisGL.brebisPathCoverDepthFuncNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glPathCoverDepthFuncNV");
    brebisGL.brebisPathDashArrayNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glPathDashArrayNV");
    brebisGL.brebisPathFogGenNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glPathFogGenNV");
    brebisGL.brebisPathGlyphIndexArrayNV = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat))brebisGLGetProcAddress("glPathGlyphIndexArrayNV");
    brebisGL.brebisPathGlyphIndexRangeNV = (GLenum(KHRONOS_APIENTRY *)(GLenum, const void *, GLbitfield, GLuint, GLfloat, GLuint[2]))brebisGLGetProcAddress("glPathGlyphIndexRangeNV");
    brebisGL.brebisPathGlyphRangeNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat))brebisGLGetProcAddress("glPathGlyphRangeNV");
    brebisGL.brebisPathGlyphsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLbitfield, GLsizei, GLenum, const void *, GLenum, GLuint, GLfloat))brebisGLGetProcAddress("glPathGlyphsNV");
    brebisGL.brebisPathMemoryGlyphIndexArrayNV = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat))brebisGLGetProcAddress("glPathMemoryGlyphIndexArrayNV");
    brebisGL.brebisPathParameterfNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))brebisGLGetProcAddress("glPathParameterfNV");
    brebisGL.brebisPathParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))brebisGLGetProcAddress("glPathParameterfvNV");
    brebisGL.brebisPathParameteriNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glPathParameteriNV");
    brebisGL.brebisPathParameterivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glPathParameterivNV");
    brebisGL.brebisPathStencilDepthOffsetNV = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glPathStencilDepthOffsetNV");
    brebisGL.brebisPathStencilFuncNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLuint))brebisGLGetProcAddress("glPathStencilFuncNV");
    brebisGL.brebisPathStringNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glPathStringNV");
    brebisGL.brebisPathSubCommandsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GLenum, const void *))brebisGLGetProcAddress("glPathSubCommandsNV");
    brebisGL.brebisPathSubCoordsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLenum, const void *))brebisGLGetProcAddress("glPathSubCoordsNV");
    brebisGL.brebisPathTexGenNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, const GLfloat *))brebisGLGetProcAddress("glPathTexGenNV");
    brebisGL.brebisPauseTransformFeedback = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPauseTransformFeedback");
    brebisGL.brebisPauseTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPauseTransformFeedbackNV");
    brebisGL.brebisPixelDataRangeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glPixelDataRangeNV");
    brebisGL.brebisPixelMapfv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLfloat *))brebisGLGetProcAddress("glPixelMapfv");
    brebisGL.brebisPixelMapuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLuint *))brebisGLGetProcAddress("glPixelMapuiv");
    brebisGL.brebisPixelMapusv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLushort *))brebisGLGetProcAddress("glPixelMapusv");
    brebisGL.brebisPixelMapx = (void (KHRONOS_APIENTRY *)(GLenum, GLint, const GLfixed *))brebisGLGetProcAddress("glPixelMapx");
    brebisGL.brebisPixelStoref = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glPixelStoref");
    brebisGL.brebisPixelStorei = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glPixelStorei");
    brebisGL.brebisPixelStorex = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glPixelStorex");
    brebisGL.brebisPixelTexGenParameterfSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glPixelTexGenParameterfSGIS");
    brebisGL.brebisPixelTexGenParameterfvSGIS = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glPixelTexGenParameterfvSGIS");
    brebisGL.brebisPixelTexGenParameteriSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glPixelTexGenParameteriSGIS");
    brebisGL.brebisPixelTexGenParameterivSGIS = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glPixelTexGenParameterivSGIS");
    brebisGL.brebisPixelTexGenSGIX = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glPixelTexGenSGIX");
    brebisGL.brebisPixelTransferf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glPixelTransferf");
    brebisGL.brebisPixelTransferi = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glPixelTransferi");
    brebisGL.brebisPixelTransferxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glPixelTransferxOES");
    brebisGL.brebisPixelTransformParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glPixelTransformParameterfEXT");
    brebisGL.brebisPixelTransformParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glPixelTransformParameterfvEXT");
    brebisGL.brebisPixelTransformParameteriEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glPixelTransformParameteriEXT");
    brebisGL.brebisPixelTransformParameterivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glPixelTransformParameterivEXT");
    brebisGL.brebisPixelZoom = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glPixelZoom");
    brebisGL.brebisPixelZoomxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))brebisGLGetProcAddress("glPixelZoomxOES");
    brebisGL.brebisPointAlongPathNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *))brebisGLGetProcAddress("glPointAlongPathNV");
    brebisGL.brebisPointParameterf = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glPointParameterf");
    brebisGL.brebisPointParameterfARB = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glPointParameterfARB");
    brebisGL.brebisPointParameterfEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glPointParameterfEXT");
    brebisGL.brebisPointParameterfSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glPointParameterfSGIS");
    brebisGL.brebisPointParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glPointParameterfv");
    brebisGL.brebisPointParameterfvARB = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glPointParameterfvARB");
    brebisGL.brebisPointParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glPointParameterfvEXT");
    brebisGL.brebisPointParameterfvSGIS = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glPointParameterfvSGIS");
    brebisGL.brebisPointParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glPointParameteri");
    brebisGL.brebisPointParameteriNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glPointParameteriNV");
    brebisGL.brebisPointParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glPointParameteriv");
    brebisGL.brebisPointParameterivNV = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glPointParameterivNV");
    brebisGL.brebisPointParameterx = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glPointParameterx");
    brebisGL.brebisPointParameterxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLfixed))brebisGLGetProcAddress("glPointParameterxOES");
    brebisGL.brebisPointParameterxv = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glPointParameterxv");
    brebisGL.brebisPointParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, const GLfixed *))brebisGLGetProcAddress("glPointParameterxvOES");
    brebisGL.brebisPointSize = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glPointSize");
    brebisGL.brebisPointSizePointerOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glPointSizePointerOES");
    brebisGL.brebisPointSizex = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glPointSizex");
    brebisGL.brebisPointSizexOES = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glPointSizexOES");
    brebisGL.brebisPollAsyncSGIX = (GLint(KHRONOS_APIENTRY *)(GLuint *))brebisGLGetProcAddress("glPollAsyncSGIX");
    brebisGL.brebisPollInstrumentsSGIX = (GLint(KHRONOS_APIENTRY *)(GLint *))brebisGLGetProcAddress("glPollInstrumentsSGIX");
    brebisGL.brebisPolygonMode = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glPolygonMode");
    brebisGL.brebisPolygonModeNV = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glPolygonModeNV");
    brebisGL.brebisPolygonOffset = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glPolygonOffset");
    brebisGL.brebisPolygonOffsetClamp = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glPolygonOffsetClamp");
    brebisGL.brebisPolygonOffsetClampEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glPolygonOffsetClampEXT");
    brebisGL.brebisPolygonOffsetEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glPolygonOffsetEXT");
    brebisGL.brebisPolygonOffsetx = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))brebisGLGetProcAddress("glPolygonOffsetx");
    brebisGL.brebisPolygonOffsetxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))brebisGLGetProcAddress("glPolygonOffsetxOES");
    brebisGL.brebisPolygonStipple = (void (KHRONOS_APIENTRY *)(const GLubyte *))brebisGLGetProcAddress("glPolygonStipple");
    brebisGL.brebisPopAttrib = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPopAttrib");
    brebisGL.brebisPopClientAttrib = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPopClientAttrib");
    brebisGL.brebisPopDebugGroup = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPopDebugGroup");
    brebisGL.brebisPopDebugGroupKHR = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPopDebugGroupKHR");
    brebisGL.brebisPopGroupMarkerEXT = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPopGroupMarkerEXT");
    brebisGL.brebisPopMatrix = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPopMatrix");
    brebisGL.brebisPopName = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPopName");
    brebisGL.brebisPresentFrameDualFillNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint))brebisGLGetProcAddress("glPresentFrameDualFillNV");
    brebisGL.brebisPresentFrameKeyedNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint))brebisGLGetProcAddress("glPresentFrameKeyedNV");
    brebisGL.brebisPrimitiveBoundingBox = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glPrimitiveBoundingBox");
    brebisGL.brebisPrimitiveBoundingBoxARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glPrimitiveBoundingBoxARB");
    brebisGL.brebisPrimitiveBoundingBoxEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glPrimitiveBoundingBoxEXT");
    brebisGL.brebisPrimitiveBoundingBoxOES = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glPrimitiveBoundingBoxOES");
    brebisGL.brebisPrimitiveRestartIndex = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glPrimitiveRestartIndex");
    brebisGL.brebisPrimitiveRestartIndexNV = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glPrimitiveRestartIndexNV");
    brebisGL.brebisPrimitiveRestartNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPrimitiveRestartNV");
    brebisGL.brebisPrioritizeTextures = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, const GLfloat *))brebisGLGetProcAddress("glPrioritizeTextures");
    brebisGL.brebisPrioritizeTexturesEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, const GLclampf *))brebisGLGetProcAddress("glPrioritizeTexturesEXT");
    brebisGL.brebisPrioritizeTexturesxOES = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, const GLfixed *))brebisGLGetProcAddress("glPrioritizeTexturesxOES");
    brebisGL.brebisProgramBinary = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLsizei))brebisGLGetProcAddress("glProgramBinary");
    brebisGL.brebisProgramBinaryOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *, GLint))brebisGLGetProcAddress("glProgramBinaryOES");
    brebisGL.brebisProgramBufferParametersIivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramBufferParametersIivNV");
    brebisGL.brebisProgramBufferParametersIuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramBufferParametersIuivNV");
    brebisGL.brebisProgramBufferParametersfvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramBufferParametersfvNV");
    brebisGL.brebisProgramEnvParameter4dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramEnvParameter4dARB");
    brebisGL.brebisProgramEnvParameter4dvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLdouble *))brebisGLGetProcAddress("glProgramEnvParameter4dvARB");
    brebisGL.brebisProgramEnvParameter4fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramEnvParameter4fARB");
    brebisGL.brebisProgramEnvParameter4fvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))brebisGLGetProcAddress("glProgramEnvParameter4fvARB");
    brebisGL.brebisProgramEnvParameterI4iNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glProgramEnvParameterI4iNV");
    brebisGL.brebisProgramEnvParameterI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLint *))brebisGLGetProcAddress("glProgramEnvParameterI4ivNV");
    brebisGL.brebisProgramEnvParameterI4uiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glProgramEnvParameterI4uiNV");
    brebisGL.brebisProgramEnvParameterI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLuint *))brebisGLGetProcAddress("glProgramEnvParameterI4uivNV");
    brebisGL.brebisProgramEnvParameters4fvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramEnvParameters4fvEXT");
    brebisGL.brebisProgramEnvParametersI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramEnvParametersI4ivNV");
    brebisGL.brebisProgramEnvParametersI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramEnvParametersI4uivNV");
    brebisGL.brebisProgramLocalParameter4dARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramLocalParameter4dARB");
    brebisGL.brebisProgramLocalParameter4dvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLdouble *))brebisGLGetProcAddress("glProgramLocalParameter4dvARB");
    brebisGL.brebisProgramLocalParameter4fARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramLocalParameter4fARB");
    brebisGL.brebisProgramLocalParameter4fvARB = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))brebisGLGetProcAddress("glProgramLocalParameter4fvARB");
    brebisGL.brebisProgramLocalParameterI4iNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glProgramLocalParameterI4iNV");
    brebisGL.brebisProgramLocalParameterI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLint *))brebisGLGetProcAddress("glProgramLocalParameterI4ivNV");
    brebisGL.brebisProgramLocalParameterI4uiNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glProgramLocalParameterI4uiNV");
    brebisGL.brebisProgramLocalParameterI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLuint *))brebisGLGetProcAddress("glProgramLocalParameterI4uivNV");
    brebisGL.brebisProgramLocalParameters4fvEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramLocalParameters4fvEXT");
    brebisGL.brebisProgramLocalParametersI4ivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramLocalParametersI4ivNV");
    brebisGL.brebisProgramLocalParametersI4uivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramLocalParametersI4uivNV");
    brebisGL.brebisProgramNamedParameter4dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramNamedParameter4dNV");
    brebisGL.brebisProgramNamedParameter4dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, const GLdouble *))brebisGLGetProcAddress("glProgramNamedParameter4dvNV");
    brebisGL.brebisProgramNamedParameter4fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramNamedParameter4fNV");
    brebisGL.brebisProgramNamedParameter4fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *, const GLfloat *))brebisGLGetProcAddress("glProgramNamedParameter4fvNV");
    brebisGL.brebisProgramParameter4dNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramParameter4dNV");
    brebisGL.brebisProgramParameter4dvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLdouble *))brebisGLGetProcAddress("glProgramParameter4dvNV");
    brebisGL.brebisProgramParameter4fNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramParameter4fNV");
    brebisGL.brebisProgramParameter4fvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))brebisGLGetProcAddress("glProgramParameter4fvNV");
    brebisGL.brebisProgramParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glProgramParameteri");
    brebisGL.brebisProgramParameteriARB = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glProgramParameteriARB");
    brebisGL.brebisProgramParameteriEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glProgramParameteriEXT");
    brebisGL.brebisProgramParameters4dvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glProgramParameters4dvNV");
    brebisGL.brebisProgramParameters4fvNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramParameters4fvNV");
    brebisGL.brebisProgramPathFragmentInputGenNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLint, const GLfloat *))brebisGLGetProcAddress("glProgramPathFragmentInputGenNV");
    brebisGL.brebisProgramStringARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glProgramStringARB");
    brebisGL.brebisProgramSubroutineParametersuivNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramSubroutineParametersuivNV");
    brebisGL.brebisProgramUniform1d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble))brebisGLGetProcAddress("glProgramUniform1d");
    brebisGL.brebisProgramUniform1dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble))brebisGLGetProcAddress("glProgramUniform1dEXT");
    brebisGL.brebisProgramUniform1dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glProgramUniform1dv");
    brebisGL.brebisProgramUniform1dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glProgramUniform1dvEXT");
    brebisGL.brebisProgramUniform1f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat))brebisGLGetProcAddress("glProgramUniform1f");
    brebisGL.brebisProgramUniform1fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat))brebisGLGetProcAddress("glProgramUniform1fEXT");
    brebisGL.brebisProgramUniform1fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramUniform1fv");
    brebisGL.brebisProgramUniform1fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramUniform1fvEXT");
    brebisGL.brebisProgramUniform1i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))brebisGLGetProcAddress("glProgramUniform1i");
    brebisGL.brebisProgramUniform1i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64))brebisGLGetProcAddress("glProgramUniform1i64ARB");
    brebisGL.brebisProgramUniform1i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT))brebisGLGetProcAddress("glProgramUniform1i64NV");
    brebisGL.brebisProgramUniform1i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))brebisGLGetProcAddress("glProgramUniform1i64vARB");
    brebisGL.brebisProgramUniform1i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))brebisGLGetProcAddress("glProgramUniform1i64vNV");
    brebisGL.brebisProgramUniform1iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))brebisGLGetProcAddress("glProgramUniform1iEXT");
    brebisGL.brebisProgramUniform1iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramUniform1iv");
    brebisGL.brebisProgramUniform1ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramUniform1ivEXT");
    brebisGL.brebisProgramUniform1ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))brebisGLGetProcAddress("glProgramUniform1ui");
    brebisGL.brebisProgramUniform1ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))brebisGLGetProcAddress("glProgramUniform1ui64ARB");
    brebisGL.brebisProgramUniform1ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT))brebisGLGetProcAddress("glProgramUniform1ui64NV");
    brebisGL.brebisProgramUniform1ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glProgramUniform1ui64vARB");
    brebisGL.brebisProgramUniform1ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glProgramUniform1ui64vNV");
    brebisGL.brebisProgramUniform1uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))brebisGLGetProcAddress("glProgramUniform1uiEXT");
    brebisGL.brebisProgramUniform1uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramUniform1uiv");
    brebisGL.brebisProgramUniform1uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramUniform1uivEXT");
    brebisGL.brebisProgramUniform2d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramUniform2d");
    brebisGL.brebisProgramUniform2dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramUniform2dEXT");
    brebisGL.brebisProgramUniform2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glProgramUniform2dv");
    brebisGL.brebisProgramUniform2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glProgramUniform2dvEXT");
    brebisGL.brebisProgramUniform2f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramUniform2f");
    brebisGL.brebisProgramUniform2fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramUniform2fEXT");
    brebisGL.brebisProgramUniform2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramUniform2fv");
    brebisGL.brebisProgramUniform2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramUniform2fvEXT");
    brebisGL.brebisProgramUniform2i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))brebisGLGetProcAddress("glProgramUniform2i");
    brebisGL.brebisProgramUniform2i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64, GLint64))brebisGLGetProcAddress("glProgramUniform2i64ARB");
    brebisGL.brebisProgramUniform2i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT, GLint64EXT))brebisGLGetProcAddress("glProgramUniform2i64NV");
    brebisGL.brebisProgramUniform2i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))brebisGLGetProcAddress("glProgramUniform2i64vARB");
    brebisGL.brebisProgramUniform2i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))brebisGLGetProcAddress("glProgramUniform2i64vNV");
    brebisGL.brebisProgramUniform2iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))brebisGLGetProcAddress("glProgramUniform2iEXT");
    brebisGL.brebisProgramUniform2iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramUniform2iv");
    brebisGL.brebisProgramUniform2ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramUniform2ivEXT");
    brebisGL.brebisProgramUniform2ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint))brebisGLGetProcAddress("glProgramUniform2ui");
    brebisGL.brebisProgramUniform2ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64, GLuint64))brebisGLGetProcAddress("glProgramUniform2ui64ARB");
    brebisGL.brebisProgramUniform2ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT, GLuint64EXT))brebisGLGetProcAddress("glProgramUniform2ui64NV");
    brebisGL.brebisProgramUniform2ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glProgramUniform2ui64vARB");
    brebisGL.brebisProgramUniform2ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glProgramUniform2ui64vNV");
    brebisGL.brebisProgramUniform2uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint))brebisGLGetProcAddress("glProgramUniform2uiEXT");
    brebisGL.brebisProgramUniform2uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramUniform2uiv");
    brebisGL.brebisProgramUniform2uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramUniform2uivEXT");
    brebisGL.brebisProgramUniform3d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramUniform3d");
    brebisGL.brebisProgramUniform3dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramUniform3dEXT");
    brebisGL.brebisProgramUniform3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glProgramUniform3dv");
    brebisGL.brebisProgramUniform3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glProgramUniform3dvEXT");
    brebisGL.brebisProgramUniform3f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramUniform3f");
    brebisGL.brebisProgramUniform3fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramUniform3fEXT");
    brebisGL.brebisProgramUniform3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramUniform3fv");
    brebisGL.brebisProgramUniform3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramUniform3fvEXT");
    brebisGL.brebisProgramUniform3i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glProgramUniform3i");
    brebisGL.brebisProgramUniform3i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64, GLint64, GLint64))brebisGLGetProcAddress("glProgramUniform3i64ARB");
    brebisGL.brebisProgramUniform3i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT))brebisGLGetProcAddress("glProgramUniform3i64NV");
    brebisGL.brebisProgramUniform3i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))brebisGLGetProcAddress("glProgramUniform3i64vARB");
    brebisGL.brebisProgramUniform3i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))brebisGLGetProcAddress("glProgramUniform3i64vNV");
    brebisGL.brebisProgramUniform3iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glProgramUniform3iEXT");
    brebisGL.brebisProgramUniform3iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramUniform3iv");
    brebisGL.brebisProgramUniform3ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramUniform3ivEXT");
    brebisGL.brebisProgramUniform3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glProgramUniform3ui");
    brebisGL.brebisProgramUniform3ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64, GLuint64, GLuint64))brebisGLGetProcAddress("glProgramUniform3ui64ARB");
    brebisGL.brebisProgramUniform3ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT))brebisGLGetProcAddress("glProgramUniform3ui64NV");
    brebisGL.brebisProgramUniform3ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glProgramUniform3ui64vARB");
    brebisGL.brebisProgramUniform3ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glProgramUniform3ui64vNV");
    brebisGL.brebisProgramUniform3uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glProgramUniform3uiEXT");
    brebisGL.brebisProgramUniform3uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramUniform3uiv");
    brebisGL.brebisProgramUniform3uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramUniform3uivEXT");
    brebisGL.brebisProgramUniform4d = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramUniform4d");
    brebisGL.brebisProgramUniform4dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glProgramUniform4dEXT");
    brebisGL.brebisProgramUniform4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glProgramUniform4dv");
    brebisGL.brebisProgramUniform4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glProgramUniform4dvEXT");
    brebisGL.brebisProgramUniform4f = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramUniform4f");
    brebisGL.brebisProgramUniform4fEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glProgramUniform4fEXT");
    brebisGL.brebisProgramUniform4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramUniform4fv");
    brebisGL.brebisProgramUniform4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glProgramUniform4fvEXT");
    brebisGL.brebisProgramUniform4i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glProgramUniform4i");
    brebisGL.brebisProgramUniform4i64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64, GLint64, GLint64, GLint64))brebisGLGetProcAddress("glProgramUniform4i64ARB");
    brebisGL.brebisProgramUniform4i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT))brebisGLGetProcAddress("glProgramUniform4i64NV");
    brebisGL.brebisProgramUniform4i64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64 *))brebisGLGetProcAddress("glProgramUniform4i64vARB");
    brebisGL.brebisProgramUniform4i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint64EXT *))brebisGLGetProcAddress("glProgramUniform4i64vNV");
    brebisGL.brebisProgramUniform4iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glProgramUniform4iEXT");
    brebisGL.brebisProgramUniform4iv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramUniform4iv");
    brebisGL.brebisProgramUniform4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glProgramUniform4ivEXT");
    brebisGL.brebisProgramUniform4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glProgramUniform4ui");
    brebisGL.brebisProgramUniform4ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64))brebisGLGetProcAddress("glProgramUniform4ui64ARB");
    brebisGL.brebisProgramUniform4ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT))brebisGLGetProcAddress("glProgramUniform4ui64NV");
    brebisGL.brebisProgramUniform4ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glProgramUniform4ui64vARB");
    brebisGL.brebisProgramUniform4ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glProgramUniform4ui64vNV");
    brebisGL.brebisProgramUniform4uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glProgramUniform4uiEXT");
    brebisGL.brebisProgramUniform4uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramUniform4uiv");
    brebisGL.brebisProgramUniform4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glProgramUniform4uivEXT");
    brebisGL.brebisProgramUniformHandleui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))brebisGLGetProcAddress("glProgramUniformHandleui64ARB");
    brebisGL.brebisProgramUniformHandleui64IMG = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))brebisGLGetProcAddress("glProgramUniformHandleui64IMG");
    brebisGL.brebisProgramUniformHandleui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64))brebisGLGetProcAddress("glProgramUniformHandleui64NV");
    brebisGL.brebisProgramUniformHandleui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glProgramUniformHandleui64vARB");
    brebisGL.brebisProgramUniformHandleui64vIMG = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glProgramUniformHandleui64vIMG");
    brebisGL.brebisProgramUniformHandleui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glProgramUniformHandleui64vNV");
    brebisGL.brebisProgramUniformMatrix2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix2dv");
    brebisGL.brebisProgramUniformMatrix2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix2dvEXT");
    brebisGL.brebisProgramUniformMatrix2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix2fv");
    brebisGL.brebisProgramUniformMatrix2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix2fvEXT");
    brebisGL.brebisProgramUniformMatrix2x3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix2x3dv");
    brebisGL.brebisProgramUniformMatrix2x3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix2x3dvEXT");
    brebisGL.brebisProgramUniformMatrix2x3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix2x3fv");
    brebisGL.brebisProgramUniformMatrix2x3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix2x3fvEXT");
    brebisGL.brebisProgramUniformMatrix2x4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix2x4dv");
    brebisGL.brebisProgramUniformMatrix2x4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix2x4dvEXT");
    brebisGL.brebisProgramUniformMatrix2x4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix2x4fv");
    brebisGL.brebisProgramUniformMatrix2x4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix2x4fvEXT");
    brebisGL.brebisProgramUniformMatrix3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix3dv");
    brebisGL.brebisProgramUniformMatrix3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix3dvEXT");
    brebisGL.brebisProgramUniformMatrix3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix3fv");
    brebisGL.brebisProgramUniformMatrix3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix3fvEXT");
    brebisGL.brebisProgramUniformMatrix3x2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix3x2dv");
    brebisGL.brebisProgramUniformMatrix3x2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix3x2dvEXT");
    brebisGL.brebisProgramUniformMatrix3x2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix3x2fv");
    brebisGL.brebisProgramUniformMatrix3x2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix3x2fvEXT");
    brebisGL.brebisProgramUniformMatrix3x4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix3x4dv");
    brebisGL.brebisProgramUniformMatrix3x4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix3x4dvEXT");
    brebisGL.brebisProgramUniformMatrix3x4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix3x4fv");
    brebisGL.brebisProgramUniformMatrix3x4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix3x4fvEXT");
    brebisGL.brebisProgramUniformMatrix4dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix4dv");
    brebisGL.brebisProgramUniformMatrix4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix4dvEXT");
    brebisGL.brebisProgramUniformMatrix4fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix4fv");
    brebisGL.brebisProgramUniformMatrix4fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix4fvEXT");
    brebisGL.brebisProgramUniformMatrix4x2dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix4x2dv");
    brebisGL.brebisProgramUniformMatrix4x2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix4x2dvEXT");
    brebisGL.brebisProgramUniformMatrix4x2fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix4x2fv");
    brebisGL.brebisProgramUniformMatrix4x2fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix4x2fvEXT");
    brebisGL.brebisProgramUniformMatrix4x3dv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix4x3dv");
    brebisGL.brebisProgramUniformMatrix4x3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glProgramUniformMatrix4x3dvEXT");
    brebisGL.brebisProgramUniformMatrix4x3fv = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix4x3fv");
    brebisGL.brebisProgramUniformMatrix4x3fvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glProgramUniformMatrix4x3fvEXT");
    brebisGL.brebisProgramUniformui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint64EXT))brebisGLGetProcAddress("glProgramUniformui64NV");
    brebisGL.brebisProgramUniformui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glProgramUniformui64vNV");
    brebisGL.brebisProgramVertexLimitNV = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glProgramVertexLimitNV");
    brebisGL.brebisProvokingVertex = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glProvokingVertex");
    brebisGL.brebisProvokingVertexEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glProvokingVertexEXT");
    brebisGL.brebisPushAttrib = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glPushAttrib");
    brebisGL.brebisPushClientAttrib = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glPushClientAttrib");
    brebisGL.brebisPushClientAttribDefaultEXT = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glPushClientAttribDefaultEXT");
    brebisGL.brebisPushDebugGroup = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))brebisGLGetProcAddress("glPushDebugGroup");
    brebisGL.brebisPushDebugGroupKHR = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLsizei, const GLchar *))brebisGLGetProcAddress("glPushDebugGroupKHR");
    brebisGL.brebisPushGroupMarkerEXT = (void (KHRONOS_APIENTRY *)(GLsizei, const GLchar *))brebisGLGetProcAddress("glPushGroupMarkerEXT");
    brebisGL.brebisPushMatrix = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glPushMatrix");
    brebisGL.brebisPushName = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glPushName");
    brebisGL.brebisQueryCounter = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glQueryCounter");
    brebisGL.brebisQueryCounterEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glQueryCounterEXT");
    brebisGL.brebisQueryMatrixxOES = (GLbitfield(KHRONOS_APIENTRY *)(GLfixed *, GLint *))brebisGLGetProcAddress("glQueryMatrixxOES");
    brebisGL.brebisQueryObjectParameteruiAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLuint))brebisGLGetProcAddress("glQueryObjectParameteruiAMD");
    brebisGL.brebisQueryResourceNV = (GLint(KHRONOS_APIENTRY *)(GLenum, GLint, GLuint, GLint *))brebisGLGetProcAddress("glQueryResourceNV");
    brebisGL.brebisQueryResourceTagNV = (void (KHRONOS_APIENTRY *)(GLint, const GLchar *))brebisGLGetProcAddress("glQueryResourceTagNV");
    brebisGL.brebisRasterPos2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glRasterPos2d");
    brebisGL.brebisRasterPos2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glRasterPos2dv");
    brebisGL.brebisRasterPos2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glRasterPos2f");
    brebisGL.brebisRasterPos2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glRasterPos2fv");
    brebisGL.brebisRasterPos2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))brebisGLGetProcAddress("glRasterPos2i");
    brebisGL.brebisRasterPos2iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glRasterPos2iv");
    brebisGL.brebisRasterPos2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))brebisGLGetProcAddress("glRasterPos2s");
    brebisGL.brebisRasterPos2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glRasterPos2sv");
    brebisGL.brebisRasterPos2xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))brebisGLGetProcAddress("glRasterPos2xOES");
    brebisGL.brebisRasterPos2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glRasterPos2xvOES");
    brebisGL.brebisRasterPos3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glRasterPos3d");
    brebisGL.brebisRasterPos3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glRasterPos3dv");
    brebisGL.brebisRasterPos3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glRasterPos3f");
    brebisGL.brebisRasterPos3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glRasterPos3fv");
    brebisGL.brebisRasterPos3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glRasterPos3i");
    brebisGL.brebisRasterPos3iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glRasterPos3iv");
    brebisGL.brebisRasterPos3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glRasterPos3s");
    brebisGL.brebisRasterPos3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glRasterPos3sv");
    brebisGL.brebisRasterPos3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glRasterPos3xOES");
    brebisGL.brebisRasterPos3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glRasterPos3xvOES");
    brebisGL.brebisRasterPos4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glRasterPos4d");
    brebisGL.brebisRasterPos4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glRasterPos4dv");
    brebisGL.brebisRasterPos4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glRasterPos4f");
    brebisGL.brebisRasterPos4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glRasterPos4fv");
    brebisGL.brebisRasterPos4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glRasterPos4i");
    brebisGL.brebisRasterPos4iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glRasterPos4iv");
    brebisGL.brebisRasterPos4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glRasterPos4s");
    brebisGL.brebisRasterPos4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glRasterPos4sv");
    brebisGL.brebisRasterPos4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glRasterPos4xOES");
    brebisGL.brebisRasterPos4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glRasterPos4xvOES");
    brebisGL.brebisRasterSamplesEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean))brebisGLGetProcAddress("glRasterSamplesEXT");
    brebisGL.brebisReadBuffer = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glReadBuffer");
    brebisGL.brebisReadBufferIndexedEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glReadBufferIndexedEXT");
    brebisGL.brebisReadBufferNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glReadBufferNV");
    brebisGL.brebisReadBufferRegion = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glReadBufferRegion");
    brebisGL.brebisReadInstrumentsSGIX = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glReadInstrumentsSGIX");
    brebisGL.brebisReadPixels = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *))brebisGLGetProcAddress("glReadPixels");
    brebisGL.brebisReadnPixels = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glReadnPixels");
    brebisGL.brebisReadnPixelsARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glReadnPixelsARB");
    brebisGL.brebisReadnPixelsEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glReadnPixelsEXT");
    brebisGL.brebisReadnPixelsKHR = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *))brebisGLGetProcAddress("glReadnPixelsKHR");
    brebisGL.brebisRectd = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glRectd");
    brebisGL.brebisRectdv = (void (KHRONOS_APIENTRY *)(const GLdouble *, const GLdouble *))brebisGLGetProcAddress("glRectdv");
    brebisGL.brebisRectf = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glRectf");
    brebisGL.brebisRectfv = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glRectfv");
    brebisGL.brebisRecti = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glRecti");
    brebisGL.brebisRectiv = (void (KHRONOS_APIENTRY *)(const GLint *, const GLint *))brebisGLGetProcAddress("glRectiv");
    brebisGL.brebisRects = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glRects");
    brebisGL.brebisRectsv = (void (KHRONOS_APIENTRY *)(const GLshort *, const GLshort *))brebisGLGetProcAddress("glRectsv");
    brebisGL.brebisRectxOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glRectxOES");
    brebisGL.brebisRectxvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *, const GLfixed *))brebisGLGetProcAddress("glRectxvOES");
    brebisGL.brebisReferencePlaneSGIX = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glReferencePlaneSGIX");
    brebisGL.brebisReleaseKeyedMutexWin32EXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint, GLuint64))brebisGLGetProcAddress("glReleaseKeyedMutexWin32EXT");
    brebisGL.brebisReleaseShaderCompiler = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glReleaseShaderCompiler");
    brebisGL.brebisRenderGpuMaskNV = (void (KHRONOS_APIENTRY *)(GLbitfield))brebisGLGetProcAddress("glRenderGpuMaskNV");
    brebisGL.brebisRenderMode = (GLint(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glRenderMode");
    brebisGL.brebisRenderbufferStorage = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorage");
    brebisGL.brebisRenderbufferStorageEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageEXT");
    brebisGL.brebisRenderbufferStorageMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageMultisample");
    brebisGL.brebisRenderbufferStorageMultisampleANGLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageMultisampleANGLE");
    brebisGL.brebisRenderbufferStorageMultisampleAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageMultisampleAPPLE");
    brebisGL.brebisRenderbufferStorageMultisampleAdvancedAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageMultisampleAdvancedAMD");
    brebisGL.brebisRenderbufferStorageMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageMultisampleCoverageNV");
    brebisGL.brebisRenderbufferStorageMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageMultisampleEXT");
    brebisGL.brebisRenderbufferStorageMultisampleIMG = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageMultisampleIMG");
    brebisGL.brebisRenderbufferStorageMultisampleNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageMultisampleNV");
    brebisGL.brebisRenderbufferStorageOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glRenderbufferStorageOES");
    brebisGL.brebisReplacementCodePointerSUN = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void **))brebisGLGetProcAddress("glReplacementCodePointerSUN");
    brebisGL.brebisReplacementCodeubSUN = (void (KHRONOS_APIENTRY *)(GLubyte))brebisGLGetProcAddress("glReplacementCodeubSUN");
    brebisGL.brebisReplacementCodeubvSUN = (void (KHRONOS_APIENTRY *)(const GLubyte *))brebisGLGetProcAddress("glReplacementCodeubvSUN");
    brebisGL.brebisReplacementCodeuiColor3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glReplacementCodeuiColor3fVertex3fSUN");
    brebisGL.brebisReplacementCodeuiColor3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN");
    brebisGL.brebisReplacementCodeuiColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
    brebisGL.brebisReplacementCodeuiColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
    brebisGL.brebisReplacementCodeuiColor4ubVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN");
    brebisGL.brebisReplacementCodeuiColor4ubVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLubyte *, const GLfloat *))brebisGLGetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN");
    brebisGL.brebisReplacementCodeuiNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN");
    brebisGL.brebisReplacementCodeuiNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN");
    brebisGL.brebisReplacementCodeuiSUN = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glReplacementCodeuiSUN");
    brebisGL.brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
    brebisGL.brebisReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
    brebisGL.brebisReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
    brebisGL.brebisReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
    brebisGL.brebisReplacementCodeuiTexCoord2fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN");
    brebisGL.brebisReplacementCodeuiTexCoord2fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN");
    brebisGL.brebisReplacementCodeuiVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glReplacementCodeuiVertex3fSUN");
    brebisGL.brebisReplacementCodeuiVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLuint *, const GLfloat *))brebisGLGetProcAddress("glReplacementCodeuiVertex3fvSUN");
    brebisGL.brebisReplacementCodeuivSUN = (void (KHRONOS_APIENTRY *)(const GLuint *))brebisGLGetProcAddress("glReplacementCodeuivSUN");
    brebisGL.brebisReplacementCodeusSUN = (void (KHRONOS_APIENTRY *)(GLushort))brebisGLGetProcAddress("glReplacementCodeusSUN");
    brebisGL.brebisReplacementCodeusvSUN = (void (KHRONOS_APIENTRY *)(const GLushort *))brebisGLGetProcAddress("glReplacementCodeusvSUN");
    brebisGL.brebisRequestResidentProgramsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *))brebisGLGetProcAddress("glRequestResidentProgramsNV");
    brebisGL.brebisResetHistogram = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glResetHistogram");
    brebisGL.brebisResetHistogramEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glResetHistogramEXT");
    brebisGL.brebisResetMemoryObjectParameterNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glResetMemoryObjectParameterNV");
    brebisGL.brebisResetMinmax = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glResetMinmax");
    brebisGL.brebisResetMinmaxEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glResetMinmaxEXT");
    brebisGL.brebisResizeBuffersMESA = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glResizeBuffersMESA");
    brebisGL.brebisResolveDepthValuesNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glResolveDepthValuesNV");
    brebisGL.brebisResolveMultisampleFramebufferAPPLE = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glResolveMultisampleFramebufferAPPLE");
    brebisGL.brebisResumeTransformFeedback = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glResumeTransformFeedback");
    brebisGL.brebisResumeTransformFeedbackNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glResumeTransformFeedbackNV");
    brebisGL.brebisRotated = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glRotated");
    brebisGL.brebisRotatef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glRotatef");
    brebisGL.brebisRotatex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glRotatex");
    brebisGL.brebisRotatexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glRotatexOES");
    brebisGL.brebisSampleCoverage = (void (KHRONOS_APIENTRY *)(GLfloat, GLboolean))brebisGLGetProcAddress("glSampleCoverage");
    brebisGL.brebisSampleCoverageARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLboolean))brebisGLGetProcAddress("glSampleCoverageARB");
    brebisGL.brebisSampleCoveragex = (void (KHRONOS_APIENTRY *)(GLclampx, GLboolean))brebisGLGetProcAddress("glSampleCoveragex");
    brebisGL.brebisSampleCoveragexOES = (void (KHRONOS_APIENTRY *)(GLclampx, GLboolean))brebisGLGetProcAddress("glSampleCoveragexOES");
    brebisGL.brebisSampleMapATI = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum))brebisGLGetProcAddress("glSampleMapATI");
    brebisGL.brebisSampleMaskEXT = (void (KHRONOS_APIENTRY *)(GLclampf, GLboolean))brebisGLGetProcAddress("glSampleMaskEXT");
    brebisGL.brebisSampleMaskIndexedNV = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield))brebisGLGetProcAddress("glSampleMaskIndexedNV");
    brebisGL.brebisSampleMaskSGIS = (void (KHRONOS_APIENTRY *)(GLclampf, GLboolean))brebisGLGetProcAddress("glSampleMaskSGIS");
    brebisGL.brebisSampleMaski = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield))brebisGLGetProcAddress("glSampleMaski");
    brebisGL.brebisSamplePatternEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glSamplePatternEXT");
    brebisGL.brebisSamplePatternSGIS = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glSamplePatternSGIS");
    brebisGL.brebisSamplerParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glSamplerParameterIiv");
    brebisGL.brebisSamplerParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glSamplerParameterIivEXT");
    brebisGL.brebisSamplerParameterIivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glSamplerParameterIivOES");
    brebisGL.brebisSamplerParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))brebisGLGetProcAddress("glSamplerParameterIuiv");
    brebisGL.brebisSamplerParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))brebisGLGetProcAddress("glSamplerParameterIuivEXT");
    brebisGL.brebisSamplerParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))brebisGLGetProcAddress("glSamplerParameterIuivOES");
    brebisGL.brebisSamplerParameterf = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))brebisGLGetProcAddress("glSamplerParameterf");
    brebisGL.brebisSamplerParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))brebisGLGetProcAddress("glSamplerParameterfv");
    brebisGL.brebisSamplerParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glSamplerParameteri");
    brebisGL.brebisSamplerParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glSamplerParameteriv");
    brebisGL.brebisScaled = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glScaled");
    brebisGL.brebisScalef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glScalef");
    brebisGL.brebisScalex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glScalex");
    brebisGL.brebisScalexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glScalexOES");
    brebisGL.brebisScissor = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glScissor");
    brebisGL.brebisScissorArrayv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))brebisGLGetProcAddress("glScissorArrayv");
    brebisGL.brebisScissorArrayvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))brebisGLGetProcAddress("glScissorArrayvNV");
    brebisGL.brebisScissorArrayvOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))brebisGLGetProcAddress("glScissorArrayvOES");
    brebisGL.brebisScissorExclusiveArrayvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *))brebisGLGetProcAddress("glScissorExclusiveArrayvNV");
    brebisGL.brebisScissorExclusiveNV = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glScissorExclusiveNV");
    brebisGL.brebisScissorIndexed = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glScissorIndexed");
    brebisGL.brebisScissorIndexedNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glScissorIndexedNV");
    brebisGL.brebisScissorIndexedOES = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glScissorIndexedOES");
    brebisGL.brebisScissorIndexedv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glScissorIndexedv");
    brebisGL.brebisScissorIndexedvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glScissorIndexedvNV");
    brebisGL.brebisScissorIndexedvOES = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glScissorIndexedvOES");
    brebisGL.brebisSecondaryColor3b = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glSecondaryColor3b");
    brebisGL.brebisSecondaryColor3bEXT = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glSecondaryColor3bEXT");
    brebisGL.brebisSecondaryColor3bv = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glSecondaryColor3bv");
    brebisGL.brebisSecondaryColor3bvEXT = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glSecondaryColor3bvEXT");
    brebisGL.brebisSecondaryColor3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glSecondaryColor3d");
    brebisGL.brebisSecondaryColor3dEXT = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glSecondaryColor3dEXT");
    brebisGL.brebisSecondaryColor3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glSecondaryColor3dv");
    brebisGL.brebisSecondaryColor3dvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glSecondaryColor3dvEXT");
    brebisGL.brebisSecondaryColor3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glSecondaryColor3f");
    brebisGL.brebisSecondaryColor3fEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glSecondaryColor3fEXT");
    brebisGL.brebisSecondaryColor3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glSecondaryColor3fv");
    brebisGL.brebisSecondaryColor3fvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glSecondaryColor3fvEXT");
    brebisGL.brebisSecondaryColor3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glSecondaryColor3hNV");
    brebisGL.brebisSecondaryColor3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glSecondaryColor3hvNV");
    brebisGL.brebisSecondaryColor3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glSecondaryColor3i");
    brebisGL.brebisSecondaryColor3iEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glSecondaryColor3iEXT");
    brebisGL.brebisSecondaryColor3iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glSecondaryColor3iv");
    brebisGL.brebisSecondaryColor3ivEXT = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glSecondaryColor3ivEXT");
    brebisGL.brebisSecondaryColor3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glSecondaryColor3s");
    brebisGL.brebisSecondaryColor3sEXT = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glSecondaryColor3sEXT");
    brebisGL.brebisSecondaryColor3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glSecondaryColor3sv");
    brebisGL.brebisSecondaryColor3svEXT = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glSecondaryColor3svEXT");
    brebisGL.brebisSecondaryColor3ub = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte))brebisGLGetProcAddress("glSecondaryColor3ub");
    brebisGL.brebisSecondaryColor3ubEXT = (void (KHRONOS_APIENTRY *)(GLubyte, GLubyte, GLubyte))brebisGLGetProcAddress("glSecondaryColor3ubEXT");
    brebisGL.brebisSecondaryColor3ubv = (void (KHRONOS_APIENTRY *)(const GLubyte *))brebisGLGetProcAddress("glSecondaryColor3ubv");
    brebisGL.brebisSecondaryColor3ubvEXT = (void (KHRONOS_APIENTRY *)(const GLubyte *))brebisGLGetProcAddress("glSecondaryColor3ubvEXT");
    brebisGL.brebisSecondaryColor3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glSecondaryColor3ui");
    brebisGL.brebisSecondaryColor3uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glSecondaryColor3uiEXT");
    brebisGL.brebisSecondaryColor3uiv = (void (KHRONOS_APIENTRY *)(const GLuint *))brebisGLGetProcAddress("glSecondaryColor3uiv");
    brebisGL.brebisSecondaryColor3uivEXT = (void (KHRONOS_APIENTRY *)(const GLuint *))brebisGLGetProcAddress("glSecondaryColor3uivEXT");
    brebisGL.brebisSecondaryColor3us = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort))brebisGLGetProcAddress("glSecondaryColor3us");
    brebisGL.brebisSecondaryColor3usEXT = (void (KHRONOS_APIENTRY *)(GLushort, GLushort, GLushort))brebisGLGetProcAddress("glSecondaryColor3usEXT");
    brebisGL.brebisSecondaryColor3usv = (void (KHRONOS_APIENTRY *)(const GLushort *))brebisGLGetProcAddress("glSecondaryColor3usv");
    brebisGL.brebisSecondaryColor3usvEXT = (void (KHRONOS_APIENTRY *)(const GLushort *))brebisGLGetProcAddress("glSecondaryColor3usvEXT");
    brebisGL.brebisSecondaryColorFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))brebisGLGetProcAddress("glSecondaryColorFormatNV");
    brebisGL.brebisSecondaryColorP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glSecondaryColorP3ui");
    brebisGL.brebisSecondaryColorP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glSecondaryColorP3uiv");
    brebisGL.brebisSecondaryColorPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glSecondaryColorPointer");
    brebisGL.brebisSecondaryColorPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glSecondaryColorPointerEXT");
    brebisGL.brebisSecondaryColorPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))brebisGLGetProcAddress("glSecondaryColorPointerListIBM");
    brebisGL.brebisSelectBuffer = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint *))brebisGLGetProcAddress("glSelectBuffer");
    brebisGL.brebisSelectPerfMonitorCountersAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLboolean, GLuint, GLint, GLuint *))brebisGLGetProcAddress("glSelectPerfMonitorCountersAMD");
    brebisGL.brebisSemaphoreParameterui64vEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint64 *))brebisGLGetProcAddress("glSemaphoreParameterui64vEXT");
    brebisGL.brebisSeparableFilter2D = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *))brebisGLGetProcAddress("glSeparableFilter2D");
    brebisGL.brebisSeparableFilter2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *))brebisGLGetProcAddress("glSeparableFilter2DEXT");
    brebisGL.brebisSetFenceAPPLE = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glSetFenceAPPLE");
    brebisGL.brebisSetFenceNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glSetFenceNV");
    brebisGL.brebisSetFragmentShaderConstantATI = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glSetFragmentShaderConstantATI");
    brebisGL.brebisSetInvariantEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *))brebisGLGetProcAddress("glSetInvariantEXT");
    brebisGL.brebisSetLocalConstantEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const void *))brebisGLGetProcAddress("glSetLocalConstantEXT");
    brebisGL.brebisSetMultisamplefvAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLfloat *))brebisGLGetProcAddress("glSetMultisamplefvAMD");
    brebisGL.brebisShadeModel = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glShadeModel");
    brebisGL.brebisShaderBinary = (void (KHRONOS_APIENTRY *)(GLsizei, const GLuint *, GLenum, const void *, GLsizei))brebisGLGetProcAddress("glShaderBinary");
    brebisGL.brebisShaderOp1EXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint))brebisGLGetProcAddress("glShaderOp1EXT");
    brebisGL.brebisShaderOp2EXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glShaderOp2EXT");
    brebisGL.brebisShaderOp3EXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glShaderOp3EXT");
    brebisGL.brebisShaderSource = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, const GLint *))brebisGLGetProcAddress("glShaderSource");
    brebisGL.brebisShaderSourceARB = (void (KHRONOS_APIENTRY *)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *))brebisGLGetProcAddress("glShaderSourceARB");
    brebisGL.brebisShaderStorageBlockBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glShaderStorageBlockBinding");
    brebisGL.brebisShadingRateImageBarrierNV = (void (KHRONOS_APIENTRY *)(GLboolean))brebisGLGetProcAddress("glShadingRateImageBarrierNV");
    brebisGL.brebisShadingRateImagePaletteNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLenum *))brebisGLGetProcAddress("glShadingRateImagePaletteNV");
    brebisGL.brebisShadingRateSampleOrderCustomNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, const GLint *))brebisGLGetProcAddress("glShadingRateSampleOrderCustomNV");
    brebisGL.brebisShadingRateSampleOrderNV = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glShadingRateSampleOrderNV");
    brebisGL.brebisSharpenTexFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLfloat *))brebisGLGetProcAddress("glSharpenTexFuncSGIS");
    brebisGL.brebisSignalSemaphoreEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *))brebisGLGetProcAddress("glSignalSemaphoreEXT");
    brebisGL.brebisSignalVkFenceNV = (void (KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glSignalVkFenceNV");
    brebisGL.brebisSignalVkSemaphoreNV = (void (KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glSignalVkSemaphoreNV");
    brebisGL.brebisSpecializeShader = (void (KHRONOS_APIENTRY *)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *))brebisGLGetProcAddress("glSpecializeShader");
    brebisGL.brebisSpecializeShaderARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *))brebisGLGetProcAddress("glSpecializeShaderARB");
    brebisGL.brebisSpriteParameterfSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glSpriteParameterfSGIX");
    brebisGL.brebisSpriteParameterfvSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glSpriteParameterfvSGIX");
    brebisGL.brebisSpriteParameteriSGIX = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glSpriteParameteriSGIX");
    brebisGL.brebisSpriteParameterivSGIX = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glSpriteParameterivSGIX");
    brebisGL.brebisStartInstrumentsSGIX = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glStartInstrumentsSGIX");
    brebisGL.brebisStartTilingQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLbitfield))brebisGLGetProcAddress("glStartTilingQCOM");
    brebisGL.brebisStateCaptureNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum))brebisGLGetProcAddress("glStateCaptureNV");
    brebisGL.brebisStencilClearTagEXT = (void (KHRONOS_APIENTRY *)(GLsizei, GLuint))brebisGLGetProcAddress("glStencilClearTagEXT");
    brebisGL.brebisStencilFillPathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, const GLfloat *))brebisGLGetProcAddress("glStencilFillPathInstancedNV");
    brebisGL.brebisStencilFillPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint))brebisGLGetProcAddress("glStencilFillPathNV");
    brebisGL.brebisStencilFunc = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLuint))brebisGLGetProcAddress("glStencilFunc");
    brebisGL.brebisStencilFuncSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLuint))brebisGLGetProcAddress("glStencilFuncSeparate");
    brebisGL.brebisStencilFuncSeparateATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint, GLuint))brebisGLGetProcAddress("glStencilFuncSeparateATI");
    brebisGL.brebisStencilMask = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glStencilMask");
    brebisGL.brebisStencilMaskSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glStencilMaskSeparate");
    brebisGL.brebisStencilOp = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum))brebisGLGetProcAddress("glStencilOp");
    brebisGL.brebisStencilOpSeparate = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glStencilOpSeparate");
    brebisGL.brebisStencilOpSeparateATI = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glStencilOpSeparateATI");
    brebisGL.brebisStencilOpValueAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glStencilOpValueAMD");
    brebisGL.brebisStencilStrokePathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, const GLfloat *))brebisGLGetProcAddress("glStencilStrokePathInstancedNV");
    brebisGL.brebisStencilStrokePathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))brebisGLGetProcAddress("glStencilStrokePathNV");
    brebisGL.brebisStencilThenCoverFillPathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glStencilThenCoverFillPathInstancedNV");
    brebisGL.brebisStencilThenCoverFillPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum))brebisGLGetProcAddress("glStencilThenCoverFillPathNV");
    brebisGL.brebisStencilThenCoverStrokePathInstancedNV = (void (KHRONOS_APIENTRY *)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glStencilThenCoverStrokePathInstancedNV");
    brebisGL.brebisStencilThenCoverStrokePathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint, GLenum))brebisGLGetProcAddress("glStencilThenCoverStrokePathNV");
    brebisGL.brebisStopInstrumentsSGIX = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glStopInstrumentsSGIX");
    brebisGL.brebisStringMarkerGREMEDY = (void (KHRONOS_APIENTRY *)(GLsizei, const void *))brebisGLGetProcAddress("glStringMarkerGREMEDY");
    brebisGL.brebisSubpixelPrecisionBiasNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glSubpixelPrecisionBiasNV");
    brebisGL.brebisSwizzleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glSwizzleEXT");
    brebisGL.brebisSyncTextureINTEL = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glSyncTextureINTEL");
    brebisGL.brebisTagSampleBufferSGIX = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glTagSampleBufferSGIX");
    brebisGL.brebisTangent3bEXT = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glTangent3bEXT");
    brebisGL.brebisTangent3bvEXT = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glTangent3bvEXT");
    brebisGL.brebisTangent3dEXT = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glTangent3dEXT");
    brebisGL.brebisTangent3dvEXT = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glTangent3dvEXT");
    brebisGL.brebisTangent3fEXT = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTangent3fEXT");
    brebisGL.brebisTangent3fvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glTangent3fvEXT");
    brebisGL.brebisTangent3iEXT = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glTangent3iEXT");
    brebisGL.brebisTangent3ivEXT = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glTangent3ivEXT");
    brebisGL.brebisTangent3sEXT = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glTangent3sEXT");
    brebisGL.brebisTangent3svEXT = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glTangent3svEXT");
    brebisGL.brebisTangentPointerEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glTangentPointerEXT");
    brebisGL.brebisTbufferMask3DFX = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glTbufferMask3DFX");
    brebisGL.brebisTessellationFactorAMD = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glTessellationFactorAMD");
    brebisGL.brebisTessellationModeAMD = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glTessellationModeAMD");
    brebisGL.brebisTestFenceAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glTestFenceAPPLE");
    brebisGL.brebisTestFenceNV = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glTestFenceNV");
    brebisGL.brebisTestObjectAPPLE = (GLboolean(KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glTestObjectAPPLE");
    brebisGL.brebisTexAttachMemoryNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLuint64))brebisGLGetProcAddress("glTexAttachMemoryNV");
    brebisGL.brebisTexBuffer = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glTexBuffer");
    brebisGL.brebisTexBufferARB = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glTexBufferARB");
    brebisGL.brebisTexBufferEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glTexBufferEXT");
    brebisGL.brebisTexBufferOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint))brebisGLGetProcAddress("glTexBufferOES");
    brebisGL.brebisTexBufferRange = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glTexBufferRange");
    brebisGL.brebisTexBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glTexBufferRangeEXT");
    brebisGL.brebisTexBufferRangeOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glTexBufferRangeOES");
    brebisGL.brebisTexBumpParameterfvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glTexBumpParameterfvATI");
    brebisGL.brebisTexBumpParameterivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glTexBumpParameterivATI");
    brebisGL.brebisTexCoord1bOES = (void (KHRONOS_APIENTRY *)(GLbyte))brebisGLGetProcAddress("glTexCoord1bOES");
    brebisGL.brebisTexCoord1bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glTexCoord1bvOES");
    brebisGL.brebisTexCoord1d = (void (KHRONOS_APIENTRY *)(GLdouble))brebisGLGetProcAddress("glTexCoord1d");
    brebisGL.brebisTexCoord1dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glTexCoord1dv");
    brebisGL.brebisTexCoord1f = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glTexCoord1f");
    brebisGL.brebisTexCoord1fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glTexCoord1fv");
    brebisGL.brebisTexCoord1hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV))brebisGLGetProcAddress("glTexCoord1hNV");
    brebisGL.brebisTexCoord1hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glTexCoord1hvNV");
    brebisGL.brebisTexCoord1i = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glTexCoord1i");
    brebisGL.brebisTexCoord1iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glTexCoord1iv");
    brebisGL.brebisTexCoord1s = (void (KHRONOS_APIENTRY *)(GLshort))brebisGLGetProcAddress("glTexCoord1s");
    brebisGL.brebisTexCoord1sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glTexCoord1sv");
    brebisGL.brebisTexCoord1xOES = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glTexCoord1xOES");
    brebisGL.brebisTexCoord1xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glTexCoord1xvOES");
    brebisGL.brebisTexCoord2bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte))brebisGLGetProcAddress("glTexCoord2bOES");
    brebisGL.brebisTexCoord2bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glTexCoord2bvOES");
    brebisGL.brebisTexCoord2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glTexCoord2d");
    brebisGL.brebisTexCoord2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glTexCoord2dv");
    brebisGL.brebisTexCoord2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord2f");
    brebisGL.brebisTexCoord2fColor3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord2fColor3fVertex3fSUN");
    brebisGL.brebisTexCoord2fColor3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glTexCoord2fColor3fVertex3fvSUN");
    brebisGL.brebisTexCoord2fColor4fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN");
    brebisGL.brebisTexCoord2fColor4fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN");
    brebisGL.brebisTexCoord2fColor4ubVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord2fColor4ubVertex3fSUN");
    brebisGL.brebisTexCoord2fColor4ubVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLubyte *, const GLfloat *))brebisGLGetProcAddress("glTexCoord2fColor4ubVertex3fvSUN");
    brebisGL.brebisTexCoord2fNormal3fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord2fNormal3fVertex3fSUN");
    brebisGL.brebisTexCoord2fNormal3fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glTexCoord2fNormal3fVertex3fvSUN");
    brebisGL.brebisTexCoord2fVertex3fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord2fVertex3fSUN");
    brebisGL.brebisTexCoord2fVertex3fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glTexCoord2fVertex3fvSUN");
    brebisGL.brebisTexCoord2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glTexCoord2fv");
    brebisGL.brebisTexCoord2hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glTexCoord2hNV");
    brebisGL.brebisTexCoord2hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glTexCoord2hvNV");
    brebisGL.brebisTexCoord2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))brebisGLGetProcAddress("glTexCoord2i");
    brebisGL.brebisTexCoord2iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glTexCoord2iv");
    brebisGL.brebisTexCoord2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))brebisGLGetProcAddress("glTexCoord2s");
    brebisGL.brebisTexCoord2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glTexCoord2sv");
    brebisGL.brebisTexCoord2xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))brebisGLGetProcAddress("glTexCoord2xOES");
    brebisGL.brebisTexCoord2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glTexCoord2xvOES");
    brebisGL.brebisTexCoord3bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glTexCoord3bOES");
    brebisGL.brebisTexCoord3bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glTexCoord3bvOES");
    brebisGL.brebisTexCoord3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glTexCoord3d");
    brebisGL.brebisTexCoord3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glTexCoord3dv");
    brebisGL.brebisTexCoord3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord3f");
    brebisGL.brebisTexCoord3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glTexCoord3fv");
    brebisGL.brebisTexCoord3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glTexCoord3hNV");
    brebisGL.brebisTexCoord3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glTexCoord3hvNV");
    brebisGL.brebisTexCoord3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glTexCoord3i");
    brebisGL.brebisTexCoord3iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glTexCoord3iv");
    brebisGL.brebisTexCoord3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glTexCoord3s");
    brebisGL.brebisTexCoord3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glTexCoord3sv");
    brebisGL.brebisTexCoord3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glTexCoord3xOES");
    brebisGL.brebisTexCoord3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glTexCoord3xvOES");
    brebisGL.brebisTexCoord4bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glTexCoord4bOES");
    brebisGL.brebisTexCoord4bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glTexCoord4bvOES");
    brebisGL.brebisTexCoord4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glTexCoord4d");
    brebisGL.brebisTexCoord4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glTexCoord4dv");
    brebisGL.brebisTexCoord4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord4f");
    brebisGL.brebisTexCoord4fColor4fNormal3fVertex4fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN");
    brebisGL.brebisTexCoord4fColor4fNormal3fVertex4fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN");
    brebisGL.brebisTexCoord4fVertex4fSUN = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTexCoord4fVertex4fSUN");
    brebisGL.brebisTexCoord4fVertex4fvSUN = (void (KHRONOS_APIENTRY *)(const GLfloat *, const GLfloat *))brebisGLGetProcAddress("glTexCoord4fVertex4fvSUN");
    brebisGL.brebisTexCoord4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glTexCoord4fv");
    brebisGL.brebisTexCoord4hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glTexCoord4hNV");
    brebisGL.brebisTexCoord4hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glTexCoord4hvNV");
    brebisGL.brebisTexCoord4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glTexCoord4i");
    brebisGL.brebisTexCoord4iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glTexCoord4iv");
    brebisGL.brebisTexCoord4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glTexCoord4s");
    brebisGL.brebisTexCoord4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glTexCoord4sv");
    brebisGL.brebisTexCoord4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glTexCoord4xOES");
    brebisGL.brebisTexCoord4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glTexCoord4xvOES");
    brebisGL.brebisTexCoordFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))brebisGLGetProcAddress("glTexCoordFormatNV");
    brebisGL.brebisTexCoordP1ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glTexCoordP1ui");
    brebisGL.brebisTexCoordP1uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glTexCoordP1uiv");
    brebisGL.brebisTexCoordP2ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glTexCoordP2ui");
    brebisGL.brebisTexCoordP2uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glTexCoordP2uiv");
    brebisGL.brebisTexCoordP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glTexCoordP3ui");
    brebisGL.brebisTexCoordP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glTexCoordP3uiv");
    brebisGL.brebisTexCoordP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glTexCoordP4ui");
    brebisGL.brebisTexCoordP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glTexCoordP4uiv");
    brebisGL.brebisTexCoordPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glTexCoordPointer");
    brebisGL.brebisTexCoordPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, GLsizei, const void *))brebisGLGetProcAddress("glTexCoordPointerEXT");
    brebisGL.brebisTexCoordPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))brebisGLGetProcAddress("glTexCoordPointerListIBM");
    brebisGL.brebisTexCoordPointervINTEL = (void (KHRONOS_APIENTRY *)(GLint, GLenum, const void **))brebisGLGetProcAddress("glTexCoordPointervINTEL");
    brebisGL.brebisTexEnvf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glTexEnvf");
    brebisGL.brebisTexEnvfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glTexEnvfv");
    brebisGL.brebisTexEnvi = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glTexEnvi");
    brebisGL.brebisTexEnviv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glTexEnviv");
    brebisGL.brebisTexEnvx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glTexEnvx");
    brebisGL.brebisTexEnvxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glTexEnvxOES");
    brebisGL.brebisTexEnvxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glTexEnvxv");
    brebisGL.brebisTexEnvxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glTexEnvxvOES");
    brebisGL.brebisTexFilterFuncSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, const GLfloat *))brebisGLGetProcAddress("glTexFilterFuncSGIS");
    brebisGL.brebisTexGend = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLdouble))brebisGLGetProcAddress("glTexGend");
    brebisGL.brebisTexGendv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLdouble *))brebisGLGetProcAddress("glTexGendv");
    brebisGL.brebisTexGenf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glTexGenf");
    brebisGL.brebisTexGenfOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glTexGenfOES");
    brebisGL.brebisTexGenfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glTexGenfv");
    brebisGL.brebisTexGenfvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glTexGenfvOES");
    brebisGL.brebisTexGeni = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glTexGeni");
    brebisGL.brebisTexGeniOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glTexGeniOES");
    brebisGL.brebisTexGeniv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glTexGeniv");
    brebisGL.brebisTexGenivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glTexGenivOES");
    brebisGL.brebisTexGenxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glTexGenxOES");
    brebisGL.brebisTexGenxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glTexGenxvOES");
    brebisGL.brebisTexImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexImage1D");
    brebisGL.brebisTexImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexImage2D");
    brebisGL.brebisTexImage2DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexImage2DMultisample");
    brebisGL.brebisTexImage2DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexImage2DMultisampleCoverageNV");
    brebisGL.brebisTexImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexImage3D");
    brebisGL.brebisTexImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexImage3DEXT");
    brebisGL.brebisTexImage3DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexImage3DMultisample");
    brebisGL.brebisTexImage3DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexImage3DMultisampleCoverageNV");
    brebisGL.brebisTexImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexImage3DOES");
    brebisGL.brebisTexImage4DSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexImage4DSGIS");
    brebisGL.brebisTexPageCommitmentARB = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexPageCommitmentARB");
    brebisGL.brebisTexPageCommitmentEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexPageCommitmentEXT");
    brebisGL.brebisTexParameterIiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glTexParameterIiv");
    brebisGL.brebisTexParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glTexParameterIivEXT");
    brebisGL.brebisTexParameterIivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glTexParameterIivOES");
    brebisGL.brebisTexParameterIuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))brebisGLGetProcAddress("glTexParameterIuiv");
    brebisGL.brebisTexParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))brebisGLGetProcAddress("glTexParameterIuivEXT");
    brebisGL.brebisTexParameterIuivOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLuint *))brebisGLGetProcAddress("glTexParameterIuivOES");
    brebisGL.brebisTexParameterf = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glTexParameterf");
    brebisGL.brebisTexParameterfv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glTexParameterfv");
    brebisGL.brebisTexParameteri = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLint))brebisGLGetProcAddress("glTexParameteri");
    brebisGL.brebisTexParameteriv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glTexParameteriv");
    brebisGL.brebisTexParameterx = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glTexParameterx");
    brebisGL.brebisTexParameterxOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLfixed))brebisGLGetProcAddress("glTexParameterxOES");
    brebisGL.brebisTexParameterxv = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glTexParameterxv");
    brebisGL.brebisTexParameterxvOES = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, const GLfixed *))brebisGLGetProcAddress("glTexParameterxvOES");
    brebisGL.brebisTexRenderbufferNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glTexRenderbufferNV");
    brebisGL.brebisTexStorage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei))brebisGLGetProcAddress("glTexStorage1D");
    brebisGL.brebisTexStorage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei))brebisGLGetProcAddress("glTexStorage1DEXT");
    brebisGL.brebisTexStorage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glTexStorage2D");
    brebisGL.brebisTexStorage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glTexStorage2DEXT");
    brebisGL.brebisTexStorage2DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexStorage2DMultisample");
    brebisGL.brebisTexStorage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glTexStorage3D");
    brebisGL.brebisTexStorage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glTexStorage3DEXT");
    brebisGL.brebisTexStorage3DMultisample = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexStorage3DMultisample");
    brebisGL.brebisTexStorage3DMultisampleOES = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexStorage3DMultisampleOES");
    brebisGL.brebisTexStorageMem1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64))brebisGLGetProcAddress("glTexStorageMem1DEXT");
    brebisGL.brebisTexStorageMem2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64))brebisGLGetProcAddress("glTexStorageMem2DEXT");
    brebisGL.brebisTexStorageMem2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))brebisGLGetProcAddress("glTexStorageMem2DMultisampleEXT");
    brebisGL.brebisTexStorageMem3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64))brebisGLGetProcAddress("glTexStorageMem3DEXT");
    brebisGL.brebisTexStorageMem3DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))brebisGLGetProcAddress("glTexStorageMem3DMultisampleEXT");
    brebisGL.brebisTexStorageSparseAMD = (void (KHRONOS_APIENTRY *)(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield))brebisGLGetProcAddress("glTexStorageSparseAMD");
    brebisGL.brebisTexSubImage1D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexSubImage1D");
    brebisGL.brebisTexSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexSubImage1DEXT");
    brebisGL.brebisTexSubImage2D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexSubImage2D");
    brebisGL.brebisTexSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexSubImage2DEXT");
    brebisGL.brebisTexSubImage3D = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexSubImage3D");
    brebisGL.brebisTexSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexSubImage3DEXT");
    brebisGL.brebisTexSubImage3DOES = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexSubImage3DOES");
    brebisGL.brebisTexSubImage4DSGIS = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTexSubImage4DSGIS");
    brebisGL.brebisTextureAttachMemoryNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint64))brebisGLGetProcAddress("glTextureAttachMemoryNV");
    brebisGL.brebisTextureBarrier = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glTextureBarrier");
    brebisGL.brebisTextureBarrierNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glTextureBarrierNV");
    brebisGL.brebisTextureBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint))brebisGLGetProcAddress("glTextureBuffer");
    brebisGL.brebisTextureBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint))brebisGLGetProcAddress("glTextureBufferEXT");
    brebisGL.brebisTextureBufferRange = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glTextureBufferRange");
    brebisGL.brebisTextureBufferRangeEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glTextureBufferRangeEXT");
    brebisGL.brebisTextureColorMaskSGIS = (void (KHRONOS_APIENTRY *)(GLboolean, GLboolean, GLboolean, GLboolean))brebisGLGetProcAddress("glTextureColorMaskSGIS");
    brebisGL.brebisTextureFoveationParametersQCOM = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTextureFoveationParametersQCOM");
    brebisGL.brebisTextureImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTextureImage1DEXT");
    brebisGL.brebisTextureImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTextureImage2DEXT");
    brebisGL.brebisTextureImage2DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTextureImage2DMultisampleCoverageNV");
    brebisGL.brebisTextureImage2DMultisampleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTextureImage2DMultisampleNV");
    brebisGL.brebisTextureImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTextureImage3DEXT");
    brebisGL.brebisTextureImage3DMultisampleCoverageNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTextureImage3DMultisampleCoverageNV");
    brebisGL.brebisTextureImage3DMultisampleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTextureImage3DMultisampleNV");
    brebisGL.brebisTextureLightEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glTextureLightEXT");
    brebisGL.brebisTextureMaterialEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLenum))brebisGLGetProcAddress("glTextureMaterialEXT");
    brebisGL.brebisTextureNormalEXT = (void (KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glTextureNormalEXT");
    brebisGL.brebisTexturePageCommitmentEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTexturePageCommitmentEXT");
    brebisGL.brebisTextureParameterIiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glTextureParameterIiv");
    brebisGL.brebisTextureParameterIivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glTextureParameterIivEXT");
    brebisGL.brebisTextureParameterIuiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLuint *))brebisGLGetProcAddress("glTextureParameterIuiv");
    brebisGL.brebisTextureParameterIuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLuint *))brebisGLGetProcAddress("glTextureParameterIuivEXT");
    brebisGL.brebisTextureParameterf = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLfloat))brebisGLGetProcAddress("glTextureParameterf");
    brebisGL.brebisTextureParameterfEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLfloat))brebisGLGetProcAddress("glTextureParameterfEXT");
    brebisGL.brebisTextureParameterfv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLfloat *))brebisGLGetProcAddress("glTextureParameterfv");
    brebisGL.brebisTextureParameterfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLfloat *))brebisGLGetProcAddress("glTextureParameterfvEXT");
    brebisGL.brebisTextureParameteri = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glTextureParameteri");
    brebisGL.brebisTextureParameteriEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLint))brebisGLGetProcAddress("glTextureParameteriEXT");
    brebisGL.brebisTextureParameteriv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glTextureParameteriv");
    brebisGL.brebisTextureParameterivEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, const GLint *))brebisGLGetProcAddress("glTextureParameterivEXT");
    brebisGL.brebisTextureRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const void *))brebisGLGetProcAddress("glTextureRangeAPPLE");
    brebisGL.brebisTextureRenderbufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint))brebisGLGetProcAddress("glTextureRenderbufferEXT");
    brebisGL.brebisTextureStorage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei))brebisGLGetProcAddress("glTextureStorage1D");
    brebisGL.brebisTextureStorage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei))brebisGLGetProcAddress("glTextureStorage1DEXT");
    brebisGL.brebisTextureStorage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glTextureStorage2D");
    brebisGL.brebisTextureStorage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei))brebisGLGetProcAddress("glTextureStorage2DEXT");
    brebisGL.brebisTextureStorage2DMultisample = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTextureStorage2DMultisample");
    brebisGL.brebisTextureStorage2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTextureStorage2DMultisampleEXT");
    brebisGL.brebisTextureStorage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glTextureStorage3D");
    brebisGL.brebisTextureStorage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei))brebisGLGetProcAddress("glTextureStorage3DEXT");
    brebisGL.brebisTextureStorage3DMultisample = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTextureStorage3DMultisample");
    brebisGL.brebisTextureStorage3DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean))brebisGLGetProcAddress("glTextureStorage3DMultisampleEXT");
    brebisGL.brebisTextureStorageMem1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64))brebisGLGetProcAddress("glTextureStorageMem1DEXT");
    brebisGL.brebisTextureStorageMem2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64))brebisGLGetProcAddress("glTextureStorageMem2DEXT");
    brebisGL.brebisTextureStorageMem2DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))brebisGLGetProcAddress("glTextureStorageMem2DMultisampleEXT");
    brebisGL.brebisTextureStorageMem3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64))brebisGLGetProcAddress("glTextureStorageMem3DEXT");
    brebisGL.brebisTextureStorageMem3DMultisampleEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64))brebisGLGetProcAddress("glTextureStorageMem3DMultisampleEXT");
    brebisGL.brebisTextureStorageSparseAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield))brebisGLGetProcAddress("glTextureStorageSparseAMD");
    brebisGL.brebisTextureSubImage1D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTextureSubImage1D");
    brebisGL.brebisTextureSubImage1DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTextureSubImage1DEXT");
    brebisGL.brebisTextureSubImage2D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTextureSubImage2D");
    brebisGL.brebisTextureSubImage2DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTextureSubImage2DEXT");
    brebisGL.brebisTextureSubImage3D = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTextureSubImage3D");
    brebisGL.brebisTextureSubImage3DEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *))brebisGLGetProcAddress("glTextureSubImage3DEXT");
    brebisGL.brebisTextureView = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glTextureView");
    brebisGL.brebisTextureViewEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glTextureViewEXT");
    brebisGL.brebisTextureViewOES = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glTextureViewOES");
    brebisGL.brebisTrackMatrixNV = (void (KHRONOS_APIENTRY *)(GLenum, GLuint, GLenum, GLenum))brebisGLGetProcAddress("glTrackMatrixNV");
    brebisGL.brebisTransformFeedbackAttribsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLint *, GLenum))brebisGLGetProcAddress("glTransformFeedbackAttribsNV");
    brebisGL.brebisTransformFeedbackBufferBase = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glTransformFeedbackBufferBase");
    brebisGL.brebisTransformFeedbackBufferRange = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr))brebisGLGetProcAddress("glTransformFeedbackBufferRange");
    brebisGL.brebisTransformFeedbackStreamAttribsNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLint *, GLsizei, const GLint *, GLenum))brebisGLGetProcAddress("glTransformFeedbackStreamAttribsNV");
    brebisGL.brebisTransformFeedbackVaryings = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, GLenum))brebisGLGetProcAddress("glTransformFeedbackVaryings");
    brebisGL.brebisTransformFeedbackVaryingsEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLchar *const*, GLenum))brebisGLGetProcAddress("glTransformFeedbackVaryingsEXT");
    brebisGL.brebisTransformFeedbackVaryingsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLint *, GLenum))brebisGLGetProcAddress("glTransformFeedbackVaryingsNV");
    brebisGL.brebisTransformPathNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLfloat *))brebisGLGetProcAddress("glTransformPathNV");
    brebisGL.brebisTranslated = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glTranslated");
    brebisGL.brebisTranslatef = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glTranslatef");
    brebisGL.brebisTranslatex = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glTranslatex");
    brebisGL.brebisTranslatexOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glTranslatexOES");
    brebisGL.brebisUniform1d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble))brebisGLGetProcAddress("glUniform1d");
    brebisGL.brebisUniform1dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glUniform1dv");
    brebisGL.brebisUniform1f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat))brebisGLGetProcAddress("glUniform1f");
    brebisGL.brebisUniform1fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat))brebisGLGetProcAddress("glUniform1fARB");
    brebisGL.brebisUniform1fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glUniform1fv");
    brebisGL.brebisUniform1fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glUniform1fvARB");
    brebisGL.brebisUniform1i = (void (KHRONOS_APIENTRY *)(GLint, GLint))brebisGLGetProcAddress("glUniform1i");
    brebisGL.brebisUniform1i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64))brebisGLGetProcAddress("glUniform1i64ARB");
    brebisGL.brebisUniform1i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT))brebisGLGetProcAddress("glUniform1i64NV");
    brebisGL.brebisUniform1i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))brebisGLGetProcAddress("glUniform1i64vARB");
    brebisGL.brebisUniform1i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))brebisGLGetProcAddress("glUniform1i64vNV");
    brebisGL.brebisUniform1iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint))brebisGLGetProcAddress("glUniform1iARB");
    brebisGL.brebisUniform1iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glUniform1iv");
    brebisGL.brebisUniform1ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glUniform1ivARB");
    brebisGL.brebisUniform1ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint))brebisGLGetProcAddress("glUniform1ui");
    brebisGL.brebisUniform1ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))brebisGLGetProcAddress("glUniform1ui64ARB");
    brebisGL.brebisUniform1ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT))brebisGLGetProcAddress("glUniform1ui64NV");
    brebisGL.brebisUniform1ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glUniform1ui64vARB");
    brebisGL.brebisUniform1ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glUniform1ui64vNV");
    brebisGL.brebisUniform1uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint))brebisGLGetProcAddress("glUniform1uiEXT");
    brebisGL.brebisUniform1uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glUniform1uiv");
    brebisGL.brebisUniform1uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glUniform1uivEXT");
    brebisGL.brebisUniform2d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble))brebisGLGetProcAddress("glUniform2d");
    brebisGL.brebisUniform2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glUniform2dv");
    brebisGL.brebisUniform2f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat))brebisGLGetProcAddress("glUniform2f");
    brebisGL.brebisUniform2fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat))brebisGLGetProcAddress("glUniform2fARB");
    brebisGL.brebisUniform2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glUniform2fv");
    brebisGL.brebisUniform2fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glUniform2fvARB");
    brebisGL.brebisUniform2i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glUniform2i");
    brebisGL.brebisUniform2i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64, GLint64))brebisGLGetProcAddress("glUniform2i64ARB");
    brebisGL.brebisUniform2i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT, GLint64EXT))brebisGLGetProcAddress("glUniform2i64NV");
    brebisGL.brebisUniform2i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))brebisGLGetProcAddress("glUniform2i64vARB");
    brebisGL.brebisUniform2i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))brebisGLGetProcAddress("glUniform2i64vNV");
    brebisGL.brebisUniform2iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glUniform2iARB");
    brebisGL.brebisUniform2iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glUniform2iv");
    brebisGL.brebisUniform2ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glUniform2ivARB");
    brebisGL.brebisUniform2ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint))brebisGLGetProcAddress("glUniform2ui");
    brebisGL.brebisUniform2ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64, GLuint64))brebisGLGetProcAddress("glUniform2ui64ARB");
    brebisGL.brebisUniform2ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT, GLuint64EXT))brebisGLGetProcAddress("glUniform2ui64NV");
    brebisGL.brebisUniform2ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glUniform2ui64vARB");
    brebisGL.brebisUniform2ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glUniform2ui64vNV");
    brebisGL.brebisUniform2uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint))brebisGLGetProcAddress("glUniform2uiEXT");
    brebisGL.brebisUniform2uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glUniform2uiv");
    brebisGL.brebisUniform2uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glUniform2uivEXT");
    brebisGL.brebisUniform3d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glUniform3d");
    brebisGL.brebisUniform3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glUniform3dv");
    brebisGL.brebisUniform3f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glUniform3f");
    brebisGL.brebisUniform3fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glUniform3fARB");
    brebisGL.brebisUniform3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glUniform3fv");
    brebisGL.brebisUniform3fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glUniform3fvARB");
    brebisGL.brebisUniform3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glUniform3i");
    brebisGL.brebisUniform3i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64, GLint64, GLint64))brebisGLGetProcAddress("glUniform3i64ARB");
    brebisGL.brebisUniform3i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT, GLint64EXT, GLint64EXT))brebisGLGetProcAddress("glUniform3i64NV");
    brebisGL.brebisUniform3i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))brebisGLGetProcAddress("glUniform3i64vARB");
    brebisGL.brebisUniform3i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))brebisGLGetProcAddress("glUniform3i64vNV");
    brebisGL.brebisUniform3iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glUniform3iARB");
    brebisGL.brebisUniform3iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glUniform3iv");
    brebisGL.brebisUniform3ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glUniform3ivARB");
    brebisGL.brebisUniform3ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glUniform3ui");
    brebisGL.brebisUniform3ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64, GLuint64, GLuint64))brebisGLGetProcAddress("glUniform3ui64ARB");
    brebisGL.brebisUniform3ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT))brebisGLGetProcAddress("glUniform3ui64NV");
    brebisGL.brebisUniform3ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glUniform3ui64vARB");
    brebisGL.brebisUniform3ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glUniform3ui64vNV");
    brebisGL.brebisUniform3uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glUniform3uiEXT");
    brebisGL.brebisUniform3uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glUniform3uiv");
    brebisGL.brebisUniform3uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glUniform3uivEXT");
    brebisGL.brebisUniform4d = (void (KHRONOS_APIENTRY *)(GLint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glUniform4d");
    brebisGL.brebisUniform4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glUniform4dv");
    brebisGL.brebisUniform4f = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glUniform4f");
    brebisGL.brebisUniform4fARB = (void (KHRONOS_APIENTRY *)(GLint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glUniform4fARB");
    brebisGL.brebisUniform4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glUniform4fv");
    brebisGL.brebisUniform4fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glUniform4fvARB");
    brebisGL.brebisUniform4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glUniform4i");
    brebisGL.brebisUniform4i64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLint64, GLint64, GLint64, GLint64))brebisGLGetProcAddress("glUniform4i64ARB");
    brebisGL.brebisUniform4i64NV = (void (KHRONOS_APIENTRY *)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT))brebisGLGetProcAddress("glUniform4i64NV");
    brebisGL.brebisUniform4i64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64 *))brebisGLGetProcAddress("glUniform4i64vARB");
    brebisGL.brebisUniform4i64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint64EXT *))brebisGLGetProcAddress("glUniform4i64vNV");
    brebisGL.brebisUniform4iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glUniform4iARB");
    brebisGL.brebisUniform4iv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glUniform4iv");
    brebisGL.brebisUniform4ivARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLint *))brebisGLGetProcAddress("glUniform4ivARB");
    brebisGL.brebisUniform4ui = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glUniform4ui");
    brebisGL.brebisUniform4ui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64, GLuint64, GLuint64, GLuint64))brebisGLGetProcAddress("glUniform4ui64ARB");
    brebisGL.brebisUniform4ui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT))brebisGLGetProcAddress("glUniform4ui64NV");
    brebisGL.brebisUniform4ui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glUniform4ui64vARB");
    brebisGL.brebisUniform4ui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glUniform4ui64vNV");
    brebisGL.brebisUniform4uiEXT = (void (KHRONOS_APIENTRY *)(GLint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glUniform4uiEXT");
    brebisGL.brebisUniform4uiv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glUniform4uiv");
    brebisGL.brebisUniform4uivEXT = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint *))brebisGLGetProcAddress("glUniform4uivEXT");
    brebisGL.brebisUniformBlockBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glUniformBlockBinding");
    brebisGL.brebisUniformBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLuint))brebisGLGetProcAddress("glUniformBufferEXT");
    brebisGL.brebisUniformHandleui64ARB = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))brebisGLGetProcAddress("glUniformHandleui64ARB");
    brebisGL.brebisUniformHandleui64IMG = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))brebisGLGetProcAddress("glUniformHandleui64IMG");
    brebisGL.brebisUniformHandleui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64))brebisGLGetProcAddress("glUniformHandleui64NV");
    brebisGL.brebisUniformHandleui64vARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glUniformHandleui64vARB");
    brebisGL.brebisUniformHandleui64vIMG = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glUniformHandleui64vIMG");
    brebisGL.brebisUniformHandleui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64 *))brebisGLGetProcAddress("glUniformHandleui64vNV");
    brebisGL.brebisUniformMatrix2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glUniformMatrix2dv");
    brebisGL.brebisUniformMatrix2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix2fv");
    brebisGL.brebisUniformMatrix2fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix2fvARB");
    brebisGL.brebisUniformMatrix2x3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glUniformMatrix2x3dv");
    brebisGL.brebisUniformMatrix2x3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix2x3fv");
    brebisGL.brebisUniformMatrix2x3fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix2x3fvNV");
    brebisGL.brebisUniformMatrix2x4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glUniformMatrix2x4dv");
    brebisGL.brebisUniformMatrix2x4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix2x4fv");
    brebisGL.brebisUniformMatrix2x4fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix2x4fvNV");
    brebisGL.brebisUniformMatrix3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glUniformMatrix3dv");
    brebisGL.brebisUniformMatrix3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix3fv");
    brebisGL.brebisUniformMatrix3fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix3fvARB");
    brebisGL.brebisUniformMatrix3x2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glUniformMatrix3x2dv");
    brebisGL.brebisUniformMatrix3x2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix3x2fv");
    brebisGL.brebisUniformMatrix3x2fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix3x2fvNV");
    brebisGL.brebisUniformMatrix3x4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glUniformMatrix3x4dv");
    brebisGL.brebisUniformMatrix3x4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix3x4fv");
    brebisGL.brebisUniformMatrix3x4fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix3x4fvNV");
    brebisGL.brebisUniformMatrix4dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glUniformMatrix4dv");
    brebisGL.brebisUniformMatrix4fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix4fv");
    brebisGL.brebisUniformMatrix4fvARB = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix4fvARB");
    brebisGL.brebisUniformMatrix4x2dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glUniformMatrix4x2dv");
    brebisGL.brebisUniformMatrix4x2fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix4x2fv");
    brebisGL.brebisUniformMatrix4x2fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix4x2fvNV");
    brebisGL.brebisUniformMatrix4x3dv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLdouble *))brebisGLGetProcAddress("glUniformMatrix4x3dv");
    brebisGL.brebisUniformMatrix4x3fv = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix4x3fv");
    brebisGL.brebisUniformMatrix4x3fvNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, GLboolean, const GLfloat *))brebisGLGetProcAddress("glUniformMatrix4x3fvNV");
    brebisGL.brebisUniformSubroutinesuiv = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLuint *))brebisGLGetProcAddress("glUniformSubroutinesuiv");
    brebisGL.brebisUniformui64NV = (void (KHRONOS_APIENTRY *)(GLint, GLuint64EXT))brebisGLGetProcAddress("glUniformui64NV");
    brebisGL.brebisUniformui64vNV = (void (KHRONOS_APIENTRY *)(GLint, GLsizei, const GLuint64EXT *))brebisGLGetProcAddress("glUniformui64vNV");
    brebisGL.brebisUnlockArraysEXT = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glUnlockArraysEXT");
    brebisGL.brebisUnmapBuffer = (GLboolean(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glUnmapBuffer");
    brebisGL.brebisUnmapBufferARB = (GLboolean(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glUnmapBufferARB");
    brebisGL.brebisUnmapBufferOES = (GLboolean(KHRONOS_APIENTRY *)(GLenum))brebisGLGetProcAddress("glUnmapBufferOES");
    brebisGL.brebisUnmapNamedBuffer = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glUnmapNamedBuffer");
    brebisGL.brebisUnmapNamedBufferEXT = (GLboolean(KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glUnmapNamedBufferEXT");
    brebisGL.brebisUnmapObjectBufferATI = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glUnmapObjectBufferATI");
    brebisGL.brebisUnmapTexture2DINTEL = (void (KHRONOS_APIENTRY *)(GLuint, GLint))brebisGLGetProcAddress("glUnmapTexture2DINTEL");
    brebisGL.brebisUpdateObjectBufferATI = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const void *, GLenum))brebisGLGetProcAddress("glUpdateObjectBufferATI");
    brebisGL.brebisUseProgram = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glUseProgram");
    brebisGL.brebisUseProgramObjectARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))brebisGLGetProcAddress("glUseProgramObjectARB");
    brebisGL.brebisUseProgramStages = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint))brebisGLGetProcAddress("glUseProgramStages");
    brebisGL.brebisUseProgramStagesEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLbitfield, GLuint))brebisGLGetProcAddress("glUseProgramStagesEXT");
    brebisGL.brebisUseShaderProgramEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glUseShaderProgramEXT");
    brebisGL.brebisVDPAUFiniNV = (void (KHRONOS_APIENTRY *)(void))brebisGLGetProcAddress("glVDPAUFiniNV");
    brebisGL.brebisVDPAUGetSurfaceivNV = (void (KHRONOS_APIENTRY *)(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei *, GLint *))brebisGLGetProcAddress("glVDPAUGetSurfaceivNV");
    brebisGL.brebisVDPAUInitNV = (void (KHRONOS_APIENTRY *)(const void *, const void *))brebisGLGetProcAddress("glVDPAUInitNV");
    brebisGL.brebisVDPAUIsSurfaceNV = (GLboolean(KHRONOS_APIENTRY *)(GLvdpauSurfaceNV))brebisGLGetProcAddress("glVDPAUIsSurfaceNV");
    brebisGL.brebisVDPAUMapSurfacesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLvdpauSurfaceNV *))brebisGLGetProcAddress("glVDPAUMapSurfacesNV");
    brebisGL.brebisVDPAURegisterOutputSurfaceNV = (GLvdpauSurfaceNV(KHRONOS_APIENTRY *)(const void *, GLenum, GLsizei, const GLuint *))brebisGLGetProcAddress("glVDPAURegisterOutputSurfaceNV");
    brebisGL.brebisVDPAURegisterVideoSurfaceNV = (GLvdpauSurfaceNV(KHRONOS_APIENTRY *)(const void *, GLenum, GLsizei, const GLuint *))brebisGLGetProcAddress("glVDPAURegisterVideoSurfaceNV");
    brebisGL.brebisVDPAUSurfaceAccessNV = (void (KHRONOS_APIENTRY *)(GLvdpauSurfaceNV, GLenum))brebisGLGetProcAddress("glVDPAUSurfaceAccessNV");
    brebisGL.brebisVDPAUUnmapSurfacesNV = (void (KHRONOS_APIENTRY *)(GLsizei, const GLvdpauSurfaceNV *))brebisGLGetProcAddress("glVDPAUUnmapSurfacesNV");
    brebisGL.brebisVDPAUUnregisterSurfaceNV = (void (KHRONOS_APIENTRY *)(GLvdpauSurfaceNV))brebisGLGetProcAddress("glVDPAUUnregisterSurfaceNV");
    brebisGL.brebisValidateProgram = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glValidateProgram");
    brebisGL.brebisValidateProgramARB = (void (KHRONOS_APIENTRY *)(GLhandleARB))brebisGLGetProcAddress("glValidateProgramARB");
    brebisGL.brebisValidateProgramPipeline = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glValidateProgramPipeline");
    brebisGL.brebisValidateProgramPipelineEXT = (void (KHRONOS_APIENTRY *)(GLuint))brebisGLGetProcAddress("glValidateProgramPipelineEXT");
    brebisGL.brebisVariantArrayObjectATI = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLsizei, GLuint, GLuint))brebisGLGetProcAddress("glVariantArrayObjectATI");
    brebisGL.brebisVariantPointerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLuint, const void *))brebisGLGetProcAddress("glVariantPointerEXT");
    brebisGL.brebisVariantbvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))brebisGLGetProcAddress("glVariantbvEXT");
    brebisGL.brebisVariantdvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVariantdvEXT");
    brebisGL.brebisVariantfvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVariantfvEXT");
    brebisGL.brebisVariantivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVariantivEXT");
    brebisGL.brebisVariantsvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVariantsvEXT");
    brebisGL.brebisVariantubvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))brebisGLGetProcAddress("glVariantubvEXT");
    brebisGL.brebisVariantuivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVariantuivEXT");
    brebisGL.brebisVariantusvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))brebisGLGetProcAddress("glVariantusvEXT");
    brebisGL.brebisVertex2bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte))brebisGLGetProcAddress("glVertex2bOES");
    brebisGL.brebisVertex2bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glVertex2bvOES");
    brebisGL.brebisVertex2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glVertex2d");
    brebisGL.brebisVertex2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glVertex2dv");
    brebisGL.brebisVertex2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glVertex2f");
    brebisGL.brebisVertex2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glVertex2fv");
    brebisGL.brebisVertex2hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glVertex2hNV");
    brebisGL.brebisVertex2hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glVertex2hvNV");
    brebisGL.brebisVertex2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))brebisGLGetProcAddress("glVertex2i");
    brebisGL.brebisVertex2iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glVertex2iv");
    brebisGL.brebisVertex2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))brebisGLGetProcAddress("glVertex2s");
    brebisGL.brebisVertex2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glVertex2sv");
    brebisGL.brebisVertex2xOES = (void (KHRONOS_APIENTRY *)(GLfixed))brebisGLGetProcAddress("glVertex2xOES");
    brebisGL.brebisVertex2xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glVertex2xvOES");
    brebisGL.brebisVertex3bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glVertex3bOES");
    brebisGL.brebisVertex3bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glVertex3bvOES");
    brebisGL.brebisVertex3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertex3d");
    brebisGL.brebisVertex3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glVertex3dv");
    brebisGL.brebisVertex3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertex3f");
    brebisGL.brebisVertex3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glVertex3fv");
    brebisGL.brebisVertex3hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glVertex3hNV");
    brebisGL.brebisVertex3hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glVertex3hvNV");
    brebisGL.brebisVertex3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glVertex3i");
    brebisGL.brebisVertex3iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glVertex3iv");
    brebisGL.brebisVertex3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertex3s");
    brebisGL.brebisVertex3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glVertex3sv");
    brebisGL.brebisVertex3xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed))brebisGLGetProcAddress("glVertex3xOES");
    brebisGL.brebisVertex3xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glVertex3xvOES");
    brebisGL.brebisVertex4bOES = (void (KHRONOS_APIENTRY *)(GLbyte, GLbyte, GLbyte, GLbyte))brebisGLGetProcAddress("glVertex4bOES");
    brebisGL.brebisVertex4bvOES = (void (KHRONOS_APIENTRY *)(const GLbyte *))brebisGLGetProcAddress("glVertex4bvOES");
    brebisGL.brebisVertex4d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertex4d");
    brebisGL.brebisVertex4dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glVertex4dv");
    brebisGL.brebisVertex4f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertex4f");
    brebisGL.brebisVertex4fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glVertex4fv");
    brebisGL.brebisVertex4hNV = (void (KHRONOS_APIENTRY *)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glVertex4hNV");
    brebisGL.brebisVertex4hvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glVertex4hvNV");
    brebisGL.brebisVertex4i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glVertex4i");
    brebisGL.brebisVertex4iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glVertex4iv");
    brebisGL.brebisVertex4s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertex4s");
    brebisGL.brebisVertex4sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glVertex4sv");
    brebisGL.brebisVertex4xOES = (void (KHRONOS_APIENTRY *)(GLfixed, GLfixed, GLfixed))brebisGLGetProcAddress("glVertex4xOES");
    brebisGL.brebisVertex4xvOES = (void (KHRONOS_APIENTRY *)(const GLfixed *))brebisGLGetProcAddress("glVertex4xvOES");
    brebisGL.brebisVertexArrayAttribBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexArrayAttribBinding");
    brebisGL.brebisVertexArrayAttribFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint))brebisGLGetProcAddress("glVertexArrayAttribFormat");
    brebisGL.brebisVertexArrayAttribIFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))brebisGLGetProcAddress("glVertexArrayAttribIFormat");
    brebisGL.brebisVertexArrayAttribLFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))brebisGLGetProcAddress("glVertexArrayAttribLFormat");
    brebisGL.brebisVertexArrayBindVertexBufferEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLintptr, GLsizei))brebisGLGetProcAddress("glVertexArrayBindVertexBufferEXT");
    brebisGL.brebisVertexArrayBindingDivisor = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexArrayBindingDivisor");
    brebisGL.brebisVertexArrayColorOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayColorOffsetEXT");
    brebisGL.brebisVertexArrayEdgeFlagOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayEdgeFlagOffsetEXT");
    brebisGL.brebisVertexArrayElementBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexArrayElementBuffer");
    brebisGL.brebisVertexArrayFogCoordOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayFogCoordOffsetEXT");
    brebisGL.brebisVertexArrayIndexOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayIndexOffsetEXT");
    brebisGL.brebisVertexArrayMultiTexCoordOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayMultiTexCoordOffsetEXT");
    brebisGL.brebisVertexArrayNormalOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayNormalOffsetEXT");
    brebisGL.brebisVertexArrayParameteriAPPLE = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glVertexArrayParameteriAPPLE");
    brebisGL.brebisVertexArrayRangeAPPLE = (void (KHRONOS_APIENTRY *)(GLsizei, void *))brebisGLGetProcAddress("glVertexArrayRangeAPPLE");
    brebisGL.brebisVertexArrayRangeNV = (void (KHRONOS_APIENTRY *)(GLsizei, const void *))brebisGLGetProcAddress("glVertexArrayRangeNV");
    brebisGL.brebisVertexArraySecondaryColorOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArraySecondaryColorOffsetEXT");
    brebisGL.brebisVertexArrayTexCoordOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayTexCoordOffsetEXT");
    brebisGL.brebisVertexArrayVertexAttribBindingEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexArrayVertexAttribBindingEXT");
    brebisGL.brebisVertexArrayVertexAttribDivisorEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexArrayVertexAttribDivisorEXT");
    brebisGL.brebisVertexArrayVertexAttribFormatEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint))brebisGLGetProcAddress("glVertexArrayVertexAttribFormatEXT");
    brebisGL.brebisVertexArrayVertexAttribIFormatEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))brebisGLGetProcAddress("glVertexArrayVertexAttribIFormatEXT");
    brebisGL.brebisVertexArrayVertexAttribIOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayVertexAttribIOffsetEXT");
    brebisGL.brebisVertexArrayVertexAttribLFormatEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLuint))brebisGLGetProcAddress("glVertexArrayVertexAttribLFormatEXT");
    brebisGL.brebisVertexArrayVertexAttribLOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayVertexAttribLOffsetEXT");
    brebisGL.brebisVertexArrayVertexAttribOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayVertexAttribOffsetEXT");
    brebisGL.brebisVertexArrayVertexBindingDivisorEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexArrayVertexBindingDivisorEXT");
    brebisGL.brebisVertexArrayVertexBuffer = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLintptr, GLsizei))brebisGLGetProcAddress("glVertexArrayVertexBuffer");
    brebisGL.brebisVertexArrayVertexBuffers = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *))brebisGLGetProcAddress("glVertexArrayVertexBuffers");
    brebisGL.brebisVertexArrayVertexOffsetEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr))brebisGLGetProcAddress("glVertexArrayVertexOffsetEXT");
    brebisGL.brebisVertexAttrib1d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))brebisGLGetProcAddress("glVertexAttrib1d");
    brebisGL.brebisVertexAttrib1dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))brebisGLGetProcAddress("glVertexAttrib1dARB");
    brebisGL.brebisVertexAttrib1dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))brebisGLGetProcAddress("glVertexAttrib1dNV");
    brebisGL.brebisVertexAttrib1dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib1dv");
    brebisGL.brebisVertexAttrib1dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib1dvARB");
    brebisGL.brebisVertexAttrib1dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib1dvNV");
    brebisGL.brebisVertexAttrib1f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat))brebisGLGetProcAddress("glVertexAttrib1f");
    brebisGL.brebisVertexAttrib1fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat))brebisGLGetProcAddress("glVertexAttrib1fARB");
    brebisGL.brebisVertexAttrib1fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat))brebisGLGetProcAddress("glVertexAttrib1fNV");
    brebisGL.brebisVertexAttrib1fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib1fv");
    brebisGL.brebisVertexAttrib1fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib1fvARB");
    brebisGL.brebisVertexAttrib1fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib1fvNV");
    brebisGL.brebisVertexAttrib1hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV))brebisGLGetProcAddress("glVertexAttrib1hNV");
    brebisGL.brebisVertexAttrib1hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))brebisGLGetProcAddress("glVertexAttrib1hvNV");
    brebisGL.brebisVertexAttrib1s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort))brebisGLGetProcAddress("glVertexAttrib1s");
    brebisGL.brebisVertexAttrib1sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort))brebisGLGetProcAddress("glVertexAttrib1sARB");
    brebisGL.brebisVertexAttrib1sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort))brebisGLGetProcAddress("glVertexAttrib1sNV");
    brebisGL.brebisVertexAttrib1sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib1sv");
    brebisGL.brebisVertexAttrib1svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib1svARB");
    brebisGL.brebisVertexAttrib1svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib1svNV");
    brebisGL.brebisVertexAttrib2d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttrib2d");
    brebisGL.brebisVertexAttrib2dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttrib2dARB");
    brebisGL.brebisVertexAttrib2dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttrib2dNV");
    brebisGL.brebisVertexAttrib2dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib2dv");
    brebisGL.brebisVertexAttrib2dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib2dvARB");
    brebisGL.brebisVertexAttrib2dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib2dvNV");
    brebisGL.brebisVertexAttrib2f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexAttrib2f");
    brebisGL.brebisVertexAttrib2fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexAttrib2fARB");
    brebisGL.brebisVertexAttrib2fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexAttrib2fNV");
    brebisGL.brebisVertexAttrib2fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib2fv");
    brebisGL.brebisVertexAttrib2fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib2fvARB");
    brebisGL.brebisVertexAttrib2fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib2fvNV");
    brebisGL.brebisVertexAttrib2hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glVertexAttrib2hNV");
    brebisGL.brebisVertexAttrib2hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))brebisGLGetProcAddress("glVertexAttrib2hvNV");
    brebisGL.brebisVertexAttrib2s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort))brebisGLGetProcAddress("glVertexAttrib2s");
    brebisGL.brebisVertexAttrib2sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort))brebisGLGetProcAddress("glVertexAttrib2sARB");
    brebisGL.brebisVertexAttrib2sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort))brebisGLGetProcAddress("glVertexAttrib2sNV");
    brebisGL.brebisVertexAttrib2sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib2sv");
    brebisGL.brebisVertexAttrib2svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib2svARB");
    brebisGL.brebisVertexAttrib2svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib2svNV");
    brebisGL.brebisVertexAttrib3d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttrib3d");
    brebisGL.brebisVertexAttrib3dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttrib3dARB");
    brebisGL.brebisVertexAttrib3dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttrib3dNV");
    brebisGL.brebisVertexAttrib3dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib3dv");
    brebisGL.brebisVertexAttrib3dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib3dvARB");
    brebisGL.brebisVertexAttrib3dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib3dvNV");
    brebisGL.brebisVertexAttrib3f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexAttrib3f");
    brebisGL.brebisVertexAttrib3fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexAttrib3fARB");
    brebisGL.brebisVertexAttrib3fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexAttrib3fNV");
    brebisGL.brebisVertexAttrib3fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib3fv");
    brebisGL.brebisVertexAttrib3fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib3fvARB");
    brebisGL.brebisVertexAttrib3fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib3fvNV");
    brebisGL.brebisVertexAttrib3hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glVertexAttrib3hNV");
    brebisGL.brebisVertexAttrib3hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))brebisGLGetProcAddress("glVertexAttrib3hvNV");
    brebisGL.brebisVertexAttrib3s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertexAttrib3s");
    brebisGL.brebisVertexAttrib3sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertexAttrib3sARB");
    brebisGL.brebisVertexAttrib3sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertexAttrib3sNV");
    brebisGL.brebisVertexAttrib3sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib3sv");
    brebisGL.brebisVertexAttrib3svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib3svARB");
    brebisGL.brebisVertexAttrib3svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib3svNV");
    brebisGL.brebisVertexAttrib4Nbv = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))brebisGLGetProcAddress("glVertexAttrib4Nbv");
    brebisGL.brebisVertexAttrib4NbvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))brebisGLGetProcAddress("glVertexAttrib4NbvARB");
    brebisGL.brebisVertexAttrib4Niv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttrib4Niv");
    brebisGL.brebisVertexAttrib4NivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttrib4NivARB");
    brebisGL.brebisVertexAttrib4Nsv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib4Nsv");
    brebisGL.brebisVertexAttrib4NsvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib4NsvARB");
    brebisGL.brebisVertexAttrib4Nub = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))brebisGLGetProcAddress("glVertexAttrib4Nub");
    brebisGL.brebisVertexAttrib4NubARB = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))brebisGLGetProcAddress("glVertexAttrib4NubARB");
    brebisGL.brebisVertexAttrib4Nubv = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))brebisGLGetProcAddress("glVertexAttrib4Nubv");
    brebisGL.brebisVertexAttrib4NubvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))brebisGLGetProcAddress("glVertexAttrib4NubvARB");
    brebisGL.brebisVertexAttrib4Nuiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttrib4Nuiv");
    brebisGL.brebisVertexAttrib4NuivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttrib4NuivARB");
    brebisGL.brebisVertexAttrib4Nusv = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))brebisGLGetProcAddress("glVertexAttrib4Nusv");
    brebisGL.brebisVertexAttrib4NusvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))brebisGLGetProcAddress("glVertexAttrib4NusvARB");
    brebisGL.brebisVertexAttrib4bv = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))brebisGLGetProcAddress("glVertexAttrib4bv");
    brebisGL.brebisVertexAttrib4bvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))brebisGLGetProcAddress("glVertexAttrib4bvARB");
    brebisGL.brebisVertexAttrib4d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttrib4d");
    brebisGL.brebisVertexAttrib4dARB = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttrib4dARB");
    brebisGL.brebisVertexAttrib4dNV = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttrib4dNV");
    brebisGL.brebisVertexAttrib4dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib4dv");
    brebisGL.brebisVertexAttrib4dvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib4dvARB");
    brebisGL.brebisVertexAttrib4dvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttrib4dvNV");
    brebisGL.brebisVertexAttrib4f = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexAttrib4f");
    brebisGL.brebisVertexAttrib4fARB = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexAttrib4fARB");
    brebisGL.brebisVertexAttrib4fNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexAttrib4fNV");
    brebisGL.brebisVertexAttrib4fv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib4fv");
    brebisGL.brebisVertexAttrib4fvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib4fvARB");
    brebisGL.brebisVertexAttrib4fvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glVertexAttrib4fvNV");
    brebisGL.brebisVertexAttrib4hNV = (void (KHRONOS_APIENTRY *)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV))brebisGLGetProcAddress("glVertexAttrib4hNV");
    brebisGL.brebisVertexAttrib4hvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLhalfNV *))brebisGLGetProcAddress("glVertexAttrib4hvNV");
    brebisGL.brebisVertexAttrib4iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttrib4iv");
    brebisGL.brebisVertexAttrib4ivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttrib4ivARB");
    brebisGL.brebisVertexAttrib4s = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertexAttrib4s");
    brebisGL.brebisVertexAttrib4sARB = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertexAttrib4sARB");
    brebisGL.brebisVertexAttrib4sNV = (void (KHRONOS_APIENTRY *)(GLuint, GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertexAttrib4sNV");
    brebisGL.brebisVertexAttrib4sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib4sv");
    brebisGL.brebisVertexAttrib4svARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib4svARB");
    brebisGL.brebisVertexAttrib4svNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttrib4svNV");
    brebisGL.brebisVertexAttrib4ubNV = (void (KHRONOS_APIENTRY *)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte))brebisGLGetProcAddress("glVertexAttrib4ubNV");
    brebisGL.brebisVertexAttrib4ubv = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))brebisGLGetProcAddress("glVertexAttrib4ubv");
    brebisGL.brebisVertexAttrib4ubvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))brebisGLGetProcAddress("glVertexAttrib4ubvARB");
    brebisGL.brebisVertexAttrib4ubvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))brebisGLGetProcAddress("glVertexAttrib4ubvNV");
    brebisGL.brebisVertexAttrib4uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttrib4uiv");
    brebisGL.brebisVertexAttrib4uivARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttrib4uivARB");
    brebisGL.brebisVertexAttrib4usv = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))brebisGLGetProcAddress("glVertexAttrib4usv");
    brebisGL.brebisVertexAttrib4usvARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))brebisGLGetProcAddress("glVertexAttrib4usvARB");
    brebisGL.brebisVertexAttribArrayObjectATI = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribArrayObjectATI");
    brebisGL.brebisVertexAttribBinding = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribBinding");
    brebisGL.brebisVertexAttribDivisor = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribDivisor");
    brebisGL.brebisVertexAttribDivisorANGLE = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribDivisorANGLE");
    brebisGL.brebisVertexAttribDivisorARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribDivisorARB");
    brebisGL.brebisVertexAttribDivisorEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribDivisorEXT");
    brebisGL.brebisVertexAttribDivisorNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribDivisorNV");
    brebisGL.brebisVertexAttribFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLuint))brebisGLGetProcAddress("glVertexAttribFormat");
    brebisGL.brebisVertexAttribFormatNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei))brebisGLGetProcAddress("glVertexAttribFormatNV");
    brebisGL.brebisVertexAttribI1i = (void (KHRONOS_APIENTRY *)(GLuint, GLint))brebisGLGetProcAddress("glVertexAttribI1i");
    brebisGL.brebisVertexAttribI1iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint))brebisGLGetProcAddress("glVertexAttribI1iEXT");
    brebisGL.brebisVertexAttribI1iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttribI1iv");
    brebisGL.brebisVertexAttribI1ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttribI1ivEXT");
    brebisGL.brebisVertexAttribI1ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribI1ui");
    brebisGL.brebisVertexAttribI1uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribI1uiEXT");
    brebisGL.brebisVertexAttribI1uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttribI1uiv");
    brebisGL.brebisVertexAttribI1uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttribI1uivEXT");
    brebisGL.brebisVertexAttribI2i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))brebisGLGetProcAddress("glVertexAttribI2i");
    brebisGL.brebisVertexAttribI2iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint))brebisGLGetProcAddress("glVertexAttribI2iEXT");
    brebisGL.brebisVertexAttribI2iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttribI2iv");
    brebisGL.brebisVertexAttribI2ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttribI2ivEXT");
    brebisGL.brebisVertexAttribI2ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribI2ui");
    brebisGL.brebisVertexAttribI2uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribI2uiEXT");
    brebisGL.brebisVertexAttribI2uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttribI2uiv");
    brebisGL.brebisVertexAttribI2uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttribI2uivEXT");
    brebisGL.brebisVertexAttribI3i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))brebisGLGetProcAddress("glVertexAttribI3i");
    brebisGL.brebisVertexAttribI3iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint))brebisGLGetProcAddress("glVertexAttribI3iEXT");
    brebisGL.brebisVertexAttribI3iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttribI3iv");
    brebisGL.brebisVertexAttribI3ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttribI3ivEXT");
    brebisGL.brebisVertexAttribI3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribI3ui");
    brebisGL.brebisVertexAttribI3uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribI3uiEXT");
    brebisGL.brebisVertexAttribI3uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttribI3uiv");
    brebisGL.brebisVertexAttribI3uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttribI3uivEXT");
    brebisGL.brebisVertexAttribI4bv = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))brebisGLGetProcAddress("glVertexAttribI4bv");
    brebisGL.brebisVertexAttribI4bvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLbyte *))brebisGLGetProcAddress("glVertexAttribI4bvEXT");
    brebisGL.brebisVertexAttribI4i = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glVertexAttribI4i");
    brebisGL.brebisVertexAttribI4iEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glVertexAttribI4iEXT");
    brebisGL.brebisVertexAttribI4iv = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttribI4iv");
    brebisGL.brebisVertexAttribI4ivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLint *))brebisGLGetProcAddress("glVertexAttribI4ivEXT");
    brebisGL.brebisVertexAttribI4sv = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttribI4sv");
    brebisGL.brebisVertexAttribI4svEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLshort *))brebisGLGetProcAddress("glVertexAttribI4svEXT");
    brebisGL.brebisVertexAttribI4ubv = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))brebisGLGetProcAddress("glVertexAttribI4ubv");
    brebisGL.brebisVertexAttribI4ubvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLubyte *))brebisGLGetProcAddress("glVertexAttribI4ubvEXT");
    brebisGL.brebisVertexAttribI4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribI4ui");
    brebisGL.brebisVertexAttribI4uiEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLuint, GLuint, GLuint))brebisGLGetProcAddress("glVertexAttribI4uiEXT");
    brebisGL.brebisVertexAttribI4uiv = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttribI4uiv");
    brebisGL.brebisVertexAttribI4uivEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint *))brebisGLGetProcAddress("glVertexAttribI4uivEXT");
    brebisGL.brebisVertexAttribI4usv = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))brebisGLGetProcAddress("glVertexAttribI4usv");
    brebisGL.brebisVertexAttribI4usvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLushort *))brebisGLGetProcAddress("glVertexAttribI4usvEXT");
    brebisGL.brebisVertexAttribIFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLuint))brebisGLGetProcAddress("glVertexAttribIFormat");
    brebisGL.brebisVertexAttribIFormatNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei))brebisGLGetProcAddress("glVertexAttribIFormatNV");
    brebisGL.brebisVertexAttribIPointer = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glVertexAttribIPointer");
    brebisGL.brebisVertexAttribIPointerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glVertexAttribIPointerEXT");
    brebisGL.brebisVertexAttribL1d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))brebisGLGetProcAddress("glVertexAttribL1d");
    brebisGL.brebisVertexAttribL1dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble))brebisGLGetProcAddress("glVertexAttribL1dEXT");
    brebisGL.brebisVertexAttribL1dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttribL1dv");
    brebisGL.brebisVertexAttribL1dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttribL1dvEXT");
    brebisGL.brebisVertexAttribL1i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT))brebisGLGetProcAddress("glVertexAttribL1i64NV");
    brebisGL.brebisVertexAttribL1i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))brebisGLGetProcAddress("glVertexAttribL1i64vNV");
    brebisGL.brebisVertexAttribL1ui64ARB = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT))brebisGLGetProcAddress("glVertexAttribL1ui64ARB");
    brebisGL.brebisVertexAttribL1ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT))brebisGLGetProcAddress("glVertexAttribL1ui64NV");
    brebisGL.brebisVertexAttribL1ui64vARB = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))brebisGLGetProcAddress("glVertexAttribL1ui64vARB");
    brebisGL.brebisVertexAttribL1ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))brebisGLGetProcAddress("glVertexAttribL1ui64vNV");
    brebisGL.brebisVertexAttribL2d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttribL2d");
    brebisGL.brebisVertexAttribL2dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttribL2dEXT");
    brebisGL.brebisVertexAttribL2dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttribL2dv");
    brebisGL.brebisVertexAttribL2dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttribL2dvEXT");
    brebisGL.brebisVertexAttribL2i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT, GLint64EXT))brebisGLGetProcAddress("glVertexAttribL2i64NV");
    brebisGL.brebisVertexAttribL2i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))brebisGLGetProcAddress("glVertexAttribL2i64vNV");
    brebisGL.brebisVertexAttribL2ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint64EXT))brebisGLGetProcAddress("glVertexAttribL2ui64NV");
    brebisGL.brebisVertexAttribL2ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))brebisGLGetProcAddress("glVertexAttribL2ui64vNV");
    brebisGL.brebisVertexAttribL3d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttribL3d");
    brebisGL.brebisVertexAttribL3dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttribL3dEXT");
    brebisGL.brebisVertexAttribL3dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttribL3dv");
    brebisGL.brebisVertexAttribL3dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttribL3dvEXT");
    brebisGL.brebisVertexAttribL3i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT))brebisGLGetProcAddress("glVertexAttribL3i64NV");
    brebisGL.brebisVertexAttribL3i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))brebisGLGetProcAddress("glVertexAttribL3i64vNV");
    brebisGL.brebisVertexAttribL3ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT))brebisGLGetProcAddress("glVertexAttribL3ui64NV");
    brebisGL.brebisVertexAttribL3ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))brebisGLGetProcAddress("glVertexAttribL3ui64vNV");
    brebisGL.brebisVertexAttribL4d = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttribL4d");
    brebisGL.brebisVertexAttribL4dEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexAttribL4dEXT");
    brebisGL.brebisVertexAttribL4dv = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttribL4dv");
    brebisGL.brebisVertexAttribL4dvEXT = (void (KHRONOS_APIENTRY *)(GLuint, const GLdouble *))brebisGLGetProcAddress("glVertexAttribL4dvEXT");
    brebisGL.brebisVertexAttribL4i64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT))brebisGLGetProcAddress("glVertexAttribL4i64NV");
    brebisGL.brebisVertexAttribL4i64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLint64EXT *))brebisGLGetProcAddress("glVertexAttribL4i64vNV");
    brebisGL.brebisVertexAttribL4ui64NV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT))brebisGLGetProcAddress("glVertexAttribL4ui64NV");
    brebisGL.brebisVertexAttribL4ui64vNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLuint64EXT *))brebisGLGetProcAddress("glVertexAttribL4ui64vNV");
    brebisGL.brebisVertexAttribLFormat = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLuint))brebisGLGetProcAddress("glVertexAttribLFormat");
    brebisGL.brebisVertexAttribLFormatNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei))brebisGLGetProcAddress("glVertexAttribLFormatNV");
    brebisGL.brebisVertexAttribLPointer = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glVertexAttribLPointer");
    brebisGL.brebisVertexAttribLPointerEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glVertexAttribLPointerEXT");
    brebisGL.brebisVertexAttribP1ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))brebisGLGetProcAddress("glVertexAttribP1ui");
    brebisGL.brebisVertexAttribP1uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))brebisGLGetProcAddress("glVertexAttribP1uiv");
    brebisGL.brebisVertexAttribP2ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))brebisGLGetProcAddress("glVertexAttribP2ui");
    brebisGL.brebisVertexAttribP2uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))brebisGLGetProcAddress("glVertexAttribP2uiv");
    brebisGL.brebisVertexAttribP3ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))brebisGLGetProcAddress("glVertexAttribP3ui");
    brebisGL.brebisVertexAttribP3uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))brebisGLGetProcAddress("glVertexAttribP3uiv");
    brebisGL.brebisVertexAttribP4ui = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, GLuint))brebisGLGetProcAddress("glVertexAttribP4ui");
    brebisGL.brebisVertexAttribP4uiv = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLboolean, const GLuint *))brebisGLGetProcAddress("glVertexAttribP4uiv");
    brebisGL.brebisVertexAttribParameteriAMD = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLint))brebisGLGetProcAddress("glVertexAttribParameteriAMD");
    brebisGL.brebisVertexAttribPointer = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *))brebisGLGetProcAddress("glVertexAttribPointer");
    brebisGL.brebisVertexAttribPointerARB = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *))brebisGLGetProcAddress("glVertexAttribPointerARB");
    brebisGL.brebisVertexAttribPointerNV = (void (KHRONOS_APIENTRY *)(GLuint, GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glVertexAttribPointerNV");
    brebisGL.brebisVertexAttribs1dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glVertexAttribs1dvNV");
    brebisGL.brebisVertexAttribs1fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glVertexAttribs1fvNV");
    brebisGL.brebisVertexAttribs1hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))brebisGLGetProcAddress("glVertexAttribs1hvNV");
    brebisGL.brebisVertexAttribs1svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))brebisGLGetProcAddress("glVertexAttribs1svNV");
    brebisGL.brebisVertexAttribs2dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glVertexAttribs2dvNV");
    brebisGL.brebisVertexAttribs2fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glVertexAttribs2fvNV");
    brebisGL.brebisVertexAttribs2hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))brebisGLGetProcAddress("glVertexAttribs2hvNV");
    brebisGL.brebisVertexAttribs2svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))brebisGLGetProcAddress("glVertexAttribs2svNV");
    brebisGL.brebisVertexAttribs3dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glVertexAttribs3dvNV");
    brebisGL.brebisVertexAttribs3fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glVertexAttribs3fvNV");
    brebisGL.brebisVertexAttribs3hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))brebisGLGetProcAddress("glVertexAttribs3hvNV");
    brebisGL.brebisVertexAttribs3svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))brebisGLGetProcAddress("glVertexAttribs3svNV");
    brebisGL.brebisVertexAttribs4dvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLdouble *))brebisGLGetProcAddress("glVertexAttribs4dvNV");
    brebisGL.brebisVertexAttribs4fvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glVertexAttribs4fvNV");
    brebisGL.brebisVertexAttribs4hvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLhalfNV *))brebisGLGetProcAddress("glVertexAttribs4hvNV");
    brebisGL.brebisVertexAttribs4svNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLshort *))brebisGLGetProcAddress("glVertexAttribs4svNV");
    brebisGL.brebisVertexAttribs4ubvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLubyte *))brebisGLGetProcAddress("glVertexAttribs4ubvNV");
    brebisGL.brebisVertexBindingDivisor = (void (KHRONOS_APIENTRY *)(GLuint, GLuint))brebisGLGetProcAddress("glVertexBindingDivisor");
    brebisGL.brebisVertexBlendARB = (void (KHRONOS_APIENTRY *)(GLint))brebisGLGetProcAddress("glVertexBlendARB");
    brebisGL.brebisVertexBlendEnvfATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glVertexBlendEnvfATI");
    brebisGL.brebisVertexBlendEnviATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glVertexBlendEnviATI");
    brebisGL.brebisVertexFormatNV = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei))brebisGLGetProcAddress("glVertexFormatNV");
    brebisGL.brebisVertexP2ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glVertexP2ui");
    brebisGL.brebisVertexP2uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glVertexP2uiv");
    brebisGL.brebisVertexP3ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glVertexP3ui");
    brebisGL.brebisVertexP3uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glVertexP3uiv");
    brebisGL.brebisVertexP4ui = (void (KHRONOS_APIENTRY *)(GLenum, GLuint))brebisGLGetProcAddress("glVertexP4ui");
    brebisGL.brebisVertexP4uiv = (void (KHRONOS_APIENTRY *)(GLenum, const GLuint *))brebisGLGetProcAddress("glVertexP4uiv");
    brebisGL.brebisVertexPointer = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glVertexPointer");
    brebisGL.brebisVertexPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, GLsizei, const void *))brebisGLGetProcAddress("glVertexPointerEXT");
    brebisGL.brebisVertexPointerListIBM = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLint, const void **, GLint))brebisGLGetProcAddress("glVertexPointerListIBM");
    brebisGL.brebisVertexPointervINTEL = (void (KHRONOS_APIENTRY *)(GLint, GLenum, const void **))brebisGLGetProcAddress("glVertexPointervINTEL");
    brebisGL.brebisVertexStream1dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble))brebisGLGetProcAddress("glVertexStream1dATI");
    brebisGL.brebisVertexStream1dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glVertexStream1dvATI");
    brebisGL.brebisVertexStream1fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat))brebisGLGetProcAddress("glVertexStream1fATI");
    brebisGL.brebisVertexStream1fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glVertexStream1fvATI");
    brebisGL.brebisVertexStream1iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint))brebisGLGetProcAddress("glVertexStream1iATI");
    brebisGL.brebisVertexStream1ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glVertexStream1ivATI");
    brebisGL.brebisVertexStream1sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort))brebisGLGetProcAddress("glVertexStream1sATI");
    brebisGL.brebisVertexStream1svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glVertexStream1svATI");
    brebisGL.brebisVertexStream2dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexStream2dATI");
    brebisGL.brebisVertexStream2dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glVertexStream2dvATI");
    brebisGL.brebisVertexStream2fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexStream2fATI");
    brebisGL.brebisVertexStream2fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glVertexStream2fvATI");
    brebisGL.brebisVertexStream2iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint))brebisGLGetProcAddress("glVertexStream2iATI");
    brebisGL.brebisVertexStream2ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glVertexStream2ivATI");
    brebisGL.brebisVertexStream2sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort))brebisGLGetProcAddress("glVertexStream2sATI");
    brebisGL.brebisVertexStream2svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glVertexStream2svATI");
    brebisGL.brebisVertexStream3dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexStream3dATI");
    brebisGL.brebisVertexStream3dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glVertexStream3dvATI");
    brebisGL.brebisVertexStream3fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexStream3fATI");
    brebisGL.brebisVertexStream3fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glVertexStream3fvATI");
    brebisGL.brebisVertexStream3iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint))brebisGLGetProcAddress("glVertexStream3iATI");
    brebisGL.brebisVertexStream3ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glVertexStream3ivATI");
    brebisGL.brebisVertexStream3sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertexStream3sATI");
    brebisGL.brebisVertexStream3svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glVertexStream3svATI");
    brebisGL.brebisVertexStream4dATI = (void (KHRONOS_APIENTRY *)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glVertexStream4dATI");
    brebisGL.brebisVertexStream4dvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLdouble *))brebisGLGetProcAddress("glVertexStream4dvATI");
    brebisGL.brebisVertexStream4fATI = (void (KHRONOS_APIENTRY *)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glVertexStream4fATI");
    brebisGL.brebisVertexStream4fvATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLfloat *))brebisGLGetProcAddress("glVertexStream4fvATI");
    brebisGL.brebisVertexStream4iATI = (void (KHRONOS_APIENTRY *)(GLenum, GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glVertexStream4iATI");
    brebisGL.brebisVertexStream4ivATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLint *))brebisGLGetProcAddress("glVertexStream4ivATI");
    brebisGL.brebisVertexStream4sATI = (void (KHRONOS_APIENTRY *)(GLenum, GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glVertexStream4sATI");
    brebisGL.brebisVertexStream4svATI = (void (KHRONOS_APIENTRY *)(GLenum, const GLshort *))brebisGLGetProcAddress("glVertexStream4svATI");
    brebisGL.brebisVertexWeightPointerEXT = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glVertexWeightPointerEXT");
    brebisGL.brebisVertexWeightfEXT = (void (KHRONOS_APIENTRY *)(GLfloat))brebisGLGetProcAddress("glVertexWeightfEXT");
    brebisGL.brebisVertexWeightfvEXT = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glVertexWeightfvEXT");
    brebisGL.brebisVertexWeighthNV = (void (KHRONOS_APIENTRY *)(GLhalfNV))brebisGLGetProcAddress("glVertexWeighthNV");
    brebisGL.brebisVertexWeighthvNV = (void (KHRONOS_APIENTRY *)(const GLhalfNV *))brebisGLGetProcAddress("glVertexWeighthvNV");
    brebisGL.brebisVideoCaptureNV = (GLenum(KHRONOS_APIENTRY *)(GLuint, GLuint *, GLuint64EXT *))brebisGLGetProcAddress("glVideoCaptureNV");
    brebisGL.brebisVideoCaptureStreamParameterdvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLdouble *))brebisGLGetProcAddress("glVideoCaptureStreamParameterdvNV");
    brebisGL.brebisVideoCaptureStreamParameterfvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLfloat *))brebisGLGetProcAddress("glVideoCaptureStreamParameterfvNV");
    brebisGL.brebisVideoCaptureStreamParameterivNV = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, const GLint *))brebisGLGetProcAddress("glVideoCaptureStreamParameterivNV");
    brebisGL.brebisViewport = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLsizei, GLsizei))brebisGLGetProcAddress("glViewport");
    brebisGL.brebisViewportArrayv = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glViewportArrayv");
    brebisGL.brebisViewportArrayvNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glViewportArrayvNV");
    brebisGL.brebisViewportArrayvOES = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLfloat *))brebisGLGetProcAddress("glViewportArrayvOES");
    brebisGL.brebisViewportIndexedf = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glViewportIndexedf");
    brebisGL.brebisViewportIndexedfNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glViewportIndexedfNV");
    brebisGL.brebisViewportIndexedfOES = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glViewportIndexedfOES");
    brebisGL.brebisViewportIndexedfv = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glViewportIndexedfv");
    brebisGL.brebisViewportIndexedfvNV = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glViewportIndexedfvNV");
    brebisGL.brebisViewportIndexedfvOES = (void (KHRONOS_APIENTRY *)(GLuint, const GLfloat *))brebisGLGetProcAddress("glViewportIndexedfvOES");
    brebisGL.brebisViewportPositionWScaleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLfloat, GLfloat))brebisGLGetProcAddress("glViewportPositionWScaleNV");
    brebisGL.brebisViewportSwizzleNV = (void (KHRONOS_APIENTRY *)(GLuint, GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glViewportSwizzleNV");
    brebisGL.brebisWaitSemaphoreEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *))brebisGLGetProcAddress("glWaitSemaphoreEXT");
    brebisGL.brebisWaitSync = (void (KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))brebisGLGetProcAddress("glWaitSync");
    brebisGL.brebisWaitSyncAPPLE = (void (KHRONOS_APIENTRY *)(GLsync, GLbitfield, GLuint64))brebisGLGetProcAddress("glWaitSyncAPPLE");
    brebisGL.brebisWaitVkSemaphoreNV = (void (KHRONOS_APIENTRY *)(GLuint64))brebisGLGetProcAddress("glWaitVkSemaphoreNV");
    brebisGL.brebisWeightPathsNV = (void (KHRONOS_APIENTRY *)(GLuint, GLsizei, const GLuint *, const GLfloat *))brebisGLGetProcAddress("glWeightPathsNV");
    brebisGL.brebisWeightPointerARB = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glWeightPointerARB");
    brebisGL.brebisWeightPointerOES = (void (KHRONOS_APIENTRY *)(GLint, GLenum, GLsizei, const void *))brebisGLGetProcAddress("glWeightPointerOES");
    brebisGL.brebisWeightbvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLbyte *))brebisGLGetProcAddress("glWeightbvARB");
    brebisGL.brebisWeightdvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLdouble *))brebisGLGetProcAddress("glWeightdvARB");
    brebisGL.brebisWeightfvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLfloat *))brebisGLGetProcAddress("glWeightfvARB");
    brebisGL.brebisWeightivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLint *))brebisGLGetProcAddress("glWeightivARB");
    brebisGL.brebisWeightsvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLshort *))brebisGLGetProcAddress("glWeightsvARB");
    brebisGL.brebisWeightubvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLubyte *))brebisGLGetProcAddress("glWeightubvARB");
    brebisGL.brebisWeightuivARB = (void (KHRONOS_APIENTRY *)(GLint, const GLuint *))brebisGLGetProcAddress("glWeightuivARB");
    brebisGL.brebisWeightusvARB = (void (KHRONOS_APIENTRY *)(GLint, const GLushort *))brebisGLGetProcAddress("glWeightusvARB");
    brebisGL.brebisWindowPos2d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glWindowPos2d");
    brebisGL.brebisWindowPos2dARB = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glWindowPos2dARB");
    brebisGL.brebisWindowPos2dMESA = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble))brebisGLGetProcAddress("glWindowPos2dMESA");
    brebisGL.brebisWindowPos2dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glWindowPos2dv");
    brebisGL.brebisWindowPos2dvARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glWindowPos2dvARB");
    brebisGL.brebisWindowPos2dvMESA = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glWindowPos2dvMESA");
    brebisGL.brebisWindowPos2f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glWindowPos2f");
    brebisGL.brebisWindowPos2fARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glWindowPos2fARB");
    brebisGL.brebisWindowPos2fMESA = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat))brebisGLGetProcAddress("glWindowPos2fMESA");
    brebisGL.brebisWindowPos2fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glWindowPos2fv");
    brebisGL.brebisWindowPos2fvARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glWindowPos2fvARB");
    brebisGL.brebisWindowPos2fvMESA = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glWindowPos2fvMESA");
    brebisGL.brebisWindowPos2i = (void (KHRONOS_APIENTRY *)(GLint, GLint))brebisGLGetProcAddress("glWindowPos2i");
    brebisGL.brebisWindowPos2iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint))brebisGLGetProcAddress("glWindowPos2iARB");
    brebisGL.brebisWindowPos2iMESA = (void (KHRONOS_APIENTRY *)(GLint, GLint))brebisGLGetProcAddress("glWindowPos2iMESA");
    brebisGL.brebisWindowPos2iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glWindowPos2iv");
    brebisGL.brebisWindowPos2ivARB = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glWindowPos2ivARB");
    brebisGL.brebisWindowPos2ivMESA = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glWindowPos2ivMESA");
    brebisGL.brebisWindowPos2s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))brebisGLGetProcAddress("glWindowPos2s");
    brebisGL.brebisWindowPos2sARB = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))brebisGLGetProcAddress("glWindowPos2sARB");
    brebisGL.brebisWindowPos2sMESA = (void (KHRONOS_APIENTRY *)(GLshort, GLshort))brebisGLGetProcAddress("glWindowPos2sMESA");
    brebisGL.brebisWindowPos2sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glWindowPos2sv");
    brebisGL.brebisWindowPos2svARB = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glWindowPos2svARB");
    brebisGL.brebisWindowPos2svMESA = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glWindowPos2svMESA");
    brebisGL.brebisWindowPos3d = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glWindowPos3d");
    brebisGL.brebisWindowPos3dARB = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glWindowPos3dARB");
    brebisGL.brebisWindowPos3dMESA = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glWindowPos3dMESA");
    brebisGL.brebisWindowPos3dv = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glWindowPos3dv");
    brebisGL.brebisWindowPos3dvARB = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glWindowPos3dvARB");
    brebisGL.brebisWindowPos3dvMESA = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glWindowPos3dvMESA");
    brebisGL.brebisWindowPos3f = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glWindowPos3f");
    brebisGL.brebisWindowPos3fARB = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glWindowPos3fARB");
    brebisGL.brebisWindowPos3fMESA = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glWindowPos3fMESA");
    brebisGL.brebisWindowPos3fv = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glWindowPos3fv");
    brebisGL.brebisWindowPos3fvARB = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glWindowPos3fvARB");
    brebisGL.brebisWindowPos3fvMESA = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glWindowPos3fvMESA");
    brebisGL.brebisWindowPos3i = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glWindowPos3i");
    brebisGL.brebisWindowPos3iARB = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glWindowPos3iARB");
    brebisGL.brebisWindowPos3iMESA = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint))brebisGLGetProcAddress("glWindowPos3iMESA");
    brebisGL.brebisWindowPos3iv = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glWindowPos3iv");
    brebisGL.brebisWindowPos3ivARB = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glWindowPos3ivARB");
    brebisGL.brebisWindowPos3ivMESA = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glWindowPos3ivMESA");
    brebisGL.brebisWindowPos3s = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glWindowPos3s");
    brebisGL.brebisWindowPos3sARB = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glWindowPos3sARB");
    brebisGL.brebisWindowPos3sMESA = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort))brebisGLGetProcAddress("glWindowPos3sMESA");
    brebisGL.brebisWindowPos3sv = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glWindowPos3sv");
    brebisGL.brebisWindowPos3svARB = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glWindowPos3svARB");
    brebisGL.brebisWindowPos3svMESA = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glWindowPos3svMESA");
    brebisGL.brebisWindowPos4dMESA = (void (KHRONOS_APIENTRY *)(GLdouble, GLdouble, GLdouble, GLdouble))brebisGLGetProcAddress("glWindowPos4dMESA");
    brebisGL.brebisWindowPos4dvMESA = (void (KHRONOS_APIENTRY *)(const GLdouble *))brebisGLGetProcAddress("glWindowPos4dvMESA");
    brebisGL.brebisWindowPos4fMESA = (void (KHRONOS_APIENTRY *)(GLfloat, GLfloat, GLfloat, GLfloat))brebisGLGetProcAddress("glWindowPos4fMESA");
    brebisGL.brebisWindowPos4fvMESA = (void (KHRONOS_APIENTRY *)(const GLfloat *))brebisGLGetProcAddress("glWindowPos4fvMESA");
    brebisGL.brebisWindowPos4iMESA = (void (KHRONOS_APIENTRY *)(GLint, GLint, GLint, GLint))brebisGLGetProcAddress("glWindowPos4iMESA");
    brebisGL.brebisWindowPos4ivMESA = (void (KHRONOS_APIENTRY *)(const GLint *))brebisGLGetProcAddress("glWindowPos4ivMESA");
    brebisGL.brebisWindowPos4sMESA = (void (KHRONOS_APIENTRY *)(GLshort, GLshort, GLshort, GLshort))brebisGLGetProcAddress("glWindowPos4sMESA");
    brebisGL.brebisWindowPos4svMESA = (void (KHRONOS_APIENTRY *)(const GLshort *))brebisGLGetProcAddress("glWindowPos4svMESA");
    brebisGL.brebisWindowRectanglesEXT = (void (KHRONOS_APIENTRY *)(GLenum, GLsizei, const GLint *))brebisGLGetProcAddress("glWindowRectanglesEXT");
    brebisGL.brebisWriteMaskEXT = (void (KHRONOS_APIENTRY *)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum))brebisGLGetProcAddress("glWriteMaskEXT");

    if (!brebisGL.brebisGetError) {
        fprintf(stderr, "Could not find 'glGetError'\n");
        return KHRONOS_FALSE;
    }

    if (!brebisGL.brebisGetString) {
        fprintf(stderr, "Could not find 'glGetString'\n");
        return KHRONOS_FALSE;
    }

    version  = (const char*)brebisGL.brebisGetString(GL_VERSION);

    if(!version) {
        fprintf(stderr, "brebisGLInit() : Missing GL context. Make sure your context is created and made current prior to calling brebisGLInit.\n");
        return KHRONOS_FALSE;
    }

    if ((BREBIS_SSCANF(version, "OpenGL ES %d.%d",    &versionMajor, &versionMinor) == 2) ||
        (BREBIS_SSCANF(version, "OpenGL ES-CM %d.%d", &versionMajor, &versionMinor) == 2)) {
        isGLES = KHRONOS_TRUE;
    } else if (BREBIS_SSCANF(version, "%d.%d", &versionMajor, &versionMinor) != 2) {
        fprintf(stderr, "brebisGLInit() : Could not determine OpenGL/OpenGLES version.\n");
        return KHRONOS_FALSE;
    }

    if(isGLES) {
        brebisGL.support[GL_VERSION_ES_CM_1_0] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 0)));
        brebisGL.support[GL_ES_VERSION_2_0] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 0)));
        brebisGL.support[GL_ES_VERSION_3_0] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 0)));
        brebisGL.support[GL_ES_VERSION_3_1] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 1)));
        brebisGL.support[GL_ES_VERSION_3_2] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 2)));
        brebisGL.support[GL_SC_VERSION_2_0] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 0)));

    } else {
        brebisGL.support[GL_VERSION_1_0] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 0)));
        brebisGL.support[GL_VERSION_1_1] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 1)));
        brebisGL.support[GL_VERSION_1_2] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 2)));
        brebisGL.support[GL_VERSION_1_3] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 3)));
        brebisGL.support[GL_VERSION_1_4] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 4)));
        brebisGL.support[GL_VERSION_1_5] = ((versionMajor > 1) || ((versionMajor == 1) && (versionMinor >= 5)));
        brebisGL.support[GL_VERSION_2_0] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 0)));
        brebisGL.support[GL_VERSION_2_1] = ((versionMajor > 2) || ((versionMajor == 2) && (versionMinor >= 1)));
        brebisGL.support[GL_VERSION_3_0] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 0)));
        brebisGL.support[GL_VERSION_3_1] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 1)));
        brebisGL.support[GL_VERSION_3_2] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 2)));
        brebisGL.support[GL_VERSION_3_3] = ((versionMajor > 3) || ((versionMajor == 3) && (versionMinor >= 3)));
        brebisGL.support[GL_VERSION_4_0] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 0)));
        brebisGL.support[GL_VERSION_4_1] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 1)));
        brebisGL.support[GL_VERSION_4_2] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 2)));
        brebisGL.support[GL_VERSION_4_3] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 3)));
        brebisGL.support[GL_VERSION_4_4] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 4)));
        brebisGL.support[GL_VERSION_4_5] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 5)));
        brebisGL.support[GL_VERSION_4_6] = ((versionMajor > 4) || ((versionMajor == 4) && (versionMinor >= 6)));

    }

    if (brebisGL.support[GL_VERSION_3_0] || brebisGL.support[GL_ES_VERSION_3_0]) {
        khronos_int32_t i = 0;
        khronos_int32_t nExtensionsCount = 0;
        brebisGL.brebisGetIntegerv(GL_NUM_EXTENSIONS, &nExtensionsCount);
        while(i < nExtensionsCount)
        {
            const char* extensionStr = (const char*)brebisGL.brebisGetStringi(GL_EXTENSIONS, i++);
            brebisGLAddExtension(isGLES, extensionStr, strlen(extensionStr));
        }
    } else {
        const char* extensionsStr = (const char*)brebisGL.brebisGetString(GL_EXTENSIONS);
        while (extensionsStr) {
            const char* spacerPos = strchr(extensionsStr, ' ');
            khronos_usize_t extensionsStrLength = spacerPos ? (khronos_usize_t)(spacerPos++ - extensionsStr) : strlen(extensionsStr);
            brebisGLAddExtension(isGLES, extensionsStr, extensionsStrLength);
            extensionsStr = spacerPos;
        }
    }

#if !defined(NDEBUG)
    {
        clock_t end = clock();
        double elapsed_time = (end-start)/(double)CLOCKS_PER_SEC*1000.0;
        fprintf(stderr, "brebisGLInit() : elapsed time: %.2fms\n", elapsed_time );
    }
#endif

    return KHRONOS_TRUE;
}

void brebisGLShutdown(void) {
    memset(&brebisGL, 0, sizeof(BrebisGLConfig));

#if !defined(__EMSCRIPTEN__)
    if (s_brebisGLLib)
    {
#if defined(_WIN32)
        FreeLibrary(s_brebisGLLib);
#else
        dlclose(s_brebisGLLib);
#endif
        s_brebisGLLib = NULL;
    }
#endif

}

void _brebisGLCheckError(const char* fileName, int lineNumber) {
    GLenum eErrorID = brebisGL.brebisGetError();
    if (eErrorID != GL_NO_ERROR) {
        do {
            static const char* errMsg[] = {
                "GL_INVALID_ENUM: An unacceptable value is specified for an enumerated argument.",
                "GL_INVALID_VALUE: A numeric argument is out of range.",
                "GL_INVALID_OPERATION: The specified operation is not allowed in the current state.",
                "GL_STACK_OVERFLOW: This function caused a stack overflow.",
                "GL_STACK_UNDERFLOW: This function would cause a stack underflow.",
                "GL_OUT_OF_MEMORY: There is not enough memory left to execute the command.",
                "GL_INVALID_FRAMEBUFFER_OPERATION: The command is trying to render to or read from the framebuffer while the currently bound framebuffer is not framebuffer complete.",
                "GL_CONTEXT_LOST: The context has been lost, due to a graphics card reset."
            };

            khronos_usize_t errorIndex = eErrorID - GL_INVALID_ENUM;
            if (errorIndex > sizeof(errMsg)) {
                fprintf(stderr, "brebisGLCheckError : file %s, line %d : Unknown error 0x%X\n", fileName, lineNumber, eErrorID);
            } else {
                fprintf(stderr, "brebisGLCheckError : file %s, line %d : %s\n", fileName, lineNumber, errMsg[errorIndex]);
            }
        } while((eErrorID = brebisGL.brebisGetError()) != GL_NO_ERROR);
    }
}

#if defined(HAVE_WINAPIFAMILY)
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
        #undef IS_UWP
    #endif
#endif

#if defined(__cplusplus)
} /* extern "C" */
#endif

#endif /* BREBIS_IMPLEMENTATION */

#endif /* _BREBIS_GL_H_ */

